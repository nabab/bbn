{
    "nameSpace": "bbn",
    "classes": {
        "cache": {
            "doc": {
                "description": "Universal caching class: called once per request, it holds the cache system.",
                "tags": {
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Jan 23, 2016, 23:23:55 +0000",
                    "category": "Cache",
                    "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT"
                }
            },
            "name": "bbn\\Cache",
            "namespace": true,
            "traits": [],
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/cache.php",
            "startLine": 14,
            "endLine": 462,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function($engine = NULL)\n  {\n    if ( self::$is_init ){\n      die(\"Only one cache object can be called. Use static function Cache::getEngine()\");\n    }\n\n    if ( function_exists('apc_clear_cache') && (!$engine || ($engine === 'apc')) ){\n      self::_set_type('apc');\n    }\n    else if ( class_exists(\"Memcache\") && (!$engine || ($engine === 'memcache')) ){\n      $this->obj = new \\Memcache();\n      if ( $this->obj->connect(\"127.0.0.1\", 11211) ){\n        self::_set_type('memcache');\n      }\n    }\n    else if ($this->path = Mvc::getCachePath()){\n      file\\dir::createPath($this->path);\n      self::_set_type('files');\n    }\n  }",
                "startLine": 146,
                "doc": {
                    "description": "cache constructor.",
                    "params": {
                        "$engine": {
                            "type": "null",
                            "description": ""
                        }
                    },
                    "return": ""
                },
                "endLine": 165,
                "isUserDefined": true,
                "numberOfParameters": 1,
                "arguments": [
                    {
                        "name": "engine",
                        "position": 0,
                        "type": null,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": {
                    "_init": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "private": true,
                        "code": "function($engine = NULL)\n  {\n      self::$engine = new Cache($engine);\n      self::$is_init = 1;\n    }\n    return 1;\n  }",
                        "startLine": 29,
                        "doc": {
                            "description": "",
                            "params": {
                                "$engine": {
                                    "type": "null",
                                    "description": ""
                                }
                            },
                            "return": "int"
                        },
                        "endLine": 35,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "engine",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "_set_type": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "private": true,
                        "code": "function($type)\n  {\n  }",
                        "startLine": 40,
                        "doc": {
                            "description": "",
                            "params": {
                                "$type": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": ""
                        },
                        "endLine": 42,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "type",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "sanitize": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "private": true,
                        "code": "function($st)\n  {\n    $st = mb_ereg_replace(\"([\\.]{2,})\", '', $st);\n    return $st;\n  }",
                        "startLine": 44,
                        "endLine": 48,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_dir": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "private": true,
                        "code": "function($dir, $path, $parent = true)\n  {\n      $dir = dirname($dir);\n    }\n    if ( empty($dir) ){\n      return $path;\n    }\n    else if ( substr($dir, -1) === '\/' ){\n      $dir = substr($dir, 0, -1);\n    }\n    return $path.self::sanitize(str_replace('..\/', '', Str_replace('\\\\', '\/', $dir)));\n  }",
                        "startLine": 56,
                        "doc": {
                            "description": "",
                            "params": {
                                "$dir": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$path": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$parent": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 67,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "dir",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "path",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "parent",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": true,
                                "default_name": ""
                            }
                        ]
                    },
                    "_file": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "private": true,
                        "code": "function($item, $path)\n  {\n  }",
                        "startLine": 74,
                        "doc": {
                            "description": "",
                            "params": {
                                "$item": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$path": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 76,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "item",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "path",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_raw": {
                        "file": "bbn\\Cache",
                        "private": true,
                        "code": "function($it)\n  {\n      switch ( self::$type ){\n        case 'apc':\n          return apc_fetch($it);\n        case 'memcache':\n          return $this->obj->get($it);\n        case 'files':\n          $file = self::_file($it, $this->path);\n          if ( $t = file_get_contents($file) ){\n            return json_decode($t, true);\n          }\n      }\n    }\n    return false;\n  }",
                        "startLine": 353,
                        "doc": {
                            "description": "",
                            "params": {
                                "$it": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array|bool|mixed|string"
                        },
                        "endLine": 368,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "protected": [],
                "public": {
                    "make_hash": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "public": true,
                        "code": "function($value)\n  {\n      $value = serialize($value);\n    }\n    return md5($value);\n  }",
                        "startLine": 82,
                        "doc": {
                            "description": "",
                            "params": {
                                "$value": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 87,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "value",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_type": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 92,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "string"
                        },
                        "endLine": 94,
                        "isUserDefined": true
                    },
                    "ttl": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "public": true,
                        "code": "function($ttl)\n  {\n      return $ttl;\n    }\n    if ( \\is_string($ttl) ){\n      switch ( $ttl ){\n        case 'xxs':\n          return 30;\n        case 'xs':\n          return 60;\n        case 's':\n          return 300;\n        case 'm':\n          return 3600;\n        case 'l':\n          return 3600*24;\n        case 'xl':\n          return 3600*24*7;\n        case 'xxl':\n          return 3600*24*30;\n      }\n    }\n    return 0;\n  }",
                        "startLine": 100,
                        "doc": {
                            "description": "",
                            "params": {
                                "$ttl": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "int"
                        },
                        "endLine": 123,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "ttl",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_cache": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "public": true,
                        "code": "function($engine = NULL)\n  {\n    return self::$engine;\n  }",
                        "startLine": 129,
                        "doc": {
                            "description": "",
                            "params": {
                                "$engine": {
                                    "type": "null",
                                    "description": ""
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 132,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "engine",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_engine": {
                        "file": "bbn\\Cache",
                        "static": true,
                        "public": true,
                        "code": "function($engine = NULL)\n  {\n  }",
                        "startLine": 138,
                        "doc": {
                            "description": "",
                            "params": {
                                "$engine": {
                                    "type": "null",
                                    "description": ""
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 140,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "engine",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "__construct": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($engine = NULL)\n  {\n    if ( self::$is_init ){\n      die(\"Only one cache object can be called. Use static function Cache::getEngine()\");\n    }\n\n    if ( function_exists('apc_clear_cache') && (!$engine || ($engine === 'apc')) ){\n      self::_set_type('apc');\n    }\n    else if ( class_exists(\"Memcache\") && (!$engine || ($engine === 'memcache')) ){\n      $this->obj = new \\Memcache();\n      if ( $this->obj->connect(\"127.0.0.1\", 11211) ){\n        self::_set_type('memcache');\n      }\n    }\n    else if ($this->path = Mvc::getCachePath()){\n      file\\dir::createPath($this->path);\n      self::_set_type('files');\n    }\n  }",
                        "startLine": 146,
                        "doc": {
                            "description": "cache constructor.",
                            "params": {
                                "$engine": {
                                    "type": "null",
                                    "description": ""
                                }
                            },
                            "return": ""
                        },
                        "endLine": 165,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "engine",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "has": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($it)\n  {\n    if ( self::$type ){\n      switch ( self::$type ){\n        case 'apc':\n          return apc_exists($it);\n        case 'memcache':\n          return $this->obj->get($it) !== $it;\n        case 'files':\n          $file = self::_file($it, $this->path);\n          if ( is_file($file) ){\n            $t = json_decode(file_get_contents($file), true);\n            if ( !$t['expire'] || ($t['expire'] > time()) ){\n              return true;\n            }\n            unlink($file);\n          }\n          return false;\n      }\n    }\n  }",
                        "startLine": 171,
                        "doc": {
                            "description": "",
                            "params": {
                                "$it": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool|string"
                        },
                        "endLine": 191,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "delete": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($it)\n  {\n      switch ( self::$type ){\n        case 'apc':\n          return apc_delete($it);\n        case 'memcache':\n          return $this->obj->delete($it);\n        case 'files':\n          $file = self::_file($it, $this->path);\n          if ( is_file($file) ){\n            return unlink($file);\n          }\n          return 1;\n      }\n    }\n  }",
                        "startLine": 197,
                        "doc": {
                            "description": "",
                            "params": {
                                "$it": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool|int|string"
                        },
                        "endLine": 212,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "delete_all": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($st = NULL)\n  {\n      $dir = self::_dir($st, $this->path, false);\n      if ( is_dir($dir) ){\n        return file\\dir::delete($dir, $dir === $this->path ? false : true);\n      }\n      else if ( is_file($dir.'.bbn.cache') ){\n        unlink($dir.'.bbn.cache');\n      }\n    }\n    else if ( self::$type ){\n      $its = $this->items($st);\n      $res = 0;\n      foreach ( $its as $it ){\n        if ( !$st || strpos($it, $st) === 0 ){\n          switch ( self::$type ){\n            case 'apc':\n              $res += (int)apc_delete($it);\n              break;\n            case 'memcache':\n              $res += (int)$this->obj->delete($it);\n              break;\n            case 'files':\n              $file = self::_file($it, $this->path);\n              if ( is_file($file) ){\n                $res += (int)unlink($file);\n              }\n              break;\n          }\n        }\n      }\n      return $res;\n    }\n    return false;\n  }",
                        "startLine": 218,
                        "doc": {
                            "description": "",
                            "params": {
                                "$st": {
                                    "type": "string|null",
                                    "description": ""
                                }
                            },
                            "return": "bool|int"
                        },
                        "endLine": 252,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "clear": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function()\n  {\n    return $this;\n  }",
                        "startLine": 257,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "$this"
                        },
                        "endLine": 260,
                        "isUserDefined": true
                    },
                    "timestamp": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($it)\n  {\n      return $r['timestamp'];\n    }\n    return false;\n  }",
                        "startLine": 266,
                        "doc": {
                            "description": "",
                            "params": {
                                "$it": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 271,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "hash": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($it)\n  {\n      return $r['hash'];\n    }\n    return false;\n  }",
                        "startLine": 277,
                        "doc": {
                            "description": "",
                            "params": {
                                "$it": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool|mixed"
                        },
                        "endLine": 282,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_new": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($it, $time = NULL)\n  {\n      $time = time();\n    }\n    if ( $r = $this->getRaw($it) ){\n      return $r['timestamp'] > $time;\n    }\n    return true;\n  }",
                        "startLine": 289,
                        "doc": {
                            "description": "",
                            "params": {
                                "$it": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$time": {
                                    "type": "null",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 297,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "time",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "set": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($it, $val, $ttl = 10)\n  {\n      $ttl = self::ttl($ttl);\n      $hash = self::makeHash($val);\n      switch ( self::$type ){\n        case 'apc':\n          return apc_store($it, [\n            'timestamp' => microtime(1),\n            'hash' => $hash,\n            'value' => $val\n          ], $ttl);\n        case 'memcache':\n          return $this->obj->set($it, [\n            'timestamp' => microtime(1),\n            'hash' => $hash,\n            'value' => $val\n          ], false, $ttl);\n        case 'files':\n          $file = self::_file($it, $this->path);\n          if ( $dir = self::_dir($it, $this->path) ){\n            file\\dir::createPath($dir);\n          }\n          $value = [\n            'timestamp' => microtime(1),\n            'hash' => $hash,\n            'expire' => $ttl ? time() + $ttl : 0,\n            'value' => $val\n          ];\n          return file_put_contents($file, Json_encode($value, true)) ? true : false;\n      }\n    }\n  }",
                        "startLine": 305,
                        "doc": {
                            "description": "",
                            "params": {
                                "$it": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$val": {
                                    "type": "",
                                    "description": ""
                                },
                                "$ttl": {
                                    "type": "int",
                                    "description": ""
                                }
                            },
                            "return": "array|bool"
                        },
                        "endLine": 336,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "val",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ttl",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 10,
                                "default_name": ""
                            }
                        ]
                    },
                    "is_changed": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($it, $hash)\n  {\n      return $hash !== $r['hash'];\n    }\n  }",
                        "startLine": 343,
                        "doc": {
                            "description": "",
                            "params": {
                                "$it": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$hash": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 347,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "hash",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($it)\n  {\n      return $r['value'];\n    }\n    return false;\n  }",
                        "startLine": 370,
                        "endLine": 375,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "it",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "info": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function()\n  {\n      switch ( self::$type ){\n        case 'apc':\n          return apc_cache_info();\n        case 'memcache':\n          return $this->obj->getStats('slabs');\n        case 'files':\n          return file\\dir::getFiles($this->path);\n      }\n    }\n  }",
                        "startLine": 380,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "array|bool|false"
                        },
                        "endLine": 391,
                        "isUserDefined": true
                    },
                    "stat": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function()\n  {\n      switch ( self::$type ){\n        case 'apc':\n          return apc_cache_info();\n        case 'memcache':\n          return $this->obj->getStats();\n        case 'files':\n          return file\\dir::getFiles($this->path);\n      }\n    }\n  }",
                        "startLine": 396,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "array|bool|false"
                        },
                        "endLine": 407,
                        "isUserDefined": true
                    },
                    "items": {
                        "file": "bbn\\Cache",
                        "public": true,
                        "code": "function($dir = '')\n  {\n      switch ( self::$type ){\n        case 'apc':\n          $all = apc_cache_info();\n          $list = [];\n          foreach ( $all['cache_list'] as $a ){\n            array_push($list, $a['info']);\n          }\n          return $list;\n        case 'memcache':\n          $list = [];\n          $allSlabs = $this->obj->getExtendedStats('slabs');\n          foreach ( $allSlabs as $server => $slabs ){\n            foreach ( $slabs as $slabId => $slabMeta ){\n              $cdump = $this->obj->getExtendedStats('cachedump',(int)$slabId);\n              foreach ( $cdump AS $keys => $arrVal ){\n                foreach ( $arrVal AS $k => $v ){\n                  if ( $k !== 'CLIENT_ERROR' ){\n                    echo array_push($list, $k);\n                  }\n                }\n              }\n            }\n          }\n          return $list;\n        case 'files':\n          $cache =& $this;\n          $list = array_filter(array_map(function($a) use ($dir){\n            return ( $dir ? $dir.'\/' : '' ).basename($a, '.bbn.cache');\n          }, File\\dir::getFiles($this->path.($dir ? '\/'.$dir : ''))),\n            function($a) use ($cache){\n            \/\/ Only gives valid cache\n              return $cache->has($a);\n          });\n          $dirs = file\\dir::getDirs($this->path.($dir ? '\/'.$dir : ''));\n          if ( \\count($dirs) ){\n            foreach ( $dirs as $d ){\n              $res = $this->items($dir ? $dir.'\/'.basename($d) : basename($d));\n              foreach ( $res as $r ){\n                array_push($list, $r);\n              }\n            }\n          }\n          return $list;\n      }\n    }\n  }",
                        "startLine": 413,
                        "doc": {
                            "description": "",
                            "params": {
                                "$dir": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 460,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "dir",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "is_init": {
                    "static": true,
                    "private": true
                },
                "type": {
                    "static": true,
                    "private": true
                },
                "engine": {
                    "static": true,
                    "private": true
                },
                "path": {
                    "private": true
                },
                "obj": {
                    "private": true
                }
            },
            "staticProperties": {
                "is_init": 1,
                "type": "files",
                "engine": {}
            },
            "costants": null,
            "numMethods": 25,
            "numProperties": 5,
            "numConstants": 0,
            "numStaticProperties": 3,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": null,
            "isSubclassOf": false,
            "defaultProperties": {
                "is_init": 1,
                "type": "files",
                "engine": {},
                "path": null,
                "obj": null
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "cache"
        },
        "cdn": {
            "doc": {
                "description": "(Static) content delivery system through requests using filesystem and internal DB for libraries.",
                "tags": {
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Jan 3, 2016, 12:24:36 +0000",
                    "category": "Cache",
                    "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT"
                }
            },
            "name": "bbn\\Cdn",
            "namespace": true,
            "traits": {
                "bbn\\Cdn\\Common": {
                    "name": "bbn\\Cdn\\Common"
                }
            },
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/cdn.php",
            "startLine": 13,
            "endLine": 618,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function($request, $cache = NULL, bbn\\Db $db = NULL)\n  {\n    if ( !defined('BBN_PUBLIC') ){\n      $this->error('You must define the constant $this->fpath as the root of your public document');\n      die('You must define the constant $this->fpath as the root of your public document');\n    }\n    $this->set_prefix();\n    if ( $cache && is_dir($this->fpath.$cache) ){\n      if ( substr($cache, -1) !== '\/' ){\n        $cache .= '\/';\n      }\n      $this->cache_path = $cache;\n    }\n    if ( !$db ){\n      $db = Db::getInstance();\n    }\n    if ( $db ){\n      $this->db = $db;\n    }\n    $this->request = $request;\n    X::log($request, 'cdn_errors');\n    \/\/ Creation of a config object\n    $config = new cdn\\config($request, $this->db);\n    \/\/ Checking request validity\n    if ( $config->check() ){\n      \/\/ Getting a configuration array\n      $this->cfg = $config->get();\n      if ( !empty($this->cfg['content']['js']) || $this->cfg['is_component'] ){\n        $this->mode = 'js';\n      }\n      else{\n        if ( !empty($this->cfg['content']['css']) ){\n          $this->mode = 'css';\n        }\n      }\n      if ( $this->mode ){\n        $this->cp = new cdn\\compiler($this->cfg);\n      }\n    }\n  }",
                "startLine": 134,
                "doc": {
                    "description": "cdn constructor.",
                    "params": {
                        "$request": {
                            "type": "string",
                            "description": "The original request"
                        },
                        "$cache": {
                            "type": "string|null",
                            "description": "If given will point the cache file to serve"
                        },
                        "$db": {
                            "type": "db|null",
                            "description": "The DB to query fior libraries. If not given will be current instance"
                        }
                    },
                    "return": ""
                },
                "endLine": 173,
                "isUserDefined": true,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "arguments": [
                    {
                        "name": "request",
                        "position": 0,
                        "type": {},
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cache",
                        "position": 1,
                        "type": {},
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "db",
                        "position": 2,
                        "type": {},
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": {
                    "set_prefix": {
                        "file": "bbn\\Cdn",
                        "private": true,
                        "code": "function()\n  {\n      $this->prefix = substr(BBN_SHARED_PATH, 1);\n      $this->furl = '\/'.$this->prefix;\n    }\n    else{\n      $this->furl = BBN_URL;\n      $parsed = parse_url(BBN_SHARED_PATH);\n      if ( $parsed['path'] && ($parsed['path'] !== '\/') ){\n        $this->prefix = substr($parsed['path'], 1);\n        $this->furl .= $this->prefix;\n      }\n    }\n    $this->fpath = BBN_PUBLIC.$this->prefix;\n  }",
                        "startLine": 37,
                        "endLine": 51,
                        "isUserDefined": true
                    }
                },
                "protected": {
                    "js_mask": {
                        "file": "bbn\\Cdn",
                        "protected": true,
                        "code": "function($code)\n  {\n    $test = empty($this->cfg['test']) ? 'false' : 'true';\n    return <<<JS\n(function(window){\n  if ( this.bbnAddGlobalScript === undefined ){\n    this.bbnAddGlobalScript = function(fn){\n      return fn();\n    }\n    this.bbnLoadedFiles = [];\n    this.bbnMinified = $test;\n    this.bbnLoadFile = function(file){\n      if ( file.substr(0, 1) === '\/' ){\n        file = file.substr(1);\n      }\n      if (\n        (window.bbnLoadedFiles !== undefined) &&\n        (window.bbnLoadedFiles.length !== undefined)\n      ){\n        for ( var j = 0; j < bbnLoadedFiles.length; j++ ){\n          if ( bbnLoadedFiles[j] === file ){\n            return false;\n          }\n        }\n        bbnLoadedFiles.push(file);\n        return true;\n      }\n    };\n  }\n  $code\n  \n})(window);\n\nJS;\n  }",
                        "startLine": 179,
                        "doc": {
                            "description": "",
                            "params": {
                                "$code": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 213,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "code",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_js": {
                        "file": "bbn\\Cdn",
                        "protected": true,
                        "code": "function(array $codes, $encapsulated = true)\n  {\n    $code = '';\n    if ( !empty($codes['js']) ){\n      $num = count($codes['js']);\n      $root_url = $this->furl;\n      foreach ( $codes['js'] as $c ){\n        $tmp = $c['code'];\n        if ( empty($this->cfg['nocompil']) ){\n          $tmp = <<<JS\nbbnAddGlobalScript(function(){\n  \/\/ $num\n  bbnLoadFile(\"$c[dir]\/$c[file]\");\n  var bbn_language = \"{$this->cfg['lang']}\",\n      bbn_root_dir = \"$c[dir]\/\",\n      bbn_root_url = \"$root_url\";\n      $tmp\n});\nJS;\n        }\n        if ( !empty($tmp) ){\n          $code .= $tmp.($this->cfg['test'] ? str_repeat(PHP_EOL, 5) : PHP_EOL);\n        }\n      }\n      if ( !empty($this->cfg['content']['css']) ){\n        $code .= <<<JS\n    return (new Promise(function(bbn_resolve, bbn_reject){\n      bbn_resolve()\n    }))\n\nJS;\n\n        $code .= $this->cp->cssLinks($this->cfg['content']['css'], $this->cfg['test'], $this->cfg['content']['prepend']);\n      }\n      if ( $encapsulated ){\n        $code = $this->jsMask($code);\n      }\n    }\n    return $code;\n  }",
                        "startLine": 220,
                        "doc": {
                            "description": "",
                            "params": {
                                "$codes": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$encapsulated": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 259,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "codes",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "encapsulated",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": true,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_css": {
                        "file": "bbn\\Cdn",
                        "protected": true,
                        "code": "function(array $codes)\n  {\n    $code = '';\n    if ( !empty($codes['css']) ){\n      foreach ( $codes['css'] as $c ){\n        $code .= $c['code'].($this->cfg['test'] ? str_repeat(PHP_EOL, 5) : PHP_EOL);\n      }\n    }\n    return $code;\n  }",
                        "startLine": 265,
                        "doc": {
                            "description": "",
                            "params": {
                                "$codes": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 274,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "codes",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_components": {
                        "file": "bbn\\Cdn",
                        "protected": true,
                        "code": "function()\n  {\n    $code = '';\n    $codes = [];\n    $c =& $this->cfg;\n    if ( \\is_array($c['content']) ){\n      $i = 0;\n      $includes = '';\n      foreach ( $c['content'] as $name => $cp ){\n        foreach ( $cp['js'] as $js ){\n          $ext = Str::fileExt($js, true);\n          \/\/x::dump($codes);\n          \/\/ A js file with the component name is mandatory\n          if ( $ext[0] === $name ){\n            \/\/ Once found only this js file will be used as it should just define the component\n            $jsc = $this->cp->compile([$js], $c['test']);\n            $codes[$i] = [\n              'name' => $name,\n              'js' => $jsc['js'][0]['code']\n            ];\n            if ( !empty($cp['css']) ){\n              $cssc = $this->cp->compile($cp['css'], $c['test']);\n              foreach ( $cssc['css'] as $css ){\n                if ( !isset($css['code']) ){\n                  throw new \\Exception(\"Impossible to get the SCSS code from component \".$cp);\n                  \/\/die(var_dump($css));\n                }\n                if ( $this->cp->hasLinks($css['code']) ){\n                  $includes .= $this->cp->cssLinks($cp['css'], $c['test']);\n                  unset($cp['css']);\n                  break;\n                }\n              }\n              if ( isset($cp['css']) ){\n                $codes[$i]['css'] = array_map(function($a){\n                  return $a['code'];\n                }, $cssc['css']);\n              }\n            }\n            if (\n              !empty($c['lang']) &&\n              !empty($cp['lang']) &&\n              \\in_array(\\dirname($js).\"\/$name.$c[lang].lang\", $cp['lang'], true)\n            ){\n              $lang = file_get_contents($this->fpath.\\dirname($js).\"\/$name.$c[lang].lang\");\n              if ( $lang ){\n                \/\/$lang = json_decode($lang, true);\n                $codes[$i]['js'] = \"if ( window.bbn ){ bbn.fn.autoExtend('lng', $lang); }\".PHP_EOL.$codes[$i]['js'];\n              }\n            }\n\n            \/\/ Dependencies links\n            $dep_path = $this->fpath.$jsc['js'][0]['dir'].'\/';\n            if ( is_file($dep_path.'bbn.json') ){\n              $json = json_decode(file_get_contents($dep_path.'bbn.json'), true);\n            }\n            else{\n              if ( is_file($dep_path.'bower.json') ){\n                $json = json_decode(file_get_contents($dep_path.'bower.json'), true);\n              }\n            }\n            if ( !empty($json) ){\n              if ( !empty($json['dependencies']) ){\n                $lib = new cdn\\library($this->db, $this->cfg['lang'], true);\n                foreach ( $json['dependencies'] as $l => $version ){\n                  $lib->add($l);\n                }\n                if ( $cfg = $lib->getConfig() ){\n                  if ( !empty($cfg['css']) ){\n                    $includes .= $this->cp->cssLinks($cfg['css'], $this->cfg['test']);\n                  }\n                  if ( !empty($cfg['js']) ){\n                    $includes .= $this->cp->jsLinks($cfg['js'], $this->cfg['test']);\n                  }\n                }\n              }\n              if ( !empty($json['components']) ){\n                \/** @todo Add dependent components *\/\n              }\n            }\n\n\n            \/\/ HTML inclusion\n            $html = [];\n            if ( !empty($cp['html']) ){\n              foreach ( $cp['html'] as $f ){\n                if ( $tmp = $this->cp->getContent($f, $c['test']) ){\n                  $component_name = Str::fileExt($f, true)[0];\n                  if ( $name !== $component_name ){\n                    $component_name = $name.'-'.$component_name;\n                  }\n                  $html[] = [\n                    'name' => $component_name,\n                    'content' => $tmp\n                  ];\n                }\n              }\n            }\n            if ( !empty($html) ){\n              $codes[$i]['html'] = $html;\n            }\n            $i++;\n            break;\n          }\n        }\n      }\n\n      if ( $codes ){\n        $str = '';\n        foreach ( $codes as $cd ){\n          $str .= \"{name: '$cd[name]', script: function(){try{ $cd[js] } catch(e){bbn.fn.log(e.message); throw new Error('Impossible to load component $cd[name]');}}\";\n          if ( !empty($cd['css']) ){\n            $str .= ', css: '.json_encode($cd['css']);\n          }\n          if ( !empty($cd['html']) ){\n            $str .= ', Html: '.json_encode($cd['html']);\n          }\n          $str .= '},';\n        }\n        $code = <<<JS\n\n(function(){\n  return (new Promise(function(bbn_resolve, bbn_reject){\n    setTimeout(function(){\n      bbn_resolve();\n    })\n  }))\n  $includes\n  .then(function(){\n    return bbnAddGlobalScript(function(){\n      return [$str]\n    })\n  })\n})()\nJS;\n      }\n      return $code;\n    }\n  }",
                        "startLine": 280,
                        "doc": {
                            "description": "",
                            "params": {
                                "$codes": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 418,
                        "isUserDefined": true
                    },
                    "set_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "protected": true,
                        "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                        "startLine": 63,
                        "endLine": 70,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": true,
                            "public": false,
                            "final": false,
                            "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                            "startLine": 63,
                            "doc": "",
                            "endLine": 70,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "err",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "err",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "public": {
                    "__construct": {
                        "file": "bbn\\Cdn",
                        "public": true,
                        "code": "function($request, $cache = NULL, bbn\\Db $db = NULL)\n  {\n    if ( !defined('BBN_PUBLIC') ){\n      $this->error('You must define the constant $this->fpath as the root of your public document');\n      die('You must define the constant $this->fpath as the root of your public document');\n    }\n    $this->set_prefix();\n    if ( $cache && is_dir($this->fpath.$cache) ){\n      if ( substr($cache, -1) !== '\/' ){\n        $cache .= '\/';\n      }\n      $this->cache_path = $cache;\n    }\n    if ( !$db ){\n      $db = Db::getInstance();\n    }\n    if ( $db ){\n      $this->db = $db;\n    }\n    $this->request = $request;\n    X::log($request, 'cdn_errors');\n    \/\/ Creation of a config object\n    $config = new cdn\\config($request, $this->db);\n    \/\/ Checking request validity\n    if ( $config->check() ){\n      \/\/ Getting a configuration array\n      $this->cfg = $config->get();\n      if ( !empty($this->cfg['content']['js']) || $this->cfg['is_component'] ){\n        $this->mode = 'js';\n      }\n      else{\n        if ( !empty($this->cfg['content']['css']) ){\n          $this->mode = 'css';\n        }\n      }\n      if ( $this->mode ){\n        $this->cp = new cdn\\compiler($this->cfg);\n      }\n    }\n  }",
                        "startLine": 134,
                        "doc": {
                            "description": "cdn constructor.",
                            "params": {
                                "$request": {
                                    "type": "string",
                                    "description": "The original request"
                                },
                                "$cache": {
                                    "type": "string|null",
                                    "description": "If given will point the cache file to serve"
                                },
                                "$db": {
                                    "type": "db|null",
                                    "description": "The DB to query fior libraries. If not given will be current instance"
                                }
                            },
                            "return": ""
                        },
                        "endLine": 173,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "request",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "cache",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "db",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "process": {
                        "file": "bbn\\Cdn",
                        "public": true,
                        "code": "function()\n  {\n    $code = '';\n    \/\/ One file at least\n    if ( $this->cfg['num'] ){\n      \/\/ Cache should be checked quickly if in prod, deeply if in dev\n      \/** Do not check the files, send the cache file if not in dev *\/\n      if ( !$this->checkCache($this->cfg['test']) ){\n        $c =& $this->cfg;\n        \/\/ New cache file time\n        $this->file_mtime = time();\n        if ( $c['is_component'] ){\n          $code = $this->getComponents();\n        }\n        else{\n          if ( $c['grouped'] ){\n            $codes = $this->cp->groupCompile($this->mode === 'css' ? $c['content']['css'] : $c['content']['js'], $c['test']);\n          }\n          else if ( $this->mode ){\n            $codes = $this->cp->compile($this->mode === 'css' ? $c['content']['css'] : $c['content']['js'], $c['test']);\n          }\n          if ( $codes ){\n            if ( $this->mode === 'css' ){\n              $code = $this->getCss($codes);\n            }\n            else if ( $this->mode === 'js' ){\n              $code = $this->getJs($codes, empty($c['nocompil']) ? true : false);\n            }\n          }\n        }\n        if ( $code ){\n          if (defined('BBN_IS_DEV') && BBN_IS_DEV){\n            $code = sprintf(\n              self::head_comment,\n              $this->furl.$this->request,\n              $c['test'] ? self::test_st : self::no_test_st\n            ).$code;\n          }\n          file_put_contents($c['cache_file'], $code);\n          file_put_contents($c['cache_file'].'.gzip', gzencode($code));\n        }\n      }\n    }\n    return $this;\n  }",
                        "startLine": 423,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "$this"
                        },
                        "endLine": 467,
                        "isUserDefined": true
                    },
                    "get_cfg": {
                        "file": "bbn\\Cdn",
                        "public": true,
                        "code": "function()\n  {\n    return $this->cfg;\n  }",
                        "startLine": 472,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "array|bool|compiler|string"
                        },
                        "endLine": 475,
                        "isUserDefined": true
                    },
                    "check": {
                        "file": "bbn\\Cdn",
                        "public": true,
                        "code": "function()\n  {\n    if ( !parent::check() ){\n      return false;\n    }\n    $file = empty($this->cfg['file']) || $this->cfg['is_component'] ? $this->cfg['cache_file'] : $this->fpath.$this->cfg['file'];\n    if ($file && is_file($file)) {\n      return true;\n    }\n    X::log(\"Impossible to find $file\", 'cdn_errors');\n    return false;\n  }",
                        "startLine": 480,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 491,
                        "isUserDefined": true,
                        "parent": {
                            "name": "check",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 56,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 61,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "check_cache": {
                        "file": "bbn\\Cdn",
                        "public": true,
                        "code": "function($real = true)\n  {\n    if ( is_file($this->cfg['cache_file']) ){\n      $last_modified = time();\n      $this->file_mtime = filemtime($this->cfg['cache_file']);\n      $c =& $this->cfg;\n      \/\/ Only checks if the file exists and is valid\n      if (\n        !$real &&\n        \\is_array($c['content']) &&\n        (($last_modified - $this->file_mtime) < $this->cache_length)\n      ){\n        return true;\n      }\n      clearstatcache();\n      \/\/ Real research for last mods and generation timestamps\n      if ( $c['is_component'] ){\n        foreach ( $c['content'] as $name => $cp ){\n          foreach ( $cp as $type => $files ){\n            foreach ( $files as $f ){\n              if ( is_file($this->fpath.$f) ){\n                $last_modified = filemtime($this->fpath.$f);\n                if ( $last_modified > $this->file_mtime ){\n                  return false;\n                }\n              }\n              else{\n                die(\"I can't find the file $f kkk!\");\n              }\n            }\n          }\n        }\n      }\n      else{\n        foreach ( $this->cfg['content'][$this->mode] as $f ){\n          if ( is_file($this->fpath.$f) ){\n            $last_modified = filemtime($this->fpath.$f);\n            if ( $last_modified > $this->file_mtime ){\n              return false;\n            }\n          }\n          else{\n            \\bbn\\X::hdump($this->cfg);\n            die(\"I can't find the file $f  mmm!\");\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }",
                        "startLine": 497,
                        "doc": {
                            "description": "",
                            "params": {
                                "$real": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 547,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "real",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": true,
                                "default_name": ""
                            }
                        ]
                    },
                    "output": {
                        "file": "bbn\\Cdn",
                        "public": true,
                        "code": "function()\n  {\n    $file = empty($this->cfg['file']) || $this->cfg['is_component'] ? $this->cfg['cache_file'] : $this->fpath.$this->cfg['file'];\n    if ( $file && is_file($file) ){\n      \/\/ get the HTTP_IF_MODIFIED_SINCE header if set\n      $client_if_modified = $_SERVER['HTTP_IF_MODIFIED_SINCE'] ?? false;\n      \/\/ get the HTTP_IF_NONE_MATCH header if set (etag: unique file hash)\n      $client_tag = isset($_SERVER['HTTP_IF_NONE_MATCH']) ? trim(str_replace('\"', '', Stripslashes($_SERVER['HTTP_IF_NONE_MATCH']))) : false;\n\n\n      \/\/ We get a unique hash of this file (etag)\n      $file_tag = md5($file.$this->file_mtime);\n\n\n      \/\/die(var_dump($this->file_mtime, $client_tag, $etagFile, $client_if_modified, $_SERVER));\n      if ( $this->mode === 'css' ){\n        header('Content-type: text\/css; charset=utf-8');\n      }\n      else{\n        if ( $this->mode === 'js' ){\n          header('Content-type: text\/javascript; charset=utf-8');\n        }\n        else{\n          $mime = finfo_open(FILEINFO_MIME_TYPE);\n          header('Content-type: '.finfo_file($mime, $file));\n        }\n      }\n      \/\/ make sure caching is turned on\n      header('Cache-Control: max-age=14400');\n      header('Expires: '.gmdate('D, d M Y H:i:s', Time() + 14400).' GMT');\n      \/\/ set last-modified header\n      header('Date: '.gmdate('D, d M Y H:i:s', $this->file_mtime).' GMT');\n      header('Last-Modified: '.gmdate('D, d M Y H:i:s', $this->file_mtime).' GMT');\n      \/\/ set etag-header\n      header(\"ETag: $file_tag\");\n      \/\/header('Pragma: public');\n\n      \/\/ check if page has changed. If not, send 304 and exit\n      if (\n        $client_if_modified &&\n        (\n          (strtotime($client_if_modified) == $this->file_mtime) ||\n          ($client_tag == $file_tag)\n        )\n      ){\n        header('HTTP\/1.1 304 Not Modified');\n      }\n      else{\n        if ( empty($this->cfg['file']) && (\n            ($this->mode === 'js') ||\n            ($this->mode === 'css')\n          ) ){\n          if (\n            isset($_SERVER['HTTP_ACCEPT_ENCODING']) &&\n            (strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== false)\n          ){\n            header('Content-Encoding: gzip');\n            $file .= '.gzip';\n          }\n        }\n        readfile($file);\n      }\n      exit;\n    }\n    die('No cache file '.$file);\n  }",
                        "startLine": 552,
                        "doc": {
                            "description": "",
                            "tags": []
                        },
                        "endLine": 617,
                        "isUserDefined": true
                    },
                    "test": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 45,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 50,
                        "isUserDefined": true,
                        "parent": {
                            "name": "test",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 45,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 50,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 72,
                        "endLine": 74,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 72,
                            "doc": "",
                            "endLine": 74,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_errors": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 76,
                        "endLine": 78,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_errors",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 76,
                            "doc": "",
                            "endLine": 78,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "log": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                        "startLine": 80,
                        "endLine": 88,
                        "isUserDefined": true,
                        "parent": {
                            "name": "log",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                            "startLine": 80,
                            "doc": "",
                            "endLine": 88,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "__call": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                        "startLine": 95,
                        "doc": {
                            "description": "",
                            "params": {
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$arguments": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 99,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "parent": {
                            "name": "__call",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                            "startLine": 95,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$name": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "$arguments": {
                                        "type": "array",
                                        "description": ""
                                    }
                                },
                                "return": "void"
                            },
                            "endLine": 99,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 2,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "name",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "arguments",
                                    "position": 1,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "arguments",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 104,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "boolean"
                        },
                        "endLine": 106,
                        "isUserDefined": true,
                        "parent": {
                            "name": "is_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 104,
                            "doc": {
                                "description": "",
                                "params": [],
                                "return": "boolean"
                            },
                            "endLine": 106,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "set_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($debug)\n  {\n  }",
                        "startLine": 112,
                        "doc": {
                            "description": "",
                            "params": {
                                "$debug": {
                                    "type": "boolean",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 114,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($debug)\n  {\n  }",
                            "startLine": 112,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$debug": {
                                        "type": "boolean",
                                        "description": ""
                                    }
                                },
                                "return": "self"
                            },
                            "endLine": 114,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "debug",
                                    "position": 0,
                                    "type": {},
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "debug",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "mode": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "db": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "db"
                            }
                        ]
                    }
                },
                "extensions": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    }
                },
                "files": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    }
                },
                "dir": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "cache_path": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "null|string"
                            }
                        ]
                    }
                },
                "cache_length": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "int"
                            }
                        ]
                    }
                },
                "file_mtime": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "mtime"
                            }
                        ]
                    }
                },
                "request": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "o": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "url": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "hash": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "language": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "cfg": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    }
                },
                "list": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "cp": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "cdn\\compiler"
                            }
                        ]
                    }
                },
                "ext": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "alert": {
                    "public": true
                },
                "code": {
                    "public": true
                },
                "errors": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "errors",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "error": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "false|string"
                            }
                        ]
                    },
                    "parent": {
                        "name": "error",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "debug": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "boolean"
                            }
                        ]
                    },
                    "parent": {
                        "name": "debug",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "log": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "log",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "prefix": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "fpath": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "furl": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "types": {
                    "static": true,
                    "public": true,
                    "value": {
                        "js": [
                            "js",
                            "coffee"
                        ],
                        "css": [
                            "css",
                            "less",
                            "sass",
                            "scss"
                        ],
                        "html": [
                            "html",
                            "php"
                        ],
                        "lang": [
                            "lang"
                        ]
                    }
                }
            },
            "staticProperties": {
                "types": {
                    "js": [
                        "js",
                        "coffee"
                    ],
                    "css": [
                        "css",
                        "less",
                        "sass",
                        "scss"
                    ],
                    "html": [
                        "html",
                        "php"
                    ],
                    "lang": [
                        "lang"
                    ]
                }
            },
            "costants": null,
            "numMethods": 19,
            "numProperties": 27,
            "numConstants": 3,
            "numStaticProperties": 1,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [
                "bbn\\Cdn\\Common"
            ],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": "bbn\\Models\\Cls\\Basic",
            "isSubclassOf": false,
            "defaultProperties": {
                "types": {
                    "js": [
                        "js",
                        "coffee"
                    ],
                    "css": [
                        "css",
                        "less",
                        "sass",
                        "scss"
                    ],
                    "html": [
                        "html",
                        "php"
                    ],
                    "lang": [
                        "lang"
                    ]
                },
                "mode": null,
                "db": null,
                "extensions": [
                    "js",
                    "css"
                ],
                "files": [],
                "dir": null,
                "cache_path": "cache\/",
                "cache_length": 3600,
                "file_mtime": null,
                "request": null,
                "o": null,
                "url": "",
                "hash": null,
                "language": null,
                "cfg": null,
                "list": null,
                "cp": null,
                "ext": "",
                "alert": null,
                "code": null,
                "errors": [],
                "error": false,
                "debug": false,
                "log": [],
                "prefix": "",
                "fpath": "",
                "furl": ""
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "cdn"
        },
        "cron": {
            "doc": {
                "description": "(Static) content delivery system through requests using filesystem and internal DB for libraries.",
                "tags": {
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Jan 3, 2016, 12:24:36 +0000",
                    "category": "Cache",
                    "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT"
                }
            },
            "name": "bbn\\Cron",
            "namespace": true,
            "traits": {
                "bbn\\Cron\\Common": {
                    "name": "bbn\\Cron\\Common"
                }
            },
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/cron.php",
            "startLine": 13,
            "endLine": 119,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function(bbn\\Db $db, bbn\\Mvc\\Controller $ctrl = NULL, array $cfg = [])\n  {\n    if ($db->check()) {\n      $this->path = $cfg['data_path'] ?? Mvc::getDataPath('appui-cron');\n      $this->db = $db;\n      $this->timer = new util\\timer();\n      $this->table = ($cfg['prefix'] ?? $this->prefix).'cron';\n      if (!empty($cfg['exe_path'])) {\n        $this->exe_path = $cfg['exe_path'];\n      }\n      if ($ctrl) {\n        if (empty($this->exe_path)) {\n          $this->exe_path = $ctrl->pluginUrl('appui-cron');\n          if ($this->exe_path) {\n            $this->exe_path .= '\/run';\n          }\n        }\n        $this->controller = $ctrl;\n      }\n    }\n  }",
                "startLine": 62,
                "endLine": 82,
                "isUserDefined": true,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": {},
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ctrl",
                        "position": 1,
                        "type": {},
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 2,
                        "type": {},
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": [],
                "protected": {
                    "set_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "protected": true,
                        "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                        "startLine": 63,
                        "endLine": 70,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": true,
                            "public": false,
                            "final": false,
                            "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                            "startLine": 63,
                            "doc": "",
                            "endLine": 70,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "err",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "err",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "public": {
                    "get_launcher": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    if (!$this->_launcher && $this->check() && $this->exe_path && $this->controller) {\n      $this->_launcher = new cron\\launcher($this);\n    }\n    return $this->_launcher;\n  }",
                        "startLine": 28,
                        "endLine": 34,
                        "isUserDefined": true,
                        "returns": [
                            "bbn\\Cron\\Launcher",
                            null
                        ]
                    },
                    "get_runner": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(array $cfg = [])\n  {\n    if ($this->check() && $this->controller) {\n      return new cron\\runner($this, $cfg);\n    }\n    return null;\n  }",
                        "startLine": 36,
                        "endLine": 42,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "bbn\\Cron\\Runner",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "get_controller": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(array $cfg = [])\n  {\n    if ($this->check() && $this->controller) {\n      return $this->controller;\n    }\n    return null;\n  }",
                        "startLine": 44,
                        "endLine": 50,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "bbn\\Mvc\\Controller",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "get_manager": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    if (!$this->_manager && $this->check() && $this->controller) {\n      $this->_manager = new cron\\manager($this->db);\n    }\n    return $this->_manager;\n  }",
                        "startLine": 52,
                        "endLine": 58,
                        "isUserDefined": true,
                        "returns": [
                            "bbn\\Cron\\Manager",
                            null
                        ]
                    },
                    "__construct": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(bbn\\Db $db, bbn\\Mvc\\Controller $ctrl = NULL, array $cfg = [])\n  {\n    if ($db->check()) {\n      $this->path = $cfg['data_path'] ?? Mvc::getDataPath('appui-cron');\n      $this->db = $db;\n      $this->timer = new util\\timer();\n      $this->table = ($cfg['prefix'] ?? $this->prefix).'cron';\n      if (!empty($cfg['exe_path'])) {\n        $this->exe_path = $cfg['exe_path'];\n      }\n      if ($ctrl) {\n        if (empty($this->exe_path)) {\n          $this->exe_path = $ctrl->pluginUrl('appui-cron');\n          if ($this->exe_path) {\n            $this->exe_path .= '\/run';\n          }\n        }\n        $this->controller = $ctrl;\n      }\n    }\n  }",
                        "startLine": 62,
                        "endLine": 82,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "db",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ctrl",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "cfg",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "check": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    return $this->db->check();\n  }",
                        "startLine": 84,
                        "endLine": 87,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ],
                        "parent": {
                            "name": "check",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 56,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 61,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_exe_path": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    return $this->exe_path;\n  }",
                        "startLine": 89,
                        "endLine": 92,
                        "isUserDefined": true
                    },
                    "get_path": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    return $this->path;\n  }",
                        "startLine": 94,
                        "endLine": 97,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "launch_poll": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    if ($launcher = $this->getLauncher()) {\n      return $launcher->launch(['type' => 'poll']);\n    }\n    return null;\n  }",
                        "startLine": 100,
                        "endLine": 106,
                        "isUserDefined": true
                    },
                    "launch_task_system": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    if ($launcher = $this->getLauncher()) {\n      return $launcher->launch(['type' => 'cron']);\n    }\n    return null;\n  }",
                        "startLine": 108,
                        "endLine": 114,
                        "isUserDefined": true
                    },
                    "test": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 45,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 50,
                        "isUserDefined": true,
                        "parent": {
                            "name": "test",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 45,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 50,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 72,
                        "endLine": 74,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 72,
                            "doc": "",
                            "endLine": 74,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_errors": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 76,
                        "endLine": 78,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_errors",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 76,
                            "doc": "",
                            "endLine": 78,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "log": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                        "startLine": 80,
                        "endLine": 88,
                        "isUserDefined": true,
                        "parent": {
                            "name": "log",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                            "startLine": 80,
                            "doc": "",
                            "endLine": 88,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "__call": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                        "startLine": 95,
                        "doc": {
                            "description": "",
                            "params": {
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$arguments": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 99,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "parent": {
                            "name": "__call",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                            "startLine": 95,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$name": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "$arguments": {
                                        "type": "array",
                                        "description": ""
                                    }
                                },
                                "return": "void"
                            },
                            "endLine": 99,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 2,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "name",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "arguments",
                                    "position": 1,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "arguments",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 104,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "boolean"
                        },
                        "endLine": 106,
                        "isUserDefined": true,
                        "parent": {
                            "name": "is_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 104,
                            "doc": {
                                "description": "",
                                "params": [],
                                "return": "boolean"
                            },
                            "endLine": 106,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "set_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($debug)\n  {\n  }",
                        "startLine": 112,
                        "doc": {
                            "description": "",
                            "params": {
                                "$debug": {
                                    "type": "boolean",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 114,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($debug)\n  {\n  }",
                            "startLine": 112,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$debug": {
                                        "type": "boolean",
                                        "description": ""
                                    }
                                },
                                "return": "self"
                            },
                            "endLine": 114,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "debug",
                                    "position": 0,
                                    "type": {},
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "debug",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_cron_timeout": {
                        "file": "bbn\\Cron",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    return self::$cron_timeout;\n  }",
                        "startLine": 57,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "int"
                        },
                        "endLine": 60,
                        "isUserDefined": true,
                        "returns": [
                            "int"
                        ]
                    },
                    "set_cron_timeout": {
                        "file": "bbn\\Cron",
                        "static": true,
                        "public": true,
                        "code": "function($cron_timeout)\n  {\n    self::$cron_timeout = $cron_timeout;\n  }",
                        "startLine": 65,
                        "doc": {
                            "description": "",
                            "params": {
                                "$cron": {
                                    "type": "int",
                                    "description": "timeout"
                                }
                            },
                            "return": ""
                        },
                        "endLine": 68,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "void"
                        ],
                        "arguments": [
                            {
                                "name": "cron_timeout",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_poll_timeout": {
                        "file": "bbn\\Cron",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    return self::$poll_timeout;\n  }",
                        "startLine": 73,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "int"
                        },
                        "endLine": 76,
                        "isUserDefined": true,
                        "returns": [
                            "int"
                        ]
                    },
                    "set_poll_timeout": {
                        "file": "bbn\\Cron",
                        "static": true,
                        "public": true,
                        "code": "function($poll_timeout)\n  {\n    self::$poll_timeout = $poll_timeout;\n  }",
                        "startLine": 81,
                        "doc": {
                            "description": "",
                            "params": {
                                "$poll": {
                                    "type": "int",
                                    "description": "timeout"
                                }
                            },
                            "return": ""
                        },
                        "endLine": 84,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "void"
                        ],
                        "arguments": [
                            {
                                "name": "poll_timeout",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_user_timeout": {
                        "file": "bbn\\Cron",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    return self::$user_timeout;\n  }",
                        "startLine": 89,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "int"
                        },
                        "endLine": 92,
                        "isUserDefined": true,
                        "returns": [
                            "int"
                        ]
                    },
                    "set_user_timeout": {
                        "file": "bbn\\Cron",
                        "static": true,
                        "public": true,
                        "code": "function($user_timeout)\n  {\n    self::$user_timeout = $user_timeout;\n  }",
                        "startLine": 97,
                        "doc": {
                            "description": "",
                            "params": {
                                "$user": {
                                    "type": "int",
                                    "description": "timeout"
                                }
                            },
                            "return": ""
                        },
                        "endLine": 100,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "void"
                        ],
                        "arguments": [
                            {
                                "name": "user_timeout",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "init": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(array $cfg = [])\n  {\n    $this->path = bbn\\Mvc::getDataPath('appui-cron');\n  }",
                        "startLine": 108,
                        "doc": {
                            "description": "cron constructor.",
                            "params": {
                                "$ctrl": {
                                    "type": "bbn\\Mvc\\Controller",
                                    "description": ""
                                },
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": ""
                        },
                        "endLine": 111,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "get_status_path": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function($type)\n  {\n  }",
                        "startLine": 122,
                        "endLine": 124,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "type",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_pid_path": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    if ($this->path && (isset($cfg['type']) || isset($cfg['id']))) {\n      return $this->path.'pid\/.'.($cfg['id'] ?? $cfg['type']);\n    }\n    return null;\n  }",
                        "startLine": 126,
                        "endLine": 132,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_log_path": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(array $cfg, $error = false, $no_path = false)\n  {\n    $path = null;\n    if ($this->path && (isset($cfg['type']) || isset($cfg['id']))) {\n      if ( $error ){\n        $path = $this->path.'error\/'.(isset($cfg['id']) ? 'tasks\/'.$cfg['id'] : $cfg['type']);\n      }\n      else {\n        $path = $this->path.'log\/'.(isset($cfg['id']) ? 'tasks\/'.$cfg['id'] : $cfg['type']);\n      }\n      if ($error || $no_path) {\n        $path .= '\/';\n      }\n      else {\n        $path = \\bbn\\X::makeStoragePath($path);\n      }\n    }\n    return $path;\n  }",
                        "startLine": 134,
                        "endLine": 152,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "error",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            },
                            {
                                "name": "no_path",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_log_tree": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(array $cfg, $error = false)\n  {\n    $fs = new bbn\\File\\System();\n    if (($path = $this->getLogPath($cfg, $error, true)) && $fs->isDir($path)) {\n      $fs->cd($path);\n      $dirs = array_reverse($fs->getFiles('.\/', true, true, null, 'cts'));\n      $tmp =& $dirs;\n      $tpath = '';\n      for ($i = 0; $i < 4; $i++) {\n        if (!count($tmp)) {\n          break;\n        }\n        else{\n          $ok = false;\n          foreach ($tmp as &$t) {\n            if (!empty($t['num'])) {\n              $tpath .= '\/'.$t['name'];\n              $fs->cd($path.$tpath);\n              $t['expanded'] = true;\n              $t['items'] = array_reverse($fs->getFiles('.\/', true, true, null, 'cts'));\n              $tmp =& $t['items'];\n              $ok = true;\n              break;\n            }\n          }\n          if (!$ok) {\n            break;\n          }\n        }\n      }\n      return $dirs;\n    }\n  }",
                        "startLine": 154,
                        "endLine": 186,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "error",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_last_logs": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(array $cfg, $error = false, $start = 0, $num = 10)\n  {\n    $fs = new \\bbn\\File\\System();\n    if (($path = $this->getLogPath($cfg, $error, true)) && $fs->isDir($path)) {\n      $res = [];\n      $fs->cd($path);\n      $years = array_reverse($fs->getDirs($path));\n      foreach ($years as $y) {\n        $months = array_reverse($fs->getDirs($y));\n        foreach ($months as $m) {\n          $days = array_reverse($fs->getDirs($m));\n          foreach ($days as $d) {\n            $nums = array_reverse($fs->getDirs($d));\n            foreach ($nums as $num) {\n              foreach (array_reverse($fs->getFiles($num)) as $f) {\n                if ($start) {\n                  $start--;\n                }\n                if (!$start) {\n                  $res[] = $f;\n                  if (count($res) >= $num) {\n                    return $res;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      return $res;\n    }\n    return null;\n  }",
                        "startLine": 188,
                        "endLine": 220,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "error",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            },
                            {
                                "name": "num",
                                "position": 3,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 10,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_last_log": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function(array $cfg, $error = false)\n  {\n    if ($tmp = $this->getLastLogs($cfg, $error, 0, 1)) {\n      return $tmp[0];\n    }\n    return null;\n\n  }",
                        "startLine": 222,
                        "endLine": 229,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "error",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "is_active": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->check() ){\n      return file_exists($this->getStatusPath('active'));\n    }\n    return false;\n  }",
                        "startLine": 244,
                        "doc": {
                            "description": "Returns true if the file data_folder\/.active exists, false otherwise.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 250,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "is_cron_active": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->check() ){\n      return file_exists($this->getStatusPath('cron'));\n    }\n    return false;\n  }",
                        "startLine": 256,
                        "doc": {
                            "description": "Returns true if the file data_folder\/.cron exists, false otherwise.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 262,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "is_poll_active": {
                        "file": "bbn\\Cron",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->check() ){\n      return file_exists($this->getStatusPath('poll'));\n    }\n    return false;\n  }",
                        "startLine": 268,
                        "doc": {
                            "description": "Returns true if the file data_folder\/.poll exists, false otherwise.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 274,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    }
                }
            },
            "properties": {
                "_runner": {
                    "private": true
                },
                "_launcher": {
                    "private": true
                },
                "_manager": {
                    "private": true
                },
                "controller": {
                    "protected": true
                },
                "exe_path": {
                    "protected": true
                },
                "errors": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "errors",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "error": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "false|string"
                            }
                        ]
                    },
                    "parent": {
                        "name": "error",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "debug": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "boolean"
                            }
                        ]
                    },
                    "parent": {
                        "name": "debug",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "log": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "log",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "prefix": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string The tables' prefix (the tables will be called ?cron and ?journal)"
                            }
                        ]
                    }
                },
                "path": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string The full path to the plugin data folder where the actions and log files are\/will be located"
                            }
                        ]
                    }
                },
                "db": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "bbn\\Db The DB connection"
                            }
                        ]
                    }
                },
                "ctrl": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "bbn\\Mvc\\Controller The controller"
                            }
                        ]
                    }
                },
                "mail": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "todo",
                                "type": null
                            },
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "data": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "enabled": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "timeout": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "cron_timeout": {
                    "static": true,
                    "protected": true
                },
                "poll_timeout": {
                    "static": true,
                    "protected": true
                },
                "user_timeout": {
                    "static": true,
                    "protected": true
                }
            },
            "staticProperties": {
                "cron_timeout": 300,
                "poll_timeout": 600,
                "user_timeout": 480
            },
            "costants": null,
            "numMethods": 34,
            "numProperties": 20,
            "numConstants": 0,
            "numStaticProperties": 3,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [
                "bbn\\Cron\\Common"
            ],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": "bbn\\Models\\Cls\\Basic",
            "isSubclassOf": false,
            "defaultProperties": {
                "cron_timeout": 300,
                "poll_timeout": 600,
                "user_timeout": 480,
                "_runner": null,
                "_launcher": null,
                "_manager": null,
                "controller": null,
                "exe_path": null,
                "errors": [],
                "error": false,
                "debug": false,
                "log": [],
                "prefix": "bbn_",
                "path": null,
                "db": null,
                "ctrl": null,
                "mail": null,
                "data": null,
                "enabled": true,
                "timeout": 50
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "cron"
        },
        "date": {
            "doc": {
                "description": "Deals with date manipulation.\n *",
                "tags": {
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Apr 4, 2011, 23:23:55 +0000",
                    "category": "Time and Date",
                    "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
                    "version": "0.2r89",
                    "todo": "Plenty of stuff!"
                }
            },
            "name": "bbn\\Date",
            "namespace": true,
            "traits": [],
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/date.php",
            "startLine": 18,
            "endLine": 176,
            "contentConstructor": null,
            "methods": {
                "private": [],
                "protected": [],
                "public": {
                    "is_windows": {
                        "file": "bbn\\Date",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n      self::$windows = X::isWindows();\n    }\n    return self::$windows;\n  }",
                        "startLine": 22,
                        "endLine": 27,
                        "isUserDefined": true
                    },
                    "last_day_of_month": {
                        "file": "bbn\\Date",
                        "static": true,
                        "public": true,
                        "code": "function($date, $format = false)\n  {\n      $m = false;\n      if ( Str::isNumber($date) ){\n        if ( $date <= 12 ){\n          $m = $date;\n          $y = date('Y');\n        }\n        else{\n          $m = (int)date('m', $date);\n          $y = date('Y', $date);\n        }\n      }\n      else if ( $d = strtotime($date) ){\n        $m = (int)date('m', $d);\n        $y = date('Y', $d);\n      }\n      if ( $m ){\n        $r = mktime(0, 0, -1, $m+1, 1, $y);\n        return $format ? date($format, $r) : $r;\n      }\n    }\n    \n  }",
                        "startLine": 29,
                        "endLine": 52,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "format",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "validate": {
                        "file": "bbn\\Date",
                        "static": true,
                        "public": true,
                        "code": "function($date, $format = 'Y-m-d H:i:s')\n  {\n    return $d && $d->format($format) == $date;\n  }",
                        "startLine": 54,
                        "endLine": 57,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "format",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "Y-m-d H:i:s",
                                "default_name": ""
                            }
                        ]
                    },
                    "validateSQL": {
                        "file": "bbn\\Date",
                        "static": true,
                        "public": true,
                        "code": "function($date)\n  {\n  }",
                        "startLine": 59,
                        "endLine": 61,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "format": {
                        "file": "bbn\\Date",
                        "static": true,
                        "public": true,
                        "code": "function($date = '', $mode = '')\n  {\n\t\t\/* Formatting: idate is the timestamp, and date[0] and date[1] the SQL date and time *\/\n\t\tif ( empty($date) ){\n\t\t\t$idate = time();\n    }\n\t\telse if ( is_numeric($date) ){\n\t\t\t$idate = $date;\n    }\n\t\telse{\n\t\t\t$idate = strtotime($date);\n    }\n\t\t$is_windows = strtoupper(substr(PHP_OS, 0, 3)) == 'WIN' ? true : false;\n\t\tif ( $idate )\n\t\t{\n\t\t\t\/* Getting the time difference *\/\n\t\t\t$t = time();\n      \/\/if ( ($date('h') == 0) && ($date('i') == 0) && ($date('s', $ida) == 0) ){\n\t\t\t$h = localtime($idate, 1);\n\t\t\t$start_today = mktime(0, 0, 0);\n\t\t\t$end_today = $start_today + ( 24 * 3600 );\n\t\t\t$is_today = ( ($idate >= $start_today) && ($idate < $end_today) ) ? 1 : false;\n\t\t\t$only_date = ($mode === 'date') || ( $h['tm_hour'] + $h['tm_min'] + $h['tm_sec'] == 0 ) ? 1 : false;\n\t\t\tif ( $mode === 'idate' ){\n        $date_ok = $idate;\n      }\n\t\t\telse if ( $mode === 'dbdate' ){\n        $date_ok = date('Y-m-d H:i:s', $idate);\n      }\n      else if ( $mode === 'm' ){\n        $date_ok = $is_windows ? strftime(\"%m\", $idate) : strftime(\"%B\", $idate);\n      }\n      else if ( $mode === 'my' ){\n        $date_ok = $is_windows ? strftime(\"%m %Y\", $idate) : strftime(\"%B %Y\", $idate);\n      }\n\t\t\telse if ( $mode === 'wsdate' || $mode === 's' ){\n\t\t\t\tif ( $is_today && !$only_date ){\n          $date_ok = strftime('%H:%M', $idate);\n        }\n\t\t\t\telse{\n          $date_ok = $is_windows ? strftime('%d\/%m\/%y', $idate) : strftime('%x', $idate);\n        }\n\t\t\t}\n\t\t\telse if ( $mode == 'r' ){\n\t\t\t\tif ( $is_today && !$only_date ){\n          $date_ok = strftime('%R', $idate);\n        }\n\t\t\t\telse{\n          $date_ok = $is_windows ? utf8_encode(strftime('%#d %b %Y', $idate)) : strftime('%e %b %Y', $idate);\n        }\n\t\t\t}\n\t\t\telse if ( $mode == 'js' ){\n        $date_ok = date('D M d Y H:i:s O', $idate);\n\t\t\t}\n      else if ( ($mode === 'wdate') || ($mode === 'wdate') ){\n        $date_ok = $is_windows ? utf8_encode(strftime('%A %#d %B %Y', $idate)) : strftime('%A %e %B %Y', $idate);\n        if ( !$only_date && ($mode !== 'notime') ){\n          $date_ok .= ', '.strftime('%H:%M', $idate);\n        }\n      }\n      else {\n        $date_ok = $is_windows ? utf8_encode(strftime('%#d %B %Y', $idate)) : strftime('%e %B %Y', $idate);\n        if ( !$only_date && ($mode !== 'notime') ){\n          $date_ok .= ', '.strftime('%H:%M', $idate);\n        }\n      }\n\t\t\treturn $date_ok;\n\t\t}\n  }",
                        "startLine": 68,
                        "doc": {
                            "description": "",
                            "params": {
                                "$date": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "false|int|string"
                        },
                        "endLine": 136,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "monthpicker_options": {
                        "file": "bbn\\Date",
                        "static": true,
                        "public": true,
                        "code": "function($val = '')\n  {\n    $arr = [];\n    for ( $i = 1; $i <= 12; $i++ ){\n      $arr[$i] = self::monthName($i);\n    }\n    return X::buildOptions($arr, $val);\n  }",
                        "startLine": 138,
                        "endLine": 145,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "val",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "month_name": {
                        "file": "bbn\\Date",
                        "static": true,
                        "public": true,
                        "code": "function($m)\n  {\n  }",
                        "startLine": 147,
                        "endLine": 149,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "m",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_month_week": {
                        "file": "bbn\\Date",
                        "static": true,
                        "public": true,
                        "code": "function($date, $firstweekday = 'monday')\n  {\n    $cut = substr($date, 0, 8);\n    $daylen = 86400;\n    $timestamp = strtotime($date);\n    $first = strtotime($cut . \"00\");\n    $elapsed = ($timestamp - $first) \/ $daylen;\n    $weeks = 1;\n    for ( $i = 1; $i <= $elapsed; $i++ ){\n      $dayfind = $cut . (strlen($i) < 2 ? '0' . $i : $i);\n      $daytimestamp = strtotime($dayfind);\n      $day = strtolower(date(\"l\", $daytimestamp));\n      if ( $day === strtolower($firstweekday) ){\n        $weeks++;\n      }\n    }\n    return $weeks;\n  }",
                        "startLine": 157,
                        "doc": {
                            "description": "Gets the month's week of the given date.",
                            "params": {
                                "$date": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$firstweekday": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "int"
                        },
                        "endLine": 174,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int"
                        ],
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "firstweekday",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "monday",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "windows": {
                    "static": true,
                    "private": true
                }
            },
            "staticProperties": {
                "windows": null
            },
            "costants": null,
            "numMethods": 8,
            "numProperties": 1,
            "numConstants": 0,
            "numStaticProperties": 1,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": null,
            "isSubclassOf": false,
            "defaultProperties": {
                "windows": null
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "date"
        },
        "db": {
            "doc": {
                "description": "Half ORM half DB management, the simplest class for data queries.\n * Hello world!",
                "tags": {
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Apr 4, 2011, 23:23:55 +0000",
                    "category": "Database",
                    "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
                    "version": "3.1",
                    "todo": "Check for the tables and column names legality in _treat_arguments"
                }
            },
            "name": "bbn\\Db",
            "namespace": true,
            "traits": {
                "bbn\\Models\\Tts\\Cache": {
                    "name": "bbn\\Models\\Tts\\Cache"
                },
                "bbn\\Models\\Tts\\Retriever": {
                    "name": "bbn\\Models\\Tts\\Retriever"
                }
            },
            "interfaces": {
                "bbn\\Db\\Actions": {
                    "name": "bbn\\Db\\Actions"
                },
                "bbn\\Db\\Api": {
                    "name": "bbn\\Db\\Api"
                },
                "bbn\\Db\\Engines": {
                    "name": "bbn\\Db\\Engines"
                }
            },
            "isInstantiable": true,
            "cloneable": false,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/db.php",
            "startLine": 21,
            "endLine": 4914,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function(array $cfg = [])\n  {\n    if ( \\defined('BBN_DB_ENGINE') && !isset($cfg['engine']) ){\n      $cfg['engine'] = BBN_DB_ENGINE;\n    }\n    if ( isset($cfg['engine']) ){\n      $cls = '\\\\bbn\\\\db\\\\languages\\\\'.$cfg['engine'];\n      if ( !class_exists($cls) ){\n        die(\"Sorry the engine class $cfg[engine] does not exist\");\n      }\n      self::retrieverInit($this);\n      $this->cacheInit();\n      $this->language = new $cls($this);\n      if ( isset($cfg['on_error']) ){\n        $this->on_error = $cfg['on_error'];\n      }\n      if ($cfg = $this->getConnection($cfg)) {\n        $this->qte = $this->language->qte;\n        try{\n          parent::__construct(...($cfg['args'] ?: []));\n          $this->language->postCreation();\n          $this->current = $cfg['db'] ?? null;\n          $this->engine = $cfg['engine'];\n          $this->host = $cfg['host'] ?? '127.0.0.1';\n          $this->username = $cfg['user'] ?? null;\n          $this->hash = $this->_make_hash($cfg['args']);\n          $this->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n          if ( !empty($cfg['cache_length']) ){\n            $this->cache_renewal = (int)$cfg['cache_length'];\n          }\n          $this->startFancyStuff();\n        }\n        catch ( \\PDOException $e ){\n          $this->log([\"Impossible to create the connection for $cfg[engine]\/$cfg[db]\", $e]);\n          die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? X::getDump($e) : 'Impossible to create the database connection');\n        }\n      }\n    }\n    if ( !$this->engine ){\n      $this->log(\"Impossible to create the connection for $cfg[engine]\/$cfg[db]\");\n      die('Impossible to create the database connection');\n    }\n  }",
                "startLine": 1012,
                "doc": {
                    "description": {
                        "description": "Constructor\n  * ```php\n$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```",
                        "tags": [
                            {
                                "tag": "param",
                                "type": "null|array",
                                "name": "$cfg",
                                "description": "Mandatory db_user db_engine db_host db_pass"
                            }
                        ]
                    },
                    "params": {
                        "$cfg": {
                            "type": "null|array",
                            "description": "Mandatory db_user db_engine db_host db_pass"
                        }
                    },
                    "return": "",
                    "example_method": "```php\n$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```"
                },
                "endLine": 1054,
                "isUserDefined": true,
                "numberOfParameters": 1,
                "parent": {
                    "name": "__construct",
                    "file": "PDO",
                    "static": false,
                    "private": false,
                    "protected": false,
                    "public": true,
                    "final": false,
                    "code": "function($dsn, $username, $passwd, $options)\n  {\n  }",
                    "startLine": false,
                    "doc": "",
                    "endLine": false,
                    "isDeprecated": false,
                    "isGenerator": false,
                    "isInternal": true,
                    "isUserDefined": false,
                    "isVariadic": false,
                    "returnsReference": false,
                    "numberOfParameters": 4,
                    "numberOfRequiredParameters": 1,
                    "returns": null,
                    "parent": false,
                    "arguments": [
                        {
                            "name": "dsn",
                            "position": 0,
                            "type": null,
                            "required": true,
                            "has_default": false,
                            "default": "",
                            "default_name": ""
                        },
                        {
                            "name": "username",
                            "position": 1,
                            "type": null,
                            "required": false,
                            "has_default": false,
                            "default": "",
                            "default_name": ""
                        },
                        {
                            "name": "passwd",
                            "position": 2,
                            "type": null,
                            "required": false,
                            "has_default": false,
                            "default": "",
                            "default_name": ""
                        },
                        {
                            "name": "options",
                            "position": 3,
                            "type": null,
                            "required": false,
                            "has_default": false,
                            "default": "",
                            "default_name": ""
                        }
                    ]
                },
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": {},
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": {
                    "has_error": {
                        "file": "bbn\\Db",
                        "static": true,
                        "private": true,
                        "code": "function()\n  {\n    self::$has_error_all = true;\n  }",
                        "startLine": 225,
                        "doc": {
                            "description": "",
                            "tags": []
                        },
                        "endLine": 228,
                        "isUserDefined": true
                    },
                    "_db_cache_name": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function($item, $mode)\n  {\n    if ($this->engine === 'sqlite') {\n      $h = md5($this->host.dirname($this->current));\n    }\n    else {\n      $h = Str::sanitize($this->host);\n    }\n    switch ( $mode ){\n      case 'columns':\n        $r = $this->engine.'\/'.$h.'\/'.str_replace('.', '\/', $this->tfn($item));\n        break;\n      case 'tables':\n        $r = $this->engine.'\/'.$h.'\/'.($item ?: $this->current);\n        break;\n      case 'databases':\n        $r = $this->engine.'\/'.$h.'\/_bbn-database';\n        break;\n    }\n    return $r;\n  }",
                        "startLine": 263,
                        "doc": {
                            "description": "",
                            "params": {
                                "$item": {
                                    "type": "",
                                    "description": "string 'db_name' or 'table'"
                                },
                                "$mode": {
                                    "type": "",
                                    "description": "string 'columns','tables' or'databases'"
                                }
                            },
                            "return": "bool|string"
                        },
                        "endLine": 283,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "item",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_get_cache": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function($item, $mode = 'columns', $force = false)\n  {\n    $cache_name = $this->_db_cache_name($item, $mode);\n    if ( $force && isset($this->cache[$cache_name]) ){\n      unset($this->cache[$cache_name]);\n    }\n    \n    if ( !isset($this->cache[$cache_name]) ){\n      if ( $force || !($tmp = $this->cacheGet($cache_name)) ){\n        switch ( $mode ){\n          case 'columns':\n            $keys = $this->language->getKeys($item);\n            $cols = $this->language->getColumns($item);\n            if ( \\is_array($keys) && \\is_array($cols) ){\n              $tmp = [\n                'keys' => $keys['keys'],\n                'cols' => $keys['cols'],\n                'fields' => $cols\n              ];\n            }\n            break;\n          case 'tables':\n            $tmp = $this->language->getTables($item);\n            break;\n          case 'databases':\n            $tmp = $this->language->getDatabases();\n            break;\n        }\n        if ( !\\is_array($tmp) ){\n          $st = \"Error while creating the cache for the table $item in mode $mode\";\n          $this->log($st);\n          if (defined('BBN_IS_DEV') && BBN_IS_DEV){\n            die(var_dump($st));\n          }\n        }\n        if ( $tmp ){\n          $this->cacheSet($cache_name, '', $tmp, $this->cache_renewal);\n        }\n      }\n      if ( $tmp ){\n        $this->cache[$cache_name] = $tmp;\n      }\n    }\n    return $this->cache[$cache_name] ?? null;\n  }",
                        "startLine": 293,
                        "doc": {
                            "description": "Return the table's structure's array, either from the cache or from _modelize().",
                            "params": {
                                "$item": {
                                    "type": "",
                                    "description": ""
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$force": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "array|null"
                        },
                        "endLine": 337,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "item",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "columns",
                                "default_name": ""
                            },
                            {
                                "name": "force",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "_remove_conditions_value": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function(array $where, array &$values = [])\n  {\n    if ( isset($where['conditions']) ){\n      foreach ( $where['conditions'] as &$f ){\n        ksort($f);\n        if ( isset($f['logic'], $f['conditions']) && \\is_array($f['conditions']) ){\n          $tmp = $this->_remove_conditions_value($f, $values);\n          $f = $tmp['hashed'];\n        }\n        else if ( array_key_exists('value', $f) ){\n          $values[] = $f['value'];\n          unset($f['value']);\n        }\n      }\n    }\n    return [\n      'hashed' => $where,\n      'values' => $values\n    ];\n  }",
                        "startLine": 344,
                        "doc": {
                            "description": "",
                            "params": {
                                "$where": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$values": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 363,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "where",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "values",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "_add_query": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function($hash, $statement, $kind, $placeholders, $options)\n  {\n    $this->queries[$hash] = [\n      'sql' => $statement,\n      'kind' => $kind,\n      'write' => \\in_array($kind, self::$write_kinds, true),\n      'structure' => \\in_array($kind, self::$structure_kinds, true),\n      'placeholders' => $placeholders,\n      'options' => $options,\n      'num' => 0,\n      'exe_time' => 0,\n      'first' => microtime(true),\n      'last' => 0,\n      'prepared' => false\n    ];\n    \/\/ Removing queries from global object when there are more than max_queries\n    while ( \\count($this->queries) > $this->max_queries ){\n      $max = 0;\n      $index = null;\n      foreach ( $this->queries as $k => $v ){\n        if ( \\is_array($v) && ($v['last'] > $max) ){\n          $max = $v['last'];\n          $index = $k;\n        }\n      }\n      if ( null !== $index ){\n        unset($this->queries[$index]);\n      }\n    }\n  }",
                        "startLine": 374,
                        "doc": {
                            "description": "Adds the specs of a query to the $queries object.",
                            "params": {
                                "$hash": {
                                    "type": "string",
                                    "description": "The hash of the statement."
                                },
                                "$statement": {
                                    "type": "string",
                                    "description": "The SQL full statement."
                                },
                                "$kind": {
                                    "type": "string",
                                    "description": "The type of statement."
                                },
                                "$placeholders": {
                                    "type": "int",
                                    "description": "The number of placeholders."
                                },
                                "$options": {
                                    "type": "array",
                                    "description": "The driver options."
                                }
                            },
                            "return": ""
                        },
                        "endLine": 403,
                        "isUserDefined": true,
                        "numberOfParameters": 5,
                        "numberOfRequiredParameters": 5,
                        "arguments": [
                            {
                                "name": "hash",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "statement",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "kind",
                                "position": 2,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "placeholders",
                                "position": 3,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "options",
                                "position": 4,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_make_hash": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function()\n  {\n    $args = \\func_get_args();\n    if ( (\\count($args) === 1) && \\is_array($args[0]) ){\n      $args = $args[0];\n    }\n    $st = '';\n    foreach ( $args as $a ){\n      $st .= \\is_array($a) ? serialize($a) : '--'.$a.'--';\n    }\n    return $this->hash_contour.md5($st).$this->hash_contour;\n  }",
                        "startLine": 411,
                        "doc": {
                            "description": "Makes a string that will be the id of the request.",
                            "params": [],
                            "return": "string"
                        },
                        "endLine": 422,
                        "isUserDefined": true,
                        "returns": [
                            "string"
                        ]
                    },
                    "_trigger": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function(array $cfg)\n  {\n    if ( $this->triggers_disabled ){\n      if ( $cfg['moment'] === 'after' ){\n        return $cfg;\n      }\n      $cfg['run'] = 1;\n      $cfg['trig'] = 1;\n      return $cfg;\n    }\n    if ( !isset($cfg['trig']) ){\n      $cfg['trig'] = 1;\n    }\n    if ( !isset($cfg['run']) ){\n      $cfg['run'] = 1;\n    }\n    if ( !empty($cfg['tables']) && !empty($this->triggers[$cfg['kind']][$cfg['moment']]) ){\n\n      $table = $this->tfn(\\is_array($cfg['tables']) ? current($cfg['tables']) : $cfg['tables']);\n      \/\/ Specific to a table\n      if ( isset($this->triggers[$cfg['kind']][$cfg['moment']][$table]) ){\n        foreach ( $this->triggers[$cfg['kind']][$cfg['moment']][$table] as $i => $f ){\n          if ( $f && \\is_callable($f) ){\n            if ( !($tmp = $f($cfg)) ){\n              $cfg['run'] = false;\n              $cfg['trig'] = false;\n            }\n            else{\n              $cfg = $tmp;\n            }\n          }\n        }\n        \/\/echo bbn\\X::makeTree($trig);\n        \/\/echo X::makeTree($cfg);\n      }\n    }\n    return $cfg;\n  }",
                        "startLine": 430,
                        "doc": {
                            "description": "Launches a function before or after",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 467,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_add_kind": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function(array $args, $kind = 'SELECT')\n  {\n    $kind = strtoupper($kind);\n    if ( !isset($args[0]) ){\n      return null;\n    }\n    if ( !\\is_array($args[0]) ) {\n      array_unshift($args, $kind);\n    }\n    else {\n      $args[0]['kind'] = $kind;\n    }\n    return $args;\n  }",
                        "startLine": 474,
                        "doc": {
                            "description": "",
                            "params": {
                                "$args": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$kind": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 487,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "args",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "kind",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "SELECT",
                                "default_name": ""
                            }
                        ]
                    },
                    "_add_primary": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function(array &$cfg)\n  {\n    \/\/ Inserting a row without primary when primary is needed and no auto-increment\n    if (\n      !empty($cfg['primary']) &&\n      empty($cfg['auto_increment']) &&\n      (($idx = array_search($cfg['primary'], $cfg['fields'], true)) > -1) &&\n      (count($cfg['values']) === (count($cfg['fields']) - 1))\n    ){\n      $val = false;\n      switch ( $cfg['primary_type'] ){\n        case 'int':\n          $val = random_int(\n            ceil(10 ** ($cfg['primary_length'] > 3 ? $cfg['primary_length'] - 3 : 1) \/ 2),\n            ceil(10 ** ($cfg['primary_length'] > 3 ? $cfg['primary_length'] : 1) \/ 2)\n          );\n          break;\n        case 'binary':\n          if ( $cfg['primary_length'] === 16 ){\n            $val = $this->getUid();\n          }\n          break;\n      }\n      if ( $val ){\n        array_splice($cfg['values'], $idx, 0, $val);\n        $this->setLastInsertId($val);\n      }\n    }\n  }",
                        "startLine": 493,
                        "doc": {
                            "description": "Adds a random primary value when it is absent from the set and present in the fields",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": ""
                        },
                        "endLine": 521,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "void"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_exec": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function()\n  {\n    if (\n      $this->check() &&\n      ($cfg = $this->processCfg(\\func_get_args())) &&\n      !empty($cfg['sql'])\n    ){\n      \/\/die(var_dump('0exec cfg', $cfg, \\func_get_args()));\n      $cfg['moment'] = 'before';\n      $cfg['trig'] = null;\n      if ( $cfg['kind'] === 'INSERT' ){\n        \/\/ Add generated primary when inserting a row without primary when primary is needed and no auto-increment\n        $this->_add_primary($cfg);\n      }\n      if ( count($cfg['values']) !== count($cfg['values_desc']) ){\n        X::dump($cfg);\n        die('Database error in values count');\n      }\n      \/\/ Launching the trigger BEFORE execution\n      if ( $cfg = $this->_trigger($cfg) ){\n        if ( !empty($cfg['run']) ){\n          \/\/$this->log([\"TRIGGER OK\", $cfg['run'], $cfg['fields']]);\n          \/\/ Executing the query\n          \/** @todo Put hash back! *\/\n          \/\/$cfg['run'] = $this->query($cfg['sql'], $cfg['hash'], $cfg['values'] ?? []);\n          \/** @var \\bbn\\Db\\Query *\/\n          $cfg['run'] = $this->query($cfg['sql'], $this->getQueryValues($cfg));\n        }\n        if ( !empty($cfg['force']) ){\n          $cfg['trig'] = 1;\n        }\n        else if ( null === $cfg['trig'] ){\n          $cfg['trig'] = (bool)$cfg['run'];\n        }\n        if ( $cfg['trig'] ){\n          $cfg['moment'] = 'after';\n          $cfg = $this->_trigger($cfg);\n        }\n        $this->last_cfg = $cfg;\n        if ( !\\in_array($cfg['kind'], self::$write_kinds, true) ){\n          return $cfg['run'] ?? null;\n        }\n        if ( isset($cfg['value']) ){\n          return $cfg['value'];\n        }\n        if ( isset($cfg['run']) ){\n          return $cfg['run'];\n        }\n      }\n    }\n    return null;\n  }",
                        "startLine": 579,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": ""
                        },
                        "endLine": 630,
                        "isUserDefined": true
                    },
                    "_treat_arguments": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function($cfg)\n  {\n    while ( isset($cfg[0]) && \\is_array($cfg[0]) ){\n      $cfg = $cfg[0];\n    }\n    if (\n      \\is_array($cfg) &&\n      array_key_exists('tables', $cfg) &&\n      !empty($cfg['bbn_db_treated']) &&\n      ($cfg['bbn_db_treated'] === true)\n    ){\n      return $cfg;\n    }\n    $res = [\n      'kind' => 'SELECT',\n      'fields' => [],\n      'where' => [],\n      'order' => [],\n      'limit' => 0,\n      'start' => 0,\n      'group_by' => [],\n      'having' => [],\n    ];\n    if ( X::isAssoc($cfg) ){\n      if ( isset($cfg['table']) && !isset($cfg['tables']) ){\n        $cfg['tables'] = $cfg['table'];\n        unset($cfg['table']);\n      }\n      $res = array_merge($res, $cfg);\n    }\n    else if ( count($cfg) > 1 ){\n      $res['kind'] = strtoupper($cfg[0]);\n      $res['tables'] = $cfg[1];\n      if ( isset($cfg[2]) ){\n        $res['fields'] = $cfg[2];\n      }\n      if ( isset($cfg[3]) ){\n        $res['where'] = $cfg[3];\n      }\n      if ( isset($cfg[4]) ){\n        $res['order'] = \\is_string($cfg[4]) ? [$cfg[4] => 'ASC'] : $cfg[4];\n      }\n      if ( isset($cfg[5]) && Str::isInteger($cfg[5]) ) {\n        $res['limit'] = $cfg[5];\n      }\n      if ( isset($cfg[6]) && !empty($res['limit']) ){\n        $res['start'] = $cfg[6];\n      }\n    }\n    $res = array_merge($res, [\n      'aliases' => [],\n      'values' => [],\n      'filters' => [],\n      'join' => [],\n      'hashed_join' => [],\n      'hashed_where' => [],\n      'hashed_having' => [],\n      'bbn_db_treated' => true\n    ]);\n    $res['kind'] = strtoupper($res['kind']);\n    $res['write'] = \\in_array($res['kind'], self::$write_kinds, true);\n    $res['ignore'] = $res['write'] && !empty($res['ignore']);\n    $res['count'] = !$res['write'] && !empty($res['count']);\n    if ( !\\is_array($res['tables']) ){\n      $res['tables'] = \\is_string($res['tables']) ? [$res['tables']] : [];\n    }\n    if ( !empty($res['tables']) ){\n      foreach ( $res['tables'] as &$t ){\n        if (!is_string($t)){die(var_dump($t));}\n        $t = $this->tfn($t);\n      }\n      unset($t);\n    }\n    else{\n      throw new Error(_('No table given'));\n      return [];\n    }\n    if ( !empty($res['fields']) ){\n      if ( \\is_string($res['fields']) ){\n        $res['fields'] = [$res['fields']];\n      }\n    }\n    else if ( !empty($res['columns']) ){\n      $res['fields'] = (array)$res['columns'];\n    }\n    if (!empty($res['fields'])) {\n      if ($res['kind'] === 'SELECT') {\n        foreach ($res['fields'] as $k => $col) {\n          if (\\is_string($k)) {\n            $res['aliases'][$col] = $k;\n          }\n        }\n      }\n      else if (\n        (($res['kind'] === 'INSERT') || ($res['kind'] === 'UPDATE'))\n        && \\is_string(array_keys($res['fields'])[0])\n      ) {\n        $res['values'] = array_values($res['fields']);\n        $res['fields'] = array_keys($res['fields']);\n      }\n    }\n    if ( !\\is_array($res['group_by']) ){\n      $res['group_by'] = empty($res['group_by']) ? [] : [$res['group_by']];\n    }\n    if ( !\\is_array($res['where']) ){\n      $res['where'] = [];\n    }\n    if ( !\\is_array($res['order']) ){\n      $res['order'] = \\is_string($res['order']) ? [$res['order'] => 'ASC'] : [];\n    }\n    if ( !str::isInteger($res['limit']) ){\n      unset($res['limit']);\n    }\n    if ( !str::isInteger($res['start']) ){\n      unset($res['start']);\n    }\n    if ( !empty($cfg['join']) ){\n      foreach ( $cfg['join'] as $k => $join ){\n        if ( \\is_array($join) ){\n          if ( \\is_string($k) ){\n            if ( empty($join['table']) ){\n              $join['table'] = $k;\n            }\n            else if ( empty($join['alias']) ){\n              $join['alias'] = $k;\n            }\n          }\n          if ( isset($join['table'], $join['on']) && ($tmp = $this->treatConditions($join['on'], false)) ){\n            if ( !isset($join['type']) ){\n              $join['type'] = 'right';\n            }\n            $res['join'][] = array_merge($join, ['on' => $tmp]);\n          }\n        }\n      }\n    }\n    if ( $tmp = $this->treatConditions($res['where'], false) ){\n      $res['filters'] = $tmp;\n    }\n    if ( !empty($res['having']) && ($tmp = $this->treatConditions($res['having'], false)) ){\n      $res['having'] = $tmp;\n    }\n    if (!empty($res['group_by'])) {\n      $this->_adapt_filters($res);\n    }\n    if (!empty($res['join'])) {\n      $new_join = [];\n      foreach ( $res['join'] as $k => $join ){\n        if ($tmp = $this->treatConditions($join['on'])){\n          $new_item = $join;\n          $new_item['on'] = $tmp['where'];\n          $res['hashed_join'][] = $tmp['hashed'];\n          if ( !empty($tmp['values']) ){\n            foreach ( $tmp['values'] as $v ){\n              $res['values'][] = $v;\n            }\n          }\n          $new_join[] = $new_item;\n        }\n      }\n      $res['join'] = $new_join;\n    }\n    if ( !empty($res['filters']) && ($tmp = $this->treatConditions($res['filters'])) ){\n      $res['filters'] = $tmp['where'];\n      $res['hashed_where'] = $tmp['hashed'];\n      if ( \\is_array($tmp) && isset($tmp['values']) ){\n        foreach ( $tmp['values'] as $v ){\n          $res['values'][] = $v;\n        }\n      }\n    }\n    if ( !empty($res['having']) && ($tmp = $this->treatConditions($res['having'])) ){\n      $res['having'] = $tmp['where'];\n      $res['hashed_having'] = $tmp['hashed'];\n      foreach ( $tmp['values'] as $v ){\n        $res['values'][] = $v;\n      }\n    }\n    $res['hash'] = $cfg['hash'] ?? $this->_make_hash(\n      $res['kind'],\n      $res['ignore'],\n      $res['count'],\n      $res['tables'],\n      $res['fields'],\n      $res['hashed_join'],\n      $res['hashed_where'],\n      $res['hashed_having'],\n      $res['group_by'],\n      $res['order'],\n      $res['limit'] ?? 0,\n      $res['start'] ?? 0\n    );\n    return $res;\n  }",
                        "startLine": 657,
                        "doc": {
                            "description": "Normalizes arguments by making it a uniform array.\n<ul><h3>The array will have the following indexes:<\/h3>\n<li>fields<\/li>\n<li>where<\/li>\n<li>filters<\/li>\n<li>order<\/li>\n<li>limit<\/li>\n<li>start<\/li>\n<li>join<\/li>\n<li>group_by<\/li>\n<li>having<\/li>\n<li>values<\/li>\n<li>hashed_join<\/li>\n<li>hashed_where<\/li>\n<li>hashed_having<\/li>\n<li>php<\/li>\n<li>done<\/li>\n<\/ul>",
                            "params": {
                                "$cfg": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 850,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_adapt_filters": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function(&$cfg)\n  {\n    if (!empty($cfg['filters'])) {\n      [$cfg['filters'], $having] = $this->_adapt_bit($cfg, $cfg['filters']);\n      if (empty($cfg['having']['conditions'])) {\n        $cfg['having'] = $having;\n      }\n      else {\n        $cfg['having'] = [\n          'logic' => 'AND',\n          'conditions' => [\n            $cfg['having'],\n            $having\n          ]\n        ];\n      }\n    }\n  }",
                        "startLine": 852,
                        "endLine": 869,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "void"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_adapt_bit": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function($cfg, $where, $having = [])\n  {\n    if (x::hasProps($where, ['logic', 'conditions'])) {\n      $new = [\n        'logic' => $where['logic'],\n        'conditions' => []\n      ];\n      foreach ($where['conditions'] as $c) {\n        $is_aggregate = false;\n        if (isset($c['field'])) {\n          $is_aggregate = $this->isAggregateFunction($c['field']);\n          if (!$is_aggregate && isset($cfg['fields'][$c['field']])) {\n            $is_aggregate = $this->isAggregateFunction($cfg['fields'][$c['field']]);\n          }\n        }\n        if (!$is_aggregate && isset($c['exp'])) {\n          $is_aggregate = $this->isAggregateFunction($c['exp']);\n          if (!$is_aggregate && isset($cfg['fields'][$c['exp']])) {\n            $is_aggregate = $this->isAggregateFunction($cfg['fields'][$c['exp']]);\n          }\n        }\n        if (!$is_aggregate) {\n          if (x::hasProps($c, ['conditions', 'logic'])) {\n            $tmp = $this->_adapt_bit($cfg, $c, $having);\n            if (!empty($tmp[0]['conditions'])) {\n              $new['conditions'][] = $c;\n            }\n            if (!empty($tmp[1]['conditions'])) {\n              $having = $tmp[1];\n            }\n          }\n          else {\n            $new['conditions'][] = $c;\n          }\n        }\n        else {\n          if (!isset($having['conditions'])) {\n            $having = [\n              'logic' => $where['logic'],\n              'conditions' => []\n            ];\n          }\n          if (isset($cfg['aliases'][$c['field']])) {\n            $c['field'] = $cfg['aliases'][$c['field']];\n          }\n          else if (isset($c['exp'], $cfg['aliases'][$c['exp']])) {\n            $c['exp'] = $cfg['aliases'][$c['exp']];\n          }\n          $having['conditions'][] = $c;\n        }\n      }\n      return [$new, $having];\n    }\n  }",
                        "startLine": 871,
                        "endLine": 924,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "having",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "_set_limit_1": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function(array $args)\n  {\n    if (\n      \\is_array($args[0]) &&\n      (isset($args[0]['tables']) || isset($args[0]['table']))\n    ){\n      $args[0]['limit'] = 1;\n    }\n    else {\n      $start = $args[4] ?? 0;\n      $num = count($args);\n      \/\/ Adding fields\n      if ($num === 1) {\n        $args[] = [];\n        $num++;\n      }\n      \/\/ Adding where\n      if ($num === 2) {\n        $args[] = [];\n        $num++;\n      }\n      \/\/ Adding order\n      if ($num === 3) {\n        $args[] = [];\n        $num++;\n      }\n      if ($num === 4) {\n        $args[] = 1;\n        $num++;\n      }\n      $args = array_slice($args, 0, 5);\n      $args[] = $start;\n    }\n    return $args;\n  }",
                        "startLine": 930,
                        "doc": {
                            "description": "",
                            "params": {
                                "$args": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 964,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "args",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_set_start": {
                        "file": "bbn\\Db",
                        "private": true,
                        "code": "function(array $args, $start)\n  {\n    if (\n      \\is_array($args[0]) &&\n      (isset($args[0]['tables']) || isset($args[0]['table']))\n    ){\n      $args[0]['start'] = $start;\n    }\n    else {\n      if ( isset($args[5]) ){\n        $args[5] = $start;\n      }\n      else{\n        while ( count($args) < 6 ){\n          switch ( count($args) ){\n            case 1:\n            case 2:\n            case 3:\n              $args[] = [];\n              break;\n            case 4:\n              $args[] = 1;\n              break;\n            case 5:\n              $args[] = $start;\n              break;\n          }\n        }\n      }\n    }\n    return $args;\n  }",
                        "startLine": 970,
                        "doc": {
                            "description": "",
                            "params": {
                                "$args": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 1001,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "args",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "protected": {
                    "cache_init": {
                        "file": "bbn\\Db",
                        "protected": true,
                        "code": "function()\n  {\n      $this->cache_engine = bbn\\Cache::getEngine();\n      $this->_cache_prefix = bbn\\Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
                        "startLine": 19,
                        "endLine": 24,
                        "isUserDefined": true
                    },
                    "_cache_name": {
                        "file": "bbn\\Db",
                        "protected": true,
                        "code": "function($uid, $method = '')\n  {\n    $path = \\bbn\\Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.'\/'.$path.'\/'.(empty($method) ? '' : '\/'.(string)$method);\n  }",
                        "startLine": 26,
                        "endLine": 30,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "uid",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "method",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "cache_delete_all": {
                        "file": "bbn\\Db",
                        "protected": true,
                        "code": "function()\n  {\n    return $this;\n  }",
                        "startLine": 32,
                        "endLine": 35,
                        "isUserDefined": true
                    },
                    "cache_delete": {
                        "file": "bbn\\Db",
                        "protected": true,
                        "code": "function($uid, $method = '')\n  {\n    return $this;\n  }",
                        "startLine": 37,
                        "endLine": 40,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "uid",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "method",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "cache_get": {
                        "file": "bbn\\Db",
                        "protected": true,
                        "code": "function($uid, $method = '')\n  {\n  }",
                        "startLine": 42,
                        "endLine": 44,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "uid",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "method",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "cache_set": {
                        "file": "bbn\\Db",
                        "protected": true,
                        "code": "function($uid, $method = '', $data = NULL, $ttl = 0)\n  {\n    return $this;\n  }",
                        "startLine": 46,
                        "endLine": 49,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "uid",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "method",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "ttl",
                                "position": 3,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "cache_has": {
                        "file": "bbn\\Db",
                        "protected": true,
                        "code": "function($uid, $method = '')\n  {\n  }",
                        "startLine": 51,
                        "endLine": 53,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "uid",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "method",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "retriever_init": {
                        "file": "bbn\\Db",
                        "static": true,
                        "protected": true,
                        "code": "function($instance)\n  {\n    self::$retriever_instance = $instance;\n  }",
                        "startLine": 17,
                        "endLine": 20,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "instance",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "public": {
                    "is_aggregate_function": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($f)\n  {\n    $cls = '\\\\bbn\\\\db\\\\languages\\\\'.$this->engine;\n    return $cls::isAggregateFunction($f);\n  }",
                        "startLine": 237,
                        "doc": {
                            "description": "Returns true if the column name is an aggregate function",
                            "params": {
                                "$f": {
                                    "type": "string",
                                    "description": "The string to check"
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 241,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "f",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "__toString": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return \"Connection {$this->engine} to {$this->host}\";\n  }",
                        "startLine": 243,
                        "endLine": 246,
                        "isUserDefined": true
                    },
                    "get_log_line": {
                        "file": "bbn\\Db",
                        "static": true,
                        "public": true,
                        "code": "function($text = '')\n  {\n      $text = ' '.$text.' ';\n    }\n    $tot = \\strlen(self::$line) - \\strlen($text);\n    $char = \\substr(self::$line, 0, 1);\n    return \\str_repeat($char, floor($tot\/2)).$text.\\str_repeat($char, ceil($tot\/2));\n  }",
                        "startLine": 248,
                        "endLine": 255,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "text",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_query_values": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    $res = [];\n    if ( !empty($cfg['values']) ) {\n      foreach ( $cfg['values'] as $i => $v ) {\n        \/\/ Transforming the values if needed\n        if (\n          ($cfg['values_desc'][$i]['type'] === 'binary') &&\n          ($cfg['values_desc'][$i]['maxlength'] === 16) &&\n          Str::isUid($v)\n        ){\n          $res[] = hex2bin($v);\n        }\n        else if (\n          \\is_string($v) && (\n            (\n              ($cfg['values_desc'][$i]['type'] === 'date') &&\n              (\\strlen($v) < 10)\n            ) || (\n              ($cfg['values_desc'][$i]['type'] === 'time') &&\n              (\\strlen($v) < 8)\n            ) || (\n              ($cfg['values_desc'][$i]['type'] === 'datetime') &&\n              (\\strlen($v) < 19)\n            )\n          )\n        ){\n          $res[] = $v.'%';\n        }\n        else if ( !empty($cfg['values_desc'][$i]['operator']) ){\n          switch ( $cfg['values_desc'][$i]['operator'] ){\n            case 'contains':\n            case 'doesnotcontain':\n              $res[] = '%'.$v.'%';\n              break;\n            case 'startswith':\n              $res[] = $v.'%';\n              break;\n            case 'endswith':\n              $res[] = '%'.$v;\n              break;\n            default:\n              $res[] = $v;\n          }\n        }\n        else{\n          $res[] = $v;\n        }\n      }\n    }\n    return $res;\n  }",
                        "startLine": 523,
                        "endLine": 574,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "__construct": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg = [])\n  {\n    if ( \\defined('BBN_DB_ENGINE') && !isset($cfg['engine']) ){\n      $cfg['engine'] = BBN_DB_ENGINE;\n    }\n    if ( isset($cfg['engine']) ){\n      $cls = '\\\\bbn\\\\db\\\\languages\\\\'.$cfg['engine'];\n      if ( !class_exists($cls) ){\n        die(\"Sorry the engine class $cfg[engine] does not exist\");\n      }\n      self::retrieverInit($this);\n      $this->cacheInit();\n      $this->language = new $cls($this);\n      if ( isset($cfg['on_error']) ){\n        $this->on_error = $cfg['on_error'];\n      }\n      if ($cfg = $this->getConnection($cfg)) {\n        $this->qte = $this->language->qte;\n        try{\n          parent::__construct(...($cfg['args'] ?: []));\n          $this->language->postCreation();\n          $this->current = $cfg['db'] ?? null;\n          $this->engine = $cfg['engine'];\n          $this->host = $cfg['host'] ?? '127.0.0.1';\n          $this->username = $cfg['user'] ?? null;\n          $this->hash = $this->_make_hash($cfg['args']);\n          $this->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);\n          if ( !empty($cfg['cache_length']) ){\n            $this->cache_renewal = (int)$cfg['cache_length'];\n          }\n          $this->startFancyStuff();\n        }\n        catch ( \\PDOException $e ){\n          $this->log([\"Impossible to create the connection for $cfg[engine]\/$cfg[db]\", $e]);\n          die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? X::getDump($e) : 'Impossible to create the database connection');\n        }\n      }\n    }\n    if ( !$this->engine ){\n      $this->log(\"Impossible to create the connection for $cfg[engine]\/$cfg[db]\");\n      die('Impossible to create the database connection');\n    }\n  }",
                        "startLine": 1012,
                        "doc": {
                            "description": {
                                "description": "Constructor\n  * ```php\n$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "null|array",
                                        "name": "$cfg",
                                        "description": "Mandatory db_user db_engine db_host db_pass"
                                    }
                                ]
                            },
                            "params": {
                                "$cfg": {
                                    "type": "null|array",
                                    "description": "Mandatory db_user db_engine db_host db_pass"
                                }
                            },
                            "return": "",
                            "example_method": "```php\n$dbtest = new bbn\\Db(['db_user' => 'test','db_engine' => 'mysql','db_host' => 'host','db_pass' => 't6pZDwRdfp4IM']);\n \/\/ (void)\n```"
                        },
                        "endLine": 1054,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "parent": {
                            "name": "__construct",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($dsn, $username, $passwd, $options)\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 4,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "dsn",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "username",
                                    "position": 1,
                                    "type": null,
                                    "required": false,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "passwd",
                                    "position": 2,
                                    "type": null,
                                    "required": false,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "options",
                                    "position": 3,
                                    "type": null,
                                    "required": false,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "get_hash": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->hash;\n  }",
                        "startLine": 1075,
                        "doc": {
                            "description": "Gets the last hash created.",
                            "params": [],
                            "return": "string"
                        },
                        "endLine": 1078,
                        "isUserDefined": true
                    },
                    "replace_table_in_conditions": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $conditions, $old_name, $new_name)\n  {\n    return \\bbn\\X::map(function($a)use($old_name, $new_name){\n      if ( !empty($a['field']) ){\n        $a['field'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['field']);\n      }\n      if ( !empty($a['exp']) ){\n        $a['exp'] = preg_replace(\"\/(\\\\W|^)$old_name([\\\\`\\\\']*\\\\s*)\\\\.\/\", '$1'.$new_name.'$2.', $a['exp']);\n      }\n      return $a;\n    }, $conditions, 'conditions');\n  }",
                        "startLine": 1080,
                        "endLine": 1091,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 3,
                        "arguments": [
                            {
                                "name": "conditions",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "old_name",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "new_name",
                                "position": 2,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "retrieve_query": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($hash)\n  {\n    if ( isset($this->queries[$hash]) ){\n      if ( \\is_string($this->queries[$hash]) ){\n        $hash = $this->queries[$hash];\n      }\n      return $this->queries[$hash];\n    }\n    return null;\n  }",
                        "startLine": 1098,
                        "doc": {
                            "description": "Retrieves a query array based on its hash.",
                            "params": {
                                "$hash": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array|null"
                        },
                        "endLine": 1107,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "hash",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "retrieve_cfg": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($hash)\n  {\n    return $this->cfgs[$hash] ?? null;\n  }",
                        "startLine": 1114,
                        "doc": {
                            "description": "Retrieves a configuration array based on its hash.",
                            "params": {
                                "$hash": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array|null"
                        },
                        "endLine": 1117,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "hash",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "treat_conditions": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $where, $full = true)\n  {\n      $where['conditions'] = $where;\n    }\n    if ( isset($where['conditions']) && \\is_array($where['conditions']) ){\n      if ( !isset($where['logic']) || (strtoupper($where['logic']) !== 'OR') ){\n        $where['logic'] = 'AND';\n      }\n      $res = [\n        'conditions' => [],\n        'logic' => $where['logic']\n      ];\n      foreach ( $where['conditions'] as $key => $f ){\n        $is_array = \\is_array($f);\n        if (\n          $is_array &&\n          array_key_exists('conditions', $f) &&\n          \\is_array($f['conditions'])\n        ){\n          $res['conditions'][] = $this->treatConditions($f, false);\n        }\n        else {\n          if ( \\is_string($key) ){\n            \/\/ 'id_user' => [1, 2] Will do OR\n            if ( !$is_array ) {\n              if ( null === $f ){\n                $f = [\n                  'field' => $key,\n                  'operator' => 'isnull'\n                ];\n              }\n              else{\n                $f = [\n                  'field' => $key,\n                  'operator' => !str::isUid($f) && is_string($f) ? 'LIKE' : '=',\n                  'value' => $f\n                ];\n              }\n            }\n            else if ( isset($f[0]) ){\n              $tmp = [\n                'conditions' => [],\n                'logic' => 'OR'\n              ];\n              foreach ( $f as $v ){\n                if ( null === $v ){\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => 'isnull'\n                  ];\n                }\n                else{\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => !str::isUid($f) && is_string($f) ? 'LIKE' : '=',\n                    'value' => $v\n                  ];\n                }\n              }\n              $res['conditions'][] = $tmp;\n            }\n          }\n          else if ( $is_array && !x::isAssoc($f) && count($f) >= 2 ){\n            $tmp = [\n              'field' => $f[0],\n              'operator' => $f[1]\n            ];\n            if ( isset($f[3]) ){\n              $tmp['exp'] = $f[3];\n            }\n            elseif ( array_key_exists(2, $f) ){\n              if ( is_array($f[2]) ){\n                $tmp = [\n                  'conditions' => [],\n                  'logic' => 'AND'\n                ];\n                foreach ( $f[2] as $v ){\n                  if ( null === $v ){\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => 'isnotnull'\n                    ];\n                  }\n                  else{\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => $f[1],\n                      'value' => $v\n                    ];\n                  }\n                }\n                $res['conditions'][] = $tmp;\n              }\n              elseif ( $f[2] === null ){\n                $tmp['operator'] = $f[2] === '!=' ? 'isnotnull' : 'isnull';\n              }\n              else{\n                $tmp['value'] = $f[2];\n              }\n            }\n            $f = $tmp;\n          }\n          if ( isset($f['field']) ){\n            if ( !isset($f['operator']) ){\n              $f['operator'] = 'eq';\n            }\n            $res['conditions'][] = $f;\n          }\n        }\n      }\n      if ( $full ){\n        $tmp = $this->_remove_conditions_value($res);\n        $res = [\n          'hashed' => $tmp['hashed'],\n          'values' => $tmp['values'],\n          'where' => $res\n        ];\n      }\n      return $res;\n    }\n    return false;\n  }",
                        "startLine": 1124,
                        "doc": {
                            "description": "",
                            "params": {
                                "$where": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$full": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "array|bool"
                        },
                        "endLine": 1245,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "where",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "full",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": true,
                                "default_name": ""
                            }
                        ]
                    },
                    "extract_fields": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg, array $conditions, array &$res = NULL)\n  {\n      $res = [];\n    }\n    if (isset($conditions['conditions'])) {\n      $conditions = $conditions['conditions'];\n    }\n    foreach ($conditions as $c) {\n      if ( isset($c['conditions'])) {\n        $this->extractFields($cfg, $c['conditions'], $res);\n      }\n      else {\n        if (isset($c['field'], $cfg['available_fields'][$c['field']])) {\n          $res[] = $cfg['available_fields'][$c['field']] ?\n            $this->cfn($c['field'], $cfg['available_fields'][$c['field']])\n            : $c['field'];\n        }\n        if (isset($c['exp'])) {\n          $res[] = $cfg['available_fields'][$c['exp']] ?\n            $this->cfn($c['exp'], $cfg['available_fields'][$c['exp']]) \n            : $c['exp'];\n        }\n      }\n    }\n    return $res;\n  }",
                        "startLine": 1247,
                        "endLine": 1272,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "conditions",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "res",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "filter_filters": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg, $field, $operator = NULL)\n  {\n    if ( isset($cfg['filters']) ){\n      $f = function($cond, &$res = []) use (&$f, $field, $operator){\n        foreach ( $cond as $c ){\n          if ( isset($c['conditions']) ){\n            $f($c['conditions'], $res);\n          }\n          else if ( ($c['field'] === $field) && (!$operator || ($operator === $c['operator'])) ){\n            $res[] = $c;\n          }\n        }\n        return $res;\n      };\n      return isset($cfg['filters']['conditions']) ? $f($cfg['filters']['conditions']) : [];\n    }\n    return null;\n  }",
                        "startLine": 1282,
                        "doc": {
                            "description": "Retrieve an array of specific filters among the existing ones.",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$field": {
                                    "type": "",
                                    "description": ""
                                },
                                "$operator": {
                                    "type": "null",
                                    "description": ""
                                }
                            },
                            "return": "array|null"
                        },
                        "endLine": 1299,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "field",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "operator",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_values_desc": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $where, array $cfg, &$others = [])\n  {\n    if ( !empty($where['conditions']) ){\n      foreach ( $where['conditions'] as &$f ){\n        if ( isset($f['logic'], $f['conditions']) && \\is_array($f['conditions']) ){\n          $this->getValuesDesc($f, $cfg, $others);\n        }\n        else if ( array_key_exists('value', $f) ){\n          $desc = [\n            'primary' => false,\n            'type' => null,\n            'maxlength' => null,\n            'operator' => $f['operator'] ?? null\n          ];\n          if ( isset($cfg['models'], $f['field'], $cfg['available_fields'][$f['field']]) ){\n            $t = $cfg['available_fields'][$f['field']];\n            if (\n              isset($cfg['models'], $f['field'], $cfg['tables_full'][$t], $cfg['models'][$cfg['tables_full'][$t]]) &&\n              ($model = $cfg['models'][$cfg['tables_full'][$t]]) &&\n              ($fname = $this->csn($f['field']))\n            ){\n              if ( !empty($model['fields'][$fname]['type']) ){\n                $desc = [\n                  'type' => $model['fields'][$fname]['type'],\n                  'maxlength' => $model['fields'][$fname]['maxlength'] ?? null,\n                  'operator' => $f['operator'] ?? null\n                ];\n              }\n              \/\/ Fixing filters using alias\n              else if (\n                isset($cfg['fields'][$f['field']]) &&\n                ($fname = $this->csn($cfg['fields'][$f['field']])) &&\n                !empty($model['fields'][$fname]['type'])\n              ){\n                $desc = [\n                  'type' => $model[$fname]['type'],\n                  'maxlength' => $model[$fname]['maxlength'] ?? null,\n                  'operator' => $f['operator'] ?? null\n                ];\n              }\n              if (\n                !empty($desc['type']) &&\n                isset($model['keys']['PRIMARY']) &&\n                (count($model['keys']['PRIMARY']['columns']) === 1) &&\n                ($model['keys']['PRIMARY']['columns'][0] === $fname)\n              ){\n                $desc['primary'] = true;\n              }\n            }\n          }\n          $others[] = $desc;\n        }\n      }\n    }\n    return $others;\n  }",
                        "startLine": 1306,
                        "doc": {
                            "description": "",
                            "params": {
                                "$where": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 1361,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "where",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "cfg",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "others",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "arrange_conditions": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array &$conditions, array $cfg)\n  {\n    if ( !empty($cfg['available_fields']) && isset($conditions['conditions']) ){\n      foreach ( $conditions['conditions'] as &$c ){\n        if ( array_key_exists('conditions', $c) && \\is_array($c['conditions']) ){\n          $this->arrangeConditions($c, $cfg);\n        }\n        else if ( isset($c['field']) && empty($cfg['available_fields'][$c['field']]) && !$this->isColFullName($c['field']) ){\n          foreach ( $cfg['tables'] as $t => $o ){\n            if ( isset($cfg['available_fields'][$this->colFullName($c['field'], $t)]) ){\n              $c['field'] = $this->colFullName($c['field'], $t);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }",
                        "startLine": 1363,
                        "endLine": 1380,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "void"
                        ],
                        "arguments": [
                            {
                                "name": "conditions",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "cfg",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "reprocess_cfg": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    unset($cfg['bbn_db_processed']);\n    unset($cfg['bbn_db_treated']);\n    unset($this->cfgs[$cfg['hash']]);\n    $tmp = $this->processCfg($cfg, true);\n    if ( !empty($cfg['values']) && (count($cfg['values']) === count($tmp['values'])) ){\n      $tmp = array_merge($tmp, ['values' => $cfg['values']]);\n    }\n    return $tmp;\n  }",
                        "startLine": 1386,
                        "doc": {
                            "description": "",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array|null"
                        },
                        "endLine": 1396,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "process_cfg": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $args, $force = false)\n  {\n    \/\/ Avoid confusion when\n    while ( \\is_array($args) && isset($args[0]) && \\is_array($args[0]) ){\n      $args = $args[0];\n    }\n    if ( \\is_array($args) && !empty($args['bbn_db_processed']) ){\n      return $args;\n    }\n    if ( empty($args['bbn_db_treated']) ){\n      $args = $this->_treat_arguments($args);\n    }\n    \/\/var_dump(\"UPD0\", $args);\n    if ( isset($args['hash']) ){\n      if ( isset($this->cfgs[$args['hash']]) ){\n        return array_merge($this->cfgs[$args['hash']], [\n          'values' => $args['values'] ?: [],\n          'where' => $args['where'] ?: [],\n          'filters' => $args['filters'] ?: []\n        ]);\n      }\n      \/** @var array $tables_full  Each of the tables' full name. *\/\n      $tables_full = [];\n      $res = array_merge($args, [\n        'tables' => [],\n        'values_desc' => [],\n        'bbn_db_processed' => true,\n        'available_fields' => [],\n        'generate_id' => false\n      ]);\n      $models = [];\n\n      foreach ( $args['tables'] as $key => $tab ){\n        $tfn = $this->tfn($tab);\n\n        \/\/ 2 tables in the same statement can't have the same idx\n        $idx = \\is_string($key) ? $key : $tfn;\n        \/\/ Error if they do\n        if ( isset($tables_full[$idx]) ){\n          $this->error('You cannot use twice the same table with the same alias'.PHP_EOL.x::getDump($args['tables']));\n          return null;\n        }\n        $tables_full[$idx] = $tfn;\n        $res['tables'][$idx] = $tfn;\n        if ( !isset($models[$tfn]) && ($model = $this->modelize($tfn)) ){\n          $models[$tfn] = $model;\n        }\n      }\n      if (\n        (\\count($res['tables']) === 1) &&\n        ($tfn = array_values($res['tables'])[0]) &&\n        isset($models[$tfn]['keys']['PRIMARY']) &&\n        (\\count($models[$tfn]['keys']['PRIMARY']['columns']) === 1) &&\n        ($res['primary'] = $models[$tfn]['keys']['PRIMARY']['columns'][0])\n      ){\n        $p = $models[$tfn]['fields'][$res['primary']];\n        $res['auto_increment'] = isset($p['extra']) && ($p['extra'] === 'auto_increment');\n        $res['primary_length'] = $p['maxlength'];\n        $res['primary_type'] = $p['type'];\n        if (\n          ($res['kind'] === 'INSERT') &&\n          !$res['auto_increment'] &&\n          !\\in_array($this->csn($res['primary']), $res['fields'], true)\n        ){\n          $res['generate_id'] = true;\n          $res['fields'][] = $res['primary'];\n        }\n      }\n      foreach ( $args['join'] as $key => $join ){\n        if ( !empty($join['table']) && !empty($join['on']) ){\n          $tfn = $this->tfn($join['table']);\n          if ( !isset($models[$tfn]) && ($model = $this->modelize($tfn)) ){\n            $models[$tfn] = $model;\n          }\n          $idx = $join['alias'] ?? $tfn;\n          $tables_full[$idx] = $tfn;\n        }\n        else{\n          $this->error('Error! The join array must have on and table defined'.PHP_EOL.x::getDump($join));\n        }\n      }\n      foreach ( $tables_full as $idx => $tfn ){\n        foreach ( $models[$tfn]['fields'] as $col => $cfg ){\n          $res['available_fields'][$this->cfn($col, $idx)] = $idx;\n          $csn = $this->csn($col);\n          if ( !isset($res['available_fields'][$csn]) ){\n            \/*\n            $res['available_fields'][$csn] = false;\n          }\n          else{\n            *\/\n            $res['available_fields'][$csn] = $idx;\n          }\n        }\n      }\n      foreach ( $res['fields'] as $idx => &$col ){\n        if (\n          strpos($col, '(') ||\n          strpos($col, '-')  ||\n          strpos($col, \"+\") ||\n          strpos($col, '*')  ||\n          strpos($col, \"\/\") ||\n          \/*\n          strpos($col, '->\"$.')  ||\n          strpos($col, \"->'$.\") ||\n          strpos($col, '->>\"$.')  ||\n          strpos($col, \"->>'$.\") ||\n          *\/\n          \/\/ String as value\n          preg_match('\/^[\\\\\\'\\\"]{1}[^\\\\\\'\\\"]*[\\\\\\'\\\"]{1}$\/', $col)\n        ){\n          $res['available_fields'][$col] = false;\n        }\n        if ( \\is_string($idx) ){\n          if ( !isset($res['available_fields'][$col]) ){\n            \/\/$this->log($res);\n            $this->error(\"Impossible to find the column $col\");\n            $this->error(json_encode($res['available_fields'], JSON_PRETTY_PRINT));\n            return null;\n          }\n          $res['available_fields'][$idx] = $res['available_fields'][$col];\n        }\n      }\n      \/\/ From here the available fields are defined\n      if ( !empty($res['filters']) ){\n        $this->arrangeConditions($res['filters'], $res);\n      }\n      unset($col);\n      $res['models'] = $models;\n      $res['tables_full'] = $tables_full;\n      switch ( $res['kind'] ){\n        case 'SELECT':\n          if ( empty($res['fields']) ){\n            foreach ( array_keys($res['available_fields']) as $f ){\n              if ( $this->isColFullName($f) ){\n                $res['fields'][] = $f;\n              }\n            }\n          }\n          \/\/\\bbn\\X::log($res, 'sql');\n          if ( $res['select_st'] = $this->language->getSelect($res) ){\n            $res['sql'] = $res['select_st'];\n          }\n          break;\n        case 'INSERT':\n          $res = $this->removeVirtual($res);\n          if ( $res['insert_st'] = $this->language->getInsert($res) ){\n            $res['sql'] = $res['insert_st'];\n          }\n          \/\/var_dump($res);\n          break;\n        case 'UPDATE':\n          $res = $this->removeVirtual($res);\n          if ( $res['update_st'] = $this->getUpdate($res) ){\n            $res['sql'] = $res['update_st'];\n          }\n          break;\n        case 'DELETE':\n          if ( $res['delete_st'] = $this->getDelete($res) ){\n            $res['sql'] = $res['delete_st'];\n          }\n          break;\n      }\n      $res['join_st'] = $this->language->getJoin($res);\n      $res['where_st'] = $this->language->getWhere($res);\n      $res['group_st'] = $this->language->getGroupBy($res);\n      $res['having_st'] = $this->language->getHaving($res);\n      $cls = '\\\\bbn\\\\db\\\\languages\\\\'.$this->engine;\n      if (\n        empty($res['count'])\n        && (count($res['fields']) === 1)\n        && ($cls::isAggregateFunction(reset($res['fields'])))\n      ) {\n        $res['order_st'] = '';\n        $res['limit_st'] = '';\n      }\n      else {\n        $res['order_st'] = $res['count'] ? '' : $this->language->getOrder($res);\n        $res['limit_st'] = $res['count'] ? '' : $this->language->getLimit($res);\n      }\n\n      if (!empty($res['sql'])) {\n        $res['sql'] .= $res['join_st'].$res['where_st'].$res['group_st'];\n        if ($res['count'] && $res['group_by']) {\n          $res['sql'] .= ') AS t '.PHP_EOL;\n        }\n        $res['sql'] .= $res['having_st'].$res['order_st'].$res['limit_st'];\n        $res['statement_hash'] = $this->_make_hash($res['sql']);\n\n        foreach ( $res['join'] as $r ){\n          $this->getValuesDesc($r['on'], $res, $res['values_desc']);\n        }\n        if ( ($res['kind'] === 'INSERT') || ($res['kind'] === 'UPDATE') ){\n          foreach ( $res['fields'] as $name ){\n            $desc = [];\n            if ( isset($res['models'], $res['available_fields'][$name]) ){\n              $t = $res['available_fields'][$name];\n              if (\n                isset($tables_full[$t]) &&\n                ($model = $res['models'][$tables_full[$t]]['fields']) &&\n                ($fname = $this->csn($name)) &&\n                !empty($model[$fname]['type'])\n              ){\n                $desc['type'] = $model[$fname]['type'];\n                $desc['maxlength'] = $model[$fname]['maxlength'] ?? null;\n              }\n            }\n            $res['values_desc'][] = $desc;\n          }\n        }\n        $this->getValuesDesc($res['filters'], $res, $res['values_desc']);\n        $this->getValuesDesc($res['having'], $res, $res['values_desc']);\n        $this->cfgs[$res['hash']] = $res;\n      }\n      return $res;\n    }\n    $this->error('Impossible to process the config (no hash)'.PHP_EOL.print_r($args, true));\n    return null;\n  }",
                        "startLine": 1403,
                        "doc": {
                            "description": "",
                            "params": {
                                "$args": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array|null"
                        },
                        "endLine": 1621,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "args",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "force",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "remove_virtual": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $res)\n  {\n    if ( isset($res['fields']) ){\n      $to_remove = [];\n      foreach ( $res['fields'] as $i => $f ){\n        if (\n          !empty($res['available_fields'][$f]) &&\n          isset($res['models'][$res['available_fields'][$f]]['fields'][$this->csn($f)]) &&\n          $res['models'][$res['available_fields'][$f]]['fields'][$this->csn($f)]['virtual']\n        ){\n          array_unshift($to_remove, $i);\n        }\n      }\n      foreach ($to_remove as $i) {\n        array_splice($res['fields'], $i, 1);\n        array_splice($res['values'], $i, 1);\n      }\n    }\n    return $res;\n  }",
                        "startLine": 1623,
                        "endLine": 1642,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "res",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "error": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($e)\n  {\n    $this->has_error = true;\n    self::hasError();\n    $msg = [\n      self::$line,\n      self::getLogLine('ERROR DB!'),\n      self::$line\n    ];\n    if ( \\is_string($e) ){\n      $msg[] = self::getLogLine('USER MESSAGE');\n      $msg[] = $e;\n    }\n    else if ( method_exists($e, 'getMessage') ){\n      $msg[] = self::getLogLine('DB MESSAGE');\n      $msg[] = $e->getMessage();\n    }\n    $this->last_error = end($msg);\n    $msg[] = self::getLogLine('QUERY');\n    $msg[] = $this->last();\n    if ( $this->last_real_params['values'] ){\n      $msg[] =  self::getLogLine('VALUES');\n      foreach ( $this->last_real_params['values'] as $v ){\n        if ( $v === null ){\n          $msg[] = 'NULL';\n        }\n        else if ( \\is_bool($v) ){\n          $msg[] = $v ? 'TRUE' : 'FALSE';\n        }\n        else if ( \\is_string($v) ){\n          $msg[] = Str::isBuid($v) ? bin2hex($v) : Str::cut($v, 30);\n        }\n        else{\n          $msg[] = $v;\n        }\n      }\n    }\n    $msg[] =  self::getLogLine('BACKTRACE');\n    $dbt = array_reverse(debug_backtrace());\n    array_walk($dbt, function($a, $i) use(&$msg){\n      $msg[] = str_repeat(' ', $i).($i ? '->' : '').\"{$a['function']}  (\".basename(dirname($a['file'])).'\/'.basename($a['file']).\":{$a['line']})\";\n    });\n    $this->log(implode(PHP_EOL, $msg));\n    if ( $this->on_error === self::E_DIE ){\n      die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? '<pre>'.PHP_EOL.implode(PHP_EOL, $msg).PHP_EOL.'<\/pre>' : 'Database error');\n    }\n  }",
                        "startLine": 1650,
                        "doc": {
                            "description": "Set an error and acts appropriately based oon the error mode",
                            "params": {
                                "$e": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 1696,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "void"
                        ],
                        "arguments": [
                            {
                                "name": "e",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "check": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->current !== null ){\n      \/\/ if $on_error is set to E_CONTINUE returns true\n      if ( $this->on_error === self::E_CONTINUE ){\n        return true;\n      }\n      \/\/ If any connection has an error with mode E_STOP_ALL\n      if ( self::$has_error_all && ($this->on_error !== self::E_STOP_ALL) ){\n        return false;\n      }\n      \/\/ If this connection has an error with mode E_STOP\n      if ( $this->has_error && ($this->on_error !== self::E_STOP) ){\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }",
                        "startLine": 1707,
                        "doc": {
                            "description": {
                                "description": "Checks if the database is ready to process a query.\n  * ```php\nbbn\\X::dump($db->check());\n\/\/ (bool)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "bool",
                            "example_method": "```php\nbbn\\X::dump($db->check());\n\/\/ (bool)\n```"
                        },
                        "endLine": 1725,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "log": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($st)\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      X::log($a, 'db');\n    }\n    return $this;\n  }",
                        "startLine": 1736,
                        "doc": {
                            "description": {
                                "description": "Writes in data\/logs\/db.log.\n  * ```php\n$db->$db->log('test');\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "db"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": ""
                                }
                            },
                            "return": "db",
                            "example_method": "```php\n$db->$db->log('test');\n```"
                        },
                        "endLine": 1743,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "set_error_mode": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($mode)\n  {\n    $this->on_error = $mode;\n    return $this;\n  }",
                        "startLine": 1756,
                        "doc": {
                            "description": {
                                "description": "Sets the error mode.\n  * ```php\n$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (void)\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$mode",
                                        "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "db"
                                    }
                                ]
                            },
                            "params": {
                                "$mode": {
                                    "type": "string",
                                    "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                                }
                            },
                            "return": "db",
                            "example_method": "```php\n$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (void)\n```"
                        },
                        "endLine": 1760,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "mode",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_error_mode": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->on_error;\n  }",
                        "startLine": 1771,
                        "doc": {
                            "description": {
                                "description": "Gets the error mode.\n  * ```php\nbbn\\X::dump($db->getErrorMode());\n\/\/ (string) stop_all\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "string",
                            "example_method": "```php\nbbn\\X::dump($db->getErrorMode());\n\/\/ (string) stop_all\n```"
                        },
                        "endLine": 1774,
                        "isUserDefined": true,
                        "returns": [
                            "string"
                        ]
                    },
                    "clear_cache": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($item, $mode)\n  {\n    $cache_name = $this->_cache_name($item, $mode);\n    if ( $this->cacheHas($cache_name) ){\n      $this->cacheDelete($cache_name);\n    }\n    return $this;\n  }",
                        "startLine": 1788,
                        "doc": {
                            "description": {
                                "description": "Deletes a specific item from the cache.\n  * ```php\nbbn\\X::dump($db->clearCache('db_example','tables'));\n\/\/ (db)\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$item",
                                        "description": "'db_name' or 'table_name'"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$mode",
                                        "description": "'columns','tables' or'databases'"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "self"
                                    }
                                ]
                            },
                            "params": {
                                "$item": {
                                    "type": "string",
                                    "description": "'db_name' or 'table_name'"
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": "'columns','tables' or'databases'"
                                }
                            },
                            "return": "self",
                            "example_method": "```php\nbbn\\X::dump($db->clearCache('db_example','tables'));\n\/\/ (db)\n```"
                        },
                        "endLine": 1795,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "item",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "clear_all_cache": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->cacheDeleteAll();\n    return $this;\n  }",
                        "startLine": 1807,
                        "doc": {
                            "description": {
                                "description": "Clears the cache.\n  * ```php\nbbn\\X::dump($db->clearAllCache());\n\/\/ (db)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "self"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "self",
                            "example_method": "```php\nbbn\\X::dump($db->clearAllCache());\n\/\/ (db)\n```"
                        },
                        "endLine": 1811,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "stop_fancy_stuff": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->setAttribute(\\PDO::ATTR_STATEMENT_CLASS, [\\PDOStatement::class]);\n    $this->fancy = false;\n    return $this;\n  }",
                        "startLine": 1823,
                        "doc": {
                            "description": {
                                "description": "Stops fancy stuff.\n  * ```php\n $db->stopFancyStuff();\n\/\/ (void)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "db"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "db",
                            "example_method": "```php\n $db->stopFancyStuff();\n\/\/ (void)\n```"
                        },
                        "endLine": 1828,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "start_fancy_stuff": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->setAttribute(\\PDO::ATTR_STATEMENT_CLASS, [db\\query::class, [$this]]);\n    $this->fancy = 1;\n    return $this;\n  }",
                        "startLine": 1839,
                        "doc": {
                            "description": {
                                "description": "Starts fancy stuff.\n  * ```php\n$db->startFancyStuff();\n\/\/ (void)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "db"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "db",
                            "example_method": "```php\n$db->startFancyStuff();\n\/\/ (void)\n```"
                        },
                        "endLine": 1844,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "clear": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->queries = [];\n    return $this;\n  }",
                        "startLine": 1856,
                        "doc": {
                            "description": {
                                "description": "Clear.\n  * ```php\n$db->clear()\n\/\/ (void)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "db"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "db",
                            "example_method": "```php\n$db->clear()\n\/\/ (void)\n```"
                        },
                        "endLine": 1860,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "add_statement": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($statement, $params)\n  {\n    $this->last_real_query = $statement;\n    $this->last_real_params = $params;\n    if ( $this->last_enabled ){\n      $this->last_query = $statement;\n      $this->last_params = $params;\n      \/\/$this->log($statement);\n      if ( $this->debug ){\n        \/\/$this->debug_queries[] = $statement;\n      }\n    }\n    return $this;\n  }",
                        "startLine": 1873,
                        "doc": {
                            "description": {
                                "description": "Return an object with all the properties of the statement and where it is carried out.\n  * ```php\n\\bbn\\X::dump($db->addStatement('SELECT name FROM table_users'));\n\/\/ (db)\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$statement"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "db"
                                    }
                                ]
                            },
                            "params": {
                                "$statement": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "db",
                            "example_method": "```php\n\\bbn\\X::dump($db->addStatement('SELECT name FROM table_users'));\n\/\/ (db)\n```"
                        },
                        "endLine": 1886,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "statement",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "params",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "enable_trigger": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->triggers_disabled = false;\n    return $this;\n  }",
                        "startLine": 1901,
                        "doc": {
                            "description": "Enable the triggers' functions",
                            "params": [],
                            "return": "db"
                        },
                        "endLine": 1905,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "disable_trigger": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->triggers_disabled = true;\n    return $this;\n  }",
                        "startLine": 1912,
                        "doc": {
                            "description": "Disable the triggers' functions",
                            "params": [],
                            "return": "db"
                        },
                        "endLine": 1916,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "is_trigger_enabled": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return !$this->triggers_disabled;\n  }",
                        "startLine": 1918,
                        "endLine": 1921,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "is_trigger_disabled": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->triggers_disabled;\n  }",
                        "startLine": 1923,
                        "endLine": 1926,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "set_trigger": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($function, $kind = NULL, $moment = NULL, $tables = '*')\n  {\n    $kinds = ['SELECT', 'INSERT', 'UPDATE', 'DELETE'];\n    $moments = ['before', 'after'];\n    if ( empty($kind) ){\n      $kind = $kinds;\n    }\n    else if ( !\\is_array($kind) ){\n      $kind = (array)strtoupper($kind);\n    }\n    else{\n      $kind = array_map('strtoupper', $kind);\n    }\n    if ( empty($moment) ){\n      $moment = $moments;\n    }\n    else {\n      $moment = !\\is_array($moment) ? (array)strtolower($moment) : array_map('strtolower', $moment);\n    }\n    foreach ( $kind as $k ){\n      if ( \\in_array($k, $kinds, true) ){\n        foreach ( $moment as $m ){\n          if ( array_key_exists($m, $this->triggers[$k]) && \\in_array($m, $moments, true) ){\n            if ( $tables === '*' ){\n              $tables = $this->getTables();\n            }\n            else if ( Str::checkName($tables) ){\n              $tables = [$tables];\n            }\n            if ( \\is_array($tables) ){\n              foreach ( $tables as $table ){\n                $t = $this->tfn($table);\n                if ( !isset($this->triggers[$k][$m][$t]) ){\n                  $this->triggers[$k][$m][$t] = [];\n                }\n                $this->triggers[$k][$m][$t][] = $function;\n              }\n            }\n          }\n        }\n      }\n    }\n    return $this;\n  }",
                        "startLine": 1937,
                        "doc": {
                            "description": "Apply a function each time the methods $kind are used",
                            "params": {
                                "$function": {
                                    "type": "callable",
                                    "description": ""
                                },
                                "$kind": {
                                    "type": "array|string",
                                    "description": "select|insert|update|delete"
                                },
                                "$moment": {
                                    "type": "array|string",
                                    "description": "before|after"
                                },
                                "$tables": {
                                    "type": "null|string|array",
                                    "description": "database's table(s) name(s)"
                                }
                            },
                            "return": "db"
                        },
                        "endLine": 1980,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "function",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "kind",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "moment",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "tables",
                                "position": 3,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "*",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_triggers": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->triggers;\n  }",
                        "startLine": 1985,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "array"
                        },
                        "endLine": 1988,
                        "isUserDefined": true,
                        "returns": [
                            "array"
                        ]
                    },
                    "get_fields_list": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($tables)\n  {\n    $res = [];\n    if ( !\\is_array($tables) ){\n      $tables = [$tables];\n    }\n    foreach ( $tables as $t ){\n      if ( !($model = $this->getColumns($t)) ){\n        $this->error('Impossible to find the table '.$t);\n        die('Impossible to find the table '.$t);\n      }\n      foreach ( array_keys($model) as $f ){\n        $res[] = $this->cfn($f, $t);\n      }\n    }\n    return $res;\n  }",
                        "startLine": 2002,
                        "doc": {
                            "description": "",
                            "params": {
                                "$tables": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 2018,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "tables",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_foreign_keys": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($col, $table, $db = NULL)\n  {\n    if ( !$db ){\n      $db = $this->current;\n    }\n    $res = [];\n    $model = $this->modelize();\n    foreach ( $model as $tn => $m ){\n      foreach ( $m['keys'] as $k => $t ){\n        if ( ($t['ref_table'] === $table) &&\n          ($t['ref_column'] === $col) &&\n          ($t['ref_db'] === $db) &&\n          (\\count($t['columns']) === 1)\n        ){\n          if ( !isset($res[$tn]) ){\n            $res[$tn] = [$t['columns'][0]];\n          }\n          else{\n            $res[$tn][] = $t['columns'][0];\n          }\n        }\n      }\n    }\n    return $res;\n  }",
                        "startLine": 2033,
                        "doc": {
                            "description": {
                                "description": "Return an array with tables and fields related to the searched foreign key.\n  * ```php\nbbn\\X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$col",
                                        "description": "The column's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$db",
                                        "description": "The database name if different from the current one"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array with tables and fields related to the searched foreign key"
                                    }
                                ]
                            },
                            "params": {
                                "$col": {
                                    "type": "string",
                                    "description": "The column's name"
                                },
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                },
                                "$db": {
                                    "type": "string",
                                    "description": "The database name if different from the current one"
                                }
                            },
                            "return": "array with tables and fields related to the searched foreign key",
                            "example_method": "```php\nbbn\\X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```"
                        },
                        "endLine": 2057,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "col",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "table",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "db",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "has_id_increment": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table)\n  {\n    return ($model = $this->modelize($table)) &&\n      isset($model['keys']['PRIMARY']) &&\n      (\\count($model['keys']['PRIMARY']['columns']) === 1) &&\n      ($model['fields'][$model['keys']['PRIMARY']['columns'][0]]['extra'] === 'auto_increment');\n  }",
                        "startLine": 2071,
                        "doc": {
                            "description": {
                                "description": "Return true if in the table there are fields with auto-increment.\nWorking only on mysql.\n  * ```php\n\\bbn\\X::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                }
                            },
                            "return": "bool",
                            "example_method": "Working only on mysql.\n\n```php\n\\bbn\\X::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1\n```"
                        },
                        "endLine": 2077,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "modelize": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table = NULL, $force = false)\n  {\n    $r = [];\n    $tables = false;\n    if ( empty($table) || ($table === '*') ){\n      $tables = $this->getTables($this->current);\n    }\n    else if ( \\is_string($table) ){\n      $tables = [$table];\n    }\n    else if ( \\is_array($table) ){\n      $tables = $table;\n    }\n    if ( \\is_array($tables) ){\n      foreach ( $tables as $t ){\n        if ( $full = $this->tfn($t) ){\n          $r[$full] = $this->_get_cache($full, 'columns', $force);\n        }\n      }\n      if ( \\count($r) === 1 ){\n        return end($r);\n      }\n      return $r;\n    }\n    return null;\n  }",
                        "startLine": 2091,
                        "doc": {
                            "description": {
                                "description": "Return the table's structure as an indexed array.\n  * ```php\n\\bbn\\X::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 ) [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] => [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "null|array|string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$force",
                                        "description": "If set to true will force the modelization to reperform even if the cache exists"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "null|array|string",
                                    "description": "The table's name"
                                },
                                "$force": {
                                    "type": "bool",
                                    "description": "If set to true will force the modelization to reperform even if the cache exists"
                                }
                            },
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n```"
                        },
                        "endLine": 2116,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "force",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "fmodelize": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table = '', $force = false)\n  {\n    if ( $res = $this->modelize(...\\func_get_args()) ){\n      foreach ( $res['fields'] as $n => $f ){\n        $res['fields'][$n]['name'] = $n;\n        $res['fields'][$n]['keys'] = [];\n        if ( isset($res['cols'][$n]) ){\n          foreach ( $res['cols'][$n] as $key ){\n            $res['fields'][$n]['keys'][$key] = $res['keys'][$key];\n          }\n        }\n      }\n      return $res['fields'];\n    }\n    return null;\n  }",
                        "startLine": 2123,
                        "doc": {
                            "description": "",
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$force": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "null|array"
                        },
                        "endLine": 2138,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "force",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "find_references": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($column, $db = '')\n  {\n    $changed = false;\n    if ( $db && ($db !== $this->current) ){\n      $changed = $this->current;\n      $this->change($db);\n    }\n    $column = $this->cfn($column);\n    $bits = explode('.', $column);\n    if ( \\count($bits) === 2 ){\n      array_unshift($bits, $this->current);\n    }\n    if ( \\count($bits) !== 3 ){\n\n      return false;\n    }\n    $refs = [];\n    $schema = $this->modelize();\n    $test = function($key) use($bits){\n      return ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    };\n    foreach ( $schema as $table => $cfg ){\n      foreach ( $cfg['keys'] as $k ){\n        if ( $test($k) ){\n          $refs[] = $table.'.'.$k['columns'][0];\n        }\n      }\n    }\n    if ( $changed ){\n      $this->change($changed);\n    }\n    return $refs;\n  }",
                        "startLine": 2148,
                        "doc": {
                            "description": "find_references",
                            "params": {
                                "$column": {
                                    "type": "",
                                    "description": ""
                                },
                                "$db": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array|bool"
                        },
                        "endLine": 2180,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "column",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "db",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "find_relations": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($column, $db = '')\n  {\n    $changed = false;\n    if ( $db && ($db !== $this->current) ){\n      $changed = $this->current;\n      $this->change($db);\n    }\n    $column = $this->cfn($column);\n    $bits = explode('.', $column);\n    if ( \\count($bits) === 2 ){\n      array_unshift($bits, $db ?: $this->current);\n    }\n    if ( \\count($bits) !== 3 ){\n      return null;\n    }\n    $table = $bits[1];\n    $refs = [];\n    $schema = $this->modelize();\n    $test = function($key) use($bits){\n      return ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    };\n    foreach ( $schema as $tf => $cfg ){\n      $t = $this->tsn($tf);\n      if ( $t !== $table ){\n        foreach ( $cfg['keys'] as $k ){\n          if ( $test($k) ){\n            foreach ( $cfg['keys'] as $k2 ){\n              \/\/ Is not the same table\n              if ( !$test($k2) &&\n                \/\/ Has a reference\n                !empty($k2['ref_column']) &&\n                \/\/ and refers to a single column\n                (\\count($k['columns']) === 1) &&\n                \/\/ A unique reference\n                (\\count($k2['columns']) === 1) &&\n                \/\/ To a table with a primary\n                isset($schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']]) &&\n                \/\/ which is a sole column\n                (\\count($schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']]) === 1) &&\n                \/\/ We retrieve the key name\n                ($key_name = $schema[$this->tfn($k2['ref_table'])]['cols'][$k2['ref_column']][0]) &&\n                \/\/ which is unique\n                !empty($schema[$this->tfn($k2['ref_table'])]['keys'][$key_name]['unique'])\n              ){\n                if ( !isset($refs[$t]) ){\n                  $refs[$t] = ['column' => $k['columns'][0], 'refs' => []];\n                }\n                $refs[$t]['refs'][$k2['columns'][0]] = $k2['ref_table'].'.'.$k2['ref_column'];\n              }\n            }\n          }\n        }\n      }\n    }\n    if ( $changed ){\n      $this->change($changed);\n    }\n    return $refs;\n  }",
                        "startLine": 2189,
                        "doc": {
                            "description": "find_relations",
                            "params": {
                                "$column": {
                                    "type": "",
                                    "description": ""
                                },
                                "$db": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array|bool"
                        },
                        "endLine": 2247,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "column",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "db",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_primary": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table)\n  {\n    if ( ($keys = $this->getKeys($table)) && isset($keys['keys']['PRIMARY']) ){\n      return $keys['keys']['PRIMARY']['columns'];\n    }\n    return [];\n  }",
                        "startLine": 2260,
                        "doc": {
                            "description": {
                                "description": "Return primary keys of a table as a numeric array.\n  * ```php\n\\bbn\\X::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```"
                        },
                        "endLine": 2266,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_unique_primary": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table)\n  {\n    if ( ($keys = $this->getKeys($table)) &&\n      isset($keys['keys']['PRIMARY']) &&\n      (\\count($keys['keys']['PRIMARY']['columns']) === 1) ){\n      return $keys['keys']['PRIMARY']['columns'][0];\n    }\n    return null;\n  }",
                        "startLine": 2279,
                        "doc": {
                            "description": {
                                "description": "Return the unique primary key of the given table.\n  * ```php\n\\bbn\\X::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|string"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                }
                            },
                            "return": "null|string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id\n```"
                        },
                        "endLine": 2287,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_unique_keys": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table)\n  {\n    $fields = [[]];\n    if ( $ks = $this->getKeys($table) ){\n      foreach ( $ks['keys'] as $k ){\n        if ( $k['unique'] ){\n          return $k['columns'];\n        }\n      }\n    }\n    return [];\n  }",
                        "startLine": 2300,
                        "doc": {
                            "description": {
                                "description": "Return the unique keys of a table as a numeric array.\n  * ```php\n\\bbn\\X::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```"
                        },
                        "endLine": 2311,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_value": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($value, $esc = '\\'')\n  {\n    return str_replace('%', '\\\\%', $esc === '\"' ?\n      Str::escapeDquotes($value) :\n      Str::escapeSquotes($value));\n  }",
                        "startLine": 2334,
                        "doc": {
                            "description": {
                                "description": "Return a string with quotes and percent escaped.\n  * ```php\nbbn\\X::dump($db->escapeValue(\"My father's job is interesting\");\n\/\/ (string) My father\\'s job is interesting\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$value",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$esc"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$value": {
                                    "type": "string",
                                    "description": "The string to escape."
                                },
                                "$esc": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "string",
                            "example_method": "```php\nbbn\\X::dump($db->escapeValue(\"My father's job is interesting\");\n\/\/ (string) My  father\\'s  job  is  interesting\n```"
                        },
                        "endLine": 2339,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "value",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "esc",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "'",
                                "default_name": ""
                            }
                        ]
                    },
                    "set_last_insert_id": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($id = '')\n  {\n    if ( $id === '' ){\n      if ( $this->id_just_inserted ){\n        $id = $this->id_just_inserted;\n        $this->id_just_inserted = null;\n      }\n      else{\n        $id = $this->lastInsertId();\n        if ( \\is_string($id) && Str::isInteger($id) ){\n          $id = (int)$id;\n        }\n      }\n    }\n    else{\n      $this->id_just_inserted = $id;\n    }\n    $this->last_insert_id = $id;\n    return $this;\n  }",
                        "startLine": 2352,
                        "doc": {
                            "description": "Changes the value of last_insert_id (used by history).",
                            "params": {
                                "$id": {
                                    "type": "mixed",
                                    "description": "The last inserted id"
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 2371,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "id",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "parse_query": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($statement)\n  {\n    if ( $this->parser === null ){\n      $this->parser = new \\PHPSQLParser\\PHPSQLParser();\n    }\n    $done = false;\n    try {\n      $r = $this->parser->parse($statement);\n      $done = 1;\n    }\n    catch ( \\Exception $e ){\n      $this->log('Error while parsing the query '.$statement);\n    }\n    if ($done) {\n      if (!$r || !count($r) ){\n        $this->log('Impossible to parse the query '.$statement);\n        return null;\n      }\n      if ( isset($r['BRACKET']) && (\\count($r) === 1) ){\n        $this->log('Bracket in the query '.$statement);\n        return null;\n      }\n      return $r;\n    }\n    return null;\n  }",
                        "startLine": 2379,
                        "doc": {
                            "description": "Parses a SQL query and return an array.",
                            "params": {
                                "$statement": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "null|array"
                        },
                        "endLine": 2404,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "statement",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "last": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->last_query;\n  }",
                        "startLine": 2416,
                        "doc": {
                            "description": {
                                "description": "Return the last query for this connection.\n  * ```php\n\\bbn\\X::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```"
                        },
                        "endLine": 2419,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "get_last_cfg": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->last_cfg;\n  }",
                        "startLine": 2431,
                        "doc": {
                            "description": {
                                "description": "Return the last config for this connection.\n  * ```php\n\\bbn\\X::dump($db->getLastCfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getLastCfg());\n\/\/ (array) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```"
                        },
                        "endLine": 2434,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "last_id": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->last_insert_id ){\n      return Str::isBuid($this->last_insert_id) ? bin2hex($this->last_insert_id) : $this->last_insert_id;\n    }\n    return false;\n  }",
                        "startLine": 2446,
                        "doc": {
                            "description": {
                                "description": "Return the last inserted ID.\n  * ```php\n\\bbn\\X::dump($db->lastId());\n\/\/ (int) 26\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "mixed"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "mixed",
                            "example_method": "```php\n\\bbn\\X::dump($db->lastId());\n\/\/ (int) 26\n```"
                        },
                        "endLine": 2452,
                        "isUserDefined": true
                    },
                    "flush": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $num = \\count($this->queries);\n    $this->queries = [];\n    return $num;\n  }",
                        "startLine": 2459,
                        "doc": {
                            "description": "Deletes all the queries recorded and returns their (ex) number.",
                            "params": [],
                            "return": "int"
                        },
                        "endLine": 2464,
                        "isUserDefined": true,
                        "returns": [
                            "int"
                        ]
                    },
                    "raw_query": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return parent::query(...\\func_get_args());\n  }",
                        "startLine": 2475,
                        "doc": {
                            "description": {
                                "description": "Executes the original PDO query function\n  * ```php\n\\bbn\\X::dump($db->rawQuery());\n\/\/ (bool)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "bool|\\PDOStatement"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "bool|\\PDOStatement",
                            "example_method": "```php\n\\bbn\\X::dump($db->rawQuery());\n\/\/ (bool)\n```"
                        },
                        "endLine": 2478,
                        "isUserDefined": true
                    },
                    "new_id": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $min = 1)\n  {\n    if ( \\count($tab['keys']['PRIMARY']['columns']) !== 1 ){\n      die(\"Error! Unique numeric primary key doesn't exist\");\n    }\n    if (\n      ($id_field = $tab['keys']['PRIMARY']['columns'][0]) &&\n      ($maxlength = $tab['fields'][$id_field]['maxlength'] )&&\n      ($maxlength > 1)\n    ){\n      $max = (10 ** $maxlength) - 1;\n      if ( $max >= mt_getrandmax() ){\n        $max = mt_getrandmax();\n      }\n      if ( ($max > $min) && ($table = $this->tfn($table, true)) ){\n        $i = 0;\n        do {\n          $id = random_int($min, $max);\n          \/** @todo *\/\n          \/*\n          if ( strpos($tab['fields'][$id_field]['type'], 'char') !== false ){\n            $id = substr(md5('bbn'.$id), 0, random_int(1, 10 ** $maxlength));\n          }\n          *\/\n          $i++;\n        }\n        while ( ($i < 100) && $this->select($table, [$id_field], [$id_field => $id]) );\n        return $id;\n      }\n    }\n    return null;\n  }",
                        "startLine": 2493,
                        "doc": {
                            "description": {
                                "description": "Generate a new casual id based on the max number of characters of id's column structure in the given table\n  * ```php\n\\bbn\\X::dump($db->newId('table_users', 18));\n\/\/ (int) 69991701\n```",
                                "tags": [
                                    {
                                        "tag": "todo",
                                        "text": "Either get rid of th efunction or include the UID types"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "null|string",
                                        "name": "$table",
                                        "description": "The table's name."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$min"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "mixed"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "null|string",
                                    "description": "The table's name."
                                },
                                "$min": {
                                    "type": "int",
                                    "description": ""
                                }
                            },
                            "return": "mixed",
                            "example_method": "```php\n\\bbn\\X::dump($db->newId('table_users', 18));\n\/\/ (int) 69991701\n```"
                        },
                        "endLine": 2524,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "min",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 1,
                                "default_name": ""
                            }
                        ]
                    },
                    "rselect_random": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $fields = [], array $where = [])\n  {\n    if ( $this->check() && ($num = $this->count($table, $where)) ){\n      $args = $this->_add_kind($this->_set_start($this->_set_limit_1(\\func_get_args()), random_int(0, $num - 1)));\n      if ( $r = $this->_exec(...$args) ){\n        return $r->getRow();\n      }\n    }\n    return null;\n  }",
                        "startLine": 2526,
                        "endLine": 2535,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "select_random": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $fields = [], array $where = [])\n  {\n    if ( $this->check() && ($num = $this->count($table, $where)) ){\n      $args = $this->_add_kind($this->_set_start($this->_set_limit_1(\\func_get_args()), random_int(0, $num - 1)));\n      if ( $r = $this->_exec(...$args) ){\n        return $r->getObj();\n      }\n    }\n    return null;\n  }",
                        "startLine": 2537,
                        "endLine": 2546,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "stdClass",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "random_value": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($col, $table)\n  {\n    if ( ($tab = $this->modelize($table)) && isset($tab['fields'][$col]) ){\n      foreach ( $tab['keys'] as $key => $cfg ){\n        if (\n          $cfg['unique'] &&\n          !empty($cfg['ref_column']) &&\n          (\\count($cfg['columns']) === 1) &&\n          ($col === $cfg['columns'][0])\n        ){\n          return ($num = $this->count($cfg['ref_column'])) ? $this->selectOne([\n            'tables' [$cfg['ref_table']],\n            'fields' => [$cfg['ref_column']],\n            'start' => random_int(0, $num - 1)\n          ]) : null;\n        }\n      }\n      switch ( $tab['fields'][$col]['type'] ){\n        case 'int':\n          if ( ($tab['fields'][$col]['maxlength'] === 1) && !$tab['fields'][$col]['signed'] ){\n            $val = microtime(true) % 2 === 0 ? 1 : 0;\n          }\n          else {\n            $max = 10 ** $tab['fields'][$col]['maxlength'] - 1;\n            if ( $max > mt_getrandmax() ){\n              $max = mt_getrandmax();\n            }\n            if ( $tab['fields'][$col]['signed'] ){\n              $max \/= 2;\n            }\n            $min = $tab['fields'][$col]['signed'] ? -$max : 0;\n            $val = random_int($min, $max);\n          }\n          break;\n        case 'float':\n        case 'double':\n        case 'decimal':\n          break;\n        case 'varchar':\n          break;\n        case 'text':\n          break;\n        case 'date':\n          break;\n        case 'datetime':\n          break;\n        case 'timestamp':\n          break;\n        case 'time':\n          break;\n        case 'year':\n          break;\n        case 'blob':\n          break;\n        case 'binary':\n          break;\n        case 'varbinary':\n          break;\n        case 'enum':\n          break;\n      }\n    }\n    return $val;\n  }",
                        "startLine": 2556,
                        "doc": {
                            "description": "Returns a random value fitting the requested column's type",
                            "params": {
                                "$col": {
                                    "type": "",
                                    "description": ""
                                },
                                "$table": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 2619,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "col",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "table",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "count_queries": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return \\count($this->queries);\n  }",
                        "startLine": 2624,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "int"
                        },
                        "endLine": 2627,
                        "isUserDefined": true,
                        "returns": [
                            "int"
                        ]
                    },
                    "get_one": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->fetchColumn(0);\n    }\n    return false;\n  }",
                        "startLine": 2649,
                        "doc": {
                            "description": {
                                "description": "Executes the given query with given vars, and extracts the first cell's result.\n  * ```php\n\\bbn\\X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "description": "string query"
                                    },
                                    {
                                        "tag": "param",
                                        "description": "mixed values"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "mixed"
                                    }
                                ]
                            },
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed values"
                                }
                            },
                            "return": "mixed",
                            "example_method": "```php\n\\bbn\\X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```"
                        },
                        "endLine": 2655,
                        "isUserDefined": true
                    },
                    "get_var": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 2670,
                        "doc": {
                            "description": {
                                "description": "Execute the given query with given vars, and extract the first cell's result.\n(similar to {@link get_one()})\n  * ```php\n\\bbn\\X::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "description": "string query"
                                    },
                                    {
                                        "tag": "param",
                                        "description": "mixed values"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "mixed"
                                    }
                                ]
                            },
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed values"
                                }
                            },
                            "return": "mixed",
                            "example_method": "(similar to {@link get_one()})\n\n```php\n\\bbn\\X::dump($db->getVar(\"SELECT telephone FROM table_users WHERE id>?\", 1));\n\/\/ (int) 123554154\n```"
                        },
                        "endLine": 2672,
                        "isUserDefined": true
                    },
                    "get_key_val": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      if ( $rows = $r->getRows() ){\n        return X::indexByFirstVal($rows);\n      }\n      return [];\n    }\n    return null;\n  }",
                        "startLine": 2705,
                        "doc": {
                            "description": {
                                "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\n  * ```php\n\\bbn\\X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n \"John\" => 1,\n \"Michael\" => 1,\n \"Barbara\" => 1\n  ]\n  * \\bbn\\X::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n  \"John\" => [\n   \"surname\" => \"Brown\",\n   \"id\" => 3\n  ],\n  \"Michael\" => [\n   \"surname\" => \"Smith\",\n   \"id\" => 4\n  ]\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "description": "string query"
                                    },
                                    {
                                        "tag": "param",
                                        "description": "mixed values"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed values"
                                }
                            },
                            "return": "null|array",
                            "example_method": "The value will be an array if the request has more than two fields.\n\n```php\n\\bbn\\X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\n\\bbn\\X::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]\n```"
                        },
                        "endLine": 2714,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_col_array": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->getByColumns(...\\func_get_args()) ){\n      return array_values(current($r));\n    }\n    return [];\n  }",
                        "startLine": 2729,
                        "doc": {
                            "description": {
                                "description": "Return an array with the values of single field resulting from the query.\n  * ```php\n\\bbn\\X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "description": "string query"
                                    },
                                    {
                                        "tag": "param",
                                        "description": "mixed values"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed values"
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```"
                        },
                        "endLine": 2735,
                        "isUserDefined": true,
                        "returns": [
                            "array"
                        ]
                    },
                    "select": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    $args = $this->_add_kind($this->_set_limit_1(\\func_get_args()));\n    if ( $r = $this->_exec(...$args) ){\n      if ( !is_object($r) ){\n        $this->log([$args, $this->processCfg($args)]);\n      }\n      else{\n        return $r->getObject();\n      }\n    }\n    return null;\n  }",
                        "startLine": 2764,
                        "doc": {
                            "description": {
                                "description": "Returns the first row resulting from the query as an object.\n  * ```php\n\\bbn\\X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n \"name\": \"John\",\n \"surname\": \"Smith\",\n}\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$fields",
                                        "description": "The fields' name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array | boolean",
                                        "name": "$order",
                                        "description": "The \"order\" condition, default: false"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$start",
                                        "description": "The \"start\" condition, default: 0"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|\\stdClass"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$fields": {
                                    "type": "string|array",
                                    "description": "The fields' name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array | boolean",
                                    "description": "The \"order\" condition, default: false"
                                },
                                "$start": {
                                    "type": "int",
                                    "description": "The \"start\" condition, default: 0"
                                }
                            },
                            "return": "null|\\stdClass",
                            "example_method": "```php\n\\bbn\\X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}\n```"
                        },
                        "endLine": 2776,
                        "isUserDefined": true,
                        "numberOfParameters": 5,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "stdClass",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "select_all": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind(\\func_get_args())) ){\n      return $r->getObjects();\n    }\n    return null;\n  }",
                        "startLine": 2806,
                        "doc": {
                            "description": {
                                "description": "Return table's rows resulting from the query as an array of objects.\n  * ```php\n\\bbn\\X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n  Object stdClass: df {\n   \"id\" => 2,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\",\n   },\n  Object stdClass: df {\n   \"id\" => 3,\n   \"name\" => \"Thomas\",\n   \"surname\" => \"Jones\",\n  }\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$fields",
                                        "description": "The fields' name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array | boolean",
                                        "name": "$order",
                                        "description": "The \"order\" condition, default: false"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$limit",
                                        "description": "The \"limit\" condition, default: 0"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$start",
                                        "description": "The \"start\" condition, default: 0"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$fields": {
                                    "type": "string|array",
                                    "description": "The fields' name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array | boolean",
                                    "description": "The \"order\" condition, default: false"
                                },
                                "$limit": {
                                    "type": "int",
                                    "description": "The \"limit\" condition, default: 0"
                                },
                                "$start": {
                                    "type": "int",
                                    "description": "The \"start\" condition, default: 0"
                                }
                            },
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]\n```"
                        },
                        "endLine": 2812,
                        "isUserDefined": true,
                        "numberOfParameters": 6,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "limit",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 5,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "iselect": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args()))) ){\n      return $r->getIrow();\n    }\n    return null;\n  }",
                        "startLine": 2834,
                        "doc": {
                            "description": {
                                "description": "Return the first row resulting from the query as a numeric array.\n  * ```php\n\\bbn\\X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n   4,\n  \"Jack\",\n   \"Stewart\"\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$fields",
                                        "description": "The fields' name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array | boolean",
                                        "name": "$order",
                                        "description": "The \"order\" condition, default: false"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$start",
                                        "description": "The \"start\" condition, default: 0"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$fields": {
                                    "type": "string|array",
                                    "description": "The fields' name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array | boolean",
                                    "description": "The \"order\" condition, default: false"
                                },
                                "$start": {
                                    "type": "int",
                                    "description": "The \"start\" condition, default: 0"
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]\n```"
                        },
                        "endLine": 2840,
                        "isUserDefined": true,
                        "numberOfParameters": 5,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "iselect_all": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind(\\func_get_args())) ){\n      return $r->getIrows();\n    }\n    return null;\n  }",
                        "startLine": 2870,
                        "doc": {
                            "description": {
                                "description": "Return the searched rows as an array of numeric arrays.\n  * ```php\n\\bbn\\X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n   [\n  2,\n  \"John\",\n  \"Smith\",\n   ],\n   [\n  3,\n  \"Thomas\",\n  \"Jones\",\n   ]\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$fields",
                                        "description": "The fields's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "description": "array | boolean The \"order\" condition, default: false"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$limit",
                                        "description": "The \"limit\" condition, default: 0"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$start",
                                        "description": "The \"start\" condition, default: 0"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$fields": {
                                    "type": "string|array",
                                    "description": "The fields's name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "": {
                                    "type": "",
                                    "description": "array | boolean The \"order\" condition, default: false"
                                },
                                "$limit": {
                                    "type": "int",
                                    "description": "The \"limit\" condition, default: 0"
                                },
                                "$start": {
                                    "type": "int",
                                    "description": "The \"start\" condition, default: 0"
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]\n```"
                        },
                        "endLine": 2876,
                        "isUserDefined": true,
                        "numberOfParameters": 6,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "limit",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 5,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "rselect": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args()))) ){\n      \n      return $r->getRow();\n    }\n    return null;\n  }",
                        "startLine": 2898,
                        "doc": {
                            "description": {
                                "description": "Return the first row resulting from the query as an indexed array.\n  * ```php\n\\bbn\\X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n   \"id\" => 4,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\"\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$fields",
                                        "description": "The fields' name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array|boolean",
                                        "name": "$order",
                                        "description": "The \"order\" condition, default: false"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$start",
                                        "description": "The \"start\" condition, default: 0"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$fields": {
                                    "type": "string|array",
                                    "description": "The fields' name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array|boolean",
                                    "description": "The \"order\" condition, default: false"
                                },
                                "$start": {
                                    "type": "int",
                                    "description": "The \"start\" condition, default: 0"
                                }
                            },
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]\n```"
                        },
                        "endLine": 2905,
                        "isUserDefined": true,
                        "numberOfParameters": 5,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "rselect_all": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind(\\func_get_args())) ){\n      if ( method_exists($r, 'get_rows') ){\n        return $r->getRows();\n      }\n      $this->log('ERROR IN RSELECT_ALL', $r);\n    }\n    return [];\n  }",
                        "startLine": 2935,
                        "doc": {
                            "description": {
                                "description": "Return table's rows as an array of indexed arrays.\n  * ```php\n\\bbn\\X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n   [\n   \"id\" => 2,\n   \"name\" => \"John\",\n   \"surname\" => \"Smith\",\n   ],\n   [\n   \"id\" => 3,\n   \"name\" => \"Thomas\",\n   \"surname\" => \"Jones\",\n   ]\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$fields",
                                        "description": "The fields' name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array | boolean",
                                        "name": "$order",
                                        "description": "condition, default: false"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$limit",
                                        "description": "The \"limit\" condition, default: 0"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$start",
                                        "description": "The \"start\" condition, default: 0"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$fields": {
                                    "type": "string|array",
                                    "description": "The fields' name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array | boolean",
                                    "description": "condition, default: false"
                                },
                                "$limit": {
                                    "type": "int",
                                    "description": "The \"limit\" condition, default: 0"
                                },
                                "$start": {
                                    "type": "int",
                                    "description": "The \"start\" condition, default: 0"
                                }
                            },
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]\n```"
                        },
                        "endLine": 2944,
                        "isUserDefined": true,
                        "numberOfParameters": 6,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "limit",
                                "position": 4,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 5,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "select_one": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $field = NULL, array $where = [], array $order = [], $start = 0)\n  {\n    if ( $r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args()))) ){\n      if ( method_exists($r, 'get_irow') ){\n        return ($a = $r->getIrow()) ? $a[0] : false;\n      }\n      $this->log('ERROR IN SELECT_ONE', $this->getLastCfg(), $r, $this->_add_kind($this->_set_limit_1(\\func_get_args())));\n    }\n    return false;\n  }",
                        "startLine": 2961,
                        "doc": {
                            "description": {
                                "description": "Return a single value\n  * ```php\n\\bbn\\X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$field",
                                        "description": "The field's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array | boolean",
                                        "name": "$order",
                                        "description": "The \"order\" condition, default: false"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$start",
                                        "description": "The \"start\" condition, default: 0"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "mixed"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$field": {
                                    "type": "string",
                                    "description": "The field's name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array | boolean",
                                    "description": "The \"order\" condition, default: false"
                                },
                                "$start": {
                                    "type": "int",
                                    "description": "The \"start\" condition, default: 0"
                                }
                            },
                            "return": "mixed",
                            "example_method": "```php\n\\bbn\\X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```"
                        },
                        "endLine": 2970,
                        "isUserDefined": true,
                        "numberOfParameters": 5,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "field",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "select_union": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $union, array $fields = [], array $where = [], array $order = [], $start = 0)\n  {\n    $cfgs = [];\n    $sql = 'SELECT ';\n    if ( empty($fields) ){\n      $sql .= '* ';\n    }\n    else{\n      foreach ( $fields as $i => $f ){\n        if ( $i ){\n          $sql .= ', ';\n        }\n        $sql .= $this->csn($f, true);\n      }\n    }\n    $sql .= ' FROM (('.PHP_EOL;\n    $vals = [];\n    $i = 0;\n    foreach ( $union as $u ){\n      $cfg = $this->processCfg($this->_add_kind([$u]));\n      if ( $cfg && $cfg['sql'] ){\n        \/** @todo From here needs to analyze the where array to the light of the tables' config *\/\n        if ( !empty($where) ){\n          if ( empty($fields) ){\n            $fields = $cfg['fields'];\n          }\n          foreach ( $fields as $k => $f ){\n            if ( isset($cfg['available_fields'][$f]) ){\n              if ( $cfg['available_fields'][$f] && ($t = $cfg['models'][$cfg['available_fields'][$f]])\n              ){\n                die(var_dump($t['fields'][$cfg['fields'][$f] ?? $this->csn($f)]));\n              }\n            }\n          }\n        }\n        if ( $i ){\n          $sql .= PHP_EOL.') UNION ('.PHP_EOL;\n        }\n        $sql .= $cfg['sql'];\n        foreach ( $cfg['values'] as $v ){\n          $vals[] = $v;\n        }\n        $i++;\n      }\n    }\n    $sql .= PHP_EOL.')) AS t';\n    return $this->getRows($sql, ...$vals);\n    \/\/echo nl2br($sql);\n    return [];\n  }",
                        "startLine": 2972,
                        "endLine": 3021,
                        "isUserDefined": true,
                        "numberOfParameters": 5,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "union",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "count": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $where = [])\n  {\n    $args = \\is_array($table) && (isset($table['tables']) || isset($table['table'])) ? $table : [\n      'tables' => [$table],\n      'where' => $where\n    ];\n    $args['count'] = true;\n    if ( !empty($args['bbn_db_processed']) ){\n      unset($args['bbn_db_processed']);\n    }\n    if ( \\is_object($r = $this->_exec($args)) ){\n      $a = $r->getIrow();\n      return $a ? (int)$a[0] : null;\n    }\n    return null;\n  }",
                        "startLine": 3035,
                        "doc": {
                            "description": {
                                "description": "Return the number of records in the table corresponding to the $where condition (non mandatory).\n  * ```php\n\\bbn\\X::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "int"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                }
                            },
                            "return": "int",
                            "example_method": "```php\n\\bbn\\X::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```"
                        },
                        "endLine": 3050,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "select_all_by_keys": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ( $rows = $this->rselectAll($table, $fields, $where, $order, $limit, $start) ){\n      return X::indexByFirstVal($rows);\n    }\n    return $this->check() ? [] : null;\n  }",
                        "startLine": 3080,
                        "doc": {
                            "description": {
                                "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n  * ```php\n\\bbn\\X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n  \"John\" => [\n   \"surname\" => \"Brown\",\n   \"id\" => 3\n   ],\n  \"Michael\" => [\n   \"surname\" => \"Smith\",\n   \"id\" => 4\n  ]\n ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$fields",
                                        "description": "The fields's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array|boolean",
                                        "name": "$order",
                                        "description": "The \"order\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int $limit The",
                                        "name": "$limit",
                                        "description": "condition, default: 0"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int $start The",
                                        "name": "$limit",
                                        "description": "condition, default: 0"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array|false"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$fields": {
                                    "type": "array",
                                    "description": "The fields's name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array|boolean",
                                    "description": "The \"order\" condition"
                                },
                                "$limit": {
                                    "type": "int $start The",
                                    "description": "condition, default: 0"
                                }
                            },
                            "return": "array|false",
                            "example_method": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n\n```php\n\\bbn\\X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]\n```"
                        },
                        "endLine": 3086,
                        "isUserDefined": true,
                        "numberOfParameters": 6,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fields",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "limit",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 5,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "stat": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $column, array $where = [], array $order = [])\n  {\n      return $this->rselectAll([\n        'tables' => [$table],\n        'fields' => [\n          $column,\n          'num' => 'COUNT(*)'\n        ],\n        'where' => $where,\n        'order' => $order,\n        'group_by' => [$column]\n      ]);\n    }\n    return null;\n  }",
                        "startLine": 3111,
                        "doc": {
                            "description": {
                                "description": "Return an array with the count of values corresponding to the where conditions.\n  * ```php\n\\bbn\\X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n \"num\" => 1,\n \"name\" => \"alan\",\n ], [\n \"num\" => 1,\n \"name\" => \"karen\",\n ],\n]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$column",
                                        "description": "The field's name."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$order",
                                        "description": "The \"order\" condition."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array."
                                },
                                "$column": {
                                    "type": "string",
                                    "description": "The field's name."
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition."
                                },
                                "$order": {
                                    "type": "array",
                                    "description": "The \"order\" condition."
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]\n```"
                        },
                        "endLine": 3125,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "column",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "get_field_values": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $field = NULL, array $where = [], array $order = [])\n  {\n    return $this->getColumnValues($table, $field, $where, $order);\n  }",
                        "startLine": 3141,
                        "doc": {
                            "description": {
                                "description": "Return the unique values of a column of a table as a numeric indexed array.\n  * ```php\n\\bbn\\X::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']], 1, 1));\n\/\/ (array) [\"Smiths\", \"White\"]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$field",
                                        "description": "The field's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$order",
                                        "description": "The \"order\" condition"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array | false"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$field": {
                                    "type": "string",
                                    "description": "The field's name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array",
                                    "description": "The \"order\" condition"
                                }
                            },
                            "return": "array | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->getFieldValues(\"table_users\", \"surname\", [['id', '>', '2']], 1, 1));\n\/\/ (array) [\"Smiths\", \"White\"]\n```"
                        },
                        "endLine": 3144,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "field",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "count_field_values": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $field = NULL, array $where = [], array $order = [])\n  {\n      $args = $table;\n      $field = array_values($table['fields'])[0];\n    }\n    else{\n      $args = [\n        'tables' => [$table],\n        'where' => $where,\n        'order' => $order\n      ];\n    }\n    $args = array_merge($args, [\n      'kind' => 'SELECT',\n      'fields' => [\n        'val' => $field,\n        'num' => 'COUNT(*)'\n      ],\n      'group_by' => [$field]\n    ]);\n    return $this->rselectAll($args);\n  }",
                        "startLine": 3160,
                        "doc": {
                            "description": {
                                "description": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n  * ```php\n\\bbn\\X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "null|string",
                                        "name": "$field",
                                        "description": "The field's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$order",
                                        "description": "The \"order\" condition"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array | false"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$field": {
                                    "type": "null|string",
                                    "description": "The field's name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array",
                                    "description": "The \"order\" condition"
                                }
                            },
                            "return": "array | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```"
                        },
                        "endLine": 3181,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "field",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "get_column_values": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $field = NULL, array $where = [], array $order = [])\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = [];\n      if ( \\is_array($table) && isset($table['fields']) && \\is_array($table['fields']) && !empty($table['fields'][0]) ){\n        array_splice($table['fields'], 0, 1, 'DISTINCT '.(string)$table['fields'][0]);\n      }\n      else if ( \\is_string($table) && \\is_string($field) && (stripos($field, 'DISTINCT') !== 0) ){\n        $field = 'DISTINCT '.$field;\n      }\n      if ( $rows = $this->iselectAll($table, $field, $where, $order) ){\n        foreach ( $rows as $row ){\n          $res[] = $row[0];\n        }\n      }\n    }\n    return $res;\n  }",
                        "startLine": 3203,
                        "doc": {
                            "description": {
                                "description": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n  * ```php\n\\bbn\\X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n  \"Smith\",\n  \"Jones\",\n  \"Williams\",\n  \"Taylor\"\n]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$field",
                                        "description": "The field's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$order",
                                        "description": "The \"order\" condition"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$field": {
                                    "type": "string",
                                    "description": "The field's name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array",
                                    "description": "The \"order\" condition"
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]\n```"
                        },
                        "endLine": 3221,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "field",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "get_values_count": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $field, array $where, $order)\n  {\n    return $this->countFieldValues($table, $field, $where, $order);\n  }",
                        "startLine": 3241,
                        "doc": {
                            "description": {
                                "description": "Return a string with the sql query to count equal values in a field of the table.\n  * ```php\n\\bbn\\X::dump($db->getValuesCount('table_users','name',['surname','=','smith']));\n\/*\n(string)\n SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n  GROUP BY `name`\n  ORDER BY `name`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string|array",
                                        "name": "$table",
                                        "description": "The table's name or a configuration array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$field",
                                        "description": "The field's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The \"where\" condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$order",
                                        "description": "The \"order\" condition"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table's name or a configuration array"
                                },
                                "$field": {
                                    "type": "string",
                                    "description": "The field's name"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition"
                                },
                                "$order": {
                                    "type": "array",
                                    "description": "The \"order\" condition"
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getValuesCount('table_users','name',['surname','=','smith']));\n\/*\n(string)\n  SELECT COUNT(*) AS num, `name` AS val FROM `db_example`.`table_users`\n    GROUP BY `name`\n    ORDER BY `name`\n```"
                        },
                        "endLine": 3244,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 4,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "field",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "order",
                                "position": 3,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "insert": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $values = NULL, $ignore = false)\n  {\n    if ( \\is_array($table) && isset($table['values']) ){\n      $values = $table['values'];\n    }\n    \/\/ Array of arrays\n    if (\n      \\is_array($values) &&\n      count($values) &&\n      !x::isAssoc($values) &&\n      \\is_array($values[0])\n    ){\n      $res = 0;\n\n      foreach ( $values as $v ){\n        $res += $this->insert($table, $v, $ignore);\n      }\n      return $res;\n    }\n\n    $cfg = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'INSERT';\n    return $this->_exec($cfg);\n  }",
                        "startLine": 3283,
                        "doc": {
                            "description": "Inserts row(s) in a table.\n  * <code>\n$db->insert(\"table_users\", [\n  [\"name\" => \"Ted\"],\n  [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n  * <code>\n$db->insert(\"table_users\", [\n  [\"name\" => \"July\"],\n  [\"surname\" => \"O'neill\"]\n ], [\n  [\"name\" => \"Peter\"],\n  [\"surname\" => \"Griffin\"]\n ], [\n  [\"name\" => \"Marge\"],\n  [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table name or the configuration array."
                                },
                                "$values": {
                                    "type": "array",
                                    "description": "The values to insert."
                                },
                                "$ignore": {
                                    "type": "bool",
                                    "description": "If true, controls if the row is already existing and ignores it."
                                }
                            },
                            "return": "int Number affected rows."
                        },
                        "endLine": 3310,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "values",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "ignore",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "insert_update": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $values = NULL)\n  {\n    if ( \\is_array($table) && isset($table['values']) ){\n      $values = $table['values'];\n    }\n    if ( !x::isAssoc($values) ){\n      $res = 0;\n      foreach ( $values as $v ){\n        $res += $this->insertUpdate($table, $v);\n      }\n      return $res;\n    }\n    $keys = $this->getKeys($table);\n    $unique = [];\n    foreach ( $keys['keys'] as $k ){\n      \/\/ Checking each unique key\n      if ( $k['unique'] ){\n        $i = 0;\n        foreach ( $k['columns'] as $c ){\n          if ( isset($values[$c]) ){\n            $unique[$c] = $values[$c];\n            $i++;\n          }\n        }\n        \/\/ Only if the number of known field values matches the number of columns qhich are parts of the unique key\n        if ( ($i === \\count($k['columns'])) && $this->count($table, $unique) ){\n          \/\/ Removing unique matching fields from the values (as it is the where)\n          foreach ( $unique as $f => $v ){\n            unset($values[$f]);\n          }\n          \/\/ For updating\n          return $this->update($table, $values, $unique);\n        }\n      }\n    }\n    \/\/ No need to update, inserting\n    return $this->insert($table, $values);\n  }",
                        "startLine": 3330,
                        "doc": {
                            "description": "If not exist inserts row(s) in a table, else update.\n  * <code>\n$db->insertUpdate(\n \"table_users\",\n [\n  'id' => '12',\n  'name' => 'Frank'\n ]\n);\n<\/code>",
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table name or the configuration array."
                                },
                                "$values": {
                                    "type": "array",
                                    "description": "The values to insert."
                                }
                            },
                            "return": "int The number of rows inserted or updated."
                        },
                        "endLine": 3367,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "values",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "update": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $values = NULL, array $where = NULL, $ignore = false)\n  {\n    $cfg = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'UPDATE';\n    return $this->_exec($cfg);\n  }",
                        "startLine": 3390,
                        "doc": {
                            "description": "Updates row(s) in a table.\n  * <code>\n$db->update(\n \"table_users\",\n [\n  ['name' => 'Frank'],\n  ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table name or the configuration array."
                                },
                                "$values": {
                                    "type": "array",
                                    "description": "The new value(s)."
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition."
                                },
                                "$ignore": {
                                    "type": "boolean",
                                    "description": "If IGNORE should be added to the statement"
                                }
                            },
                            "return": "int The number of rows updated."
                        },
                        "endLine": 3400,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "values",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "ignore",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "update_ignore": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $values = NULL, array $where = NULL)\n  {\n    return $this->update($table, $values, $where, true);\n  }",
                        "startLine": 3422,
                        "doc": {
                            "description": "If exist updates row(s) in a table, else ignore.\n  * <code>\n$db->updateIgnore(\n \"table_users\",\n [\n  ['name' => 'Frank'],\n  ['surname' => 'Red']\n ],\n ['id' => '20']\n);\n<\/code>",
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table name or the configuration array."
                                },
                                "$values": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition."
                                }
                            },
                            "return": "int The number of rows deleted."
                        },
                        "endLine": 3425,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "values",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "delete": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $where = NULL, $ignore = false)\n  {\n    $cfg = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'DELETE';\n    return $this->_exec($cfg);\n  }",
                        "startLine": 3440,
                        "doc": {
                            "description": "Deletes row(s) in a table.\n  * <code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table name or the configuration array."
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition."
                                },
                                "$ignore": {
                                    "type": "bool",
                                    "description": "default: false."
                                }
                            },
                            "return": "int The number of rows deleted."
                        },
                        "endLine": 3449,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "ignore",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "delete_ignore": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $where = NULL)\n  {\n    return $this->delete(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $where, true);\n  }",
                        "startLine": 3466,
                        "doc": {
                            "description": "If exist deletess row(s) in a table, else ignore.\n  * <code>\n$db->deleteIgnore(\n \"table_users\",\n ['id' => '20']\n);\n<\/code>",
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table name or the configuration array."
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The \"where\" condition."
                                }
                            },
                            "return": "int The number of rows deleted."
                        },
                        "endLine": 3469,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "insert_ignore": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $values = NULL)\n  {\n    return $this->insert(\\is_array($table) ? array_merge($table, ['ignore' => true]) : $table, $values, true);\n  }",
                        "startLine": 3489,
                        "doc": {
                            "description": "If not exist inserts row(s) in a table, else ignore.\n  * <code>\n$db->insertIgnore(\n \"table_users\",\n [\n  ['id' => '19', 'name' => 'Frank'],\n  ['id' => '20', 'name' => 'Ted'],\n ]\n);\n<\/code>",
                            "params": {
                                "$table": {
                                    "type": "string|array",
                                    "description": "The table name or the configuration array."
                                },
                                "$values": {
                                    "type": "array",
                                    "description": "The row(s) values."
                                }
                            },
                            "return": "int The number of rows inserted."
                        },
                        "endLine": 3492,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "values",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "truncate": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table)\n  {\n    return $this->delete($table, []);\n  }",
                        "startLine": 3498,
                        "doc": {
                            "description": "",
                            "params": {
                                "$table": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "int|null"
                        },
                        "endLine": 3501,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "fetch": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($query)\n  {\n      return $r->fetch();\n    }\n    return false;\n  }",
                        "startLine": 3526,
                        "doc": {
                            "description": {
                                "description": "Return an indexed array with the first result of the query or false if there are no results.\n  * ```php\n\\bbn\\X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$query"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array | false"
                                    }
                                ]
                            },
                            "params": {
                                "$query": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```"
                        },
                        "endLine": 3531,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "query",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "fetchAll": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($query)\n  {\n      return $r->fetchAll();\n    }\n    return false;\n  }",
                        "startLine": 3562,
                        "doc": {
                            "description": {
                                "description": "Return an array of indexed array with all results of the query or false if there are no results.\n  * ```php\n\\bbn\\X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n  [\n  \"surname\" => \"White\",\n  0 => \"White\",\n  \"name\" => \"Michael\",\n  1 => \"Michael\",\n  \"id\" => 1,\n  2 => 1,\n  ],\n  [\n  \"surname\" => \"Smith\",\n  0 => \"Smith\",\n  \"name\" => \"John\",\n  1 => \"John\",\n  \"id\" => 2,\n  2 => 2,\n  ],\n ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$query"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array | false"
                                    }
                                ]
                            },
                            "params": {
                                "$query": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]\n```"
                        },
                        "endLine": 3567,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "query",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "fetchColumn": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($query, $num = 0)\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->fetchColumn($num);\n    }\n    return false;\n  }",
                        "startLine": 3577,
                        "doc": {
                            "description": "Transposition of the original fetchColumn method, but with the query included. Return an arra or false if no result",
                            "params": {
                                "$query": {
                                    "type": "",
                                    "description": ""
                                },
                                "$num": {
                                    "type": "int",
                                    "description": ""
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 3583,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "query",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "num",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "fetchObject": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($query)\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->fetchObject();\n    }\n    return false;\n  }",
                        "startLine": 3600,
                        "doc": {
                            "description": {
                                "description": "Return an array with stdClass object or false if no result.\n  * ```php\n\\bbn\\X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n    \"id\" => 1,\n    \"name\" => \"John\",\n    \"surname\" => \"Smith\",\n    }\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$query"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool|\\stdClass"
                                    }
                                ]
                            },
                            "params": {
                                "$query": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool|\\stdClass",
                            "example_method": "```php\n\\bbn\\X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }\n```"
                        },
                        "endLine": 3606,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "query",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "query": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($statement)\n  {\n    if ( $this->check() ){\n      $args = \\func_get_args();\n      \/\/ If fancy is false we just use the regular PDO query function\n      if ( !$this->fancy ){\n        return parent::query(...$args);\n      }\n      \/\/ The function can be called directly with func_get_args()\n      while ( (\\count($args) === 1) && \\is_array($args[0]) ){\n        $args = $args[0];\n      }\n      if ( !empty($args[0]) && \\is_string($args[0]) ){\n\n        \/\/ The first argument is the statement\n        $statement = trim(array_shift($args));\n        $hash = $this->_make_hash($statement);\n\n        \/\/ Sending a hash as second argument from helper functions will bind it to the saved statement\n        if (\n          count($args) &&\n          \\is_string($args[0]) &&\n          (strpos($args[0], $this->hash_contour) === 0) &&\n          (\\strlen($args[0]) === (32 + 2*\\strlen($this->hash_contour))) &&\n          (substr($args[0],-\\strlen($this->hash_contour)) === $this->hash_contour)\n        ){\n          $hash_sent = array_shift($args);\n        }\n\n        $driver_options = [];\n        if (\n          count($args) &&\n          \\is_array($args[0])\n        ){\n          \/\/ Case where drivers are arguments\n          if ( !array_key_exists(0, $args[0]) ){\n            $driver_options = array_shift($args);\n          }\n          \/\/ Case where values are in a single argument\n          else if ( \\count($args) === 1 ){\n            $args = $args[0];\n          }\n        }\n\n        \/** @var array $params Will become the property last_params each time a query is executed *\/\n        $params = [\n          'statement' => $statement,\n          'values' => [],\n          'last' => microtime(true)\n        ];\n        $num_values = 0;\n        foreach ( $args as $i => $arg ){\n          if ( !\\is_array($arg) ){\n            $params['values'][] = $arg;\n            $num_values++;\n          }\n          else if ( isset($arg[2]) ){\n            $params['values'][] = $arg[2];\n            $num_values++;\n          }\n        }\n        if ( !isset($this->queries[$hash]) ){\n          \/** @var int $placeholders The number of placeholders in the statement *\/\n          $placeholders = 0;\n          if ( $sequences = $this->parseQuery($statement) ){\n            \/* Or looking for question marks *\/\n            $sequences = array_keys($sequences);\n            preg_match_all('\/(\\?)\/', $statement, $exp);\n            $placeholders = isset($exp[1]) && \\is_array($exp[1]) ? \\count($exp[1]) : 0;\n            while ( $sequences[0] === 'OPTIONS' ){\n              array_shift($sequences);\n            }\n            $params['kind'] = $sequences[0];\n            $params['union'] = isset($sequences['UNION']);\n            $params['write'] = \\in_array($params['kind'], self::$write_kinds, true);\n            $params['structure'] = \\in_array($params['kind'], self::$structure_kinds, true);\n          }\n          else if ( ($this->engine === 'sqlite') && (strpos($statement, 'PRAGMA') === 0) ){\n            $params['kind'] = 'PRAGMA';\n          }\n          else{\n            die(\\defined('BBN_IS_DEV') && BBN_IS_DEV ? \"Impossible to parse the query $statement\" : 'Impossible to parse the query');\n          }\n          \/\/ This will add to the queries array\n          $this->_add_query(\n            $hash,\n            $statement,\n            $params['kind'],\n            $placeholders,\n            $driver_options);\n          if ( !empty($hash_sent) ){\n            $this->queries[$hash_sent] = $hash;\n          }\n        }\n        \/\/ The hash of the hash for retrieving a query based on the helper's config's hash\n        else if ( \\is_string($this->queries[$hash]) ){\n          $hash = $this->queries[$hash];\n        }\n\n        $q =& $this->queries[$hash];\n        \/* If the number of values is inferior to the number of placeholders we fill the values with the last given value *\/\n        if ( !empty($params['values']) && ($num_values < $q['placeholders']) ){\n          $params['values'] = array_merge(\n            $params['values'],\n            array_fill($num_values, $q['placeholders'] - $num_values, end($params['values']))\n          );\n          $num_values = \\count($params['values']);\n        }\n        \/* The number of values must match the number of placeholders to bind *\/\n        if ( $num_values !== $q['placeholders'] ){\n          $this->error('Incorrect arguments count (your values: '.$num_values.', in the statement: '.$q['placeholders'].\"\\n\\n\".$statement.\"\\n\\n\".'start of values'.print_r($params['values'], 1).'Arguments:'.print_r(\\func_get_args(),true));\n          exit;\n        }\n        $q['num']++;\n        $q['last'] = microtime(true);\n        if ( $q['exe_time'] === 0 ){\n          $time = $q['last'];\n        }\n        \/\/ That will always contains the parameters of the last query done\n\n        \/\/ Adds to $debug_queries if in debug mode and defines $last_query\n        $this->addStatement($q['sql'], $params);\n        \/\/ If the statement is a structure modifier we need to clear the cache\n        if ( $q['structure'] ){\n          foreach ( $this->queries as $k => $v ){\n            if ( $k !== $hash ){\n              unset($this->queries[$k]);\n            }\n          }\n          \/** @todo Clear the cache *\/\n        }\n        try{\n          \/\/ This is a writing statement, it will execute the statement and return the number of affected rows\n          if ( $q['write'] ){\n            \/\/ A prepared query already exists for the writing\n            \/** @var db\\query *\/\n            if ( $q['prepared'] ){\n              $r = $q['prepared']->init($params['values'])->execute();\n            }\n            \/\/ If there are no values we can assume the statement doesn't need to be prepared and is just executed\n            else if ( $num_values === 0 ){\n              \/\/ Native PDO function which returns the number of affected rows\n              $r = $this->exec($q['sql']);\n            }\n            \/\/ Preparing the query\n            else{\n              \/\/ Native PDO function which will use Db\\query as base class\n              \/** @var db\\query *\/\n              $q['prepared'] = $this->prepare($q['sql'], $q['options']);\n              $r = $q['prepared']->execute();\n            }\n          }\n          \/\/ This is a reading statement, it will prepare the statement and return a query object\n          else{\n            if ( !$q['prepared'] ){\n              \/\/ Native PDO function which will use Db\\query as base class\n              $q['prepared'] = $this->prepare($q['sql'], $driver_options);\n            }\n            else{\n              \/\/ Returns the same db\\query object\n              $q['prepared']->init($params['values']);\n            }\n          }\n          if ( !empty($time) && ($q['exe_time'] === 0) ){\n            $q['exe_time'] = microtime(true) - $time;\n          }\n        }\n        catch (\\PDOException $e ){\n          $this->error($e);\n        }\n        if ( $this->check() ){\n          \/\/ So if read statement returns the query object\n          if ( !$q['write'] ){\n            return $q['prepared'];\n          }\n          \/\/ If it is a write statement returns the number of affected rows\n          if ( $q['prepared'] && $q['write'] ){\n            $r = $q['prepared']->rowCount();\n          }\n          \/\/ If it is an insert statement we (try to) set the last inserted ID\n          if ( ($q['kind'] === 'INSERT') && $r ){\n            $this->setLastInsertId();\n          }\n          return $r ?? false;\n        }\n      }\n    }\n    return false;\n  }",
                        "startLine": 3622,
                        "doc": {
                            "description": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
                            "params": {
                                "$statement": {
                                    "type": "array|string",
                                    "description": ""
                                }
                            },
                            "return": "int|db\\query"
                        },
                        "endLine": 3810,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "query",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        },
                        "arguments": [
                            {
                                "name": "statement",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "tfn": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $escaped = false)\n  {\n    return $this->tableFullName($table, $escaped);\n  }",
                        "startLine": 3836,
                        "doc": {
                            "description": {
                                "description": "Return table's simple name.\n(similar to {@link table_simple_name()})\n  * ```php\n\\bbn\\X::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\X::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$escaped",
                                        "description": "If set to true the returned string will be escaped."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|string"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                },
                                "$escaped": {
                                    "type": "bool",
                                    "description": "If set to true the returned string will be escaped."
                                }
                            },
                            "return": "null|string",
                            "example_method": "(similar to {@link table_simple_name()})\n\n```php\n\\bbn\\X::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\X::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```"
                        },
                        "endLine": 3839,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "escaped",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "tsn": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $escaped = false)\n  {\n    return $this->tableSimpleName($table, $escaped);\n  }",
                        "startLine": 3856,
                        "doc": {
                            "description": {
                                "description": "Return table's simple name.\n(similar to {@link table_simple_name()})\n  * ```php\n\\bbn\\X::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\X::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$escaped",
                                        "description": "If set to true the returned string will be escaped."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|string"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                },
                                "$escaped": {
                                    "type": "bool",
                                    "description": "If set to true the returned string will be escaped."
                                }
                            },
                            "return": "null|string",
                            "example_method": "(similar to {@link table_simple_name()})\n\n```php\n\\bbn\\X::dump($db->tsn(\"work_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\X::dump($db->tsn(\"work_db.table_users\", true));\n\/\/ (string) `table_users`\n```"
                        },
                        "endLine": 3859,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "escaped",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "cfn": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($col, $table = NULL, $escaped = false)\n  {\n    return $this->colFullName($col, $table, $escaped);\n  }",
                        "startLine": 3877,
                        "doc": {
                            "description": {
                                "description": "Return column's full name.\n(similar to {@link col_full_name()})\n  * ```php\n\\bbn\\X::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string) table_users.name\n\\bbn\\X::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$col",
                                        "description": "The column's name (escaped or not)."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name (escaped or not)."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$escaped",
                                        "description": "If set to true the returned string will be escaped."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|string"
                                    }
                                ]
                            },
                            "params": {
                                "$col": {
                                    "type": "string",
                                    "description": "The column's name (escaped or not)."
                                },
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name (escaped or not)."
                                },
                                "$escaped": {
                                    "type": "bool",
                                    "description": "If set to true the returned string will be escaped."
                                }
                            },
                            "return": "null|string",
                            "example_method": "(similar to {@link col_full_name()})\n\n```php\n\\bbn\\X::dump($db->cfn(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\n\\bbn\\X::dump($db->cfn(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```"
                        },
                        "endLine": 3880,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "col",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "table",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "escaped",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "csn": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($col, $escaped = false)\n  {\n    return $this->colSimpleName($col, $escaped);\n  }",
                        "startLine": 3897,
                        "doc": {
                            "description": {
                                "description": "Return the column's simple name.\n(similar to {@link col_simple_name()})\n  * ```php\n\\bbn\\X::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\X::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$col",
                                        "description": "The column's complete name (escaped or not)"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$escaped",
                                        "description": "If set to true the returned string will be escaped."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|string"
                                    }
                                ]
                            },
                            "params": {
                                "$col": {
                                    "type": "string",
                                    "description": "The column's complete name (escaped or not)"
                                },
                                "$escaped": {
                                    "type": "bool",
                                    "description": "If set to true the returned string will be escaped."
                                }
                            },
                            "return": "null|string",
                            "example_method": "(similar to {@link col_simple_name()})\n\n```php\n\\bbn\\X::dump($db->csn(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\X::dump($db->csn(\"table_users.name\", true));\n\/\/ (string) `name`\n```"
                        },
                        "endLine": 3900,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "col",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "escaped",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_connection": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg = [])\n  {\n    if ( $this->language ){\n      return $this->language->getConnection($cfg);\n    }\n    return null;\n  }",
                        "startLine": 3914,
                        "doc": {
                            "description": "",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": "The user's options"
                                }
                            },
                            "return": "array|null The final configuration"
                        },
                        "endLine": 3920,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "post_creation": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->language && !$this->engine ){\n      $this->language->postCreation();\n    }\n    return;\n  }",
                        "startLine": 3927,
                        "doc": {
                            "description": "Actions to do once the PDO object has been created",
                            "params": [],
                            "return": "void"
                        },
                        "endLine": 3933,
                        "isUserDefined": true
                    },
                    "change": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($db)\n  {\n    if ( $this->language->change($db) ){\n      $this->current = $db;\n    }\n    return $this;\n  }",
                        "startLine": 3947,
                        "doc": {
                            "description": {
                                "description": "Changes the database used to the given one.\n  * ```php\n$db = new Db();\nx::dump($db->change('db_example'));\n\/\/ (db)\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$db",
                                        "description": "The database's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "self"
                                    }
                                ]
                            },
                            "params": {
                                "$db": {
                                    "type": "string",
                                    "description": "The database's name"
                                }
                            },
                            "return": "self",
                            "example_method": "```php\n$db = new Db();\nx::dump($db->change('db_example'));\n\/\/ (db)\n```"
                        },
                        "endLine": 3953,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "db",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($item)\n  {\n    return $this->language->escape($item);\n  }",
                        "startLine": 3966,
                        "doc": {
                            "description": {
                                "description": "Escapes names with the appropriate quotes (db, tables, columns, keys...)\n  * ```php\nbbn\\X::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$item",
                                        "description": "The name to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$item": {
                                    "type": "string",
                                    "description": "The name to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "..)\n\n```php\nbbn\\X::dump($db->escape(\"table_users\"));\n\/\/ (string) `table_users`\n```"
                        },
                        "endLine": 3969,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "item",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "table_full_name": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $escaped = false)\n  {\n    return $this->language->tableFullName($table, $escaped);\n  }",
                        "startLine": 3985,
                        "doc": {
                            "description": {
                                "description": "Return table's full name.\n  * ```php\nbbn\\X::dump($db->tableFullName(\"table_users\"));\n\/\/ (String) db_example.table_users\nbbn\\X::dump($db->tableFullName(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name (escaped or not)."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$escaped",
                                        "description": "If set to true the returned string will be escaped."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string | false"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name (escaped or not)."
                                },
                                "$escaped": {
                                    "type": "bool",
                                    "description": "If set to true the returned string will be escaped."
                                }
                            },
                            "return": "string | false",
                            "example_method": "```php\nbbn\\X::dump($db->tableFullName(\"table_users\"));\n\/\/ (String) db_example.table_users\nbbn\\X::dump($db->tableFullName(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```"
                        },
                        "endLine": 3988,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "escaped",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "is_table_full_name": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table)\n  {\n    return $this->language->isTableFullName($table);\n  }",
                        "startLine": 4004,
                        "doc": {
                            "description": {
                                "description": "Returns true if the string corresponds to the tipology of a table full name.\n(similar to {@link table_full_name()})\n  * ```php\n\\bbn\\X::dump($db->tfn(\"table_users\"));\n\/\/ (String) db_example.table_users\n\\bbn\\X::dump($db->tfn(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                }
                            },
                            "return": "bool",
                            "example_method": "(similar to {@link table_full_name()})\n\n```php\n\\bbn\\X::dump($db->tfn(\"table_users\"));\n\/\/ (String) db_example.table_users\n\\bbn\\X::dump($db->tfn(\"table_users\", true));\n\/\/ (String) `db_example`.`table_users`\n```"
                        },
                        "endLine": 4007,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_col_full_name": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($col)\n  {\n    return $this->language->isColFullName($col);\n  }",
                        "startLine": 4013,
                        "doc": {
                            "description": "",
                            "params": {
                                "$col": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 4016,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "col",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "table_simple_name": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $escaped = false)\n  {\n    return $this->language->tableSimpleName($table, $escaped);\n  }",
                        "startLine": 4032,
                        "doc": {
                            "description": {
                                "description": "Return table's simple name.\n  * ```php\n\\bbn\\X::dump($db->tableSimpleName(\"example_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\X::dump($db->tableSimpleName(\"example.table_users\", true));\n\/\/ (string) `table_users`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name (escaped or not)"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$escaped",
                                        "description": "If set to true the returned string will be escaped"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string | false"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name (escaped or not)"
                                },
                                "$escaped": {
                                    "type": "bool",
                                    "description": "If set to true the returned string will be escaped"
                                }
                            },
                            "return": "string | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->tableSimpleName(\"example_db.table_users\"));\n\/\/ (string) table_users\n\\bbn\\X::dump($db->tableSimpleName(\"example.table_users\", true));\n\/\/ (string) `table_users`\n```"
                        },
                        "endLine": 4035,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "escaped",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "col_full_name": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($col, $table = '', $escaped = false)\n  {\n    return $this->language->colFullName($col, $table, $escaped);\n  }",
                        "startLine": 4052,
                        "doc": {
                            "description": {
                                "description": "Return column's full name.\n  * ```php\n\\bbn\\X::dump($db->colFullName(\"name\", \"table_users\"));\n\/\/ (string) table_users.name\n\\bbn\\X::dump($db->colFullName(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$col",
                                        "description": "The column's name (escaped or not)"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name (escaped or not)"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$escaped",
                                        "description": "If set to true the returned string will be escaped"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string | false"
                                    }
                                ]
                            },
                            "params": {
                                "$col": {
                                    "type": "string",
                                    "description": "The column's name (escaped or not)"
                                },
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name (escaped or not)"
                                },
                                "$escaped": {
                                    "type": "bool",
                                    "description": "If set to true the returned string will be escaped"
                                }
                            },
                            "return": "string | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->colFullName(\"name\", \"table_users\"));\n\/\/ (string)  table_users.name\n\\bbn\\X::dump($db->colFullName(\"name\", \"table_users\", true));\n\/\/ (string) \\`table_users\\`.\\`name\\`\n```"
                        },
                        "endLine": 4055,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "col",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "table",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "escaped",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "col_simple_name": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($col, $escaped = false)\n  {\n    return $this->language->colSimpleName($col, $escaped);\n  }",
                        "startLine": 4071,
                        "doc": {
                            "description": {
                                "description": "Return the column's simple name.\n  * ```php\n\\bbn\\X::dump($db->colSimpleName(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\X::dump($db->colSimpleName(\"table_users.name\", true));\n\/\/ (string) `name`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$col",
                                        "description": "The column's complete name (escaped or not)."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$escaped",
                                        "description": "If set to true the returned string will be escaped."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string | false"
                                    }
                                ]
                            },
                            "params": {
                                "$col": {
                                    "type": "string",
                                    "description": "The column's complete name (escaped or not)."
                                },
                                "$escaped": {
                                    "type": "bool",
                                    "description": "If set to true the returned string will be escaped."
                                }
                            },
                            "return": "string | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->colSimpleName(\"table_users.name\"));\n\/\/ (string) name\n\\bbn\\X::dump($db->colSimpleName(\"table_users.name\", true));\n\/\/ (string) `name`\n```"
                        },
                        "endLine": 4074,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "col",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "escaped",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "disable_keys": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->language->disableKeys();\n    return $this;\n  }",
                        "startLine": 4086,
                        "doc": {
                            "description": {
                                "description": "Disables foreign keys constraints.\n  * ```php\n\\bbn\\X::dump($db->disableKeys());\n\/\/ (db)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "db"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "db",
                            "example_method": "```php\n\\bbn\\X::dump($db->disableKeys());\n\/\/ (db)\n```"
                        },
                        "endLine": 4090,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "enable_keys": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->language->enableKeys();\n    return $this;\n  }",
                        "startLine": 4102,
                        "doc": {
                            "description": {
                                "description": "Enables foreign keys constraints.\n  * ```php\n\\bbn\\X::dump($db->enableKeys());\n\/\/ (db)\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "db"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "db",
                            "example_method": "```php\n\\bbn\\X::dump($db->enableKeys());\n\/\/ (db)\n```"
                        },
                        "endLine": 4106,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "get_databases": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->_get_cache('', 'databases');\n  }",
                        "startLine": 4125,
                        "doc": {
                            "description": {
                                "description": "Return databases' names as an array.\n  * ```php\n\\bbn\\X::dump($db->getDatabases());\n\/*\n(array)[\n \"db_customers\",\n \"db_clients\",\n \"db_empty\",\n \"db_example\",\n \"db_mail\"\n ]\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getDatabases());\n\/*\n(array)[\n     \"db_customers\",\n     \"db_clients\",\n     \"db_empty\",\n     \"db_example\",\n     \"db_mail\"\n     ]\n```"
                        },
                        "endLine": 4128,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_tables": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($database = '')\n  {\n    if ( empty($database) ){\n      $database = $this->current;\n    }\n    return $this->_get_cache($database, 'tables');\n  }",
                        "startLine": 4157,
                        "doc": {
                            "description": {
                                "description": "Return tables' names of a database as an array.\n  * ```php\n\\bbn\\X::dump($db->getTables('db_example'));\n\/*\n(array) [\n  \"clients\",\n  \"columns\",\n  \"cron\",\n  \"journal\",\n  \"dbs\",\n  \"examples\",\n  \"history\",\n  \"hosts\",\n  \"keys\",\n  \"mails\",\n  \"medias\",\n  \"notes\",\n  \"medias\",\n  \"versions\"\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$database",
                                        "description": "Database name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "$database": {
                                    "type": "string",
                                    "description": "Database name"
                                }
                            },
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getTables('db_example'));\n\/*\n(array) [\n       \"clients\",\n       \"columns\",\n       \"cron\",\n       \"journal\",\n       \"dbs\",\n       \"examples\",\n       \"history\",\n       \"hosts\",\n       \"keys\",\n       \"mails\",\n       \"medias\",\n       \"notes\",\n       \"medias\",\n       \"versions\"\n       ]\n```"
                        },
                        "endLine": 4163,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "database",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_columns": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table)\n  {\n    if ( $tmp = $this->_get_cache($table) ){\n      return $tmp['fields'];\n    }\n    return null;\n  }",
                        "startLine": 4217,
                        "doc": {
                            "description": {
                                "description": "Return colums' structure of a table as an array indexed with the fields names.\n  * ```php\n\\bbn\\X::dump($db->getColumns('table_users'));\n\/* (array)[\n  \"id\" => [\n   \"position\" => 1,\n   \"null\" => 0,\n   \"key\" => \"PRI\",\n   \"default\" => null,\n   \"extra\" => \"auto_increment\",\n   \"signed\" => 0,\n   \"maxlength\" => \"8\",\n   \"type\" => \"int\",\n  ],\n   \"name\" => [\n   \"position\" => 2,\n   \"null\" => 0,\n   \"key\" => null,\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n  \"surname\" => [\n   \"position\" => 3,\n   \"null\" => 0,\n   \"key\" => null,\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n  \"address\" => [\n   \"position\" => 4,\n   \"null\" => 0,\n   \"key\" => \"UNI\",\n   \"default\" => null,\n   \"extra\" => \"\",\n   \"signed\" => 0,\n   \"maxlength\" => \"30\",\n   \"type\" => \"varchar\",\n  ],\n   ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                }
                            },
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getColumns('table_users'));\n\/* (array)[\n           \"id\" => [\n             \"position\" => 1,\n             \"null\" => 0,\n             \"key\" => \"PRI\",\n             \"default\" => null,\n             \"extra\" => \"auto_increment\",\n             \"signed\" => 0,\n             \"maxlength\" => \"8\",\n             \"type\" => \"int\",\n           ],\n          \"name\" => [\n             \"position\" => 2,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"surname\" => [\n             \"position\" => 3,\n             \"null\" => 0,\n             \"key\" => null,\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n           \"address\" => [\n             \"position\" => 4,\n             \"null\" => 0,\n             \"key\" => \"UNI\",\n             \"default\" => null,\n             \"extra\" => \"\",\n             \"signed\" => 0,\n             \"maxlength\" => \"30\",\n             \"type\" => \"varchar\",\n           ],\n         ]\n```"
                        },
                        "endLine": 4223,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_keys": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table)\n  {\n    if ( $tmp = $this->_get_cache($table) ){\n      return [\n        'keys' => $tmp['keys'],\n        'cols' => $tmp['cols']\n      ];\n    }\n    return null;\n  }",
                        "startLine": 4266,
                        "doc": {
                            "description": {
                                "description": "Return the table's keys as an array indexed with the fields names.\n  * ```php\n\\bbn\\X::dump($db->getKeys(\"table_users\"));\n\/*\n(array)[\n \"keys\" => [\n  \"PRIMARY\" => [\n   \"columns\" => [\n  \"id\",\n   ],\n   \"ref_db\" => null,\n   \"ref_table\" => null,\n   \"ref_column\" => null,\n   \"unique\" => 1,\n  ],\n  \"number\" => [\n   \"columns\" => [\n  \"number\",\n   ],\n   \"ref_db\" => null,\n   \"ref_table\" => null,\n   \"ref_column\" => null,\n  \"unique\" => 1,\n  ],\n ],\n \"cols\" => [\n  \"id\" => [\n   \"PRIMARY\",\n  ],\n  \"number\" => [\n   \"number\",\n  ],\n ],\n]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                }
                            },
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getKeys(\"table_users\"));\n\/*\n(array)[\n     \"keys\" => [\n       \"PRIMARY\" => [\n         \"columns\" => [\n           \"id\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n         \"unique\" => 1,\n       ],\n       \"number\" => [\n         \"columns\" => [\n           \"number\",\n         ],\n         \"ref_db\" => null,\n         \"ref_table\" => null,\n         \"ref_column\" => null,\n        \"unique\" => 1,\n       ],\n     ],\n     \"cols\" => [\n       \"id\" => [\n         \"PRIMARY\",\n       ],\n       \"number\" => [\n         \"number\",\n       ],\n     ],\n]\n```"
                        },
                        "endLine": 4275,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_conditions": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $conditions, array $cfg = [], $is_having = false, $indent = 0)\n  {\n    return $this->language->getConditions($conditions, $cfg, $is_having, $indent);\n  }",
                        "startLine": 4283,
                        "doc": {
                            "description": "",
                            "params": {
                                "$conditions": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$is": {
                                    "type": "bool",
                                    "description": "having"
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 4286,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "conditions",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "cfg",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "is_having",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            },
                            {
                                "name": "indent",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_select": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    return $this->language->getSelect(...$this->_add_kind(\\func_get_args()));\n  }",
                        "startLine": 4303,
                        "doc": {
                            "description": {
                                "description": "Return SQL code for row(s) SELECT.\n  * ```php\n\\bbn\\X::dump($db->getSelect('table_users',['name','surname']));\n\/*\n(string)\n SELECT\n  `table_users`.`name`,\n  `table_users`.`surname`\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$cfg",
                                        "description": "The configuration array"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": "The configuration array"
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getSelect('table_users',['name','surname']));\n\/*\n(string)\n  SELECT\n   `table_users`.`name`,\n   `table_users`.`surname`\n```"
                        },
                        "endLine": 4306,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_insert": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'INSERT';\n    return $this->language->getInsert($this->processCfg($cfg));\n  }",
                        "startLine": 4326,
                        "doc": {
                            "description": {
                                "description": "Returns the SQL code for an INSERT statement.\n  * ```php\n\\bbn\\X::dump($db->getInsert([\n 'tables' => ['table_users'],\n 'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n   `name`, `surname`)\n   VALUES (?, ?)\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$cfg",
                                        "description": "The configuration array"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": "The configuration array"
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getInsert([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n INSERT INTO `db_example`.`table_users` (\n             `name`, `surname`)\n             VALUES (?, ?)\n```"
                        },
                        "endLine": 4330,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_update": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'UPDATE';\n    return $this->language->getUpdate($this->processCfg($cfg));\n  }",
                        "startLine": 4350,
                        "doc": {
                            "description": {
                                "description": "Returns the SQL code for an UPDATE statement.\n  * ```php\n\\bbn\\X::dump($db->getUpdate([\n 'tables' => ['table_users'],\n 'fields' => ['name','surname']\n]));\n\/*\n(string)\n  UPDATE `db_example`.`table_users`\n  SET `table_users`.`name` = ?,\n  `table_users`.`surname` = ?\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$cfg",
                                        "description": "The configuration array"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": "The configuration array"
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getUpdate([\n  'tables' => ['table_users'],\n  'fields' => ['name','surname']\n]));\n\/*\n(string)\n   UPDATE `db_example`.`table_users`\n   SET `table_users`.`name` = ?,\n       `table_users`.`surname` = ?\n```"
                        },
                        "endLine": 4354,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_delete": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    $cfg['kind'] = 'DELETE';\n    return $this->language->getDelete($this->processCfg($cfg));\n  }",
                        "startLine": 4367,
                        "doc": {
                            "description": {
                                "description": "Returns the SQL code for a DELETE statement.\n  * ```php\n\\bbn\\X::dump($db->getDelete('table_users',['id'=>1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$cfg",
                                        "description": "The configuration array"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": "The configuration array"
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getDelete('table_users',['id'=>1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```"
                        },
                        "endLine": 4371,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_join": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    return $this->language->getJoin($cfg);\n  }",
                        "startLine": 4379,
                        "doc": {
                            "description": "Returns a string with the JOIN part of the query if there is, empty otherwise",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 4382,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_where": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    return $this->language->getWhere($cfg);\n  }",
                        "startLine": 4395,
                        "doc": {
                            "description": {
                                "description": "Return a string with 'where' conditions.\n  * ```php\n\\bbn\\X::dump($db->getWhere(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$cfg"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getWhere(['id' => 9], 'table_users'));\n\/\/ (string) WHERE 1 AND `table_users`.`id` = ?\n```"
                        },
                        "endLine": 4398,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_group_by": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    return $this->language->getGroupBy($cfg);\n  }",
                        "startLine": 4406,
                        "doc": {
                            "description": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 4409,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_having": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    return $this->language->getHaving($cfg);\n  }",
                        "startLine": 4417,
                        "doc": {
                            "description": "Returns a string with the HAVING part of the query if there is, empty otherwise",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 4420,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_order": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    return $this->language->getOrder($cfg);\n  }",
                        "startLine": 4433,
                        "doc": {
                            "description": {
                                "description": "Get a string starting with ORDER BY with corresponding parameters to $order.\n  * ```php\n\\bbn\\X::dump($db->getOrder(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$cfg"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getOrder(['name' => 'DESC' ],'table_users'));\n\/\/ (string) ORDER BY `name` DESC\n```"
                        },
                        "endLine": 4436,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_limit": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function(array $cfg)\n  {\n    return $this->language->getLimit($cfg);\n  }",
                        "startLine": 4449,
                        "doc": {
                            "description": {
                                "description": "Get a string starting with LIMIT with corresponding parameters to $limit.\n  * ```php\n\\bbn\\X::dump($db->getLimit(3,1));\n\/\/ (string) LIMIT 1, 3\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$cfg"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump($db->getLimit(3,1));\n\/\/ (string) LIMIT 1, 3\n```"
                        },
                        "endLine": 4452,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_create": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $model = NULL)\n  {\n    return $this->language->getCreate($table, $model);\n  }",
                        "startLine": 4473,
                        "doc": {
                            "description": {
                                "description": "Return SQL code for table creation.\n  * ```php\n\\bbn\\X::dump($db->getCreate(\"table_users\"));\n\/*\n(string)\n  CREATE TABLE `table_users` (\n `userid` int(11) NOT NULL,\n `userdataid` int(11) NOT NULL,\n `info` char(200) DEFAULT NULL,\n PRIMARY KEY (`userid`,`userdataid`),\n KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n  * ```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$table",
                                        "description": "The table's name"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string | false"
                                    }
                                ]
                            },
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name"
                                }
                            },
                            "return": "string | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->getCreate(\"table_users\"));\n\/*\n(string)\n   CREATE TABLE `table_users` (\n     `userid` int(11) NOT NULL,\n     `userdataid` int(11) NOT NULL,\n     `info` char(200) DEFAULT NULL,\n      PRIMARY KEY (`userid`,`userdataid`),\n      KEY `table_users_userId_userdataId_info` (`userid`,`userdataid`,`info`)\n   ) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n```"
                        },
                        "endLine": 4476,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "model",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_create_table": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $model = NULL)\n  {\n    return $this->language->getCreateTable($table, $model);\n  }",
                        "startLine": 4478,
                        "endLine": 4481,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "model",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_create_keys": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $model = NULL)\n  {\n    return $this->language->getCreateKeys($table, $model);\n  }",
                        "startLine": 4483,
                        "endLine": 4486,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "model",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_create_constraints": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $model = NULL)\n  {\n    \n    return $this->language->getCreateConstraints($table, $model);\n  }",
                        "startLine": 4488,
                        "endLine": 4492,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "model",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "create_constraints_sqlite": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, array $model = NULL)\n  {\n    return $this->language->createConstraintsSqlite(...\\func_get_args());\n  }",
                        "startLine": 4494,
                        "endLine": 4497,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "model",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "create_index": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $column, $unique = false, $length = NULL)\n  {\n    return $this->language->createIndex($table, $column, $unique);\n  }",
                        "startLine": 4515,
                        "doc": {
                            "description": "Creates an index on one or more column(s) of the table",
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$column": {
                                    "type": "string|array",
                                    "description": ""
                                },
                                "$unique": {
                                    "type": "bool",
                                    "description": ""
                                },
                                "$length": {
                                    "type": "null",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 4518,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "column",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "unique",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            },
                            {
                                "name": "length",
                                "position": 3,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "delete_index": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $key)\n  {\n    return $this->language->deleteIndex($table, $key);\n  }",
                        "startLine": 4534,
                        "doc": {
                            "description": "Deletes index on a column of the table.",
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": "The table's name."
                                },
                                "$key": {
                                    "type": "string",
                                    "description": "The key's name."
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 4537,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "key",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "create_user": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($user = NULL, $pass = NULL, $db = NULL)\n  {\n    return $this->language->createUser($user, $pass, $db);\n  }",
                        "startLine": 4553,
                        "doc": {
                            "description": "Creates an user for a specific db.",
                            "params": {
                                "$user": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$pass": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$db": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 4556,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "user",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "pass",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "db",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "delete_user": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($user = NULL)\n  {\n    return $this->language->deleteUser($user);\n  }",
                        "startLine": 4571,
                        "doc": {
                            "description": "Deletes a db user.",
                            "params": {
                                "$user": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 4574,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "user",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_users": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($user = '', $host = '')\n  {\n    return $this->language->getUsers($user, $host);\n  }",
                        "startLine": 4592,
                        "doc": {
                            "description": "Return an array including privileges of a specific db_user or all db_users.",
                            "params": {
                                "$user": {
                                    "type": "string",
                                    "description": "The user's name, without params will return all privileges of all db_users"
                                },
                                "$host": {
                                    "type": "string",
                                    "description": "The host"
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 4595,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "user",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "host",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "db_size": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($database = '', $type = '')\n  {\n    return $this->language->dbSize($database, $type);\n  }",
                        "startLine": 4602,
                        "doc": {
                            "description": "",
                            "params": {
                                "$database": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$type": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "int"
                        },
                        "endLine": 4605,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "int"
                        ],
                        "arguments": [
                            {
                                "name": "database",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "type",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "table_size": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table, $type = '')\n  {\n    return $this->language->tableSize($table, $type);\n  }",
                        "startLine": 4612,
                        "doc": {
                            "description": "",
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$type": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "int"
                        },
                        "endLine": 4615,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int"
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "type",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "status": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($table = '', $database = '')\n  {\n    return $this->language->status($table, $database);\n  }",
                        "startLine": 4622,
                        "doc": {
                            "description": "",
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$database": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array|false|mixed"
                        },
                        "endLine": 4625,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "database",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_uid": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    \/\/return hex2bin(str_replace('-', '', \\bbn\\X::makeUid()));\n    return $this->language->getUid();\n  }",
                        "startLine": 4630,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "string"
                        },
                        "endLine": 4634,
                        "isUserDefined": true,
                        "returns": [
                            "string"
                        ]
                    },
                    "get_row": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->getRow();\n    }\n    return null;\n  }",
                        "startLine": 4661,
                        "doc": {
                            "description": {
                                "description": "Return the first row resulting from the query as an array indexed with the fields' name.\n  * ```php\n\\bbn\\X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n  * \/* (array)[\n  \"id\" => 3,\n  \"name\" => \"thomas\",\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "description": "string query."
                                    },
                                    {
                                        "tag": "param",
                                        "description": "int The var ? value."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array | false"
                                    }
                                ]
                            },
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "int The var ? value."
                                }
                            },
                            "return": "array | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]\n```"
                        },
                        "endLine": 4667,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_rows": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->getRows();\n    }\n    return null;\n  }",
                        "startLine": 4690,
                        "doc": {
                            "description": {
                                "description": "Return an array that includes indexed arrays for every row resultant from the query.\n  * ```php\n\\bbn\\X::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n  [\n  \"id\" => 3,\n  \"name\" => \"john\",\n  ],\n  [\n  \"id\" => 4,\n  \"name\" => \"barbara\",\n  ],\n   ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "description": "string"
                                    },
                                    {
                                        "tag": "param",
                                        "description": "int The var ? value"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array | false"
                                    }
                                ]
                            },
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "int The var ? value"
                                }
                            },
                            "return": "array | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]\n```"
                        },
                        "endLine": 4696,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_irow": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->getIrow();\n    }\n    return null;\n  }",
                        "startLine": 4714,
                        "doc": {
                            "description": {
                                "description": "Return a row as a numeric indexed array.\n  * ```php\n\\bbn\\X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n   3,\n   \"john\",\n   \"brown\",\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "description": "string query"
                                    },
                                    {
                                        "tag": "param",
                                        "description": "int The var ? value"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array | false"
                                    }
                                ]
                            },
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "int The var ? value"
                                }
                            },
                            "return": "array | false",
                            "example_method": "```php\n\\bbn\\X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]\n```"
                        },
                        "endLine": 4720,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_irows": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->getIrows();\n    }\n    return null;\n  }",
                        "startLine": 4742,
                        "doc": {
                            "description": {
                                "description": "Return an array of numeric indexed rows.\n  * ```php\n\\bbn\\X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n  [\n   3,\n  \"john\"\n  ],\n  [\n  4,\n  \"barbara\"\n  ]\n ]\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]\n```"
                        },
                        "endLine": 4748,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_by_columns": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->getByColumns();\n    }\n    return null;\n  }",
                        "startLine": 4771,
                        "doc": {
                            "description": {
                                "description": "Return an array indexed on the searched field's in which there are all the values of the column.\n  * ```php\n\\bbn\\X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n \"name\" => [\n \"John\",\n \"Michael\"\n ],\n \"surname\" => [\n  \"Brown\",\n  \"Smith\"\n ]\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "description": "string query"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "string query"
                                }
                            },
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]\n```"
                        },
                        "endLine": 4777,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_obj": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->getObject(\\func_get_args());\n  }",
                        "startLine": 4792,
                        "doc": {
                            "description": {
                                "description": "Return the first row resulting from the query as an object (similar to {@link get_object()}).\n  * ```php\n\\bbn\\X::dump($db->getObj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n \"name\" => \"Smith\"\n }\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "null|\\stdClass"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "null|\\stdClass",
                            "example_method": "```php\n\\bbn\\X::dump($db->getObj(\"SELECT surname FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"Smith\"\n      }\n```"
                        },
                        "endLine": 4795,
                        "isUserDefined": true,
                        "returns": [
                            "stdClass",
                            null
                        ]
                    },
                    "get_object": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->getObject();\n    }\n    return null;\n  }",
                        "startLine": 4811,
                        "doc": {
                            "description": {
                                "description": "Return the first row resulting from the query as an object.\nSynonym of get_obj.\n  * ```php\n\\bbn\\X::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n \"name\" => \"John\"\n }\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "null|\\stdClass"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "null|\\stdClass",
                            "example_method": "Synonym of get_obj.\n\n```php\n\\bbn\\X::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }\n```"
                        },
                        "endLine": 4817,
                        "isUserDefined": true,
                        "returns": [
                            "stdClass",
                            null
                        ]
                    },
                    "get_objects": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    if ( $r = $this->query(...\\func_get_args()) ){\n      return $r->getObjects();\n    }\n    return [];\n  }",
                        "startLine": 4847,
                        "doc": {
                            "description": {
                                "description": "Return an array of stdClass objects.\n  * ```php\n\\bbn\\X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n  * \/*\n(array) [\n   Object stdClass: df {\n  \"name\" => \"John\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Michael\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Thomas\",\n   },\n   Object stdClass: df {\n  \"name\" => \"William\",\n   },\n   Object stdClass: df {\n  \"name\" => \"Jake\",\n   },\n  ]\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "null|array"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "null|array",
                            "example_method": "```php\n\\bbn\\X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]\n```"
                        },
                        "endLine": 4853,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "create_table": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 4855,
                        "endLine": 4857,
                        "isUserDefined": true
                    },
                    "create_table_sqlite": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 4859,
                        "endLine": 4861,
                        "isUserDefined": true
                    },
                    "create_database": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function($database)\n  {\n    return $this->language->createDatabase(...\\func_get_args());\n  }",
                        "startLine": 4863,
                        "endLine": 4866,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "database",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "create_database_sqlite": {
                        "file": "bbn\\Db",
                        "static": true,
                        "public": true,
                        "code": "function($database)\n  {\n      file_put_contents($database,'');\n      if (is_file($database) ){\n        return  [\n          'engine' => 'sqlite',\n          'db' => $database\n        ];\n      }\n    }\n    return false;\n  }",
                        "startLine": 4871,
                        "doc": {
                            "description": "test",
                            "tags": []
                        },
                        "endLine": 4882,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "database",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "enable_last": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->last_enabled = true;\n  }",
                        "startLine": 4884,
                        "endLine": 4887,
                        "isUserDefined": true
                    },
                    "disable_last": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    $this->last_enabled = false;\n  }",
                        "startLine": 4889,
                        "endLine": 4892,
                        "isUserDefined": true
                    },
                    "get_real_last_params": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->last_real_params;\n  }",
                        "startLine": 4894,
                        "endLine": 4897,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "real_last": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->last_real_query;\n  }",
                        "startLine": 4899,
                        "endLine": 4902,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "get_last_params": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->last_params;\n  }",
                        "startLine": 4904,
                        "endLine": 4907,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_last_values": {
                        "file": "bbn\\Db",
                        "public": true,
                        "code": "function()\n  {\n    return $this->last_params ? $this->last_params['values'] : null;\n  }",
                        "startLine": 4909,
                        "endLine": 4912,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "prepare": {
                        "file": "PDO",
                        "public": true,
                        "code": "function($statement, $options)\n  {\n  }",
                        "isInternal": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "prepare",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($statement, $options)\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "statement",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "options",
                                    "position": 1,
                                    "type": null,
                                    "required": false,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "statement",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "options",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "beginTransaction": {
                        "file": "PDO",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "beginTransaction",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "commit": {
                        "file": "PDO",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "commit",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "rollBack": {
                        "file": "PDO",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "rollBack",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "inTransaction": {
                        "file": "PDO",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "inTransaction",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "setAttribute": {
                        "file": "PDO",
                        "public": true,
                        "code": "function($attribute, $value)\n  {\n  }",
                        "isInternal": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "parent": {
                            "name": "setAttribute",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($attribute, $value)\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 2,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "attribute",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "value",
                                    "position": 1,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "attribute",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "value",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "exec": {
                        "file": "PDO",
                        "public": true,
                        "code": "function($query)\n  {\n  }",
                        "isInternal": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "exec",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($query)\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "query",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "query",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "lastInsertId": {
                        "file": "PDO",
                        "public": true,
                        "code": "function($seqname)\n  {\n  }",
                        "isInternal": true,
                        "numberOfParameters": 1,
                        "parent": {
                            "name": "lastInsertId",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($seqname)\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "seqname",
                                    "position": 0,
                                    "type": null,
                                    "required": false,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "seqname",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "errorCode": {
                        "file": "PDO",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "errorCode",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "errorInfo": {
                        "file": "PDO",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "errorInfo",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "getAttribute": {
                        "file": "PDO",
                        "public": true,
                        "code": "function($attribute)\n  {\n  }",
                        "isInternal": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "getAttribute",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($attribute)\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "attribute",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "attribute",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "quote": {
                        "file": "PDO",
                        "public": true,
                        "code": "function($string, $paramtype)\n  {\n  }",
                        "isInternal": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "quote",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($string, $paramtype)\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "string",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "paramtype",
                                    "position": 1,
                                    "type": null,
                                    "required": false,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "string",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "paramtype",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "__wakeup": {
                        "file": "PDO",
                        "public": true,
                        "final": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "__wakeup",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": true,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "__sleep": {
                        "file": "PDO",
                        "public": true,
                        "final": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "__sleep",
                            "file": "PDO",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": true,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "getAvailableDrivers": {
                        "file": "PDO",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "isInternal": true,
                        "parent": {
                            "name": "getAvailableDrivers",
                            "file": "PDO",
                            "static": true,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": false,
                            "doc": "",
                            "endLine": false,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": true,
                            "isUserDefined": false,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_instance": {
                        "file": "bbn\\Db",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 25,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "$this"
                        },
                        "endLine": 27,
                        "isUserDefined": true
                    },
                    "retriever_exists": {
                        "file": "bbn\\Db",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 29,
                        "endLine": 31,
                        "isUserDefined": true
                    }
                }
            },
            "properties": {
                "last_enabled": {
                    "private": true,
                    "doc": {
                        "description": "When set to true last_query will be filled with the latest statement.",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "bool"
                            }
                        ]
                    }
                },
                "parser": {
                    "private": true,
                    "doc": {
                        "description": "A PHPSQLParser object",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "\\PHPSQLParser\\PHPSQLParser"
                            }
                        ]
                    }
                },
                "cache": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "fancy": {
                    "private": true,
                    "doc": {
                        "description": "If set to false, Query will return a regular PDOStatement\nUse stop_fancy_stuff() to set it to false\nAnd use start_fancy_stuff to set it back to true",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "debug_queries": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "queries"
                            }
                        ]
                    }
                },
                "has_error": {
                    "private": true,
                    "doc": {
                        "description": "Error state of the current connection",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "error"
                            }
                        ]
                    }
                },
                "triggers": {
                    "private": true,
                    "doc": {
                        "description": "An array of functions for launching triggers on actions",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "mixed"
                            }
                        ]
                    }
                },
                "triggers_disabled": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "bool"
                            }
                        ]
                    }
                },
                "hash": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "todo",
                                "type": null
                            },
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "language": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "db\\languages\\mysql Can be other driver"
                            }
                        ]
                    }
                },
                "cache_renewal": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "renewal"
                            }
                        ]
                    }
                },
                "max_queries": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "queries"
                            }
                        ]
                    }
                },
                "last_insert_id": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "insert_id"
                            }
                        ]
                    }
                },
                "id_just_inserted": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "insert_id"
                            }
                        ]
                    }
                },
                "hash_contour": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "contour"
                            }
                        ]
                    }
                },
                "last_query": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "query"
                            }
                        ]
                    }
                },
                "last_params": {
                    "protected": true,
                    "doc": {
                        "description": "The information that will be accessed by db\\query as the current statement's options",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "params"
                            }
                        ]
                    }
                },
                "last_real_query": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "query"
                            }
                        ]
                    }
                },
                "last_real_params": {
                    "protected": true,
                    "doc": {
                        "description": "The information that will be accessed by db\\query as the current statement's options",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "params"
                            }
                        ]
                    }
                },
                "last_cfg": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "cfg"
                            }
                        ]
                    }
                },
                "last_prepared": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "prepared"
                            }
                        ]
                    }
                },
                "queries": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "cfgs": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "The configs recorded for helpers functions"
                            }
                        ]
                    }
                },
                "qte": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "The quote character for table and column names."
                            }
                        ]
                    }
                },
                "on_error": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "error\nPossible values:\n* stop: the script will go on but no further database query will be executed\n* die: the script will die with the error\n* continue: the script and further queries will be executed"
                            }
                        ]
                    }
                },
                "write_kinds": {
                    "static": true,
                    "protected": true,
                    "doc": {
                        "description": "@var array The 'kinds' of writing statement",
                        "tags": []
                    }
                },
                "structure_kinds": {
                    "static": true,
                    "protected": true,
                    "doc": {
                        "description": "@var array The 'kinds' of structure alteration statement",
                        "tags": []
                    }
                },
                "last_error": {
                    "public": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "error"
                            }
                        ]
                    }
                },
                "debug": {
                    "public": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "engine": {
                    "public": true,
                    "doc": {
                        "description": "The ODBC engine of this connection",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "host": {
                    "public": true,
                    "doc": {
                        "description": "The host of this connection",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "username": {
                    "public": true,
                    "doc": {
                        "description": "The host of this connection",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "current": {
                    "public": true,
                    "doc": {
                        "description": "The currently selected database",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "has_error_all": {
                    "static": true,
                    "private": true,
                    "doc": {
                        "description": "Error state of the current connection",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "error_all"
                            }
                        ]
                    }
                },
                "line": {
                    "static": true,
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": null
                            }
                        ]
                    }
                },
                "_cache_prefix": {
                    "private": true
                },
                "cache_engine": {
                    "protected": true
                },
                "retriever_instance": {
                    "static": true,
                    "protected": true
                },
                "retriever_exists": {
                    "static": true,
                    "protected": true
                }
            },
            "staticProperties": {
                "write_kinds": [
                    "INSERT",
                    "UPDATE",
                    "DELETE",
                    "DROP",
                    "ALTER",
                    "CREATE"
                ],
                "structure_kinds": [
                    "DROP",
                    "ALTER",
                    "CREATE"
                ],
                "has_error_all": false,
                "line": "---------------------------------------------------------------------------------",
                "retriever_instance": {
                    "last_error": false,
                    "debug": false,
                    "engine": "sqlite",
                    "host": "\/home\/thomas\/domains\/cdn.thomas.lan\/_appui\/src\/data\/db\/",
                    "username": null,
                    "current": "main"
                },
                "retriever_exists": true
            },
            "costants": null,
            "numMethods": 192,
            "numProperties": 39,
            "numConstants": 97,
            "numStaticProperties": 6,
            "interfaceNames": [
                "bbn\\Db\\Actions",
                "bbn\\Db\\Api",
                "bbn\\Db\\Engines"
            ],
            "isInterface": false,
            "traitNames": [
                "bbn\\Models\\Tts\\Cache",
                "bbn\\Models\\Tts\\Retriever"
            ],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": "PDO",
            "isSubclassOf": false,
            "defaultProperties": {
                "write_kinds": [
                    "INSERT",
                    "UPDATE",
                    "DELETE",
                    "DROP",
                    "ALTER",
                    "CREATE"
                ],
                "structure_kinds": [
                    "DROP",
                    "ALTER",
                    "CREATE"
                ],
                "has_error_all": false,
                "line": "---------------------------------------------------------------------------------",
                "retriever_instance": {
                    "last_error": false,
                    "debug": false,
                    "engine": "sqlite",
                    "host": "\/home\/thomas\/domains\/cdn.thomas.lan\/_appui\/src\/data\/db\/",
                    "username": null,
                    "current": "main"
                },
                "retriever_exists": true,
                "last_enabled": true,
                "parser": null,
                "cache": [],
                "fancy": 1,
                "debug_queries": [],
                "has_error": false,
                "triggers": {
                    "SELECT": {
                        "before": [],
                        "after": []
                    },
                    "INSERT": {
                        "before": [],
                        "after": []
                    },
                    "UPDATE": {
                        "before": [],
                        "after": []
                    },
                    "DELETE": {
                        "before": [],
                        "after": []
                    }
                },
                "triggers_disabled": false,
                "hash": null,
                "language": false,
                "cache_renewal": 3600,
                "max_queries": 50,
                "last_insert_id": null,
                "id_just_inserted": null,
                "hash_contour": "__BBN__",
                "last_query": null,
                "last_params": {
                    "sequences": false,
                    "values": false
                },
                "last_real_query": null,
                "last_real_params": {
                    "sequences": false,
                    "values": false
                },
                "last_cfg": null,
                "last_prepared": null,
                "queries": [],
                "cfgs": [],
                "qte": null,
                "on_error": "stop_all",
                "last_error": false,
                "debug": false,
                "engine": null,
                "host": null,
                "username": null,
                "current": null,
                "_cache_prefix": null,
                "cache_engine": null
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "db"
        },
        "file": {
            "doc": {
                "description": "Perform a single file objectification and manage its manipulation.\n *",
                "tags": {
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Apr 4, 2011, 23:23:55 +0000",
                    "category": "Files ressources",
                    "package": "bbn",
                    "license": "\\sa elem http:\/\/www.opensource.org\/licenses\/lgpl-license.php LGPL",
                    "version": "0.2r89"
                }
            },
            "name": "bbn\\File",
            "namespace": true,
            "traits": [],
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/file.php",
            "startLine": 18,
            "endLine": 333,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function($file, bbn\\File\\System $fs = NULL)\n  {\n    $this->fs = $fs ?: new file\\system();\n    if ( \\is_array($file) )\n    {\n      if ( isset($file['name'],$file['tmp_name']) )\n      {\n        $this->path = '';\n        $this->name = $file['name'];\n        $this->size = $file['size'];\n        $file = $file['tmp_name'];\n      }\n    }\n    else if ( \\is_string($file) )\n    {\n      $file = trim($file);\n      if ( strrpos($file,'\/') !== false )\n      {\n        \/* The -2 in strrpos means that if there is a final \/, it will be kept in the file name *\/\n        $this->name = substr($file,strrpos($file,'\/',-2)+1);\n        $this->path = substr($file,0,-\\strlen($this->name));\n        if ( substr($this->path,0,2) == '\/\/' ){\n          $this->path = 'http:\/\/'.substr($this->path,2);\n        }\n      }\n      else\n      {\n        $this->name = $file;\n        $this->path = '.\/';\n      }\n    }\n\n    $this->getExtension();\n    if ( \\is_string($file) && is_file($file) ){\n      $this->file = $file;\n    }\n    else{\n      $this->make();\n    }\n  }",
                "startLine": 76,
                "doc": {
                    "description": {
                        "description": "Constructor.\n  * ```php\n$file=new bbn\\File('\/home\/user\/Desktop\/test.txt');\n```",
                        "tags": [
                            {
                                "tag": "return",
                                "description": "$this"
                            }
                        ]
                    },
                    "params": [],
                    "return": "$this",
                    "example_method": "```php\n$file=new bbn\\File('\/home\/user\/Desktop\/test.txt');\n```"
                },
                "endLine": 115,
                "isUserDefined": true,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "arguments": [
                    {
                        "name": "file",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "fs",
                        "position": 1,
                        "type": {},
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": [],
                "protected": {
                    "make": {
                        "file": "bbn\\File",
                        "protected": true,
                        "code": "function()\n  {\n    if ( !$this->file && strpos($this->path,'http:\/\/') === 0 ){\n      $d = getcwd();\n      chdir(__DIR__);\n      chdir('..\/tmp');\n      $f = tempnam('.','image');\n      try{\n        $c = file_get_contents($this->path.$this->name);\n        if ( file_put_contents($f, $c) ){\n          if ( substr($this->name,-1) == '\/' ){\n            $this->name = substr($this->name,0,-1);\n          }\n          chmod($f, 0644);\n          $this->file = $f;\n          $this->path = getcwd();\n        }\n        else{\n          $this->error = 'Impossible to get the file '.$this->path.$this->name;\n        }\n      }\n      catch ( Error $e )\n        { $this->error = 'Impossible to get the file '.$this->path.$this->name; }\n      chdir($d);\n    }\n    return $this;\n  }",
                        "startLine": 190,
                        "doc": {
                            "description": "Creates a temporary file in tmp directory.",
                            "params": [],
                            "return": "file"
                        },
                        "endLine": 216,
                        "isUserDefined": true
                    },
                    "set_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "protected": true,
                        "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                        "startLine": 63,
                        "endLine": 70,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": true,
                            "public": false,
                            "final": false,
                            "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                            "startLine": 63,
                            "doc": "",
                            "endLine": 70,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "err",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "err",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "public": {
                    "__construct": {
                        "file": "bbn\\File",
                        "public": true,
                        "code": "function($file, bbn\\File\\System $fs = NULL)\n  {\n    $this->fs = $fs ?: new file\\system();\n    if ( \\is_array($file) )\n    {\n      if ( isset($file['name'],$file['tmp_name']) )\n      {\n        $this->path = '';\n        $this->name = $file['name'];\n        $this->size = $file['size'];\n        $file = $file['tmp_name'];\n      }\n    }\n    else if ( \\is_string($file) )\n    {\n      $file = trim($file);\n      if ( strrpos($file,'\/') !== false )\n      {\n        \/* The -2 in strrpos means that if there is a final \/, it will be kept in the file name *\/\n        $this->name = substr($file,strrpos($file,'\/',-2)+1);\n        $this->path = substr($file,0,-\\strlen($this->name));\n        if ( substr($this->path,0,2) == '\/\/' ){\n          $this->path = 'http:\/\/'.substr($this->path,2);\n        }\n      }\n      else\n      {\n        $this->name = $file;\n        $this->path = '.\/';\n      }\n    }\n\n    $this->getExtension();\n    if ( \\is_string($file) && is_file($file) ){\n      $this->file = $file;\n    }\n    else{\n      $this->make();\n    }\n  }",
                        "startLine": 76,
                        "doc": {
                            "description": {
                                "description": "Constructor.\n  * ```php\n$file=new bbn\\File('\/home\/user\/Desktop\/test.txt');\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "$this"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "$this",
                            "example_method": "```php\n$file=new bbn\\File('\/home\/user\/Desktop\/test.txt');\n```"
                        },
                        "endLine": 115,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "file",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "fs",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_size": {
                        "file": "bbn\\File",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->file && $this->size === 0 ){\n      $this->size = filesize($this->file);\n    }\n    return $this->size;\n  }",
                        "startLine": 128,
                        "doc": {
                            "description": {
                                "description": "Return the filesize in byte.\n  * ```php\n$file = new bbn\\File('C:\/Test\/file.txt');\nbbn\\X::dump($file->getSize());\n\/\/ (int) 314\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "int"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "int",
                            "example_method": "```php\n$file = new bbn\\File('C:\/Test\/file.txt');\nbbn\\X::dump($file->getSize());\n\/\/ (int) 314\n```"
                        },
                        "endLine": 134,
                        "isUserDefined": true
                    },
                    "iterate_lines": {
                        "file": "bbn\\File",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->file ){\n      $f = fopen($this->file, 'r');\n      try {\n        while ($line = fgets($f)) {\n          yield $line;\n        }\n      }\n      finally {\n        fclose($f);\n      }\n    }\n  }",
                        "startLine": 139,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "Generator"
                        },
                        "endLine": 152,
                        "isGenerator": true,
                        "isUserDefined": true
                    },
                    "get_extension": {
                        "file": "bbn\\File",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->name ){\n      if ( !isset($this->ext) ){\n        if ( strpos($this->name, '.') !== false ){\n          $p = Str::fileExt($this->name, 1);\n          $this->ext = $p[1];\n          $this->title = $p[0];\n        }\n        else{\n          $this->ext = '';\n          $this->title = substr($this->name,-1) === '\/' ? substr($this->name,0,-1) : $this->name;\n        }\n      }\n      return $this->ext;\n    }\n    return false;\n  }",
                        "startLine": 165,
                        "doc": {
                            "description": {
                                "description": "Return the extension of the file.\n  * ```php\n$file = new File('C:\/Test\/file.txt');\nbbn\\X::dump($file->getExtension());\n\/\/(string) 'txt'\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "string|false"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "string|false",
                            "example_method": "```php\n$file = new File('C:\/Test\/file.txt');\nbbn\\X::dump($file->getExtension());\n\/\/(string) 'txt'\n```"
                        },
                        "endLine": 182,
                        "isUserDefined": true
                    },
                    "download": {
                        "file": "bbn\\File",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->file ){\n      if ( !$this->size ){\n        $this->getSize();\n      }\n      \n      if ( $this->size && ($handle = fopen($this->file, 'r')) ){\n        header('Content-type: application\/octet-stream');\n        header('Content-Disposition: attachment; filename=\"'.$this->name.'\"');\n        while ( !feof($handle) ){\n          echo fread($handle, 65536);\n        }\n        fclose($handle);\n      }\n      else{\n        die('Impossible to read the file '.$this->name);\n      }\n    }\n    return $this;\n  }",
                        "startLine": 228,
                        "doc": {
                            "description": {
                                "description": "Downloads the file. At the end of the script the user will be invited to choose the file's destination. If the file doesn't exist return an object with parameter file = null.\n  * ```php\n$f = new \\bbn\\File('C:\/Test\/file.png');\n$f->download();\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "file"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "file",
                            "example_method": "```php\n$f = new \\bbn\\File('C:\/Test\/file.png');\n$f->download();\n```"
                        },
                        "endLine": 248,
                        "isUserDefined": true
                    },
                    "get_hash": {
                        "file": "bbn\\File",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->file ){\n      return md5_file($this->file);\n    }\n    return '';\n  }",
                        "startLine": 261,
                        "doc": {
                            "description": {
                                "description": "Return the hash of the file.\n  * ```php\n$file = new File('C:\/Test\/file.txt');\nbbn\\X::dump($file->getHash());\n\/\/ (string) '9a3182g36a83adtd9c9c2l59ap2a719c'\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "string",
                            "example_method": "```php\n$file = new File('C:\/Test\/file.txt');\nbbn\\X::dump($file->getHash());\n\/\/ (string) '9a3182g36a83adtd9c9c2l59ap2a719c'\n```"
                        },
                        "endLine": 267,
                        "isUserDefined": true
                    },
                    "delete": {
                        "file": "bbn\\File",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->file ){\n      unlink($this->file);\n    }\n    $this->file = false;\n    return $this;\n  }",
                        "startLine": 283,
                        "doc": {
                            "description": {
                                "description": "Deletes the file.\n  * ```php\nbbn\\X::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) true\n$file = new File('C:\/Test\/file.txt');\n$file->delete();\nbbn\\X::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "file"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "file",
                            "example_method": "```php\nbbn\\X::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) true\n$file = new File('C:\/Test\/file.txt');\n$file->delete();\nbbn\\X::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) false\n```"
                        },
                        "endLine": 290,
                        "isUserDefined": true
                    },
                    "save": {
                        "file": "bbn\\File",
                        "public": true,
                        "code": "function($dest = '.\/')\n  {\n    $new_name = false;\n    if ( substr($dest,-1) === '\/' ){\n      if ( is_dir($dest) ){\n        $new_name = 0;\n      }\n    }\n    else if ( is_dir($dest) ){\n      $dest .= '\/';\n      $new_name = 0;\n    }\n    else if ( is_dir(substr($dest,0,strrpos($dest,'\/'))) ){\n      $new_name = 1;\n    }\n    if ( $new_name !== false ){\n      if ( $new_name === 0 ){\n        $dest .= $this->name;\n      }\n      if ( null !== $_FILES ){\n        move_uploaded_file($this->file,$dest);\n        $this->file = $dest;\n        $this->uploaded = 1;\n      }\n      else{\n        copy($this->file, $dest);\n      }\n    }\n    return $this;\n  }",
                        "startLine": 302,
                        "doc": {
                            "description": {
                                "description": "That feature saves the file as a parameter, and accepts a string that contains the path where to save.\n  * ```php\n $file->save('\/home\/user\/desktop\/');\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$dest"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "file"
                                    }
                                ]
                            },
                            "params": {
                                "$dest": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "file",
                            "example_method": "```php\n $file->save('\/home\/user\/desktop\/');\n```"
                        },
                        "endLine": 331,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "dest",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": ".\/",
                                "default_name": ""
                            }
                        ]
                    },
                    "test": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 45,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 50,
                        "isUserDefined": true,
                        "parent": {
                            "name": "test",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 45,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 50,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "check": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 56,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 61,
                        "isUserDefined": true,
                        "parent": {
                            "name": "check",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 56,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 61,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 72,
                        "endLine": 74,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 72,
                            "doc": "",
                            "endLine": 74,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_errors": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 76,
                        "endLine": 78,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_errors",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 76,
                            "doc": "",
                            "endLine": 78,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "log": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                        "startLine": 80,
                        "endLine": 88,
                        "isUserDefined": true,
                        "parent": {
                            "name": "log",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                            "startLine": 80,
                            "doc": "",
                            "endLine": 88,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "__call": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                        "startLine": 95,
                        "doc": {
                            "description": "",
                            "params": {
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$arguments": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 99,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "parent": {
                            "name": "__call",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                            "startLine": 95,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$name": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "$arguments": {
                                        "type": "array",
                                        "description": ""
                                    }
                                },
                                "return": "void"
                            },
                            "endLine": 99,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 2,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "name",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "arguments",
                                    "position": 1,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "arguments",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 104,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "boolean"
                        },
                        "endLine": 106,
                        "isUserDefined": true,
                        "parent": {
                            "name": "is_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 104,
                            "doc": {
                                "description": "",
                                "params": [],
                                "return": "boolean"
                            },
                            "endLine": 106,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "set_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($debug)\n  {\n  }",
                        "startLine": 112,
                        "doc": {
                            "description": "",
                            "params": {
                                "$debug": {
                                    "type": "boolean",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 114,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($debug)\n  {\n  }",
                            "startLine": 112,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$debug": {
                                        "type": "boolean",
                                        "description": ""
                                    }
                                },
                                "return": "self"
                            },
                            "endLine": 114,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "debug",
                                    "position": 0,
                                    "type": {},
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "debug",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "size": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "int"
                            }
                        ]
                    }
                },
                "ext": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "mixed"
                            }
                        ]
                    }
                },
                "fs": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "file\\system"
                            }
                        ]
                    }
                },
                "hash": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "path": {
                    "public": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "name": {
                    "public": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string"
                            }
                        ]
                    }
                },
                "file": {
                    "public": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "mixed"
                            }
                        ]
                    }
                },
                "title": {
                    "public": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "mixed"
                            }
                        ]
                    }
                },
                "uploaded": {
                    "public": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "int"
                            }
                        ]
                    }
                },
                "errors": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "errors",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "error": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "false|string"
                            }
                        ]
                    },
                    "parent": {
                        "name": "error",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "debug": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "boolean"
                            }
                        ]
                    },
                    "parent": {
                        "name": "debug",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "log": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "log",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                }
            },
            "staticProperties": [],
            "costants": null,
            "numMethods": 18,
            "numProperties": 13,
            "numConstants": 0,
            "numStaticProperties": 0,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": "bbn\\Models\\Cls\\Basic",
            "isSubclassOf": false,
            "defaultProperties": {
                "size": 0,
                "ext": null,
                "fs": null,
                "hash": null,
                "path": null,
                "name": null,
                "file": null,
                "title": null,
                "uploaded": 0,
                "errors": [],
                "error": false,
                "debug": false,
                "log": []
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "file"
        },
        "mail": {
            "doc": {
                "description": "",
                "tags": []
            },
            "name": "bbn\\Mail",
            "namespace": true,
            "traits": [],
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/mail.php",
            "startLine": 47,
            "endLine": 288,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function($cfg)\n  {\n      die(\"You must provide the constants BBN_ADMIN_EMAIL and BBN_IS_DEV to use the mail class...\");\n    }\n    if ( !isset($cfg['from']) && isset($cfg['user']) ){\n      $cfg['from'] = $cfg['user'];\n    }\n    if ( !isset($cfg['host'], $cfg['from']) || !str::isDomain($cfg['host']) || !str::isEmail($cfg['from'])){\n      die(\"A host name and a \\\"From\\\" eMail address must be provided\");\n    }\n    $this->mailer = new PHPMailer();\n    $this->mailer->CharSet = isset($cfg['charset']) ? $cfg['charset'] : \"UTF-8\";\n    if ( isset($cfg['user'], $cfg['pass']) ){\n      \/\/ SMTP connection will not close after each email sent, reduces SMTP overhead\n      $this->mailer->isSMTP();\n      if ( !empty($cfg['ssl']) ){\n        if ( \\is_array($cfg['ssl']) ){\n          $this->mailer->SMTPOptions = ['ssl' => $cfg['ssl']];\n        }\n        else{\n          $this->mailer->SMTPOptions = [\n            'verify_peer' => false,\n            'verify_peer_name' => false,\n            'verify_host' => false,\n            'allow_self_signed' => false\n          ];\n        }\n      }\n      else{\n        $this->mailer->SMTPSecure = 'tls';\n      }\n      $this->mailer->Host = $cfg['host'];\n      $this->mailer->Port = isset($cfg['port']) ? $cfg['port'] : 587;\n      $this->mailer->SMTPKeepAlive = true;\n      $this->mailer->SMTPDebug = empty($cfg['debug']) ? false : 3;\n      $this->mailer->Debugoutput = 'error_log';\n      $this->mailer->SMTPAuth = true;\n      $this->mailer->Username = $cfg['user'];\n      $this->mailer->Password = $cfg['pass'];\n      if ( !empty($cfg['imap']) ){\n        $this->setImap($cfg);\n      }\n    }\n    $this->setFrom($cfg['from'], isset($cfg['name']) ? $cfg['name'] : 0);\n    $this->setTemplate(isset($cfg['template']) ? $cfg['template'] : self::getDefaultTemplate());\n  }",
                "startLine": 87,
                "endLine": 132,
                "isUserDefined": true,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": {
                    "set_content": {
                        "file": "bbn\\Mail",
                        "static": true,
                        "private": true,
                        "code": "function($c)\n  {\n    if ( $md5 !== self::$_hash_content ){\n      self::$_hash_content = $md5;\n      $inliner = new \\TijsVerkoyen\\CssToInlineStyles\\CssToInlineStyles();\n      self::$_content = $inliner->convert($c);\n    }\n  }",
                        "startLine": 68,
                        "endLine": 75,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "c",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_default_template": {
                        "file": "bbn\\Mail",
                        "static": true,
                        "private": true,
                        "code": "function()\n  {\n      self::$_template_checked = true;\n      if (($dir = \\bbn\\Mvc::getContentPath()) && file_exists($dir.'mails\/template.html')) {\n        self::$_default_template = file_get_contents($dir.'mails\/template.html');\n      }\n    }\n    return self::$_default_template;\n  }",
                        "startLine": 77,
                        "endLine": 85,
                        "isUserDefined": true
                    }
                },
                "protected": {
                    "set_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "protected": true,
                        "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                        "startLine": 63,
                        "endLine": 70,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": true,
                            "public": false,
                            "final": false,
                            "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                            "startLine": 63,
                            "doc": "",
                            "endLine": 70,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "err",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "err",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "public": {
                    "__construct": {
                        "file": "bbn\\Mail",
                        "public": true,
                        "code": "function($cfg)\n  {\n      die(\"You must provide the constants BBN_ADMIN_EMAIL and BBN_IS_DEV to use the mail class...\");\n    }\n    if ( !isset($cfg['from']) && isset($cfg['user']) ){\n      $cfg['from'] = $cfg['user'];\n    }\n    if ( !isset($cfg['host'], $cfg['from']) || !str::isDomain($cfg['host']) || !str::isEmail($cfg['from'])){\n      die(\"A host name and a \\\"From\\\" eMail address must be provided\");\n    }\n    $this->mailer = new PHPMailer();\n    $this->mailer->CharSet = isset($cfg['charset']) ? $cfg['charset'] : \"UTF-8\";\n    if ( isset($cfg['user'], $cfg['pass']) ){\n      \/\/ SMTP connection will not close after each email sent, reduces SMTP overhead\n      $this->mailer->isSMTP();\n      if ( !empty($cfg['ssl']) ){\n        if ( \\is_array($cfg['ssl']) ){\n          $this->mailer->SMTPOptions = ['ssl' => $cfg['ssl']];\n        }\n        else{\n          $this->mailer->SMTPOptions = [\n            'verify_peer' => false,\n            'verify_peer_name' => false,\n            'verify_host' => false,\n            'allow_self_signed' => false\n          ];\n        }\n      }\n      else{\n        $this->mailer->SMTPSecure = 'tls';\n      }\n      $this->mailer->Host = $cfg['host'];\n      $this->mailer->Port = isset($cfg['port']) ? $cfg['port'] : 587;\n      $this->mailer->SMTPKeepAlive = true;\n      $this->mailer->SMTPDebug = empty($cfg['debug']) ? false : 3;\n      $this->mailer->Debugoutput = 'error_log';\n      $this->mailer->SMTPAuth = true;\n      $this->mailer->Username = $cfg['user'];\n      $this->mailer->Password = $cfg['pass'];\n      if ( !empty($cfg['imap']) ){\n        $this->setImap($cfg);\n      }\n    }\n    $this->setFrom($cfg['from'], isset($cfg['name']) ? $cfg['name'] : 0);\n    $this->setTemplate(isset($cfg['template']) ? $cfg['template'] : self::getDefaultTemplate());\n  }",
                        "startLine": 87,
                        "endLine": 132,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "set_imap": {
                        "file": "bbn\\Mail",
                        "public": true,
                        "code": "function($cfg)\n  {\n      die(\"You need to provide user and password for IMAP connection\");\n    }\n    $imap_host = isset($cfg['imap_host']) ? $cfg['imap_host'] : $cfg['host'];\n    $this->imap_user = isset($cfg['imap_user']) ? $cfg['imap_user'] : $cfg['user'];\n    $this->imap_pass = isset($cfg['imap_pass']) ? $cfg['imap_pass'] : $cfg['pass'];\n    $this->imap_sent = isset($cfg['imap_sent']) ? $cfg['imap_sent'] : 'Sent';\n    if ( isset($cfg['imap_port']) ){\n      $imap_port = $cfg['imap_port'];\n    }\n    if ( !empty($cfg['imap_ssl']) ){\n      if ( !isset($cfg['imap_port']) ){\n        $imap_port = 993;\n      }\n      $this->imap_string = \"{\".$imap_host.\":\".$imap_port.\"\/ssl\";\n    }\n    else{\n      if ( !isset($cfg['imap_port']) ){\n        $imap_port = 143;\n      }\n      $this->imap_string = \"{\".$imap_host.\":\".$imap_port.\"\/tls\";\n    }\n    if ( empty($cfg['valid']) ){\n      $this->imap_string .= \"\/novalidate-cert\";\n    }\n    $this->imap_string .= \"}\";\n    return $this;\n  }",
                        "startLine": 134,
                        "endLine": 162,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "unset_imap": {
                        "file": "bbn\\Mail",
                        "public": true,
                        "code": "function()\n  {\n    return $this;\n  }",
                        "startLine": 164,
                        "endLine": 167,
                        "isUserDefined": true
                    },
                    "set_from": {
                        "file": "bbn\\Mail",
                        "public": true,
                        "code": "function($email, $name = NULL)\n  {\n      die(\"The From eMail address is not valid\");\n    }\n    if ( !$name ){\n      $name = $email;\n    }\n    $this->mailer->setFrom($email, $name);\n    $this->mailer->addReplyTo($email, $name);\n    return $this;\n  }",
                        "startLine": 169,
                        "endLine": 179,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "email",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "name",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "set_template": {
                        "file": "bbn\\Mail",
                        "public": true,
                        "code": "function($file)\n  {\n      $this->template = file_get_contents($file);\n      $this->path = dirname($file);\n    }\n    else if ( \\is_string($file) ){\n      $this->template = $file;\n      $this->path = BBN_DATA_PATH;\n    }\n    return $this;\n  }",
                        "startLine": 181,
                        "endLine": 191,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "file",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_error": {
                        "file": "bbn\\Mail",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 193,
                        "endLine": 195,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 72,
                            "doc": "",
                            "endLine": 74,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "send": {
                        "file": "bbn\\Mail",
                        "public": true,
                        "code": "function($cfg)\n  {\n    $r = false;\n    if ( !defined('BBN_IS_PROD') || !BBN_IS_PROD ){\n      $cfg['to'] = BBN_ADMIN_EMAIL;\n      $cfg['cc'] = '';\n      $cfg['bcc'] = '';\n      $this->mailer->AddAddress(BBN_ADMIN_EMAIL);\n      $valid = 1;\n    }\n    else{\n      foreach ( self::$_dest_fields as $dest_field ){\n        if ( isset($cfg[$dest_field]) ){\n          if ( !\\is_array($cfg[$dest_field]) ){\n            $cfg[$dest_field] = array_map(function($a){\n              return trim($a);\n            }, explode(\";\", $cfg[$dest_field]));\n          }\n          foreach ( $cfg[$dest_field] as $dest ){\n            if ( PHPMailer::validateAddress($dest) ){\n              switch ( $dest_field ){\n                case \"to\":\n                  $this->mailer->AddAddress($dest);\n                  break;\n                case \"cc\":\n                  $this->mailer->AddCC($dest);\n                  break;\n                case \"bcc\":\n                  $this->mailer->AddBCC($dest);\n                  break;\n              }\n              $valid = 1;\n            }\n            else{\n              X::log(\"Adresse email invalide: \".$dest);\n              $valid = false;\n            }\n          }\n        }\n      }\n    }\n    if ( $valid ){\n      $ar = [];\n      if ( isset($cfg['subject']) ){\n        $ar['title'] = $cfg['subject'];\n      }\n      else if ( isset($cfg['title']) ){\n        $ar['title'] = $cfg['title'];\n      }\n      $this->mailer->Subject = isset($ar['title']) ? $ar['title'] : '';\n\n      if ( !isset($cfg['text']) ){\n        $cfg['text'] = '';\n      }\n      if ( isset($cfg['attachments']) ){\n        if ( \\is_string($cfg['attachments']) ){\n          $cfg['attachments'] = [$cfg['attachments']];\n        }\n        foreach ( $cfg['attachments'] as $name => $att ){\n          if ( is_file($att) ){\n            \/\/ 2nd parameter is the file's name in the mail\n            $this->mailer->AddAttachment($att, is_int($name) ? '' : $name);\n          }\n        }\n      }\n      if ( !isset($renderer) ){\n        $renderer = Tpl::renderer($this->template);\n      }\n      $ar['url'] = \\defined('BBN_URL') ? BBN_URL : '';\n      $ar['text'] = $cfg['text'];\n      $ar['text'] = $renderer($ar);\n      self::setContent($ar['text']);\n      $this->mailer->msgHTML(self::$_content, $this->path, true);\n      $r = $this->mailer->send();\n      if ( $r && !empty($this->imap_string) ){\n        $mail_string = $this->mailer->getSentMIMEMessage();\n        if ( !is_resource($this->imap) ){\n          $this->imap = \\imap_open($this->imap_string, $this->imap_user, $this->imap_pass);\n        }\n        if ( !is_resource($this->imap) || !\\imap_append($this->imap, $this->imap_string.$this->imap_sent, $mail_string, \"\\\\Seen\") ){\n          $this->log(\\imap_errors());\n        }\n      }\n      if ( !$r ){\n        $this->log(\\imap_last_error());\n      }\n    }\n    $this->mailer->ClearAllRecipients();\n    $this->mailer->ClearAttachments();\n    return $r;\n  }",
                        "startLine": 197,
                        "endLine": 287,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "test": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 45,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 50,
                        "isUserDefined": true,
                        "parent": {
                            "name": "test",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 45,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 50,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "check": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 56,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 61,
                        "isUserDefined": true,
                        "parent": {
                            "name": "check",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 56,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 61,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_errors": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 76,
                        "endLine": 78,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_errors",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 76,
                            "doc": "",
                            "endLine": 78,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "log": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                        "startLine": 80,
                        "endLine": 88,
                        "isUserDefined": true,
                        "parent": {
                            "name": "log",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                            "startLine": 80,
                            "doc": "",
                            "endLine": 88,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "__call": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                        "startLine": 95,
                        "doc": {
                            "description": "",
                            "params": {
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$arguments": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 99,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "parent": {
                            "name": "__call",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                            "startLine": 95,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$name": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "$arguments": {
                                        "type": "array",
                                        "description": ""
                                    }
                                },
                                "return": "void"
                            },
                            "endLine": 99,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 2,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "name",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "arguments",
                                    "position": 1,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "arguments",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 104,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "boolean"
                        },
                        "endLine": 106,
                        "isUserDefined": true,
                        "parent": {
                            "name": "is_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 104,
                            "doc": {
                                "description": "",
                                "params": [],
                                "return": "boolean"
                            },
                            "endLine": 106,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "set_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($debug)\n  {\n  }",
                        "startLine": 112,
                        "doc": {
                            "description": "",
                            "params": {
                                "$debug": {
                                    "type": "boolean",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 114,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($debug)\n  {\n  }",
                            "startLine": 112,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$debug": {
                                        "type": "boolean",
                                        "description": ""
                                    }
                                },
                                "return": "self"
                            },
                            "endLine": 114,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "debug",
                                    "position": 0,
                                    "type": {},
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "debug",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "_dest_fields": {
                    "static": true,
                    "private": true
                },
                "_default_template": {
                    "static": true,
                    "private": true
                },
                "_template_checked": {
                    "static": true,
                    "private": true
                },
                "_content": {
                    "static": true,
                    "private": true
                },
                "_hash_content": {
                    "static": true,
                    "private": true
                },
                "mailer": {
                    "public": true
                },
                "template": {
                    "private": true
                },
                "path": {
                    "private": true
                },
                "imap_user": {
                    "private": true
                },
                "imap_pass": {
                    "private": true
                },
                "imap_sent": {
                    "private": true
                },
                "imap_string": {
                    "private": true
                },
                "imap": {
                    "private": true
                },
                "errors": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "errors",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "error": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "false|string"
                            }
                        ]
                    },
                    "parent": {
                        "name": "error",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "debug": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "boolean"
                            }
                        ]
                    },
                    "parent": {
                        "name": "debug",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "log": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "log",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                }
            },
            "staticProperties": {
                "_dest_fields": [
                    "to",
                    "cc",
                    "bcc"
                ],
                "_default_template": "<!DOCTYPE html><html><head><title>{{title}}<\/title><meta http-equiv=\"Content-Type\"\ncontent=\"text\/html; charset=UTF-8\"><\/head><body><div>{{{text}}}<\/div><\/body><\/html>",
                "_template_checked": false,
                "_content": "",
                "_hash_content": null
            },
            "costants": null,
            "numMethods": 17,
            "numProperties": 17,
            "numConstants": 0,
            "numStaticProperties": 5,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": "bbn\\Models\\Cls\\Basic",
            "isSubclassOf": false,
            "defaultProperties": {
                "_dest_fields": [
                    "to",
                    "cc",
                    "bcc"
                ],
                "_default_template": "<!DOCTYPE html><html><head><title>{{title}}<\/title><meta http-equiv=\"Content-Type\"\ncontent=\"text\/html; charset=UTF-8\"><\/head><body><div>{{{text}}}<\/div><\/body><\/html>",
                "_template_checked": false,
                "_content": "",
                "_hash_content": null,
                "mailer": null,
                "template": null,
                "path": null,
                "imap_user": null,
                "imap_pass": null,
                "imap_sent": null,
                "imap_string": null,
                "imap": null,
                "errors": [],
                "error": false,
                "debug": false,
                "log": []
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "mail"
        },
        "mvc": {
            "doc": {
                "description": "",
                "tags": []
            },
            "name": "bbn\\Mvc",
            "namespace": true,
            "traits": {
                "bbn\\Models\\Tts\\Singleton": {
                    "name": "bbn\\Models\\Tts\\Singleton"
                },
                "bbn\\Mvc\\Common": {
                    "name": "bbn\\Mvc\\Common"
                }
            },
            "interfaces": {
                "bbn\\Mvc\\Api": {
                    "name": "bbn\\Mvc\\Api"
                }
            },
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/mvc.php",
            "startLine": 42,
            "endLine": 832,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function($db = NULL, $routes = [])\n  {\n    self::initPath();\n    $this->env = new mvc\\environment();\n\t\tif ( \\is_object($db) && ( $class = \\get_class($db) ) && ( $class === 'PDO' || strpos($class, '\\db') !== false ) ){\n\t\t\t$this->db = $db;\n\t\t}\n\t\telse{\n\t\t\t$this->db = null;\n\t\t}\n\t\t$this->inc = new \\stdClass();\n    $this->o = $this->inc;\n    if ( \\is_array($routes) && isset($routes['root']) ){\n      foreach ( $routes['root'] as $url => &$route ){\n        if (isset($route['root']) && defined('BBN_'.strtoupper($route['root']).'_PATH')) {\n          $route['path'] = constant('BBN_'.strtoupper($route['root']).'_PATH').$route['path'];\n        }\n        if ( !empty($route['path']) && (substr($route['path'], -1) !== '\/') ){\n          $route['path'] .= '\/';\n        }\n        if ( isset($route['path']) ){\n          $route['url'] = $url;\n          $this->registerPlugin($route);\n        }\n      }\n    }\n    $this->initLocale();\n    $this->router = new mvc\\router($this, $routes);\n    $this->route();\n  }",
                "startLine": 391,
                "doc": {
                    "description": "This should be called only once from within the app",
                    "params": {
                        "$db": {
                            "type": "object | string",
                            "description": "The database object if there is"
                        },
                        "$routes": {
                            "type": "array",
                            "description": "An array of routes usually defined in \/_appui\/current\/cfg\/routes.json<\/em>"
                        }
                    },
                    "return": ""
                },
                "endLine": 420,
                "isUserDefined": true,
                "numberOfParameters": 2,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": null,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "routes",
                        "position": 1,
                        "type": null,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": {
                    "add_view": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "private": true,
                        "code": "function($path, $mode, bbn\\Mvc\\View $view)\n  {\n    if ( !isset(self::$_loaded_views[$mode][$path]) ){\n      self::$_loaded_views[$mode][$path] = $view;\n    }\n    return self::$_loaded_views[$mode][$path];\n  }",
                        "startLine": 321,
                        "doc": {
                            "description": "This function gets the content of a view file and adds it to the loaded_views array.",
                            "params": {
                                "$p": {
                                    "type": "string",
                                    "description": "The full path to the view file"
                                }
                            },
                            "return": "string The content of the view"
                        },
                        "endLine": 327,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 3,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "view",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "route": {
                        "file": "bbn\\Mvc",
                        "private": true,
                        "code": "function($url = false)\n  {\n      $this->info = $this->getRoute($this->getUrl(), $this->getMode());\n    }\n    return $this;\n  }",
                        "startLine": 351,
                        "endLine": 356,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "url",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "register_plugin": {
                        "file": "bbn\\Mvc",
                        "private": true,
                        "code": "function(array $plugin)\n  {\n      $this->plugins[$plugin['name']] = [\n        'name' => $plugin['name'],\n        'url' => $plugin['url'],\n        'path' => $plugin['path']\n      ];\n    }\n  }",
                        "startLine": 358,
                        "endLine": 366,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "init_locale": {
                        "file": "bbn\\Mvc",
                        "private": true,
                        "code": "function()\n  {\n      putenv('LANG='.BBN_LOCALE);\n      \/\/setlocale(LC_ALL, '');\n      setlocale(LC_MESSAGES,BBN_LOCALE);\n      \/\/setlocale(LC_CTYPE, BBN_LOCALE);\n      \/\/$domains = glob($root.'\/'.$locale.'\/LC_MESSAGES\/messages-*.mo');\n      \/\/$current = basename($domains[0],'.mo');\n      \/\/$timestamp = preg_replace('{messages-}i','',$current);\n      $name = defined('BBN_APP_NAME') ? BBN_APP_NAME : 'bbn-app';\n      bindtextdomain($name, self::getAppPath().'locale');\n      bind_textdomain_codeset($name, 'UTF-8');\n      textdomain($name);\n    }\n    return $this;\n  }",
                        "startLine": 368,
                        "endLine": 383,
                        "isUserDefined": true
                    },
                    "check_path": {
                        "file": "bbn\\Mvc",
                        "private": true,
                        "code": "function()\n  {\n    foreach ( $ar as $a ){\n      $b = bbn\\Str::parsePath($a, true);\n      if ( empty($b) && !empty($a) ){\n        $this->error(\"The path $a is not an acceptable value\");\n        return false;\n      }\n    }\n    return 1;\n  }",
                        "startLine": 31,
                        "doc": {
                            "description": "This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.",
                            "params": {
                                "$p": {
                                    "type": "string",
                                    "description": "The request path <em>(e.g books\/466565 or html\/home)<\/em>"
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 41,
                        "isUserDefined": true
                    },
                    "error": {
                        "file": "bbn\\Mvc",
                        "private": true,
                        "code": "function($msg)\n  {\n    $this->log($msg, 'mvc');\n    die($msg);\n  }",
                        "startLine": 43,
                        "endLine": 47,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "msg",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "protected": {
                    "singleton_init": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "protected": true,
                        "code": "function($instance)\n  {\n      self::$singleton_exists = 1;\n      self::$singleton_instance = $instance;\n    }\n  }",
                        "startLine": 18,
                        "endLine": 23,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "instance",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "public": {
                    "init_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n      self::$_app_name = BBN_APP_NAME;\n      self::$_app_path = BBN_APP_PATH;\n      self::$_cur_path = BBN_CUR_PATH;\n      self::$_lib_path = BBN_LIB_PATH;\n      self::$_data_path = BBN_DATA_PATH;\n    }\n  }",
                        "startLine": 134,
                        "endLine": 142,
                        "isUserDefined": true
                    },
                    "get_app_name": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 144,
                        "endLine": 146,
                        "isUserDefined": true
                    },
                    "get_app_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($raw = false)\n  {\n  }",
                        "startLine": 148,
                        "endLine": 150,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "raw",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_cur_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 152,
                        "endLine": 154,
                        "isUserDefined": true
                    },
                    "get_lib_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 156,
                        "endLine": 158,
                        "isUserDefined": true
                    },
                    "get_data_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return BBN_DATA_PATH.($plugin ? 'plugins\/'.$plugin.'\/' : '');\n  }",
                        "startLine": 160,
                        "endLine": 163,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_tmp_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return self::$_app_name ? self::getDataPath().'tmp\/'.($plugin ? $plugin.'\/' : '') : '';\n  }",
                        "startLine": 165,
                        "endLine": 168,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_log_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return self::$_app_name ? self::getDataPath().'logs\/'.($plugin ? $plugin.'\/' : '') : '';\n  }",
                        "startLine": 170,
                        "endLine": 173,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_cache_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return BBN_DATA_PATH.'cache\/'.($plugin ? $plugin.'\/' : '');\n  }",
                        "startLine": 175,
                        "endLine": 178,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_content_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return self::$_app_name ? self::getDataPath().($plugin ? 'plugins\/'.$plugin.'\/' : 'content\/') : '';\n  }",
                        "startLine": 180,
                        "endLine": 183,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_user_tmp_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($id_user = NULL, $plugin = NULL)\n  {\n    if (!self::$_app_name){\n      return null;\n    }\n    if ( !$id_user ){\n      $usr = \\bbn\\User::getInstance();\n      if ( $usr ){\n        $id_user = $usr->getId();\n      }\n    }\n    if ( $id_user ){\n      return self::getDataPath().'users\/'.$id_user.'\/tmp\/'.($plugin ? $plugin.'\/' : '');;\n    }\n    return null;\n  }",
                        "startLine": 185,
                        "endLine": 200,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "id_user",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "plugin",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_user_data_path": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($id_user = NULL, $plugin = NULL)\n  {\n    if (!self::$_app_name){\n      return null;\n    }\n    if ( !$id_user ){\n      $usr = \\bbn\\User::getInstance();\n      if ( $usr ){\n        $id_user = $usr->getId();\n      }\n    }\n    if ( $id_user ){\n      return self::getDataPath().'users\/'.$id_user.'\/data\/'.($plugin ? $plugin.'\/' : '');;\n    }\n    return null;\n  }",
                        "startLine": 202,
                        "endLine": 217,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "id_user",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "plugin",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "include_model": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($bbn_inc_file, $model)\n  {\n      ob_start();\n      $d = include($bbn_inc_file);\n      ob_end_clean();\n      if ( \\is_object($d) ){\n        $d = X::toArray($d);\n      }\n      if ( !\\is_array($d) ){\n        return false;\n      }\n      return $d;\n    }\n    return false;\n  }",
                        "startLine": 219,
                        "endLine": 233,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "bbn_inc_file",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "model",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_cookie": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 235,
                        "endLine": 237,
                        "isUserDefined": true
                    },
                    "set_root": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($root)\n  {\n    if ( strpos($root, -1) !== '\/' ){\n      $root .= '\/';\n    }\n    if ( 1 ){\n      $this->root = $root;\n    }\n  }",
                        "startLine": 239,
                        "endLine": 247,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "root",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_root": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 249,
                        "endLine": 251,
                        "isUserDefined": true
                    },
                    "fetch_dir": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($dir, $mode)\n  {\n  }",
                        "startLine": 253,
                        "endLine": 255,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "dir",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "apply_locale": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin)\n  {\n  }",
                        "startLine": 257,
                        "endLine": 259,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "include_php_view": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($bbn_inc_file, $bbn_inc_content, array $bbn_inc_data = [])\n  {\n    $randoms = [];\n    $_random = function($i) use (&$randoms){\n      if ( !isset($randoms[$i]) ){\n        $randoms[$i] = md5(\\bbn\\Str::genpwd());\n      }\n      return $randoms[$i];\n    };\n    $fn = function() use($bbn_inc_file, $bbn_inc_content, $bbn_inc_data, $_random){\n      if ( $bbn_inc_content ){\n        ob_start();\n        if ( \\count($bbn_inc_data) ){\n          foreach ( $bbn_inc_data as $bbn_inc_key => $bbn_inc_val ){\n            $$bbn_inc_key = $bbn_inc_val;\n          }\n          unset($bbn_inc_key, $bbn_inc_val);\n        }\n        unset($bbn_inc_data);\n        try{\n          eval('?>'.$bbn_inc_content);\n        }\n        catch ( \\Exception $e){\n          X::logError($e->getCode(), $e->getMessage(), $bbn_inc_file, 1);\n        }\n        $c = ob_get_contents();\n        ob_end_clean();\n        return $c;\n      }\n      return '';\n    };\n    return $fn();\n  }",
                        "startLine": 261,
                        "endLine": 293,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "bbn_inc_file",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "bbn_inc_content",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "bbn_inc_data",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "include_controller": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($bbn_inc_file, bbn\\Mvc\\Controller $ctrl, $bbn_is_super = false)\n  {\n      return require($bbn_inc_file);\n    }\n    ob_start();\n    $r = require($bbn_inc_file);\n    if ( $output = ob_get_contents() ){\n      ob_end_clean();\n    }\n    if ( $bbn_is_super ){\n      return $r ? true : false;\n    }\n    return $output;\n  }",
                        "startLine": 300,
                        "doc": {
                            "description": "",
                            "params": {
                                "$bbn": {
                                    "type": "string",
                                    "description": "inc_file"
                                },
                                "$ctrl": {
                                    "type": "mvc\\controller",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 313,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "bbn_inc_file",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ctrl",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "bbn_is_super",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "set_db_in_controller": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($r = false)\n  {\n    self::$db_in_controller = $r ? true : false;\n  }",
                        "startLine": 335,
                        "doc": {
                            "description": "This function gets the content of a view file and adds it to the loaded_views array.",
                            "params": {
                                "$p": {
                                    "type": "string",
                                    "description": "The full path to the view file"
                                }
                            },
                            "return": "string The content of the view"
                        },
                        "endLine": 338,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "r",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_debug": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 343,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 345,
                        "isUserDefined": true
                    },
                    "debug": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function($state = 1)\n  {\n  }",
                        "startLine": 347,
                        "endLine": 349,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "state",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 1,
                                "default_name": ""
                            }
                        ]
                    },
                    "__construct": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($db = NULL, $routes = [])\n  {\n    self::initPath();\n    $this->env = new mvc\\environment();\n\t\tif ( \\is_object($db) && ( $class = \\get_class($db) ) && ( $class === 'PDO' || strpos($class, '\\db') !== false ) ){\n\t\t\t$this->db = $db;\n\t\t}\n\t\telse{\n\t\t\t$this->db = null;\n\t\t}\n\t\t$this->inc = new \\stdClass();\n    $this->o = $this->inc;\n    if ( \\is_array($routes) && isset($routes['root']) ){\n      foreach ( $routes['root'] as $url => &$route ){\n        if (isset($route['root']) && defined('BBN_'.strtoupper($route['root']).'_PATH')) {\n          $route['path'] = constant('BBN_'.strtoupper($route['root']).'_PATH').$route['path'];\n        }\n        if ( !empty($route['path']) && (substr($route['path'], -1) !== '\/') ){\n          $route['path'] .= '\/';\n        }\n        if ( isset($route['path']) ){\n          $route['url'] = $url;\n          $this->registerPlugin($route);\n        }\n      }\n    }\n    $this->initLocale();\n    $this->router = new mvc\\router($this, $routes);\n    $this->route();\n  }",
                        "startLine": 391,
                        "doc": {
                            "description": "This should be called only once from within the app",
                            "params": {
                                "$db": {
                                    "type": "object | string",
                                    "description": "The database object if there is"
                                },
                                "$routes": {
                                    "type": "array",
                                    "description": "An array of routes usually defined in \/_appui\/current\/cfg\/routes.json<\/em>"
                                }
                            },
                            "return": ""
                        },
                        "endLine": 420,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "arguments": [
                            {
                                "name": "db",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "routes",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "check": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 427,
                        "doc": {
                            "description": "Checks whether a corresponding file has been found or not.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 429,
                        "isUserDefined": true
                    },
                    "get_plugins": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 431,
                        "endLine": 433,
                        "isUserDefined": true
                    },
                    "has_plugin": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin)\n  {\n  }",
                        "startLine": 435,
                        "endLine": 437,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_plugin": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin)\n  {\n    return isset($this->plugins[$plugin]);\n  }",
                        "startLine": 439,
                        "endLine": 442,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "plugin_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin, $raw = false)\n  {\n        return $this->plugins[$plugin]['path'].($raw ? '' : 'src\/');\n    }\n  }",
                        "startLine": 444,
                        "endLine": 448,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "raw",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "plugin_url": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin)\n  {\n  }",
                        "startLine": 450,
                        "endLine": 452,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "plugin_name": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path)\n  {\n      if ( $p['url'] === $path ){\n        return $name;\n      }\n    }\n    return false;\n  }",
                        "startLine": 454,
                        "endLine": 461,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_route": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, $mode, $root = NULL)\n  {\n  }",
                        "startLine": 468,
                        "endLine": 470,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "root",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_file": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 472,
                        "endLine": 474,
                        "isUserDefined": true
                    },
                    "get_url": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 476,
                        "endLine": 478,
                        "isUserDefined": true
                    },
                    "get_params": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 480,
                        "endLine": 482,
                        "isUserDefined": true
                    },
                    "get_post": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 484,
                        "endLine": 486,
                        "isUserDefined": true
                    },
                    "get_get": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 488,
                        "endLine": 490,
                        "isUserDefined": true
                    },
                    "get_files": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 492,
                        "endLine": 494,
                        "isUserDefined": true
                    },
                    "get_mode": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 496,
                        "endLine": 498,
                        "isUserDefined": true
                    },
                    "set_mode": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($mode)\n  {\n  }",
                        "startLine": 500,
                        "endLine": 502,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "mode",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_cli": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 504,
                        "endLine": 506,
                        "isUserDefined": true
                    },
                    "reroute": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path = '', $post = false, $arguments = false)\n  {\n\t\t$this->is_routed = false;\n\t\t$this->is_controlled = null;\n    $this->info = null;\n    $this->router->reset();\n\t\t$this->route();\n    $this->info['args'] = $arguments;\n    $this->controller->reset($this->info);\n\t\treturn $this;\n  }",
                        "startLine": 514,
                        "doc": {
                            "description": "This will reroute a controller to another one seemlessly. Chainable",
                            "params": {
                                "$path": {
                                    "type": "string",
                                    "description": "The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>"
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 524,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "post",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            },
                            {
                                "name": "arguments",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "has_view": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path = '', $mode = 'html')\n  {\n    return array_key_exists($mode, self::$_loaded_views[$mode]) && isset(self::$_loaded_views[$mode][$path]);\n  }",
                        "startLine": 531,
                        "doc": {
                            "description": "",
                            "params": {
                                "$path": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 534,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "html",
                                "default_name": ""
                            }
                        ]
                    },
                    "add_to_views": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, $mode, bbn\\Mvc\\View $view)\n  {\n    if ( !array_key_exists($mode, self::$_loaded_views[$mode]) ){\n      self::$_loaded_views[$mode] = [];\n    }\n    self::$_loaded_views[$mode][$path] = $view;\n  }",
                        "startLine": 542,
                        "doc": {
                            "description": "",
                            "params": {
                                "$path": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$view": {
                                    "type": "mvc\\view",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 548,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 3,
                        "returns": [
                            "void"
                        ],
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "view",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_view": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, $mode = 'html', array $data = NULL)\n  {\n      die(\"Incorrect mode $path $mode\");\n    }\n    $view = null;\n    if ( $this->hasView($path, $mode) ){\n      $view = self::$_loaded_views[$mode][$path];\n    }\n    else if ( $info = $this->router->route($path, $mode) ){\n      $view = new mvc\\view($info);\n      $this->addToViews($path, $mode, $view);\n    }\n    if ( \\is_object($view) && $view->check() ){\n      return \\is_array($data) ? $view->get($data) : $view->get();\n    }\n    return '';\n  }",
                        "startLine": 558,
                        "doc": {
                            "description": "This will get a view.",
                            "params": {
                                "$path": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$data": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string|false"
                        },
                        "endLine": 574,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "html",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_external_view": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($full_path, $mode = 'html', array $data = NULL)\n  {\n      die(\"Incorrect mode $full_path $mode\");\n    }\n    if ( ($this->getMode() === 'dom') && (!defined('BBN_DEFAULT_MODE') || (BBN_DEFAULT_MODE !== 'dom')) ){\n      $full_path .= ($full_path === '' ? '' : '\/').'index';\n    }\n    $view = null;\n    if ( $this->hasView($full_path, $mode) ){\n      $view = self::$_loaded_views[$mode][$full_path];\n    }\n    else if ( $info = $this->router->route(basename($full_path), 'free-'.$mode, \\dirname($full_path)) ){\n      $view = new mvc\\view($info);\n      $this->addToViews($full_path, $mode, $view);\n    }\n    if ( \\is_object($view) && $view->check() ){\n      return \\is_array($data) ? $view->get($data) : $view->get();\n    }\n    return '';\n  }",
                        "startLine": 584,
                        "doc": {
                            "description": "This will get a view from a different root.",
                            "params": {
                                "$full": {
                                    "type": "string",
                                    "description": "path"
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$data": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string|false"
                        },
                        "endLine": 603,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "full_path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "html",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_plugin_from_component": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($name)\n  {\n    return $this->router->getPluginFromComponent($name);\n  }",
                        "startLine": 605,
                        "endLine": 608,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "route_component": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($name)\n  {\n    return $this->router->routeComponent($name);\n  }",
                        "startLine": 610,
                        "endLine": 613,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "custom_plugin_view": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, $mode, array $data, $plugin)\n  {\n    if ( $plugin && ($route = $this->router->routeCustomPlugin(router::parse($path), $mode, $plugin)) ){\n      $view = new mvc\\view($route);\n      if ( $view->check() ){\n        return \\is_array($data) ? $view->get($data) : $view->get();\n      }\n      return '';\n    }\n    return null;\n  }",
                        "startLine": 615,
                        "endLine": 625,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 4,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "plugin",
                                "position": 3,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "custom_plugin_model": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl, $plugin, $ttl = NULL)\n  {\n    if ( $plugin && ($route = $this->router->routeCustomPlugin(router::parse($path), 'model', $plugin)) ){\n      $model = new mvc\\model($this->db, $route, $ctrl, $this);\n      if ( $ttl ){\n        return $model->getFromCache($data, '', $ttl);\n      }\n      return $model->get($data);\n    }\n    return null;\n  }",
                        "startLine": 627,
                        "endLine": 637,
                        "isUserDefined": true,
                        "numberOfParameters": 5,
                        "numberOfRequiredParameters": 4,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ctrl",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "plugin",
                                "position": 3,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ttl",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_plugin_view": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, $mode, array $data, $plugin)\n  {\n  }",
                        "startLine": 648,
                        "doc": {
                            "description": "This will get a view.",
                            "params": {
                                "$path": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$data": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$plugin": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "string|false"
                        },
                        "endLine": 650,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 4,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "plugin",
                                "position": 3,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_model": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl)\n  {\n      $model = new mvc\\model($this->db, $route, $ctrl, $this);\n      return $model->get($data);\n    }\n    return [];\n  }",
                        "startLine": 659,
                        "doc": {
                            "description": "This will get the model. There is no order for the arguments.",
                            "params": [],
                            "return": "array|false A data model"
                        },
                        "endLine": 665,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 3,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ctrl",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_plugin_model": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl, $plugin, $ttl = NULL)\n  {\n  }",
                        "startLine": 667,
                        "endLine": 669,
                        "isUserDefined": true,
                        "numberOfParameters": 5,
                        "numberOfRequiredParameters": 4,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ctrl",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "plugin",
                                "position": 3,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ttl",
                                "position": 4,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_cached_model": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl, $ttl = 10)\n  {\n      $data = $this->data;\n    }\n    if ( $route = $this->router->route(router::parse($path), 'model') ){\n      $model = new mvc\\model($this->db, $route, $ctrl, $this);\n      return $model->getFromCache($data, '', $ttl);\n    }\n    return [];\n  }",
                        "startLine": 678,
                        "doc": {
                            "description": "This will get the model as it is in cache if any and otherwise will save it in cache then return it",
                            "params": [],
                            "return": "array|false A data model"
                        },
                        "endLine": 687,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 3,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ctrl",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ttl",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 10,
                                "default_name": ""
                            }
                        ]
                    },
                    "set_cached_model": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl, $ttl = 10)\n  {\n      $data = $this->data;\n    }\n    if ( $route = $this->router->route(router::parse($path), 'model') ){\n      $model = new mvc\\model($this->db, $route, $ctrl, $this);\n      return $model->model_set_cache($data, '', $ttl);\n    }\n    return [];\n  }",
                        "startLine": 696,
                        "doc": {
                            "description": "This will set the model in cache",
                            "params": [],
                            "return": "array|false A data model"
                        },
                        "endLine": 705,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 3,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ctrl",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ttl",
                                "position": 3,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 10,
                                "default_name": ""
                            }
                        ]
                    },
                    "delete_cached_model": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl)\n  {\n      $data = $this->data;\n    }\n    if ( $route = $this->router->route(router::parse($path), 'model') ){\n      $model = new mvc\\model($this->db, $route, $ctrl, $this);\n      return $model->deleteCache($data, '');\n    }\n    return [];\n  }",
                        "startLine": 715,
                        "doc": {
                            "description": "This will unset the model in cache",
                            "params": [],
                            "return": "array|false A data model"
                        },
                        "endLine": 724,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 3,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ctrl",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "add_inc": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($name, $obj)\n  {\n\t\t\t$this->inc->{$name} = $obj;\n\t\t}\n  }",
                        "startLine": 731,
                        "doc": {
                            "description": "Adds a property to the MVC object inc if it has not been declared.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 735,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "obj",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "process": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n      $this->obj = new \\stdClass();\n      if ( !\\is_array($this->info)){\n        $this->log(\"No info in MVC\", $this->info);\n        die(\"No info in MVC\");\n      }\n      if ( !$this->controller ){\n        $this->controller = new mvc\\controller($this, $this->info, $this->data, $this->obj);\n      }\n      $this->controller->process();\n    }\n  }",
                        "startLine": 743,
                        "doc": {
                            "description": "Returns the rendered result from the current mvc if successufully processed\nprocess() (or check()) must have been called before.",
                            "params": [],
                            "return": "string|false"
                        },
                        "endLine": 755,
                        "isUserDefined": true
                    },
                    "has_content": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n      return $this->controller->hasContent();\n    }\n    return false;\n  }",
                        "startLine": 757,
                        "endLine": 762,
                        "isUserDefined": true
                    },
                    "transform": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($fn)\n  {\n      $this->controller->transform($fn);\n    }\n  }",
                        "startLine": 764,
                        "endLine": 768,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "fn",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "output": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n      $obj = $this->controller->get();\n      if ($this->isCli()){\n        die(isset($obj->content) ? $obj->content : \"no output\");\n      }\n      if ( \\is_array($obj) ){\n        $obj = X::toObject($obj);\n      }\n\t\t\tif ( (\\gettype($obj) !== 'object') || (\\get_class($obj) !== 'stdClass') ){\n\t\t\t\tdie(x::dump(\"Unexpected output: \".\\gettype($obj)));\n\t\t\t}\n\t\t\tif ( X::countProperties($this->obj) ){\n\t\t\t  $obj = X::mergeObjects($obj, $this->obj);\n      }\n      $output = new mvc\\output($obj, $this->getMode());\n      $output->run();\n    }\n    else{\n      header('HTTP\/1.0 404 Not Found');\n      exit();\n    }\n  }",
                        "startLine": 770,
                        "endLine": 792,
                        "isUserDefined": true
                    },
                    "get_db": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n    if ( self::$db_in_controller && $this->db ){\n      return $this->db;\n    }\n    return null;\n  }",
                        "startLine": 797,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 803,
                        "isUserDefined": true,
                        "returns": [
                            "bbn\\Db",
                            null
                        ]
                    },
                    "set_prepath": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($path)\n  {\n      if ( $this->router->getPrepath(false) === $path ){\n        return 1;\n      }\n      if ( $this->env->setPrepath($path) && $this->router->setPrepath($path) ){\n        $this->params = $this->getParams();\n        return 1;\n      }\n    }\n    die(\"The set_prepath method cannot be used in this MVC\");\n  }",
                        "startLine": 805,
                        "endLine": 816,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_prepath": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n      return $this->router->getPrepath();\n    }\n  }",
                        "startLine": 818,
                        "endLine": 822,
                        "isUserDefined": true
                    },
                    "get_routes": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($type = 'root')\n  {\n      $routes = $this->router->getRoutes();\n      return isset($routes[$type]) ? $routes[$type] : false;\n    }\n  }",
                        "startLine": 824,
                        "endLine": 829,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "type",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "root",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_instance": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 25,
                        "endLine": 27,
                        "isUserDefined": true
                    },
                    "singleton_exists": {
                        "file": "bbn\\Mvc",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 29,
                        "endLine": 31,
                        "isUserDefined": true
                    },
                    "log": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n      $ar = \\func_get_args();\n      bbn\\X::log(\\count($ar) > 1 ? $ar : $ar[0], 'mvc');\n    }\n  }",
                        "startLine": 49,
                        "endLine": 54,
                        "isUserDefined": true
                    },
                    "plugin_data_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    if ( ($this->_plugin || $plugin) && \\defined ('BBN_DATA_PATH') ){\n      return BBN_DATA_PATH.'plugins\/'.$this->pluginName($plugin ?: $this->_plugin).'\/';\n    }\n    return null;\n  }",
                        "startLine": 56,
                        "endLine": 62,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_aliases": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 96,
                        "endLine": 98,
                        "isUserDefined": true
                    },
                    "app_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($raw = false)\n  {\n    return \\bbn\\Mvc::getAppPath($raw);\n  }",
                        "startLine": 104,
                        "endLine": 107,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "raw",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "lib_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function()\n  {\n    return \\bbn\\Mvc::getLibPath();\n  }",
                        "startLine": 109,
                        "endLine": 112,
                        "isUserDefined": true,
                        "returns": [
                            "string"
                        ]
                    },
                    "data_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getDataPath().($plugin ? 'plugins\/'.$plugin.'\/' : '');\n  }",
                        "startLine": 114,
                        "endLine": 117,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "tmp_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getTmpPath($plugin);\n  }",
                        "startLine": 119,
                        "endLine": 122,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "log_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getLogPath($plugin);\n  }",
                        "startLine": 124,
                        "endLine": 127,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "cache_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getCachePath($plugin);\n  }",
                        "startLine": 129,
                        "endLine": 132,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "content_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($plugin = NULL)\n  {\n    return \\bbn\\Mvc::getContentPath($plugin);\n  }",
                        "startLine": 134,
                        "endLine": 137,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "plugin",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "user_tmp_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($id_user = NULL, $plugin = NULL)\n  {\n    return \\bbn\\Mvc::getUserTmpPath($id_user, $plugin);\n  }",
                        "startLine": 139,
                        "endLine": 142,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "id_user",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "plugin",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "user_data_path": {
                        "file": "bbn\\Mvc",
                        "public": true,
                        "code": "function($id_user = NULL, $plugin = NULL)\n  {\n    return \\bbn\\Mvc::getUserDataPath($id_user, $plugin);\n  }",
                        "startLine": 144,
                        "endLine": 147,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "id_user",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "plugin",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "_loaded_views": {
                    "static": true,
                    "private": true,
                    "doc": {
                        "description": "The list of views which have been loaded. We keep their content in an array to not have to include the file again. This is useful for loops.",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    }
                },
                "_is_debug": {
                    "static": true,
                    "private": true
                },
                "_app_name": {
                    "static": true,
                    "private": true
                },
                "_app_path": {
                    "static": true,
                    "private": true
                },
                "_cur_path": {
                    "static": true,
                    "private": true
                },
                "_lib_path": {
                    "static": true,
                    "private": true
                },
                "_data_path": {
                    "static": true,
                    "private": true
                },
                "controller": {
                    "private": true,
                    "doc": {
                        "description": "The current controller",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "null|mvc\\controller"
                            }
                        ]
                    }
                },
                "db": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "db Database object"
                            }
                        ]
                    }
                },
                "env": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "mvc\\environment Environment object"
                            }
                        ]
                    }
                },
                "router": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "mvc\\router Database object"
                            }
                        ]
                    }
                },
                "info": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array The file(s)'s configuration to transmit to the m\/v\/c"
                            }
                        ]
                    }
                },
                "root": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "string The root of the application in the URL (base href)"
                            }
                        ]
                    }
                },
                "plugins": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array The plugins registered through the routes"
                            }
                        ]
                    }
                },
                "loaded": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array The plugins registered through the routes"
                            }
                        ]
                    }
                },
                "inc": {
                    "public": true,
                    "doc": {
                        "description": "An external object that can be filled after the object creation and can be used as a global with the function add_inc",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "stdClass"
                            }
                        ]
                    }
                },
                "data": {
                    "public": true,
                    "doc": {
                        "description": "An external object that can be filled after the object creation and can be used as a global with the function add_inc",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "stdClass"
                            }
                        ]
                    }
                },
                "o": {
                    "public": true
                },
                "obj": {
                    "public": true,
                    "doc": {
                        "description": "The output object",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "null|object"
                            }
                        ]
                    }
                },
                "db_in_controller": {
                    "static": true,
                    "private": true
                },
                "reserved": {
                    "static": true,
                    "public": true,
                    "value": [
                        "_private",
                        "_common",
                        "_htaccess"
                    ]
                },
                "singleton_instance": {
                    "static": true,
                    "protected": true
                },
                "singleton_exists": {
                    "static": true,
                    "protected": true
                },
                "_mvc": {
                    "private": true,
                    "doc": {
                        "description": "The MVC class from which the controller is called",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "mvc"
                            }
                        ]
                    }
                },
                "_plugin": {
                    "private": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "null|string If the controller is inside a plugin this property will be set to its name"
                            }
                        ]
                    }
                }
            },
            "staticProperties": {
                "_loaded_views": {
                    "html": [],
                    "css": [],
                    "js": []
                },
                "_is_debug": 1,
                "_app_name": "apst",
                "_app_path": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/",
                "_cur_path": "\/",
                "_lib_path": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/",
                "_data_path": "\/home\/thomas\/domains\/apstapp.thomas.lan\/APST_DATA\/",
                "db_in_controller": true,
                "reserved": [
                    "_private",
                    "_common",
                    "_htaccess"
                ],
                "singleton_instance": {
                    "inc": {
                        "options": {},
                        "session": {},
                        "user": {
                            "db": {
                                "last_error": false,
                                "debug": false,
                                "engine": "mysql",
                                "host": "mysql.lan",
                                "username": "bbn",
                                "current": "apst_app"
                            },
                            "prev_time": null
                        },
                        "pref": {},
                        "perm": {},
                        "outils": {}
                    },
                    "data": [],
                    "o": {
                        "options": {},
                        "session": {},
                        "user": {
                            "db": {
                                "last_error": false,
                                "debug": false,
                                "engine": "mysql",
                                "host": "mysql.lan",
                                "username": "bbn",
                                "current": "apst_app"
                            },
                            "prev_time": null
                        },
                        "pref": {},
                        "perm": {},
                        "outils": {}
                    },
                    "obj": {}
                },
                "singleton_exists": 1
            },
            "costants": null,
            "numMethods": 86,
            "numProperties": 25,
            "numConstants": 0,
            "numStaticProperties": 11,
            "interfaceNames": [
                "bbn\\Mvc\\Api"
            ],
            "isInterface": false,
            "traitNames": [
                "bbn\\Models\\Tts\\Singleton",
                "bbn\\Mvc\\Common"
            ],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": null,
            "isSubclassOf": false,
            "defaultProperties": {
                "_loaded_views": {
                    "html": [],
                    "css": [],
                    "js": []
                },
                "_is_debug": 1,
                "_app_name": "apst",
                "_app_path": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/",
                "_cur_path": "\/",
                "_lib_path": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/",
                "_data_path": "\/home\/thomas\/domains\/apstapp.thomas.lan\/APST_DATA\/",
                "db_in_controller": true,
                "reserved": [
                    "_private",
                    "_common",
                    "_htaccess"
                ],
                "singleton_instance": {
                    "inc": {
                        "options": {},
                        "session": {},
                        "user": {
                            "db": {
                                "last_error": false,
                                "debug": false,
                                "engine": "mysql",
                                "host": "mysql.lan",
                                "username": "bbn",
                                "current": "apst_app"
                            },
                            "prev_time": null
                        },
                        "pref": {},
                        "perm": {},
                        "outils": {}
                    },
                    "data": [],
                    "o": {
                        "options": {},
                        "session": {},
                        "user": {
                            "db": {
                                "last_error": false,
                                "debug": false,
                                "engine": "mysql",
                                "host": "mysql.lan",
                                "username": "bbn",
                                "current": "apst_app"
                            },
                            "prev_time": null
                        },
                        "pref": {},
                        "perm": {},
                        "outils": {}
                    },
                    "obj": {}
                },
                "singleton_exists": 1,
                "controller": null,
                "db": null,
                "env": null,
                "router": null,
                "info": null,
                "root": null,
                "plugins": null,
                "loaded": {
                    "views": {
                        "html": [],
                        "css": [],
                        "js": []
                    },
                    "models": [],
                    "ctrls": []
                },
                "inc": null,
                "data": [],
                "o": null,
                "obj": null,
                "_mvc": null,
                "_plugin": null
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "mvc"
        },
        "str": {
            "doc": {
                "description": "Class text\nString manipulation class\n * This class only uses static methods and has lots of alias for the escaping methods",
                "tags": {
                    "package": "bbn",
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Apr 4, 2011, 23:23:55 +0000",
                    "category": "Strings",
                    "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
                    "version": "0.2r89"
                }
            },
            "name": "bbn\\Str",
            "namespace": true,
            "traits": [],
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/str.php",
            "startLine": 20,
            "endLine": 1431,
            "contentConstructor": null,
            "methods": {
                "private": [],
                "protected": [],
                "public": {
                    "cast": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    if ( \\is_array($st) || \\is_object($st) ){\n      return '';\n    }\n    return (string)$st;\n  }",
                        "startLine": 37,
                        "doc": {
                            "description": {
                                "description": "Converts any type of variable to a string.\n  * ```php\n$st = 122\n\\bbn\\X::dump(\\bbn\\Str::cast($st));\n\/\/ (string) \"122\"\n\\bbn\\X::dump(\\bbn\\Str::cast(1));\n\/\/ (string) \"1\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st",
                                        "description": "The item to cast."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": "The item to cast."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n$st = 122\n\\bbn\\X::dump(\\bbn\\Str::cast($st));\n\/\/ (string) \"122\"\n\\bbn\\X::dump(\\bbn\\Str::cast(1));\n\/\/ (string) \"1\"\n```"
                        },
                        "endLine": 43,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "change_case": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st, $case = 'x')\n  {\n    $st = self::cast($st);\n    $case = substr(strtolower((string)$case), 0, 1);\n    switch ( $case ){\n      case \"l\":\n        $case = MB_CASE_LOWER;\n        break;\n      case \"u\":\n        $case = MB_CASE_UPPER;\n        break;\n      default:\n        $case = MB_CASE_TITLE;\n    }\n    if ( !empty($st) ){\n      $st = mb_convert_case($st, $case);\n    }\n    return $st;\n  }",
                        "startLine": 62,
                        "doc": {
                            "description": {
                                "description": "Converts the case of a string.\n  * ```php\n$st = 'TEST CASE';\n\\bbn\\X::dump(\\bbn\\Str::changeCase($st, 'lower'));\n\/\/ (string) \"test case\"\n\\bbn\\X::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n\/\/ (string) \"TEST CASE\"\n\\bbn\\X::dump(\\bbn\\Str::changeCase('test case'));\n\/\/ (string) \"Test Case\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st",
                                        "description": "The item to convert."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$case",
                                        "description": "The case to convert to (\"lower\" or \"upper\"), default being the title case."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": "The item to convert."
                                },
                                "$case": {
                                    "type": "mixed",
                                    "description": "The case to convert to (\"lower\" or \"upper\"), default being the title case."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n$st = 'TEST CASE';\n\\bbn\\X::dump(\\bbn\\Str::changeCase($st, 'lower'));\n\/\/ (string) \"test case\"\n\\bbn\\X::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n\/\/ (string) \"TEST CASE\"\n\\bbn\\X::dump(\\bbn\\Str::changeCase('test case'));\n\/\/ (string) \"Test Case\"\n```"
                        },
                        "endLine": 80,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "case",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "x",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_all_quotes": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return self::escapeDquotes(self::escapeSquotes($st));\n  }",
                        "startLine": 95,
                        "doc": {
                            "description": {
                                "description": "Escapes all quotes (single and double) from a given string.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n\/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n\/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\"\n```"
                        },
                        "endLine": 98,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_dquotes": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return addcslashes(self::cast($st), \"\\\"\\\\\\r\\n\\t\");\n  }",
                        "startLine": 112,
                        "doc": {
                            "description": {
                                "description": "Escapes the string in double quotes.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```"
                        },
                        "endLine": 115,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_dquote": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
                        "startLine": 128,
                        "doc": {
                            "description": {
                                "description": "Synonym of \"escape_dquotes\".\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```"
                        },
                        "endLine": 131,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_quote": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
                        "startLine": 144,
                        "doc": {
                            "description": {
                                "description": "Synonym of \"escape_dquotes\".\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```"
                        },
                        "endLine": 147,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_quotes": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
                        "startLine": 160,
                        "doc": {
                            "description": {
                                "description": "Synonym of \"escape_dquotes\".\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```"
                        },
                        "endLine": 163,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_squotes": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return addcslashes(self::cast($st), \"'\\\\\\r\\n\\t\");\n  }",
                        "startLine": 176,
                        "doc": {
                            "description": {
                                "description": "Escapes the string in quotes.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string) \"Today\\'s \"newspaper\"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```"
                        },
                        "endLine": 179,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
                        "startLine": 192,
                        "doc": {
                            "description": {
                                "description": "Synonym of \"escape_squotes\".\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string) \"Today\\'s \"newspaper\"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```"
                        },
                        "endLine": 195,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_apo": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
                        "startLine": 208,
                        "doc": {
                            "description": {
                                "description": "Synonym of \"escape_squotes\".\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string) \"Today\\'s \"newspaper\"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```"
                        },
                        "endLine": 211,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "escape_squote": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
                        "startLine": 224,
                        "doc": {
                            "description": {
                                "description": "Synonym of \"escape_squotes\".\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string) \"Today\\'s \"newspaper\"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to escape."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to escape."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```"
                        },
                        "endLine": 227,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "clean": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st, $mode = 'all')\n  {\n    if ( \\is_array($st) ){\n      reset($st);\n      $i = \\count($st);\n      if ( trim($st[0]) == '' ){\n        array_splice($st,0,1);\n        $i--;\n      }\n      if ( $i > 0 ){\n        if ( trim($st[$i-1]) === '' ){\n          array_splice($st, $i-1, 1);\n          $i--;\n        }\n      }\n      return $st;\n    }\n    else{\n      $st = self::cast($st);\n      if ( $mode == 'all' ){\n        $st = mb_ereg_replace(\"\\n\",'\\n',$st);\n        $st = mb_ereg_replace(\"[\\t\\r]\",\"\",$st);\n        $st = mb_ereg_replace('\\s{2,}',' ',$st);\n      }\n      else if ( $mode == '2nl' ){\n        $st = mb_ereg_replace(\"[\\r]\",\"\",$st);\n        $st = mb_ereg_replace(\"\\n{2,}\",\"\\n\",$st);\n      }\n      else if ( $mode == 'html' ){\n        $st = mb_ereg_replace(\"[\\t\\r\\n]\",'',$st);\n        $st = mb_ereg_replace('\\s{2,}',' ',$st);\n      }\n      else if ( $mode == 'code' ){\n        $st = mb_ereg_replace(\"!\/\\*.*?\\*\/!s\",'',$st); \/\/ comment_pattern\n        $st = mb_ereg_replace(\"[\\r\\n]\",'',$st);\n        $st = mb_ereg_replace(\"\\t\",\" \",$st);\n        $chars = [';','=','+','-','\\(','\\)','\\{','\\}','\\[','\\]',',',':'];\n        foreach ( $chars as $char ){\n          while ( mb_strpos($st,$char.' ') !== false ){\n            $st = mb_ereg_replace($char.' ',$char,$st);\n          }\n          while ( mb_strpos($st,' '.$char) !== false ){\n            $st = mb_ereg_replace(' '.$char,$char,$st);\n          }\n        }\n        $st = mb_ereg_replace('<\\?p'.'hp','<?p'.'hp ',$st);\n        $st = mb_ereg_replace('\\?'.'>','?'.'> ',$st);\n        $st = mb_ereg_replace('\\s{2,}',' ',$st);\n      }\n      return trim($st);\n    }\n  }",
                        "startLine": 260,
                        "doc": {
                            "description": {
                                "description": "Returns an expunged string of several types of character(s) depending on the configuration.\n  * ```php\n$test=\"this is\ncold\";\n  * \\bbn\\X::dump(\\bbn\\Str::clean($test));\n\/\/ (string) \"this is\\n cold\"\n  * $test1=\"this is\n  *\ncold\";\n  * \\bbn\\X::dump(\\bbn\\Str::clean($test1,'2nl'));\n\/* (string)\n\"this is\n cold\"\n  * \\bbn\\X::dump(\\bbn\\Str::clean($test1,'html'));\n\/\/ (string) \"this is cold\"\n  * \\bbn\\X::dump(\\bbn\\Str::clean('$x = 9993','code'));\n\/\/ (string) \"$x=9993\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st",
                                        "description": "The item to be."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$mode",
                                        "description": "A selection of configuration: \"all\" (default), \"2n1\", \"html\", \"code\"."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": "The item to be."
                                },
                                "$mode": {
                                    "type": "string",
                                    "description": "A selection of configuration: \"all\" (default), \"2n1\", \"html\", \"code\"."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n$test=\"this      is\ncold\";\n\n\\bbn\\X::dump(\\bbn\\Str::clean($test));\n\/\/ (string)  \"this is\\n cold\"\n\n$test1=\"this is\n\n\ncold\";\n\n\\bbn\\X::dump(\\bbn\\Str::clean($test1,'2nl'));\n\/* (string)\n\"this is\n cold\"\n\n\\bbn\\X::dump(\\bbn\\Str::clean($test1,'html'));\n\/\/ (string)  \"this is cold\"\n\n\\bbn\\X::dump(\\bbn\\Str::clean('$x = 9993','code'));\n\/\/ (string)  \"$x=9993\"\n```"
                        },
                        "endLine": 311,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "mode",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "all",
                                "default_name": ""
                            }
                        ]
                    },
                    "cut": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st, $max = 15)\n  {\n    $st = self::cast($st);\n    $st = mb_ereg_replace('&nbsp;',' ',$st);\n    $st = mb_ereg_replace('\\n',' ',$st);\n    $st = strip_tags($st);\n    $st = html_entity_decode($st, ENT_QUOTES, 'UTF-8');\n    $st = self::clean($st);\n    if ( mb_strlen($st) >= $max ){\n      \/\/ Chars forbidden to finish with a string\n      $chars = [' ', '.'];\n      \/\/ Final chars\n      $ends = [];\n      \/\/ The string gets cut at $max\n      $st = mb_substr($st, 0, $max);\n      while ( \\in_array(substr($st, -1), $chars) ){\n        $st = substr($st, 0, -1);\n      }\n      $st .= '...';\n    }\n    return $st;\n  }",
                        "startLine": 325,
                        "doc": {
                            "description": {
                                "description": "Cuts a string (HTML and PHP tags stripped) to maximum length inserted.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n\/\/ (string) \"Example...\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to be cut."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$max",
                                        "description": "The maximum string length."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to be cut."
                                },
                                "$max": {
                                    "type": "int",
                                    "description": "The maximum string length."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n\/\/ (string) \"Example...\"\n```"
                        },
                        "endLine": 346,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "max",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 15,
                                "default_name": ""
                            }
                        ]
                    },
                    "sanitize": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    $file = mb_ereg_replace(\"([^\\w\\s\\d\\-_~,;\\[\\]\\(\\).])\", '', $st);\n\t\/\/ Removes any run of periods (thanks falstro!)\n    $file = mb_ereg_replace(\"([\\.]{2,})\", '', $file);\n    return $file;\n  }",
                        "startLine": 351,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": ""
                        },
                        "endLine": 357,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "encode_filename": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st, $maxlength = 50, $extension = NULL, $is_path = false)\n  {\n\n    $st = self::removeAccents(self::cast($st));\n    $allowed = '~\\-_.,\\(\\[\\)\\]';\n\n    \/\/ Arguments order doesn't matter\n    $args = \\func_get_args();\n    foreach ( $args as $i => $a ){\n      if ( $i > 0 ){\n        if ( \\is_string($a) ){\n          $extension = $a;\n        }\n        else if ( \\is_int($a) ){\n          $maxlength = $a;\n        }\n        else if ( \\is_bool($a) ){\n          $is_path = $a;\n        }\n      }\n    }\n\n    if ( !\\is_int($maxlength) ){\n      $maxlength = mb_strlen($st);\n    }\n\n    if ( $is_path ){\n      $allowed .= '\/';\n    }\n\n    if (\n      $extension &&\n      (self::fileExt($st) === self::changeCase($extension, 'lower'))\n    ){\n      $st = substr($st, 0, -(\\strlen($extension)+1));\n    }\n    else if ( $extension = self::fileExt($st) ){\n      $st = substr($st, 0, -(\\strlen($extension)+1));\n    }\n    $st = mb_ereg_replace(\"([^\\w\\s\\d\".$allowed.\".])\", '', $st);\n    $st = mb_ereg_replace(\"([\\.]{2,})\", '', $st);\n    $res = mb_substr($st, 0, $maxlength);\n    if ( $extension ){\n      $res .= '.' . $extension;\n    }\n    return $res;\n  }",
                        "startLine": 373,
                        "doc": {
                            "description": {
                                "description": "Returns a cross-platform filename for the file.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n\/\/ (string) \"test_file_1.txt\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The name as string."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$maxlength",
                                        "description": "The maximum filename length (without extension), default: \"50\"."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$extension",
                                        "description": "The extension of the file."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$is",
                                        "description": "path Tells if the slashes (\/) are authorized in the string"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The name as string."
                                },
                                "$maxlength": {
                                    "type": "int",
                                    "description": "The maximum filename length (without extension), default: \"50\"."
                                },
                                "$extension": {
                                    "type": "string",
                                    "description": "The extension of the file."
                                },
                                "$is": {
                                    "type": "bool",
                                    "description": "path Tells if the slashes (\/) are authorized in the string"
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n\/\/ (string) \"test_file_1.txt\"\n```"
                        },
                        "endLine": 419,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "maxlength",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 50,
                                "default_name": ""
                            },
                            {
                                "name": "extension",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "is_path",
                                "position": 3,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "encode_dbname": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st, $maxlength = 50)\n  {\n    $st = self::removeAccents(self::cast($st));\n    $res = '';\n\n    if ( !\\is_int($maxlength) ){\n      $maxlength = mb_strlen($st);\n    }\n\n    for ( $i = 0; $i < $maxlength; $i++ ){\n      if ( mb_ereg_match('[A-z0-9]',mb_substr($st,$i,1)) ){\n        $res .= mb_substr($st,$i,1);\n      }\n      else if ( (mb_strlen($res) > 0) &&\n        (mb_substr($res,-1) != '_') &&\n        ($i < ( mb_strlen($st) - 1 )) ){\n        $res .= '_';\n      }\n    }\n    if ( substr($res, -1) === '_' ){\n      $res = substr($res, 0, -1);\n    }\n    return $res;\n  }",
                        "startLine": 433,
                        "doc": {
                            "description": {
                                "description": "Returns a corrected string for database naming.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::encodeDbname('my.database_name ? test :,; !plus'));\n\/\/ (string) \"my_database_name_test_plus\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The name as string."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$maxlength",
                                        "description": "The maximum length, default: \"50\"."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The name as string."
                                },
                                "$maxlength": {
                                    "type": "int",
                                    "description": "The maximum length, default: \"50\"."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::encodeDbname('my.database_name ? test  :,; !plus'));\n\/\/ (string) \"my_database_name_test_plus\"\n```"
                        },
                        "endLine": 456,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "maxlength",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 50,
                                "default_name": ""
                            }
                        ]
                    },
                    "file_ext": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($file, $ar = false)\n  {\n    $file = self::cast($file);\n    if ( mb_strrpos($file, '\/') !== false ){\n      $file = substr($file, mb_strrpos($file, '\/') + 1);\n    }\n    if ( mb_strpos($file, '.') !== false ){\n      $p = mb_strrpos($file, '.');\n      $f = mb_substr($file, 0, $p);\n      $ext = mb_convert_case(mb_substr($file, $p+1), MB_CASE_LOWER);\n      return $ar ? [$f, $ext] : $ext;\n    }\n    return $ar ? [$file, ''] : '';\n  }",
                        "startLine": 472,
                        "doc": {
                            "description": {
                                "description": "Returns the file extension.\n  * ```php\n\\bbn\\X::dump(str::fileExt(\\\"c:\\\\Desktop\\\\test.txt\\\"));\n\/\/ (string) \"txt\"\n\\bbn\\X::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt',1));\n\/\/ (array) [ \"test\", \"txt\", ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$file",
                                        "description": "The file path."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$ar",
                                        "description": "If \"true\" also returns the file path, default: \"false\"."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string|array"
                                    }
                                ]
                            },
                            "params": {
                                "$file": {
                                    "type": "string",
                                    "description": "The file path."
                                },
                                "$ar": {
                                    "type": "bool",
                                    "description": "If \"true\" also returns the file path, default: \"false\"."
                                }
                            },
                            "return": "string|array",
                            "example_method": "```php\n\\bbn\\X::dump(str::fileExt(\\\"c:\\\\Desktop\\\\test.txt\\\"));\n\/\/ (string) \"txt\"\n\\bbn\\X::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt',1));\n\/\/ (array) [ \"test\", \"txt\", ]\n```"
                        },
                        "endLine": 485,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "file",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ar",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "genpwd": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($int_max = NULL, $int_min = NULL)\n  {\n    if ( is_null($int_max) && is_null($int_min) ){\n      $int_max = 12;\n      $int_min = 8;\n    }\n    else if ( is_null($int_min) ){\n      $int_min = $int_max;\n    }\n    else if ( is_null($int_max) ){\n      $int_max = $int_min;\n    }\n    mt_srand();\n    $len = ($int_min > 0) && ($int_min < $int_max) ? random_int($int_min, $int_max) : $int_max;\n    $mdp = '';\n    for( $i = 0; $i < $len; $i++ ){\n      \/\/ First character is a letter\n      $type = $i === 0 ? random_int(2, 3) : random_int(1, 3);\n      switch ( $type ){\n        case 1:\n          $mdp .= random_int(0,9);\n          break;\n        case 2:\n          $mdp .= \\chr(random_int(65,90));\n          break;\n        case 3:\n          $mdp .= \\chr(random_int(97,122));\n          break;\n      }\n    }\n    return $mdp;\n  }",
                        "startLine": 501,
                        "doc": {
                            "description": {
                                "description": "Returns a random password.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::genpwd());\n\/\/ (string) \"khc9P871w\"\n\\bbn\\X::dump(\\bbn\\Str::genpwd(6, 4));\n\/\/ (string) \"dDEtxY\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$int",
                                        "description": "max Maximum password characters, default: \"12\"."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$int",
                                        "description": "min Minimum password characters, default: \"6\"."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$int": {
                                    "type": "int",
                                    "description": "min Minimum password characters, default: \"6\"."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::genpwd());\n\/\/ (string) \"khc9P871w\"\n\\bbn\\X::dump(\\bbn\\Str::genpwd(6, 4));\n\/\/ (string) \"dDEtxY\"\n```"
                        },
                        "endLine": 532,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "int_max",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "int_min",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "is_json": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    if ( \\is_string($st) && !empty($st) &&\n      ( (substr($st, 0, 1) === '{') || (substr($st, 0, 1) === '[') )){\n      json_decode($st);\n      return (json_last_error() == JSON_ERROR_NONE);\n    }\n    return false;\n  }",
                        "startLine": 545,
                        "doc": {
                            "description": {
                                "description": "Checks if the string is a json string.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n\/\/ (bool) true\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string."
                                }
                            },
                            "return": "bool",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n\/\/ (bool) true\n```"
                        },
                        "endLine": 553,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_number": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      if ( \\is_string($a) ){\n        if ( !preg_match('\/^-?(?:\\d+|\\d*\\.\\d+)$\/', $a) ){\n          return false;\n        }\n      }\n      else if ( !\\is_int($a) && !\\is_float($a) ){\n        return false;\n      }\n    }\n    return true;\n  }",
                        "startLine": 573,
                        "doc": {
                            "description": {
                                "description": "Checks if the item is a number.\nCan take as many arguments and will return false if one of them is not a number.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isNumber([1, 2]));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isNumber(150);\n\/\/ (bool) 1\n\\bbn\\X::dump(\\bbn\\Str::isNumber('150'));\n\/\/ (bool) 1\n\\bbn\\X::dump(\\bbn\\Str::isNumber(1.5);\n\/\/ (bool) 1\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st",
                                        "description": "The item to be tested."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": "The item to be tested."
                                }
                            },
                            "return": "bool",
                            "example_method": "Can take as many arguments and will return false if one of them is not a number.\n\n```php\n\\bbn\\X::dump(\\bbn\\Str::isNumber([1, 2]));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isNumber(150);\n\/\/ (bool) 1\n\\bbn\\X::dump(\\bbn\\Str::isNumber('150'));\n\/\/ (bool)  1\n\\bbn\\X::dump(\\bbn\\Str::isNumber(1.5);\n\/\/ (bool) 1\n```"
                        },
                        "endLine": 587,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "is_integer": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      if ( \\is_string($a) || (abs($a) > PHP_INT_MAX) ){\n        if ( !preg_match('\/^-?(\\d+)$\/', (string)$a) ){\n          return false;\n        }\n      }\n      else if ( !\\is_int($a) ){\n        return false;\n      }\n    }\n    return true;\n  }",
                        "startLine": 605,
                        "doc": {
                            "description": {
                                "description": "Checks if the item is a integer.\nCan take as many arguments and will return false if one of them is not an integer or the string of an integer.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isInteger(13.2));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isInteger(14));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isInteger('14'));\n\/\/ (bool) true\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st",
                                        "description": "The item to be tested."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": "The item to be tested."
                                }
                            },
                            "return": "bool",
                            "example_method": "Can take as many arguments and will return false if one of them is not an integer or the string of an integer.\n\n```php\n\\bbn\\X::dump(\\bbn\\Str::isInteger(13.2));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isInteger(14));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isInteger('14'));\n\/\/ (bool) true\n```"
                        },
                        "endLine": 619,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "is_clean_path": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      if ( \\is_string($a) ){\n        if ( (strpos($a, '..\/') !== false) || (strpos($a, '..\\\\') !== false) ){\n          return false;\n        }\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }",
                        "startLine": 636,
                        "doc": {
                            "description": {
                                "description": "Checks if \".. \\\\\" or \"..\/\" is contained in the parameter and it will return false if true.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st",
                                        "description": "The item to be tested."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": "The item to be tested."
                                }
                            },
                            "return": "bool",
                            "example_method": ". \\\\\" or \"..\/\" is contained in the parameter and it will return false if true.\n\n```php\n\\bbn\\X::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n\/\/ (bool) false\n```"
                        },
                        "endLine": 650,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "is_decimal": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $a ){\n      if ( \\is_string($a) ){\n        if ( !preg_match('\/^-?(\\d*\\.\\d+)$\/', $a) ){\n          return false;\n        }\n      }\n      else if ( !\\is_float($a) ){\n        return false;\n      }\n    }\n    return true;\n  }",
                        "startLine": 668,
                        "doc": {
                            "description": {
                                "description": "Checks if the item is a decimal.\nCan take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isDecimal(13.2));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isDecimal('13.2'));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isDecimal(14));\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st",
                                        "description": "The item to be tested."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": "The item to be tested."
                                }
                            },
                            "return": "bool",
                            "example_method": "Can take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).\n\n```php\n\\bbn\\X::dump(\\bbn\\Str::isDecimal(13.2));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isDecimal('13.2'));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isDecimal(14));\n\/\/ (bool) false\n```"
                        },
                        "endLine": 682,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "is_uid": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return \\is_string($st) && (\\strlen($st) === 32) && ctype_xdigit($st);\/\/ && !mb_detect_encoding($st);\n  }",
                        "startLine": 690,
                        "doc": {
                            "description": "Checks if the string is a valid UID string.",
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "boolean"
                        },
                        "endLine": 693,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_buid": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    if ( \\is_string($st) && (\\strlen($st) === 16) && !ctype_print($st) && !ctype_space($st) ){\n      $enc = mb_detect_encoding($st, ['8bit', 'UTF-8']);\n      if ( !$enc || ($enc === '8bit') ){\n        return true;\n      }\n    }\n    return false;\n  }",
                        "startLine": 701,
                        "doc": {
                            "description": "Checks if the string is a valid binary UID string.",
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "boolean"
                        },
                        "endLine": 710,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_email": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($email)\n  {\n    if ( function_exists('filter_var') ){\n      return filter_var($email,FILTER_VALIDATE_EMAIL) ? true : false;\n    }\n    else\n    {\n      $isValid = true;\n      $atIndex = mb_strrpos($email, \"@\");\n      if (\\is_bool($atIndex) && !$atIndex)\n      {\n        $isValid = false;\n      }\n      else\n      {\n        $domain = mb_substr($email, $atIndex+1);\n        $local = mb_substr($email, 0, $atIndex);\n        $localLen = mb_strlen($local);\n        $domainLen = mb_strlen($domain);\n        \/\/  local part length exceeded\n        if ($localLen < 1 || $localLen > 64)\n          $isValid = false;\n        \/\/  domain part length exceeded\n        else if ($domainLen < 1 || $domainLen > 255)\n          $isValid = false;\n        \/\/ local part starts or ends with '.'\n        else if ($local[0] == '.' || $local[$localLen-1] == '.')\n          $isValid = false;\n        \/\/ local part has two consecutive dots\n        else if (mb_ereg_match('\\\\.\\\\.', $local))\n          $isValid = false;\n        \/\/ character not valid in domain part\n        else if (!mb_ereg_match('^[A-Za-z0-9\\\\-\\\\.]+$', $domain))\n          $isValid = false;\n        \/\/  domain part has two consecutive dots\n        else if (mb_ereg_match('\\\\.\\\\.', $domain))\n          $isValid = false;\n        \/\/  character not valid in local part unless\n        else if ( !mb_ereg_match('^(\\\\\\\\.|[A-Za-z0-9!#%&`_=\\\\\/$\\'*+?^{}|~.-])+$'\n          ,str_replace(\"\\\\\\\\\",\"\",$local)))\n        {\n          \/\/ local part is quoted\n          if ( !mb_ereg_match('^\"(\\\\\\\\\"|[^\"])+\"$',str_replace(\"\\\\\\\\\",\"\",$local)) )\n            $isValid = false;\n        }\n      }\n      return $isValid;\n    }\n  }",
                        "startLine": 729,
                        "doc": {
                            "description": {
                                "description": "Checks if the string is the correct type of e-mail address.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isEmail('test@email.com'));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isEmail('test@email'));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isEmail('test@.com'));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isEmail('testemail.com'));\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$email",
                                        "description": "E-mail address."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$email": {
                                    "type": "string",
                                    "description": "E-mail address."
                                }
                            },
                            "return": "bool",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::isEmail('test@email.com'));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isEmail('test@email'));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isEmail('test@.com'));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::isEmail('testemail.com'));\n\/\/ (bool) false\n```"
                        },
                        "endLine": 777,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "email",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_url": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n  }",
                        "startLine": 793,
                        "doc": {
                            "description": {
                                "description": "Checks if the argument is a valid URL string.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n\/\/ (string) \"https:\/\/bbn.so\"\n  * \\bbn\\X::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to perform"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string|false"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to perform"
                                }
                            },
                            "return": "string|false",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n\/\/ (string) \"https:\/\/bbn.so\"\n\n\\bbn\\X::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n\/\/ (bool) false\n```"
                        },
                        "endLine": 795,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_domain": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return (preg_match(\"\/^([a-z\\d](-*[a-z\\d])*)(\\.([a-z\\d](-*[a-z\\d])*))*$\/i\", $st) \/\/valid chars check\n      && preg_match(\"\/^.{1,253}$\/\", $st) \/\/overall length check\n      && preg_match(\"\/^[^\\.]{1,63}(\\.[^\\.]{1,63})*$\/\", $st)   ); \/\/length of each label\n  }",
                        "startLine": 811,
                        "doc": {
                            "description": {
                                "description": "Checks if the argument is a valid domain name.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n\/\/ (string) false\n  * \\bbn\\X::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n\/\/ (bool) true\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string to perform"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to perform"
                                }
                            },
                            "return": "bool",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n\/\/ (string) false\n\n\\bbn\\X::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n\/\/ (bool) true\n```"
                        },
                        "endLine": 816,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_ip": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    $valid = filter_var($st, FILTER_VALIDATE_IP);\n    return $valid;\n  }",
                        "startLine": 818,
                        "endLine": 822,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_date_sql": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    foreach (func_get_args() as $a) {\n      if (!date::validateSQL($a)) {\n        return false;\n      }\n    }\n    return true;\n  }",
                        "startLine": 839,
                        "doc": {
                            "description": {
                                "description": "Checks if the argument is in a valid SQL date format.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "bool",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n\/\/ (bool) false\n```"
                        },
                        "endLine": 847,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "correct_types": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n      if ( self::isBuid($st) ){\n        $st = bin2hex($st);\n      }\n      else{\n        if ( self::isJson($st) ){\n          if ( strpos($st, '\": ') && ($json = json_decode($st)) ){\n            return json_encode($json);\n          }\n          return $st;\n        }\n        $st = trim($st);\n        if ( self::isInteger($st) && ((substr((string)$st, 0, 1) !== '0') || ($st === '0')) ){\n          $tmp = (int)$st;\n          if ( ($tmp < PHP_INT_MAX) && ($tmp > -PHP_INT_MAX) ){\n            return $tmp;\n          }\n        }\n        \/\/ If it is a decimal, not starting or ending with a zero\n        else if ( self::isDecimal($st) ){\n          return (float)$st;\n        }\n      }\n    }\n    else if ( \\is_array($st) ){\n      foreach ( $st as $k => $v ){\n        $st[$k] = self::correctTypes($v);\n      }\n    }\n    else if ( \\is_object($st) ){\n      $vs = get_object_vars($st);\n      foreach ( $vs as $k => $v ){\n        $st->$k = self::correctTypes($v);\n      }\n    }\n    return $st;\n  }",
                        "startLine": 866,
                        "doc": {
                            "description": {
                                "description": "If it looks like an int or float type, the string variable is converted into the correct type.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::correctTypes(1230));\n\/\/ (int) 1230\n\\bbn\\X::dump(\\bbn\\Str::correctTypes(12.30));\n\/\/ (float) 12.3\n\\bbn\\X::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n\/\/ (float) 12.3\n\\bbn\\X::dump(\\bbn\\Str::correctTypes([1230]));\n\/\/ (int) [1230]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "mixed"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": ""
                                }
                            },
                            "return": "mixed",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::correctTypes(1230));\n\/\/ (int) 1230\n\\bbn\\X::dump(\\bbn\\Str::correctTypes(12.30));\n\/\/ (float) 12.3\n\\bbn\\X::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n\/\/ (float) 12.3\n\\bbn\\X::dump(\\bbn\\Str::correctTypes([1230]));\n\/\/ (int) [1230]\n```"
                        },
                        "endLine": 903,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "parse_url": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($url)\n  {\n    $url = self::cast($url);\n    $r = X::mergeArrays(parse_url($url), ['url' => $url,'query' => '','params' => []]);\n    if ( strpos($url,'?') > 0 )\n    {\n      $p = explode('?',$url);\n      $r['url'] = $p[0];\n      $r['query'] = $p[1];\n      $ps = explode('&',$r['query']);\n      foreach ( $ps as $p ){\n        $px = explode('=',$p);\n        $r['params'][$px[0]] = $px[1];\n      }\n    }\n    return $r;\n  }",
                        "startLine": 930,
                        "doc": {
                            "description": {
                                "description": "Returns an array containing any of the various components of the URL that are present.\n  * ```php\n\\bbn\\X::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n\/* (array)\n[\n  'scheme' => 'http',\n  'host' => 'localhost',\n  'path' => '\/phpmyadmin\/',\n  'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n  'url' => 'http:\/\/localhost\/phpmyadmin\/',\n  'params' => [\n  'db' => 'test',\n  'table' => 'users',\n  'server' => '1',\n  'target' => '',\n  'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n  ],\n]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$url",
                                        "description": "The url."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$url": {
                                    "type": "string",
                                    "description": "The url."
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n\/* (array)\n[\n    'scheme' => 'http',\n    'host' => 'localhost',\n    'path' => '\/phpmyadmin\/',\n    'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n    'url' => 'http:\/\/localhost\/phpmyadmin\/',\n    'params' => [\n        'db' => 'test',\n        'table' => 'users',\n        'server' => '1',\n        'target' => '',\n        'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n    ],\n]\n```"
                        },
                        "endLine": 946,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "url",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "parse_path": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($path, $allow_parent = false)\n  {\n    $path = str_replace('\\\\', '\/', \\strval($path));\n    $path = str_replace('\/.\/', '\/', \\strval($path));\n    while ( strpos($path, '\/\/') !== false ){\n      $path = str_replace('\/\/', '\/', $path);\n    }\n    if ( strpos($path, '..\/') !== false ){\n      if ( !$allow_parent ){\n        return '';\n      }\n      $bits = array_reverse(explode('\/', $path));\n      $path = '';\n      $num_parent = 0;\n      foreach ( $bits as $i => $b ){\n        if ( $b === '..' ){\n          $num_parent++;\n        }\n        else if ( $b !== '.' ){\n          if ( $num_parent ){\n            $num_parent--;\n          }\n          else{\n            $path = empty($path) ? $b : $b.'\/'.$path;\n          }\n        }\n      }\n    }\n    return $path;\n  }",
                        "startLine": 960,
                        "doc": {
                            "description": {
                                "description": "Replaces backslash with slash in a path string. Forbids the use of ..\/\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n\/\/ (string) \"\/home\/user\/Desktop\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$path",
                                        "description": "The path."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "boolean",
                                        "name": "$allow",
                                        "description": "parent If true ..\/ is allowed in the path (and will become normalized)."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$path": {
                                    "type": "string",
                                    "description": "The path."
                                },
                                "$allow": {
                                    "type": "boolean",
                                    "description": "parent If true ..\/ is allowed in the path (and will become normalized)."
                                }
                            },
                            "return": "string",
                            "example_method": ".\/\n\n```php\n\\bbn\\X::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n\/\/ (string) \"\/home\/user\/Desktop\"\n```"
                        },
                        "endLine": 989,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "allow_parent",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "remove_accents": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    $st = trim(mb_ereg_replace('&(.)(tilde|circ|grave|acute|uml|ring|oelig);', '\\\\1', self::cast($st)));\n    $search = explode(\",\",\"\u00e7,\u00e6,\u0153,\u00e1,\u00e9,\u00ed,\u00f3,\u00fa,\u00e0,\u00e8,\u00ec,\u00f2,\u00f9,\u00e4,\u00eb,\u00ef,\u00f6,\u00fc,\u00ff,\u00e2,\u00ea,\u00ee,\u00f4,\u00fb,\u00e5,e,i,\u00f8,u,\u0105,\u0144,\u0142,\u017a,\u0119,\u00c0,\u00c1,\u00c2,\u00c3,\u00c4,\u00c7,\u00c8,\u00c9,\u00ca,\u00cb,\u00cc,\u00cd,\u00ce,\u00cf,\u00d1,\u00d2,\u00d3,\u00d4,\u00d5,\u00d6,\u00d9,\u00da,\u00db,\u00dc,\u00dd,\u0141,\u015a\");\n    $replace = explode(\",\",\"c,ae,oe,a,e,i,o,u,a,e,i,o,u,a,e,i,o,u,y,a,e,i,o,u,a,e,i,o,u,a,n,l,z,e,A,A,A,A,A,C,E,E,E,E,I,I,I,I,N,O,O,O,O,O,U,U,U,U,Y,L,S\");\n    foreach ( $search as $i => $s )\n      $st = mb_ereg_replace($s, $replace[$i], $st);\n    return $st;\n  }",
                        "startLine": 1002,
                        "doc": {
                            "description": {
                                "description": "Replaces accented characters with their character without the accent.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3\u00a0\u00c3\u00b9\u00e8\"));\n\/\/ (string) \"TA\u00a8st FA\u00aclA\u00a8 A\u00b2A\u00a8A A\u00b9e\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3\u00a0\u00c3\u00b9\u00e8\"));\n\/\/ (string) \"TA\u00a8st  FA\u00aclA\u00a8  A\u00b2A\u00a8A A\u00b9e\"\n```"
                        },
                        "endLine": 1010,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "check_name": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $args = \\func_get_args();\n    \/\/ Each argument must be a string starting with a letter, and having only one character made of letters, numbers and underscores\n    foreach ( $args as $a ){\n      if (\\is_array($a)) {\n        X::log($args, 'check_name_args');\n        X::log(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 20), 'check_name_args');\n      }\n      if ( !\\is_string($a) ){\n        return false;\n      }\n      return \\preg_match('\/^[A-z]{1}[A-z0-9_]*$\/', $a);\n    }\n    return true;\n  }",
                        "startLine": 1024,
                        "doc": {
                            "description": {
                                "description": "Checks if a string complies with SQL naming convention.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::checkName(\"Paul\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::checkName(\"Pa\u00a0ul\"));\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "bool",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::checkName(\"Paul\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::checkName(\"Pa\u00a0ul\"));\n\/\/ (bool) false\n```"
                        },
                        "endLine": 1039,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "check_filename": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $args = \\func_get_args();\n    \/\/ Each argument must be a string starting with a letter, and having than one character made of letters, numbers and underscores\n    foreach ( $args as $a ){\n      if (($a === '..') || !\\is_string($a) || (strpos($a, '\/') !== false) || (strpos($a, '\\\\') !== false) ){\n        return false;\n      }\n    }\n    return true;\n  }",
                        "startLine": 1053,
                        "doc": {
                            "description": {
                                "description": "Checks if a string doesn't contain a filesystem path.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "bool",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```"
                        },
                        "endLine": 1063,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "check_path": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    if ( $args = \\func_get_args() ){\n      \/\/ Each argument must be a string starting with a letter, and having than one character made of letters, numbers and underscores\n      foreach ( $args as $a ){\n        $bits = X::split($a, DIRECTORY_SEPARATOR);\n        foreach ( $bits as $b ){\n          if ( !self::checkFilename($b) ){\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }",
                        "startLine": 1077,
                        "doc": {
                            "description": {
                                "description": "Checks if a string doesn't contain a filesystem path.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "bool",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```"
                        },
                        "endLine": 1092,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "has_slash": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n\n    $args = \\func_get_args();\n    \/\/ Each argument must be a string starting with a letter, and having than one character made of letters, numbers and underscores\n    foreach ( $args as $a ){\n      if ( (strpos($a, '\/') !== false) || (strpos($a, '\\\\') !== false) ){\n        return true;\n      }\n    }\n\n    return false;\n  }",
                        "startLine": 1110,
                        "doc": {
                            "description": {
                                "description": "Checks if a string complies with SQL naming convention.\nReturns \"true\" if slash or backslash are present.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n\/\/ (bool) 1\n\\bbn\\X::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n\/\/ (bool) 1\n```",
                                "tags": [
                                    {
                                        "tag": "return",
                                        "description": "bool"
                                    }
                                ]
                            },
                            "params": [],
                            "return": "bool",
                            "example_method": "Returns \"true\" if slash or backslash are present.\n\n```php\n\\bbn\\X::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n\/\/ (bool) 1\n\\bbn\\X::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n\/\/ (bool) 1\n```"
                        },
                        "endLine": 1122,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "get_numbers": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    return preg_replace(\"\/[^0-9]\/\", '', self::cast($st));\n  }",
                        "startLine": 1135,
                        "doc": {
                            "description": {
                                "description": "Extracts all digits from a string.\n  * ```php\n\\bbn\\X::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n\/\/ (string) 1324\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st",
                                        "description": "The string."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n\/\/ (string) 1324\n```"
                        },
                        "endLine": 1138,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "make_readable": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($o)\n  {\n    $is_array = false;\n    if ( \\is_object($o) ){\n      $class = \\get_class($o);\n      if ( $class === 'stdClass' ){\n        $is_array = 1;\n      }\n      else{\n        return $class;\n      }\n    }\n    if ( \\is_array($o) || $is_array ){\n      $r = [];\n      foreach ( $o as $k => $v ){\n        $r[$k] = self::makeReadable($v);\n      }\n      return $r;\n    }\n    return $o;\n  }",
                        "startLine": 1178,
                        "doc": {
                            "description": {
                                "description": "Returns the argumented value, replacing not standard objects (not stdClass) by their class name.\n  * ```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n  * $user = \\bbn\\User::getInstance();\n  * $myArray = [\n 'user' => $user,\n 'obj' => $myObj,\n 'val' => 23,\n 'text' => \"Hello!\"\n];\n  * \\bbn\\X::hdump(\\bbn\\Str::makeReadable($user));\n\/\/ (string) \"appui\/user\"\n  * \\bbn\\X::hdump(\\bbn\\Str::makeReadable($myArray));\n\/* (array)\n[\n \"user\" => \"appui\\\\user\",\n \"obj\" => [\n  \"myProp1\" => 23,\n  \"myProp2\" => \"world\",\n  \"myProp3\" => [1, 5, 6,],\n ],\n \"val\" => 23,\n \"text\" => \"Hello!\",\n]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$o",
                                        "description": "The item."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$o": {
                                    "type": "mixed",
                                    "description": "The item."
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n\n$user = \\bbn\\User::getInstance();\n\n$myArray = [\n 'user' => $user,\n 'obj' => $myObj,\n 'val' => 23,\n 'text' => \"Hello!\"\n];\n\n\\bbn\\X::hdump(\\bbn\\Str::makeReadable($user));\n\/\/ (string) \"appui\/user\"\n\n\\bbn\\X::hdump(\\bbn\\Str::makeReadable($myArray));\n\/* (array)\n[\n  \"user\" => \"appui\\\\user\",\n  \"obj\" => [\n            \"myProp1\" => 23,\n            \"myProp2\" => \"world\",\n            \"myProp3\" => [1, 5, 6,],\n      ],\n  \"val\" => 23,\n  \"text\" => \"Hello!\",\n]\n```"
                        },
                        "endLine": 1198,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "o",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "export": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($o, $remove_empty = false, $lev = 1)\n  {\n    $st = '';\n    $space = '    ';\n    if ( \\is_object($o) && ($cls = \\get_class($o)) && (strpos($cls, 'stdClass') === false) ){\n      $st .= \"Object \".$cls;\n      \/*\n      $o = array_filter((array)$o, function($k) use ($cls){\n        if ( strpos($k, '*') === 0 ){\n          return false;\n        }\n        if ( strpos($k, $cls) === 0 ){\n          return false;\n        }\n        return true;\n      }, ARRAY_FILTER_USE_KEY);\n      *\/\n    }\n    else if ( \\is_object($o) || \\is_array($o) ){\n      $is_object = \\is_object($o);\n      $is_array = !$is_object && \\is_array($o);\n      $is_assoc = $is_object || ($is_array && X::isAssoc($o));\n      $st .= $is_assoc ? '{' : '[';\n      $st .= PHP_EOL;\n      foreach ( $o as $k => $v ){\n        if ( $remove_empty && ( ( \\is_string($v) && empty($v) ) || ( \\is_array($v) && \\count($v) === 0 ) ) ){\n          continue;\n        }\n        $st .= str_repeat($space, $lev);\n        if ( $is_assoc ){\n          $st .= ( \\is_string($k) ? '\"'.self::escapeDquote($k).'\"' : $k ). ': ';\n        }\n        if ( \\is_array($v) ){\n          $st .= self::export($v, $remove_empty, $lev+1);\n        }\n        else if ( $v === 0 ){\n          $st .= '0';\n        }\n        else if ( null === $v ){\n          $st .= 'null';\n        }\n        else if ( \\is_bool($v) ){\n          $st .= $v === false ? 'false' : 'true';\n        }\n        else if ( \\is_int($v) || \\is_float($v) ){\n          $st .= $v;\n        }\n        else if ( is_string($v) ){\n          if ( !ctype_print($v) && (\\strlen($v) === 16) ){\n            $st .= '0x'.bin2hex($v);\n          }\n          else if ( !$remove_empty || !empty($v) ){\n            $st .= '\"'.self::escapeDquote($v).'\"';\n          }\n        }\n        else {\n          try{\n            $cls = get_class($v);\n          }\n          catch ( \\Exception $e ){\n            $st .= '\"Unknown\"';\n          }\n          if ( $cls ){\n            if ( $cls === 'stdClass' ){\n              $st .= self::export($v, $remove_empty, $lev+1);\n            }\n            else{\n              $st .= 'Object '.$cls;\n            }\n          }\n        }\n        $st .= ','.PHP_EOL;\n      }\n      $st .= str_repeat($space, $lev-1);\n      $st .= $is_assoc ? '}' : ']';\n      \/\/$st .= \\is_object($o) ? '}' : ']';\n    }\n    return $st;\n  }",
                        "startLine": 1224,
                        "doc": {
                            "description": {
                                "description": "Returns a variable in a mode that is directly usable by PHP.\n  * ```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n$myObj->myProp4 =\"\";\n  * \\bbn\\X::hdump(\\bbn\\Str::export($myObj,true));\n\/*(string)\n\"{\n \"myProp1\" => 23,\n \"myProp2\" => \"world\",\n \"myProp3\" => [ 1, 5, 6, ],\n}\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$o",
                                        "description": "The item to be."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$remove",
                                        "description": "empty Default: \"false\"."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "int",
                                        "name": "$lev",
                                        "description": "Default: \"1\"."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$o": {
                                    "type": "mixed",
                                    "description": "The item to be."
                                },
                                "$remove": {
                                    "type": "bool",
                                    "description": "empty Default: \"false\"."
                                },
                                "$lev": {
                                    "type": "int",
                                    "description": "Default: \"1\"."
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n$myObj->myProp4 =\"\";\n\n\\bbn\\X::hdump(\\bbn\\Str::export($myObj,true));\n\/*(string)\n\"{\n     \"myProp1\"  =>  23,\n     \"myProp2\"  =>  \"world\",\n     \"myProp3\"  =>  [ 1, 5, 6, ],\n}\"\n```"
                        },
                        "endLine": 1302,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "o",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "remove_empty",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            },
                            {
                                "name": "lev",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 1,
                                "default_name": ""
                            }
                        ]
                    },
                    "replace_once": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($search, $replace, $subject)\n  {\n    $pos = strpos($subject, $search);\n    if ($pos !== false){\n      return substr_replace($subject, $replace, $pos, \\strlen($search));\n    }\n    return $subject;\n  }",
                        "startLine": 1319,
                        "doc": {
                            "description": {
                                "description": "Replaces part of a string. If the part is not found, the method returns the string without change.\n  * ```php\n\\bbn\\X::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n\/\/ (string) \"Today there is hot\"\n\\bbn\\X::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n\/\/ (string) \"Today there is cold\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$search",
                                        "description": "The string to search"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$replace",
                                        "description": "The string to replace"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$subject",
                                        "description": "The string into search"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$search": {
                                    "type": "string",
                                    "description": "The string to search"
                                },
                                "$replace": {
                                    "type": "string",
                                    "description": "The string to replace"
                                },
                                "$subject": {
                                    "type": "string",
                                    "description": "The string into search"
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is hot\"\n\\bbn\\X::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is cold\"\n```"
                        },
                        "endLine": 1326,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 3,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "search",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "replace",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "subject",
                                "position": 2,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "remove_comments": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    $pattern = '\/(?:(?:\\\/\\*(?:[^*]|(?:\\*+[^*\\\/]))*\\*+\\\/)|(?:(?<!\\:|\\\\\\|\\')\\\/\\\/.*))\/';\n    return preg_replace($pattern, '', $st);\n  }",
                        "startLine": 1339,
                        "doc": {
                            "description": {
                                "description": "Removes the comments.\n  * ```php\n var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n \/\/ (string) \"\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$st"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n \/\/ (string) \"\"\n```"
                        },
                        "endLine": 1343,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "say_size": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($bytes, $unit = 'B', $stop = false)\n  {\n\/\/ pretty printer for byte values\n\/\/\n    $i = 0;\n    $units = ['', 'K', 'M', 'G', 'T'];\n    while ( $stop || ($bytes > 2000) ){\n      $i++;\n      $bytes \/= 1024;\n      if ( $stop === $units[$i] ){\n        break;\n      }\n    }\n    $st = $unit === 'B' ? \"%d %s\" : \"%5.2f %s\";\n    return sprintf($st.$unit, $bytes, $units[$i]);\n  }",
                        "startLine": 1353,
                        "doc": {
                            "description": "Converts the bytes to another unit form.",
                            "params": {
                                "$bytes": {
                                    "type": "int",
                                    "description": "The bytes"
                                },
                                "": {
                                    "type": "",
                                    "description": "string The unit you want to convert ('B', 'K', 'M', 'G', 'T')"
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 1368,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "bytes",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "unit",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "B",
                                "default_name": ""
                            },
                            {
                                "name": "stop",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "convert_size": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($size, $unit_orig = 'B', $unit_dest = 'MB')\n  {\n    if ( strlen($unit_orig) <= 1 ){\n      $unit_orig .= 'B';\n    }\n    if ( strlen($unit_dest) <= 1 ){\n      $unit_dest .= 'B';\n    }\n    $base = log($size) \/ log(1024);\n    $suffix = array(\"\", \"KB\", \"MB\", \"GB\", \"TB\");\n    $f_base = floor($base);\n    return round(pow(1024, $base - floor($base)), 1) . $suffix[$f_base];\n  }",
                        "startLine": 1376,
                        "doc": {
                            "description": "",
                            "params": {
                                "$size": {
                                    "type": "",
                                    "description": ""
                                },
                                "$unit": {
                                    "type": "string",
                                    "description": "dest"
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 1388,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "size",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "unit_orig",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "B",
                                "default_name": ""
                            },
                            {
                                "name": "unit_dest",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "MB",
                                "default_name": ""
                            }
                        ]
                    },
                    "check_json": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($json, $return_error = false)\n  {\n    json_decode($json);\n    $error = json_last_error();\n    if ( $error === JSON_ERROR_NONE ){\n      return true;\n    }\n    if ( !$return_error ){\n      return false;\n    }\n    switch ( $error ) {\n      case JSON_ERROR_DEPTH:\n        return _('Maximum stack depth exceeded');\n      case JSON_ERROR_STATE_MISMATCH:\n        return _('State mismatch (invalid or malformed JSON)');\n      case JSON_ERROR_CTRL_CHAR:\n        return _('Unexpected control character found');\n      case JSON_ERROR_SYNTAX:\n        return _('Syntax error, malformed JSON');\n      case JSON_ERROR_UTF8:\n        return _('Malformed UTF-8 characters, possibly incorrectly encoded');\n      default:\n        return _('Unknown error');\n    }\n  }",
                        "startLine": 1397,
                        "doc": {
                            "description": "Checks whether a JSON string is valid or not. If $return_error is set to true, the error will be returned.",
                            "params": {
                                "$json": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$return": {
                                    "type": "bool",
                                    "description": "error"
                                }
                            },
                            "return": "bool|string"
                        },
                        "endLine": 1421,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "json",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "return_error",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "as_var": {
                        "file": "bbn\\Str",
                        "static": true,
                        "public": true,
                        "code": "function($var, $quote = '\"')\n  {\n    if (($quote !== \"'\") && ($quote !== '\"')) {\n      $quote = '\"';\n    }\n    $st = $quote === \"'\" ? self::escapeSquotes($var) : self::escapeDquotes($var);\n    return $quote.$st.$quote;\n  }",
                        "startLine": 1423,
                        "endLine": 1430,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "var",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "quote",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "\"",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": null,
            "staticProperties": [],
            "costants": null,
            "numMethods": 47,
            "numProperties": 0,
            "numConstants": 0,
            "numStaticProperties": 0,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": null,
            "isSubclassOf": false,
            "defaultProperties": [],
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "str"
        },
        "time": {
            "doc": {
                "description": "Class dealing with date manipulation\nexamples: test\/loredana\/time",
                "tags": {
                    "copyright": "BBN Solutions",
                    "category": "Time and Date",
                    "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT"
                }
            },
            "name": "bbn\\Time",
            "namespace": true,
            "traits": [],
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/time.php",
            "startLine": 16,
            "endLine": 235,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function($t)\n  {\n    $this->time = new \\dateTime($t);\n  }",
                "startLine": 21,
                "endLine": 24,
                "isUserDefined": true,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "arguments": [
                    {
                        "name": "t",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": {
                    "set_interval": {
                        "file": "bbn\\Time",
                        "private": true,
                        "code": "function($interval)\n  {\n    \/\/http:\/\/php.net\/manual\/en\/dateinterval.construct.php *\/\n    $this->interval = new \\DateInterval($interval);\n  }",
                        "startLine": 43,
                        "doc": {
                            "description": "Define the property $interval instantiating the given $interval to the class DateInterval",
                            "params": {
                                "$interval": {
                                    "type": "string",
                                    "description": "allowed http:\/\/php.net\/manual\/en\/dateinterval.construct.php"
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 47,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "interval",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_interval": {
                        "file": "bbn\\Time",
                        "private": true,
                        "code": "function($interval = '')\n  {\n    if ( !empty($interval) ){\n      $this->interval = new \\DateInterval($interval);\n      return $this->interval;\n    }\n    else {\n      return $this->interval;\n    }\n  }",
                        "startLine": 55,
                        "doc": {
                            "description": "Return the property $interval if it is set",
                            "params": {
                                "$interval": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 64,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "interval",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_year": {
                        "file": "bbn\\Time",
                        "private": true,
                        "code": "function()\n  {\n    return $this->time->format('Y');\n  }",
                        "startLine": 81,
                        "endLine": 84,
                        "isUserDefined": true
                    },
                    "get_month": {
                        "file": "bbn\\Time",
                        "private": true,
                        "code": "function()\n  {\n    return $this->time->format('m');\n  }",
                        "startLine": 86,
                        "endLine": 89,
                        "isUserDefined": true
                    }
                },
                "protected": {
                    "set_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "protected": true,
                        "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                        "startLine": 63,
                        "endLine": 70,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": true,
                            "public": false,
                            "final": false,
                            "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                            "startLine": 63,
                            "doc": "",
                            "endLine": 70,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "err",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "err",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "public": {
                    "__construct": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($t)\n  {\n    $this->time = new \\dateTime($t);\n  }",
                        "startLine": 21,
                        "endLine": 24,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "t",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_time": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function()\n  {\n    return $this->time;\n  }",
                        "startLine": 31,
                        "doc": {
                            "description": "return the property $this->time",
                            "params": [],
                            "return": "void"
                        },
                        "endLine": 34,
                        "isUserDefined": true
                    },
                    "format": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($format = '')\n  {\n    if ( !empty($format) ){\n      return $this->time->format($format);\n    }\n    else { \n      return $this->time->format('Y-m-d H:i:s');\n    }\n  }",
                        "startLine": 72,
                        "doc": {
                            "description": "return the date in the given $format of in 'Y-m-d H:i:s' format if no argument is given to the function",
                            "params": {
                                "$format": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 80,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "format",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "compare": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($date, $comparator)\n  {\n    \/\/check if the argument $date is an instance of this class\n    if ( $date instanceof $this){\n      $tmp = $date;\n    }\n    else {\n      $tmp = new \\bbn\\Time($date);\n    }\n    switch ( $comparator ){\n      case $comparator === '>':  \n        return $this->getTime() > $tmp->getTime(); \n        break;\n      case $comparator === '>=':  \n        return $this->getTime() >= $tmp->getTime(); \n        break;\n      case $comparator === '<':  \n        return $this->getTime() < $tmp->getTime(); \n        break;\n      case $comparator === '<=':  \n        return $this->getTime() <= $tmp->getTime(); \n        break;\n      case $comparator === '=':  \n        return $this->getTime() == $tmp->getTime(); \n        break;\n    }\n  }",
                        "startLine": 98,
                        "doc": {
                            "description": "Compares two dates",
                            "params": {
                                "$date": {
                                    "type": "String|Object",
                                    "description": "the string of the date to compare or an object of this class"
                                },
                                "$comparator": {
                                    "type": "String",
                                    "description": "allowed comparators '>','>=', '<','<=', '='"
                                }
                            },
                            "return": "Boolean"
                        },
                        "endLine": 124,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "comparator",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_before": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($date)\n  {\n    \/\/check if the argument $date is an instance of this class\n    if ( $date instanceof $this){\n      $tmp = $date;\n    }\n    else {\n      $tmp = new \\bbn\\Time($date);\n    }\n    return $this->getTime() < $tmp->getTime(); \n  }",
                        "startLine": 132,
                        "doc": {
                            "description": "Return if $this->time is before of the given $date",
                            "params": {
                                "$date": {
                                    "type": "String|Object",
                                    "description": "the string of the date to compare or an object of this class"
                                }
                            },
                            "return": "boolean"
                        },
                        "endLine": 142,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_after": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($date)\n  {\n    \/\/check if the argument $date is an instance of this class\n    if ( $date instanceof $this){\n      $tmp = $date;\n    }\n    else {\n      $tmp = new \\bbn\\Time($date);\n    }\n    return $this->getTime() > $tmp->getTime(); \n  }",
                        "startLine": 151,
                        "doc": {
                            "description": "Return if $this->time is after of the given $date",
                            "params": {
                                "$date": {
                                    "type": "String|Object",
                                    "description": "the string of the date to compare or an object of this class"
                                }
                            },
                            "return": "boolean"
                        },
                        "endLine": 161,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_same": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($date)\n  {\n    \/\/check if the argument $date is an instance of this class\n    if ( $date instanceof $this){\n      $tmp = $date;\n    }\n    else {\n      $tmp = new \\bbn\\Time($date);\n    }\n    return $this->getTime() == $tmp->getTime(); \n  }",
                        "startLine": 170,
                        "doc": {
                            "description": "Return if $this->time is the same of the given $date",
                            "params": {
                                "$date": {
                                    "type": "String|Object",
                                    "description": "the string of the date to compare or an object of this class"
                                }
                            },
                            "return": "boolean"
                        },
                        "endLine": 180,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "date",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "add": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($interval, $format = '')\n  {\n    $tmp->time->add($this->getInterval($interval));\n    return $tmp->format($format);\n  }",
                        "startLine": 191,
                        "doc": {
                            "description": "Add an the given $interval to $this->time and return a reference to the original object\nIf the argument $format is not given it returns the sql format 'Y-m-d H:i:s'",
                            "params": {
                                "$interval": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$format": {
                                    "type": "string",
                                    "description": "optional"
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 195,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "interval",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "format",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "sub": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($interval, $format = '')\n  {\n    $tmp->time->sub($this->getInterval($interval));\n    return $tmp->format($format);\n  }",
                        "startLine": 205,
                        "doc": {
                            "description": "Subtract the given $interval to $this->time and return a reference to the original object\nIf the argument $format is not given it returns the sql format 'Y-m-d H:i:s'",
                            "params": {
                                "$interval": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$format": {
                                    "type": "string",
                                    "description": "optional"
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 209,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "interval",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "format",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "modif": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function($modif, $format = '')\n  {\n    $tmp = new \\bbn\\Time($this->format());\n    $tmp->time->modify($modif);\n    return $tmp->format($format);\n  }",
                        "startLine": 218,
                        "doc": {
                            "description": "Return a reference to $this->time modified of the $modif",
                            "params": {
                                "$modif": {
                                    "type": "",
                                    "description": ""
                                },
                                "$format": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 223,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "modif",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "format",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "end_of_month": {
                        "file": "bbn\\Time",
                        "public": true,
                        "code": "function()\n  {\n    $y = $this->getYear();\n    return cal_days_in_month(CAL_GREGORIAN, $m, $y);\n  }",
                        "startLine": 230,
                        "doc": {
                            "description": "return the end of the month of $this->time",
                            "params": [],
                            "return": "Number"
                        },
                        "endLine": 234,
                        "isUserDefined": true
                    },
                    "test": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 45,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 50,
                        "isUserDefined": true,
                        "parent": {
                            "name": "test",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 45,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 50,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "check": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 56,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 61,
                        "isUserDefined": true,
                        "parent": {
                            "name": "check",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 56,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 61,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_error": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 72,
                        "endLine": 74,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 72,
                            "doc": "",
                            "endLine": 74,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_errors": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 76,
                        "endLine": 78,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_errors",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 76,
                            "doc": "",
                            "endLine": 78,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "log": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                        "startLine": 80,
                        "endLine": 88,
                        "isUserDefined": true,
                        "parent": {
                            "name": "log",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                            "startLine": 80,
                            "doc": "",
                            "endLine": 88,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "__call": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                        "startLine": 95,
                        "doc": {
                            "description": "",
                            "params": {
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$arguments": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 99,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "parent": {
                            "name": "__call",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                            "startLine": 95,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$name": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "$arguments": {
                                        "type": "array",
                                        "description": ""
                                    }
                                },
                                "return": "void"
                            },
                            "endLine": 99,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 2,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "name",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "arguments",
                                    "position": 1,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "arguments",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 104,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "boolean"
                        },
                        "endLine": 106,
                        "isUserDefined": true,
                        "parent": {
                            "name": "is_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 104,
                            "doc": {
                                "description": "",
                                "params": [],
                                "return": "boolean"
                            },
                            "endLine": 106,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "set_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($debug)\n  {\n  }",
                        "startLine": 112,
                        "doc": {
                            "description": "",
                            "params": {
                                "$debug": {
                                    "type": "boolean",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 114,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($debug)\n  {\n  }",
                            "startLine": 112,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$debug": {
                                        "type": "boolean",
                                        "description": ""
                                    }
                                },
                                "return": "self"
                            },
                            "endLine": 114,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "debug",
                                    "position": 0,
                                    "type": {},
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "debug",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "time": {
                    "private": true
                },
                "interval": {
                    "private": true
                },
                "errors": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "errors",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "error": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "false|string"
                            }
                        ]
                    },
                    "parent": {
                        "name": "error",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "debug": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "boolean"
                            }
                        ]
                    },
                    "parent": {
                        "name": "debug",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "log": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "log",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                }
            },
            "staticProperties": [],
            "costants": null,
            "numMethods": 24,
            "numProperties": 6,
            "numConstants": 0,
            "numStaticProperties": 0,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": "bbn\\Models\\Cls\\Basic",
            "isSubclassOf": false,
            "defaultProperties": {
                "time": null,
                "interval": null,
                "errors": [],
                "error": false,
                "debug": false,
                "log": []
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "time"
        },
        "tpl": {
            "doc": {
                "description": "",
                "tags": []
            },
            "name": "bbn\\Tpl",
            "namespace": true,
            "traits": [],
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/tpl.php",
            "startLine": 6,
            "endLine": 39,
            "contentConstructor": null,
            "methods": {
                "private": [],
                "protected": [],
                "public": {
                    "renderer": {
                        "file": "bbn\\Tpl",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n      $dir = sys_get_temp_dir();\n      if ( !@mkdir($dir.'\/tmp') && !is_dir($dir.'\/tmp') ){\n        die('Impossible to create the template directory in '.$dir);\n      }\n      define('BBN_DATA_PATH', $dir.'\/');\n    }\n    $md5 = md5($st);\n    $file = BBN_DATA_PATH.'tmp\/tpl.'.$md5.'.php';\n    if ( file_exists($file) ){\n      return include($file);\n    }\n    $tpl = LightnCandy::compile($st, [\n      'flags' => LightnCandy::FLAG_MUSTACHELOOKUP |\n        LightnCandy::FLAG_PARENT |\n        LightnCandy::FLAG_HANDLEBARSJS |\n        LightnCandy::FLAG_ERROR_LOG\n    ]);\n    file_put_contents($file, '<?php '.$tpl.'?>');\n    return include($file);\n  }",
                        "startLine": 10,
                        "endLine": 31,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "render": {
                        "file": "bbn\\Tpl",
                        "static": true,
                        "public": true,
                        "code": "function($st, $data)\n  {\n      return $tpl($data);\n    }\n    return '';\n  }",
                        "startLine": 33,
                        "endLine": 38,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "data",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "engine": {
                    "static": true,
                    "private": true
                },
                "tmp": {
                    "static": true,
                    "private": true
                }
            },
            "staticProperties": {
                "engine": null,
                "tmp": null
            },
            "costants": null,
            "numMethods": 2,
            "numProperties": 2,
            "numConstants": 0,
            "numStaticProperties": 2,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": null,
            "isSubclassOf": false,
            "defaultProperties": {
                "engine": null,
                "tmp": null
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "tpl"
        },
        "user": {
            "doc": {
                "description": "A user authentication Class\n *",
                "tags": {
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Apr 4, 2011, 23:23:55 +0000",
                    "category": "Authentication",
                    "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
                    "version": "0.2r89",
                    "todo": "Implement Cache for session requests' results?"
                }
            },
            "name": "bbn\\User",
            "namespace": true,
            "traits": {
                "bbn\\Models\\Tts\\Retriever": {
                    "name": "bbn\\Models\\Tts\\Retriever"
                },
                "bbn\\Models\\Tts\\Dbconfig": {
                    "name": "bbn\\Models\\Tts\\Dbconfig"
                }
            },
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/user.php",
            "startLine": 19,
            "endLine": 1479,
            "contentConstructor": {
                "name": "__construct",
                "public": true,
                "code": "function(bbn\\Db $db, array $params = [], array $cfg = [])\n  {\n\n    \/\/ The database connection\n    $this->db = $db;\n    \/\/ The client environment variables\n    $this->user_agent = $_SERVER['HTTP_USER_AGENT'] ?? '';\n    $this->ip_address = $_SERVER['REMOTE_ADDR'] ?? '';\n    $this->accept_lang = $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? '';\n\n    \/\/ Setting up the class configuration\n    $this->_init_class_cfg($cfg);\n\n    \/\/ Creating the session's variables if they don't exist yet\n    $this->_init_session();\n    self::retrieverInit($this);\n\n    $f =& $this->class_cfg['fields'];\n\n    if (\\bbn\\X::isCli() && isset($params['id'])) {\n      $this->id = $params['id'];\n      $this->auth = true;\n    }\n    \/\/ The user logs in\n    elseif ( isset($params[$f['user']], $params[$f['pass']], $params[$f['salt']]) ){\n\n      \/** @todo separate credentials and salt checking *\/\n      if ( $this->getPrint($this->_get_session('fingerprint')) === $this->sess_cfg['fingerprint']){\n        \/** @todo separate credentials and salt checking *\/\n        $this->_check_credentials($params);\n      }\n      else{\n        $this->setError(19);\n        $this->session->destroy();\n      }\n    }\n    \/** @todo revise the process: dying is not the solution! *\/\n    \/\/ The user is not known yet\n    elseif (\n      isset($params[$f['key']], $params[$f['id']], $params[$f['pass1']], $params[$f['pass2']], $params[$f['action']]) &&\n      ($params[$f['action']] === 'init_password') &&\n      ($params[$f['pass1']] === $params[$f['pass2']])\n    ){\n      if ( $id = $this->getIdFromMagicString($params[$f['id']], $params[$f['key']]) ){\n        $this->expireHotlink($params[$f['id']]);\n        $this->forcePassword($params[$f['pass2']], $id);\n        $this->session->set([]);\n        \/\/ Reloads the page\n        header('Location: .\/');\n        die();\n      }\n      else{\n        $this->setError(18);\n      }\n    }\n    else {\n      $this->checkSession();\n    }\n  }",
                "startLine": 202,
                "doc": {
                    "description": "User constructor.",
                    "params": {
                        "$db": {
                            "type": "db",
                            "description": ""
                        },
                        "$cfg": {
                            "type": "array",
                            "description": ""
                        },
                        "$params": {
                            "type": "array",
                            "description": ""
                        }
                    },
                    "return": ""
                },
                "endLine": 260,
                "isUserDefined": true,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": {},
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "params",
                        "position": 1,
                        "type": {},
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 2,
                        "type": {},
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ]
            },
            "methods": {
                "private": {
                    "_login": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($id)\n  {\n     if ( $this->check() && $id ){\n       $this\n         ->_authenticate($id)\n         ->_user_info()\n         ->_init_dir(true)\n         ->saveSession();\n     }\n     return $this;\n  }",
                        "startLine": 1088,
                        "doc": {
                            "description": "Initialize and saves the session after authentication.",
                            "params": {
                                "$id": {
                                    "type": "string",
                                    "description": "The user's ID (as stored in the database)."
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1098,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "id",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_user_info": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function(array $data = NULL)\n  {\n     if ( $this->getId() ){\n       \/\/ Removing the encryption key to prevent it being saved in the session\n       if (isset($this->fields['enckey'])) {\n         unset($this->fields['enckey']);\n       }\n       if ( !empty($this->getSession('cfg')) ){\n         $this->cfg = $this->getSession('cfg');\n         $this->id_group = $this->getSession('id_group');\n       }\n       else if ( $d = $this->db->rselect(\n         $this->class_cfg['tables']['users'],\n         array_unique(array_values($this->fields)),\n         X::mergeArrays(\n           $this->class_cfg['conditions'],\n           [$this->fields['active'] => 1],\n           [$this->fields['id'] => $this->id]))\n       ){\n         $r = [];\n         foreach ( $d as $key => $val ){\n           $this->$key = $val;\n           $r[$key] = $key === $this->fields['cfg'] ? json_decode($val, true) : $val;\n         }\n         $this->cfg = $r['cfg'] ?: [];\n         \/\/ Group\n         $this->id_group = $r['id_group'];\n         $this->session->set($r, self::$un);\n         $this->saveSession();\n       }\n     }\n     return $this;\n  }",
                        "startLine": 1106,
                        "doc": {
                            "description": "Gathers the user'data from the database and puts it in the session.",
                            "params": {
                                "$data": {
                                    "type": "array",
                                    "description": "User's table data argument if it is already available"
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1138,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "data",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "_get_encryption_key": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function()\n  {\n     if (is_null($this->_encryption_key)) {\n       if ($this->auth) {\n         $this->_encryption_key = $this->db->selectOne($this->class_cfg['table'], $this->class_cfg['arch']['users']['enckey'], ['id' => $this->id]);\n       }\n     }\n     return $this->_encryption_key;\n  }",
                        "startLine": 1140,
                        "endLine": 1148,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "_sess_info": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($id_session = NULL)\n  {\n     if ( !str::isUid($id_session) ){\n       $id_session = $this->getIdSession();\n     }\n     else{\n       $cfg = $this->_get_session('cfg');\n     }\n     if (\n       empty($cfg) &&\n       Str::isUid($id_session) &&\n       ($id = $this->getSession('id')) &&\n       ($d = $this->db->rselect(\n         $this->class_cfg['tables']['sessions'],\n         $this->class_cfg['arch']['sessions'],\n         [\n           $this->class_cfg['arch']['sessions']['id'] => $id_session,\n           $this->class_cfg['arch']['sessions']['id_user'] => $id,\n           $this->class_cfg['arch']['sessions']['opened'] => 1,\n         ]))\n     ){\n       $cfg = json_decode($d['cfg'], true);\n     }\n     if ( \\is_array($cfg) ){\n       $this->sess_cfg = $cfg;\n     }\n     else{\n       if ( isset($id) ){\n         $this->_init_session();\n         $new_id = $this->getSession('id');\n         if ( $new_id !== $id ){\n           return $this->_sess_info($new_id);\n         }\n       }\n       $this->setError(14);\n     }\n     return $this;\n  }",
                        "startLine": 1156,
                        "doc": {
                            "description": "Gathers all the information about the user's session.",
                            "params": {
                                "$d": {
                                    "type": "string",
                                    "description": "The session's table data or its ID"
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1193,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "id_session",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "_check_password": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($pass_given, $pass_stored)\n  {\n     return $this->_crypt($pass_given) === $pass_stored;\n  }",
                        "startLine": 1202,
                        "doc": {
                            "description": "Checks the conformity of a given string with a hash.",
                            "params": {
                                "$pass": {
                                    "type": "string",
                                    "description": "stored The stored encrypted password to check against"
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 1205,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "pass_given",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "pass_stored",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_crypt": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($st)\n  {\n     if (!function_exists($this->class_cfg['encryption'])) {\n       $this->class_cfg['encryption'] = 'sha256';\n     }\n     return eval(\"return {$this->class_cfg['encryption']}('$st');\");\n  }",
                        "startLine": 1213,
                        "doc": {
                            "description": "Use the configured hash function to encrypt a password string.",
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": "The string to crypt"
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 1219,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_retrieve_session": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($force = false)\n  {\n     \/\/ $id mustn't be already defined\n     if (!$this->id || $force) {\n       \/\/ The user ID must be in the session\n       $id_session = $this->getIdSession();\n       $id = $this->getSession('id');\n       if ($id_session && $id) {\n         $this->_sess_info($id_session);\n         X::log([$this->sess_cfg, $this->_get_session('fingerprint'), $this->getPrint($this->_get_session('fingerprint'))], 'user_login');\n         if (isset($this->sess_cfg['fingerprint']) &&\n             ($this->getPrint($this->_get_session('fingerprint')) === $this->sess_cfg['fingerprint'])\n         ) {\n           X::log(\"THe auth should have worked for id $id\", 'user_login');\n           $this\n             ->_authenticate($id)\n             ->_user_info()\n             ->_init_dir()\n             ->saveSession();\n           }\n         else {\n           $this->setError(19);\n         }\n       }\n       else {\n         X::log([$id_session, $id], 'user_login');\n         $this->setError(15);\n       }\n     }\n     return $this;\n  }",
                        "startLine": 1227,
                        "doc": {
                            "description": "Retrieves all user info from its session and populates the object.",
                            "params": {
                                "$force": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1257,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "force",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "_init_session": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function()\n  {\n     \/\/ Getting or creating the session is it doesn't exist yet\n     \/** @var user\\session *\/\n     $this->session = user\\session::getInstance();\n     if ( !$this->session ){\n       $this->session = new user\\session();\n     }\n \n     \/** @var int $id_session The ID of the session row in the DB *\/\n     if ( !($id_session = $this->getIdSession())\n         || !($tmp = $this->db->selectOne(\n               $this->class_cfg['tables']['sessions'],\n               $this->class_cfg['arch']['sessions']['cfg'],\n               [$this->class_cfg['arch']['sessions']['id'] => $id_session]\n             ))\n     ){\n       \/** @var string $salt *\/\n       $salt = self::makeFingerprint();\n \n       \/** @var string $fingerprint *\/\n       $fingerprint = self::makeFingerprint();\n \n \n       \/** @var array $p The fields of the sessions table *\/\n       $p =& $this->class_cfg['arch']['sessions'];\n \n       $this->sess_cfg = [\n         'fingerprint' => $this->getPrint($fingerprint),\n         'last_renew' => time()\n       ];\n \n       \/\/ Inserting the session in the database\n       if ( $this->db->insert($this->class_cfg['tables']['sessions'], [\n         $p['sess_id'] => $this->session->getId(),\n         $p['ip_address'] => $this->ip_address,\n         $p['user_agent'] => $this->user_agent,\n         $p['opened'] => 1,\n         $p['last_activity'] => date('Y-m-d H:i:s'),\n         $p['creation'] => date('Y-m-d H:i:s'),\n         $p['cfg'] => json_encode($this->sess_cfg)\n       ]) ){\n         \/\/ Setting the session with its ID\n         $id_session = $this->db->lastId();\n         $this->session->set([\n           'fingerprint' => $fingerprint,\n           'tokens' => [],\n           'id_session' => $id_session,\n           'salt' => $salt\n         ], self::$sn);\n         $this->saveSession();\n       }\n       else{\n         $this->setError(16);\n       }\n     }\n     else{\n       $this->sess_cfg = json_decode($tmp, true);\n     }\n     return $this;\n  }",
                        "startLine": 1264,
                        "doc": {
                            "description": "Gets or creates (also in database) the user's session for the first time.",
                            "params": [],
                            "return": "self"
                        },
                        "endLine": 1324,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "_set_session": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($attr)\n  {\n     if ( $this->session->has(self::$sn) ){\n       $args = \\func_get_args();\n       if ( (\\count($args) === 2) && \\is_string($args[0]) ){\n         $attr = [$args[0] => $args[1]];\n       }\n       foreach ( $attr as $key => $val ){\n         if ( \\is_string($key) ){\n           $this->session->set($val, self::$sn, $key);\n         }\n       }\n     }\n     return $this;\n  }",
                        "startLine": 1332,
                        "doc": {
                            "description": "Sets an attribute the \"session\" part of the session.",
                            "params": {
                                "$attr": {
                                    "type": "mixed",
                                    "description": "Attribute if value follows, or an array with attribute\/value keypairs"
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1346,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_get_session": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($attr = NULL)\n  {\n     if ($this->session->has(self::$sn)) {\n       return $attr ?\n         $this->session->get(self::$sn, $attr) :\n         $this->session->get(self::$sn);\n     }\n     return null;\n  }",
                        "startLine": 1354,
                        "doc": {
                            "description": "Gets an attribute or the whole the \"session\" part of the session.",
                            "params": {
                                "$attr": {
                                    "type": "string",
                                    "description": "Name of the attribute to get"
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 1362,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "_check_credentials": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($params)\n  {\n     \n     if ( $this->check() ){\n       \n       \/** @var array $f The form fields sent to identify the users *\/\n       $f =& $this->class_cfg['fields'];\n \n       if ( !isset($params[$f['salt']]) ){\n         $this->setError(11);\n       }\n       else{\n         if ( !$this->checkSalt($params[$f['salt']]) ){\n           $this->setError(17);\n           $this->session->destroy();\n         }\n       }\n       if ( $this->check() ){\n         if ( isset($params[$f['user']], $params[$f['pass']]) ){\n           \/\/ Table structure\n           $arch =& $this->class_cfg['arch'];\n \n           $this->_just_login = 1;\n           if ( !$this->check() ){\n             $this->setError(19);\n             \/\/$this->session->destroy();\n             \/\/$this->_init_session();\n           }\n \n           \/\/ Database Query\n           else if (\n             $id = $this->db->selectOne(\n               $this->class_cfg['tables']['users'],\n               $this->fields['id'],\n               X::mergeArrays(\n                 $this->class_cfg['conditions'],\n                 [$arch['users']['active'] => 1],\n                 [($arch['users']['login'] ?? $arch['users']['email']) => $params[$f['user']]])\n             )\n           ){\n             $pass = $this->db->selectOne(\n               $this->class_cfg['tables']['passwords'],\n               $arch['passwords']['pass'],\n               [$arch['passwords']['id_user'] => $id],\n               [$arch['passwords']['added'] => 'DESC']\n             );\n             if ($this->_check_password($params[$f['pass']], $pass)) {\n               $this->_login($id);\n             }\n             else{\n               $this->recordAttempt();\n               \/\/ Canceling authentication if num_attempts > max_attempts\n               $this->setError($this->checkAttempts() ? 6 : 4);\n             }\n           }\n           else{\n             $this->setError(6);\n           }\n         }\n         else{\n           $this->setError(12);\n         }\n       }\n     }\n     return $this->auth;\n  }",
                        "startLine": 1370,
                        "doc": {
                            "description": "Checks the credentials of a user.",
                            "params": {
                                "$params": {
                                    "type": "array",
                                    "description": "Credentials"
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 1435,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "params",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_init_dir": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($create = false)\n  {\n     if ( \\defined('BBN_DATA_PATH') && $this->getId() ){\n       $this->path = Mvc::getUserDataPath($this->getId());\n       $this->tmp_path = Mvc::getUserTmpPath($this->getId());\n       if ( !\\defined('BBN_USER_PATH') ){\n         define('BBN_USER_PATH', $this->path);\n       }\n       if ( $create ){\n         file\\dir::createPath($this->path);\n         file\\dir::createPath($this->tmp_path);\n         file\\dir::delete($this->tmp_path, false);\n       }\n     }\n     return $this;\n  }",
                        "startLine": 1443,
                        "doc": {
                            "description": "Defines user's directory and constant BBN_USER_PATH if not done yet.",
                            "params": {
                                "$create": {
                                    "type": "bool",
                                    "description": "If true creates it and remove temp files if any"
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1458,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "create",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "_authenticate": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function($id)\n  {\n     if ( $this->check() && $id ){\n       $this->id = $id;\n       $this->auth = true;\n       $this->db->update($this->class_cfg['tables']['sessions'], [\n         $this->class_cfg['arch']['sessions']['id_user'] => $id\n       ], [\n         $this->class_cfg['arch']['sessions']['id'] => $this->getIdSession()\n       ]);\n     }\n     return $this;\n  }",
                        "startLine": 1466,
                        "doc": {
                            "description": "Sets a user as authenticated ($this->auth = true).",
                            "params": {
                                "$id": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1478,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "id",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "_init_class_cfg": {
                        "file": "bbn\\User",
                        "private": true,
                        "code": "function(array $cfg = [])\n  {\n\n    if ( !isset($cfg['tables'], $cfg['table'], $cfg['arch']) ){\n      die('The class '.\\get_class($this).' is not configured properly to work with trait dbconfig');\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    foreach ( $cfg['arch'] as $t => $a ){\n      if ( $cfg['tables'][$t] === $cfg['table'] ){\n        $this->class_table_index = $t;\n      }\n    }\n    \/*\n     * The selection comprises the defined fields of the users table\n     * Plus a bunch of user-defined additional fields in the same table\n     *\/\n    $this->fields = $cfg['arch'][$this->class_table_index];\n    $this->class_cfg = $cfg;\n    return $this;\n  }",
                        "startLine": 32,
                        "doc": {
                            "description": "Sets the class configuration as defined in $this->_defaults",
                            "params": {
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "$this"
                        },
                        "endLine": 53,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "cfg",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    }
                },
                "protected": {
                    "set_error": {
                        "file": "bbn\\User",
                        "protected": true,
                        "code": "function($err)\n  {\n    if ( !$this->error ){\n      $this->error = $err;\n      \\bbn\\X::log($this->getError(), 'user_login');\n      \/\/die(var_dump($err));\n    }\n    return $this;\n  }",
                        "startLine": 996,
                        "doc": {
                            "description": "Sets the error property once and for all.",
                            "params": {
                                "$err": {
                                    "type": "",
                                    "description": "The error code"
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1004,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "parent": {
                            "name": "set_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": true,
                            "public": false,
                            "final": false,
                            "code": "function($err)\n  {\n    $this->errors[] = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    return $this;\n  }",
                            "startLine": 63,
                            "doc": "",
                            "endLine": 70,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "err",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "err",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "log_in": {
                        "file": "bbn\\User",
                        "protected": true,
                        "code": "function($id)\n  {\n    $this->error = null;\n    if ( $this->check() && $id ){\n      $this\n        ->_authenticate($id)\n        ->_user_info()\n        ->_init_dir(true)\n        ->saveSession();\n    }\n    return $this;\n  }",
                        "startLine": 1028,
                        "doc": {
                            "description": "Completes the steps for a full authentication of the user.",
                            "params": {
                                "$id": {
                                    "type": "type",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 1039,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "id",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_print": {
                        "file": "bbn\\User",
                        "protected": true,
                        "code": "function($fp = NULL)\n  {\n    if ( !$fp ){\n      $fp = $this->_get_session('fingerprint');\n    }\n    if ( $fp ){\n      return sha1($this->user_agent.$this->accept_lang.\/*$this->ip_address .*\/ $fp);\n    }\n    return null;\n  }",
                        "startLine": 1047,
                        "doc": {
                            "description": "Returns a \"print\" based on the user agent + the fingerprint.",
                            "params": {
                                "$fp": {
                                    "type": "null|string",
                                    "description": ""
                                }
                            },
                            "return": "null|string"
                        },
                        "endLine": 1056,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "fp",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_id_session": {
                        "file": "bbn\\User",
                        "protected": true,
                        "code": "function()\n  {\n    return $this->_get_session('id_session');\n  }",
                        "startLine": 1063,
                        "doc": {
                            "description": "Returns the database ID for the session's row if it is in the session.",
                            "params": [],
                            "return": "null|string"
                        },
                        "endLine": 1066,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "record_attempt": {
                        "file": "bbn\\User",
                        "protected": true,
                        "code": "function()\n  {\n    $this->cfg['num_attempts'] = isset($this->cfg['num_attempts']) ?\n      $this->cfg['num_attempts']+1 : 1;\n    $this->_set_session('num_attempts', $this->cfg['num_attempts']);\n    $this->saveSession();\n    return $this;\n  }",
                        "startLine": 1073,
                        "doc": {
                            "description": "Increments the num_attempt variable (after unsuccessful login attempt).",
                            "params": [],
                            "return": "self"
                        },
                        "endLine": 1080,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "retriever_init": {
                        "file": "bbn\\User",
                        "static": true,
                        "protected": true,
                        "code": "function($instance)\n  {\n    self::$retriever_instance = $instance;\n  }",
                        "startLine": 17,
                        "endLine": 20,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "instance",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "public": {
                    "__construct": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function(bbn\\Db $db, array $params = [], array $cfg = [])\n  {\n\n    \/\/ The database connection\n    $this->db = $db;\n    \/\/ The client environment variables\n    $this->user_agent = $_SERVER['HTTP_USER_AGENT'] ?? '';\n    $this->ip_address = $_SERVER['REMOTE_ADDR'] ?? '';\n    $this->accept_lang = $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? '';\n\n    \/\/ Setting up the class configuration\n    $this->_init_class_cfg($cfg);\n\n    \/\/ Creating the session's variables if they don't exist yet\n    $this->_init_session();\n    self::retrieverInit($this);\n\n    $f =& $this->class_cfg['fields'];\n\n    if (\\bbn\\X::isCli() && isset($params['id'])) {\n      $this->id = $params['id'];\n      $this->auth = true;\n    }\n    \/\/ The user logs in\n    elseif ( isset($params[$f['user']], $params[$f['pass']], $params[$f['salt']]) ){\n\n      \/** @todo separate credentials and salt checking *\/\n      if ( $this->getPrint($this->_get_session('fingerprint')) === $this->sess_cfg['fingerprint']){\n        \/** @todo separate credentials and salt checking *\/\n        $this->_check_credentials($params);\n      }\n      else{\n        $this->setError(19);\n        $this->session->destroy();\n      }\n    }\n    \/** @todo revise the process: dying is not the solution! *\/\n    \/\/ The user is not known yet\n    elseif (\n      isset($params[$f['key']], $params[$f['id']], $params[$f['pass1']], $params[$f['pass2']], $params[$f['action']]) &&\n      ($params[$f['action']] === 'init_password') &&\n      ($params[$f['pass1']] === $params[$f['pass2']])\n    ){\n      if ( $id = $this->getIdFromMagicString($params[$f['id']], $params[$f['key']]) ){\n        $this->expireHotlink($params[$f['id']]);\n        $this->forcePassword($params[$f['pass2']], $id);\n        $this->session->set([]);\n        \/\/ Reloads the page\n        header('Location: .\/');\n        die();\n      }\n      else{\n        $this->setError(18);\n      }\n    }\n    else {\n      $this->checkSession();\n    }\n  }",
                        "startLine": 202,
                        "doc": {
                            "description": "User constructor.",
                            "params": {
                                "$db": {
                                    "type": "db",
                                    "description": ""
                                },
                                "$cfg": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$params": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": ""
                        },
                        "endLine": 260,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "db",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "params",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            },
                            {
                                "name": "cfg",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "get_salt": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    $salt = $this->_get_session('salt');\n    return $salt;\n  }",
                        "startLine": 267,
                        "doc": {
                            "description": "Returns the salt string kept in session.",
                            "params": [],
                            "return": "null|string"
                        },
                        "endLine": 271,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "check_salt": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($salt)\n  {\n    return $this->getSalt() === $salt;\n  }",
                        "startLine": 278,
                        "doc": {
                            "description": "Confronts the given string with the salt string kept in session.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 281,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "salt",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_cfg": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($attr = '')\n  {\n    if ( $this->check() ){\n      if ( !$this->cfg ){\n        $this->cfg = $this->session->get('cfg');\n      }\n      if ( empty($attr) ){\n        return $this->cfg;\n      }\n      if ( isset($this->cfg[$attr]) ){\n        return $this->cfg[$attr];\n      }\n    }\n    return null;\n  }",
                        "startLine": 289,
                        "doc": {
                            "description": "Returns the current user's configuration.",
                            "params": {
                                "$attr": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 303,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_class_cfg": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    return $this->class_cfg;\n  }",
                        "startLine": 310,
                        "doc": {
                            "description": "Returns the current configuration of this very class.",
                            "params": [],
                            "return": "array"
                        },
                        "endLine": 313,
                        "isUserDefined": true,
                        "returns": [
                            "array"
                        ]
                    },
                    "get_path": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    return $this->path;\n  }",
                        "startLine": 320,
                        "doc": {
                            "description": "Returns the directory path for the user.",
                            "params": [],
                            "return": "string"
                        },
                        "endLine": 323,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "get_tmp_dir": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    return $this->tmp_path;\n  }",
                        "startLine": 329,
                        "doc": {
                            "description": "Returns the tmp directory path for the user.",
                            "params": [],
                            "return": "string"
                        },
                        "endLine": 332,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "get_tables": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    if ( !empty($this->class_cfg) ){\n      return $this->class_cfg['tables'];\n    }\n    return null;\n  }",
                        "startLine": 338,
                        "doc": {
                            "description": "Returns the list of tables used by the current class.",
                            "params": [],
                            "return": "array"
                        },
                        "endLine": 344,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ]
                    },
                    "get_fields": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($table = '')\n  {\n    if ( !empty($this->class_cfg) ){\n      if ( $table ){\n        return $this->class_cfg['arch'][$table] ?? null;\n      }\n      return $this->class_cfg['arch'];\n    }\n    return null;\n  }",
                        "startLine": 352,
                        "doc": {
                            "description": "Returns the list of fields of the given table, and if empty for each table.",
                            "params": {
                                "$table": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array|null"
                        },
                        "endLine": 361,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "table",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "update_info": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function(array $d)\n  {\n    if ( $this->checkSession() ){\n      $update = [];\n      foreach ( $d as $key => $val ){\n        if (\n          ($key !== $this->fields['id']) &&\n          ($key !== $this->fields['cfg']) &&\n          ($key !== 'auth') &&\n          ($key !== 'pass') &&\n          \\in_array($key, $this->fields)\n        ){\n          $update[$key] = $val;\n        }\n      }\n      if ( \\count($update) > 0 ){\n        $r = (bool)$this->db->update(\n                $this->class_cfg['tables']['users'],\n                $update,\n                [$this->fields['id'] => $this->id]);\n        \/** @todo Why did I do this?? *\/\n        if ( $r ){\n          $this->setSession(['cfg' => false]);\n          $this->_user_info();\n          return $r;\n        }\n      }\n    }\n    return false;\n  }",
                        "startLine": 369,
                        "doc": {
                            "description": "Changes the data in the user's table.",
                            "params": {
                                "$d": {
                                    "type": "array",
                                    "description": "The new data"
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 398,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "d",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_password": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($st)\n  {\n    return $this->_crypt($st);\n  }",
                        "startLine": 407,
                        "doc": {
                            "description": "Encrypts the given string to match the password.",
                            "params": {
                                "$st": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 410,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_just_login": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    return $this->_just_login;\n  }",
                        "startLine": 417,
                        "doc": {
                            "description": "Returns true after the log in moment.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 420,
                        "isUserDefined": true
                    },
                    "set_session": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($attr)\n  {\n    if ( $this->session->has(self::$un) ){\n      $args = \\func_get_args();\n      if ( (\\count($args) === 2) && \\is_string($args[0]) ){\n        $attr = [$args[0] => $args[1]];\n      }\n      foreach ( $attr as $key => $val ){\n        if ( \\is_string($key) ){\n          $this->session->set($val, self::$un, $key);\n        }\n      }\n    }\n    return $this;\n  }",
                        "startLine": 427,
                        "doc": {
                            "description": "Sets the given attribute(s) in the user's session.",
                            "params": [],
                            "return": "self"
                        },
                        "endLine": 441,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "unset_session": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($attr)\n  {\n    $args = \\func_get_args();\n    array_unshift($args, self::$un);\n    if ($this->session->has(...$args)) {\n      $this->session->uset(...$args);\n    }\n    return $this;\n  }",
                        "startLine": 448,
                        "doc": {
                            "description": "Sets the given attribute(s) in the user's session.",
                            "params": [],
                            "return": "self"
                        },
                        "endLine": 456,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_session": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($attr = NULL)\n  {\n    if ( $this->session->has(self::$un) ){\n      return $attr ? $this->session->get(self::$un, $attr) : $this->session->get(self::$un);\n    }\n    return null;\n  }",
                        "startLine": 464,
                        "doc": {
                            "description": "Returns session property from the session's user array.",
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "null|string The property to get"
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 470,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "has_session": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($attr)\n  {\n    return $this->session->has(self::$un, $attr);\n  }",
                        "startLine": 477,
                        "doc": {
                            "description": "Checks if the given attribute exists in the user's session.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 480,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "update_activity": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    $id_session = $this->getIdSession();\n    \/\/die(var_dump($id_session, $this->check()));\n    if ( $id_session && $this->check() ){\n      $p =& $this->class_cfg['arch']['sessions'];\n      $this->db->update($this->class_cfg['tables']['sessions'], [\n        $p['last_activity'] => date('Y-m-d H:i:s')\n      ], [\n        $p['id'] => $id_session\n      ]);\n    }\n    else{\n      $this->setError(13);\n    }\n    return $this;\n  }",
                        "startLine": 482,
                        "endLine": 498,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "save_session": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    $id_session = $this->getIdSession();\n    \/\/die(var_dump($id_session, $this->check()));\n    if ( $this->check() ){\n      if ( $id_session ){\n        $p =& $this->class_cfg['arch']['sessions'];\n        \/\/ It is normal this is sometimes not changing as different actions can happen in the same\n        $time = time();\n        if ( empty($this->sess_cfg['last_renew']) || ($time - $this->sess_cfg['last_renew'] >= 2) ){\n          if ( !$this->db->update($this->class_cfg['tables']['sessions'], [\n            $p['id_user'] => $this->id,\n            $p['sess_id'] => $this->session->getId(),\n            $p['ip_address'] => $this->ip_address,\n            $p['user_agent'] => $this->user_agent,\n            $p['opened'] => 1,\n            $p['last_activity'] => date('Y-m-d H:i:s', $time),\n            $p['cfg'] => json_encode($this->sess_cfg)\n          ], [\n            $p['id'] => $id_session\n          ]) ){\n            X::log($this->id, 'user_login');\n            \/\/die(var_dump($this->session));\n          }\n        }\n        else{\n          X::log(\"Pas besoin\", 'user_login');\n        }\n      }\n      else{\n        $this->setError(13);\n      }\n    }\n    return $this;\n  }",
                        "startLine": 506,
                        "doc": {
                            "description": "Saves the session config in the database.",
                            "params": [],
                            "return": "self"
                        },
                        "endLine": 540,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "close_session": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($with_session = false)\n  {\n    if ( $this->id ){\n      $p =& $this->class_cfg['arch']['sessions'];\n      $this->db->update($this->class_cfg['tables']['sessions'], [\n          $p['ip_address'] => $this->ip_address,\n          $p['user_agent'] => $this->user_agent,\n          $p['opened'] => 0,\n          $p['last_activity'] => date('Y-m-d H:i:s'),\n          $p['cfg'] => json_encode($this->sess_cfg)\n        ],[\n          $p['id_user'] => $this->id,\n          $p['sess_id'] => $this->session->getId()\n        ]);\n      $this->auth = false;\n      $this->id = null;\n      $this->sess_cfg = null;\n      if ( $with_session ){\n        $this->session->set([]);\n      }\n      else{\n        $this->session->set([], self::$un);\n      }\n    }\n    return $this;\n  }",
                        "startLine": 548,
                        "doc": {
                            "description": "Closes the session in the database.",
                            "params": {
                                "$with": {
                                    "type": "bool",
                                    "description": "session If true deletes also the session information"
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 573,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "with_session",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "check_attempts": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    if ( !isset($this->cfg) ){\n      X::log(\"Checking attempts without user config\", 'user_login');\n      return false;\n    }\n    if ( isset($this->cfg['num_attempts']) && $this->cfg['num_attempts'] > $this->class_cfg['max_attempts'] ){\n      X::log(\"Checking attempts maxed out!\", 'user_login');\n      return false;\n    }\n    X::log(\"Checking attempts ok\", 'user_login');\n    return true;\n  }",
                        "startLine": 579,
                        "doc": {
                            "description": "Returns false if the max number of connections attempts has been reached",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 591,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "save_cfg": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->check() ){\n      $this->db->update(\n          $this->class_cfg['tables']['users'],\n          [$this->fields['cfg'] => json_encode($this->cfg)],\n          [$this->fields['id'] => $this->id]);\n    }\n    return $this;\n  }",
                        "startLine": 598,
                        "doc": {
                            "description": "Saves the user's config in the cfg field of the users' table.\n\nreturn self",
                            "tags": []
                        },
                        "endLine": 607,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "set_cfg": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($attr)\n  {\n    if ( null !== $this->cfg ){\n      $args = \\func_get_args();\n      if ( (\\count($args) === 2) && \\is_string($attr) ){\n        \/** @var array $attr *\/\n        $attr = [$args[0] => $args[1]];\n      }\n      foreach ( $attr as $key => $val ){\n        if ( \\is_string($key) ){\n          $this->cfg[$key] = $val;\n        }\n      }\n      $this->setSession(['cfg' => $this->cfg]);\n    }\n    return $this;\n  }",
                        "startLine": 614,
                        "doc": {
                            "description": "Saves the attribute(s) values into the session config.\n\nreturn self",
                            "tags": []
                        },
                        "endLine": 630,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "unset_cfg": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($attr)\n  {\n    if ( null !== $this->cfg ){\n      $args = \\func_get_args();\n      if ( \\is_string($attr) ){\n        \/** @var array $attr *\/\n        $attr = [$attr];\n      }\n      foreach ( $attr as $key ){\n        if ( isset($key) ){\n          unset($this->cfg[$key]);\n        }\n      }\n      $this->setSession(['cfg' => $this->cfg]);\n    }\n    return $this;\n  }",
                        "startLine": 638,
                        "doc": {
                            "description": "Unsets the attribute(s) in the session config.",
                            "params": {
                                "$attr": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 654,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "self"
                        ],
                        "arguments": [
                            {
                                "name": "attr",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "refresh_info": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->check() ){\n      $this->_user_info();\n      $this->_sess_info();\n    }\n    return $this;\n  }",
                        "startLine": 661,
                        "doc": {
                            "description": "Regathers informations from the database.",
                            "params": [],
                            "return": "self"
                        },
                        "endLine": 668,
                        "isUserDefined": true,
                        "returns": [
                            "self"
                        ]
                    },
                    "is_auth": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 675,
                        "doc": {
                            "description": "Returns true if authenticated false otherwise.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 677,
                        "isUserDefined": true
                    },
                    "check_session": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n      $this->_retrieve_session();\n      return $this->auth;\n    }\n  }",
                        "startLine": 684,
                        "doc": {
                            "description": "Retrieves user's info from session if needed and checks if authenticated.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 689,
                        "isUserDefined": true
                    },
                    "get_id": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->check() ){\n      return $this->id;\n    }\n    return null;\n  }",
                        "startLine": 696,
                        "doc": {
                            "description": "Returns the user's ID if there is no error.",
                            "params": [],
                            "return": "null|string"
                        },
                        "endLine": 702,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "get_group": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->check() ){\n      return $this->id_group;\n    }\n    return null;\n  }",
                        "startLine": 709,
                        "doc": {
                            "description": "Returns the user's group's ID if there is no error.",
                            "params": [],
                            "return": "null|string"
                        },
                        "endLine": 715,
                        "isUserDefined": true,
                        "returns": [
                            "string",
                            null
                        ]
                    },
                    "expire_hotlink": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($id)\n  {\n    if ( $this->check() ){\n      return $this->db->update($this->class_cfg['tables']['hotlinks'],\n              [$this->class_cfg['arch']['hotlinks']['expire'] => date('Y-m-d H:i:s')],\n              [$this->class_cfg['arch']['hotlinks']['id'] => $id]);\n    }\n    return 0;\n  }",
                        "startLine": 722,
                        "doc": {
                            "description": "Expires an hotlink by setting the expire column to now.",
                            "params": [],
                            "return": "int"
                        },
                        "endLine": 730,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int"
                        ],
                        "arguments": [
                            {
                                "name": "id",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_id_from_magic_string": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($id, $key)\n  {\n    if ( $val = $this->db->rselect($this->class_cfg['tables']['hotlinks'], [\n      $this->class_cfg['arch']['hotlinks']['magic_string'],\n      $this->class_cfg['arch']['hotlinks']['id_user'],\n    ],[\n      $this->class_cfg['arch']['hotlinks']['id'] => $id\n    ]) ){\n      if ( self::isMagicString($key, $val[$this->class_cfg['arch']['hotlinks']['magic_string']]) ){\n        return $val['id_user'];\n      }\n    }\n    return null;\n  }",
                        "startLine": 739,
                        "doc": {
                            "description": "Retrieves a user's ID from the hotlink's magic string.",
                            "params": {
                                "$id": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$key": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "null|string"
                        },
                        "endLine": 752,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "id",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "key",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_admin": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    return (bool)$this->getSession('admin');\n  }",
                        "startLine": 759,
                        "doc": {
                            "description": "Checks whether the user is an admin or not.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 762,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "is_dev": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    return (bool)($this->isAdmin() || !!$this->getSession('dev'));\n  }",
                        "startLine": 769,
                        "doc": {
                            "description": "Checks whether the user is an dev(eloper) or not.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 772,
                        "isUserDefined": true,
                        "returns": [
                            "bool"
                        ]
                    },
                    "get_manager": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function(bbn\\Mail $mail = NULL)\n  {\n    $mgr = new user\\manager($this, $mail);\n    return $mgr;\n  }",
                        "startLine": 780,
                        "doc": {
                            "description": "Gets a bbn\\User\\Manager instance.",
                            "params": {
                                "$mail": {
                                    "type": "mail",
                                    "description": ""
                                }
                            },
                            "return": "user\\manager"
                        },
                        "endLine": 784,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "mail",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "check": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 791,
                        "doc": {
                            "description": "Checks if an error has been thrown or not.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 793,
                        "isUserDefined": true,
                        "parent": {
                            "name": "check",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 56,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 61,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "logout": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    $this->cfg = [];\n    $this->closeSession();\n  }",
                        "startLine": 800,
                        "doc": {
                            "description": "Unauthenticates, resets the config and destroys the session.",
                            "params": [],
                            "return": "void"
                        },
                        "endLine": 804,
                        "isUserDefined": true
                    },
                    "get_mailer": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    return new Mail();\n  }",
                        "startLine": 811,
                        "doc": {
                            "description": "Returns an instance of the mailer class.",
                            "params": [],
                            "return": "mail"
                        },
                        "endLine": 814,
                        "isUserDefined": true
                    },
                    "set_password": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($old_pass, $new_pass)\n  {\n    if ( $this->auth ){\n      $pwt = $this->class_cfg['tables']['passwords'];\n      $pwa = $this->class_cfg['arch']['passwords'];\n      $stored_pass = $this->db->selectOne($pwt, $pwa['pass'], [\n        $this->class_cfg['arch']['passwords']['id_user'] => $this->id\n      ], [\n        $this->class_cfg['arch']['passwords']['added'] => 'DESC'\n      ]);\n      if ( $this->_check_password($old_pass, $stored_pass) ){\n        return $this->forcePassword($new_pass, $this->getId());\n      }\n    }\n    return false;\n  }",
                        "startLine": 823,
                        "doc": {
                            "description": "Change the password in the database after checking the current one.",
                            "params": {
                                "$old": {
                                    "type": "string",
                                    "description": "pass The current password"
                                },
                                "$new": {
                                    "type": "string",
                                    "description": "pass The new password"
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 838,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "old_pass",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "new_pass",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "force_password": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($pass, $id)\n  {\n    if ( $this->check() ){\n      return (bool)$this->db->insert($this->class_cfg['tables']['passwords'], [\n        $this->class_cfg['arch']['passwords']['pass'] => $this->_crypt($pass),\n        $this->class_cfg['arch']['passwords']['id_user'] => $id,\n        $this->class_cfg['arch']['passwords']['added'] => date('Y-m-d H:i:s')\n      ]);\n    }\n    return false;\n  }",
                        "startLine": 845,
                        "doc": {
                            "description": "Changes the password in the database.",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 855,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "pass",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "id",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_name": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($usr = NULL)\n  {\n    if ( $this->auth ){\n      if ( \\is_null($usr) ){\n        $usr = $this->getSession();\n      }\n      else if ( Str::isUid($usr) ){\n        $mgr = $this->getManager();\n        $usr = $mgr->getUser($usr);\n      }\n      if ( isset($usr[$this->class_cfg['show']]) ){\n        return $usr[$this->class_cfg['show']];\n      }\n    }\n    return null;\n  }",
                        "startLine": 862,
                        "doc": {
                            "description": "Returns the full name of the given user or the current one.",
                            "params": [],
                            "return": "string|null"
                        },
                        "endLine": 877,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "usr",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_email": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($usr = NULL)\n  {\n    if ( $this->auth ){\n      if ( \\is_null($usr) ){\n        $usr = $this->getSession();\n      }\n      else if ( Str::isUid($usr) ){\n        $mgr = $this->getManager();\n        $usr = $mgr->getUser($usr);\n      }\n      if ( isset($usr[$this->class_cfg['email']]) ){\n        return $usr[$this->class_cfg['email']];\n      }\n    }\n    return null;\n  }",
                        "startLine": 884,
                        "doc": {
                            "description": "Returns the email of the given user or the current one.",
                            "params": [],
                            "return": "string|null"
                        },
                        "endLine": 899,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "usr",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "add_to_tmp": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($file, $name = NULL, $move = true)\n  {\n    if ( $this->auth ){\n      $fs = new file\\system();\n      $path = $this->getTmpDir().microtime(true).'\/';\n      if ( $fs->isFile($file) && $fs->createPath($path) ){\n        $dest = $path.($name ?: basename($file));\n        if ( $move ){\n          if ( $fs->move($file, dirname($dest)) && $fs->rename(dirname($dest).'\/'.basename($file), basename($dest))){\n            return $dest;\n          }\n        }\n        else if ( $fs->copy($file, $dest) ){\n          return $dest;\n        }\n      }\n    }\n    return null;\n  }",
                        "startLine": 909,
                        "doc": {
                            "description": "Adds a file to the tmp folder of the user and returns its path.",
                            "params": {
                                "$file": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$move": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "string|null"
                        },
                        "endLine": 927,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "file",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "name",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "move",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": true,
                                "default_name": ""
                            }
                        ]
                    },
                    "crypt": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($st)\n  {\n    if ($enckey = $this->_get_encryption_key()) {\n      return util\\enc::crypt($st, $enckey) ?: null;\n    }\n    return null;\n  }",
                        "startLine": 929,
                        "endLine": 935,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "decrypt": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($st)\n  {\n    if ($enckey = $this->_get_encryption_key()) {\n      return util\\enc::decrypt($st, $enckey) ?: null;\n    }\n    return null;\n  }",
                        "startLine": 937,
                        "endLine": 943,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_user": {
                        "file": "bbn\\User",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    return self::getInstance();\n  }",
                        "startLine": 949,
                        "doc": {
                            "description": "Returns the latest created connection, ie the current user's object.",
                            "params": [],
                            "return": "self"
                        },
                        "endLine": 952,
                        "isUserDefined": true,
                        "returns": [
                            "self",
                            null
                        ]
                    },
                    "make_fingerprint": {
                        "file": "bbn\\User",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    return Str::genpwd(32, 16);\n  }",
                        "startLine": 958,
                        "doc": {
                            "description": "Generates a random long string (16-32 chars) used as unique fingerprint.",
                            "params": [],
                            "return": "string"
                        },
                        "endLine": 961,
                        "isUserDefined": true,
                        "returns": [
                            "string"
                        ]
                    },
                    "make_magic_string": {
                        "file": "bbn\\User",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $key = self::makeFingerprint();\n    return [\n      'key' => $key,\n      'hash' => hash('sha256', $key)\n    ];\n  }",
                        "startLine": 968,
                        "doc": {
                            "description": "Returns an array with a key and a magic string used for making hotlinks.",
                            "params": [],
                            "return": "array"
                        },
                        "endLine": 975,
                        "isUserDefined": true,
                        "returns": [
                            "array"
                        ]
                    },
                    "is_magic_string": {
                        "file": "bbn\\User",
                        "static": true,
                        "public": true,
                        "code": "function($key, $hash)\n  {\n    return hash('sha256', $key) === $hash;\n  }",
                        "startLine": 984,
                        "doc": {
                            "description": "Checks if a given string corresponds to the given hash.",
                            "params": {
                                "$key": {
                                    "type": "string",
                                    "description": "The key"
                                },
                                "$hash": {
                                    "type": "string",
                                    "description": "The corresponding hash"
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 987,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "key",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "hash",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_error": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function()\n  {\n    if ( $this->error ){\n      return [\n        'code' => $this->error,\n        'text' => $this->class_cfg['errors'][$this->error]\n      ];\n    }\n    return null;\n  }",
                        "startLine": 1011,
                        "doc": {
                            "description": "Returns the first error in an array with the code and description.",
                            "params": [],
                            "return": "null|array"
                        },
                        "endLine": 1020,
                        "isUserDefined": true,
                        "returns": [
                            "array",
                            null
                        ],
                        "parent": {
                            "name": "get_error",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 72,
                            "doc": "",
                            "endLine": 74,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "test": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                        "startLine": 45,
                        "doc": {
                            "description": "Checks whether the error property has been set (so an error happened).",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 50,
                        "isUserDefined": true,
                        "parent": {
                            "name": "test",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n      return false;\n    }\n    return true;\n  }",
                            "startLine": 45,
                            "doc": {
                                "description": "Checks whether the error property has been set (so an error happened).",
                                "params": [],
                                "return": "bool"
                            },
                            "endLine": 50,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "get_errors": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 76,
                        "endLine": 78,
                        "isUserDefined": true,
                        "parent": {
                            "name": "get_errors",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 76,
                            "doc": "",
                            "endLine": 78,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "log": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                        "startLine": 80,
                        "endLine": 88,
                        "isUserDefined": true,
                        "parent": {
                            "name": "log",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n\t\t\t$ar = \\func_get_args();\n\t\t\t$cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n\t\t\tforeach ( $ar as $a ){\n\t\t\t\tbbn\\X::log($a, $cn);\n\t\t\t}\n\t\t}\n  }",
                            "startLine": 80,
                            "doc": "",
                            "endLine": 88,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "__call": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                        "startLine": 95,
                        "doc": {
                            "description": "",
                            "params": {
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$arguments": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 99,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "parent": {
                            "name": "__call",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($name, $arguments)\n  {\n    $this->log([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]);\n    die(var_dump([\"Wrong method used for the class $class: $name with the following arguments:\", $arguments]));\n  }",
                            "startLine": 95,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$name": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "$arguments": {
                                        "type": "array",
                                        "description": ""
                                    }
                                },
                                "return": "void"
                            },
                            "endLine": 99,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 2,
                            "numberOfRequiredParameters": 2,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "name",
                                    "position": 0,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                },
                                {
                                    "name": "arguments",
                                    "position": 1,
                                    "type": null,
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "arguments",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 104,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "boolean"
                        },
                        "endLine": 106,
                        "isUserDefined": true,
                        "parent": {
                            "name": "is_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function()\n  {\n  }",
                            "startLine": 104,
                            "doc": {
                                "description": "",
                                "params": [],
                                "return": "boolean"
                            },
                            "endLine": 106,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 0,
                            "numberOfRequiredParameters": 0,
                            "returns": null,
                            "parent": false,
                            "arguments": []
                        }
                    },
                    "set_debug": {
                        "file": "bbn\\Models\\Cls\\Basic",
                        "public": true,
                        "code": "function($debug)\n  {\n  }",
                        "startLine": 112,
                        "doc": {
                            "description": "",
                            "params": {
                                "$debug": {
                                    "type": "boolean",
                                    "description": ""
                                }
                            },
                            "return": "self"
                        },
                        "endLine": 114,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "parent": {
                            "name": "set_debug",
                            "file": "bbn\\Models\\Cls\\Basic",
                            "static": false,
                            "private": false,
                            "protected": false,
                            "public": true,
                            "final": false,
                            "code": "function($debug)\n  {\n  }",
                            "startLine": 112,
                            "doc": {
                                "description": "",
                                "params": {
                                    "$debug": {
                                        "type": "boolean",
                                        "description": ""
                                    }
                                },
                                "return": "self"
                            },
                            "endLine": 114,
                            "isDeprecated": false,
                            "isGenerator": false,
                            "isInternal": false,
                            "isUserDefined": true,
                            "isVariadic": false,
                            "returnsReference": false,
                            "numberOfParameters": 1,
                            "numberOfRequiredParameters": 1,
                            "returns": null,
                            "parent": false,
                            "arguments": [
                                {
                                    "name": "debug",
                                    "position": 0,
                                    "type": {},
                                    "required": true,
                                    "has_default": false,
                                    "default": "",
                                    "default_name": ""
                                }
                            ]
                        },
                        "arguments": [
                            {
                                "name": "debug",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_instance": {
                        "file": "bbn\\User",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 25,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": "$this"
                        },
                        "endLine": 27,
                        "isUserDefined": true
                    },
                    "retriever_exists": {
                        "file": "bbn\\User",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 29,
                        "endLine": 31,
                        "isUserDefined": true
                    },
                    "exists": {
                        "file": "bbn\\User",
                        "public": true,
                        "code": "function($id)\n  {\n      $this->class_cfg['arch'][$this->class_table_index]['id'] => $id\n    ]);\n  }",
                        "startLine": 59,
                        "doc": {
                            "description": "",
                            "params": {
                                "$id": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 63,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "id",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "sn": {
                    "static": true,
                    "protected": true,
                    "doc": {
                        "description": "@var string The name of the session index in for session data",
                        "tags": []
                    }
                },
                "un": {
                    "static": true,
                    "protected": true,
                    "doc": {
                        "description": "@var string The name of the session index in for user data",
                        "tags": []
                    }
                },
                "_defaults": {
                    "static": true,
                    "protected": true,
                    "doc": {
                        "description": "Sets if the hotlinks features should be in used",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "bool"
                            }
                        ]
                    }
                },
                "_just_login": {
                    "private": true,
                    "doc": {
                        "description": "@var bool Will be true when the user has just logged in.",
                        "tags": []
                    }
                },
                "_encryption_key": {
                    "private": true
                },
                "session": {
                    "protected": true,
                    "doc": {
                        "description": "@var user\\session",
                        "tags": []
                    }
                },
                "error": {
                    "protected": true,
                    "doc": {
                        "description": "@var int",
                        "tags": []
                    },
                    "parent": {
                        "name": "error",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "user_agent": {
                    "protected": true,
                    "doc": {
                        "description": "@var string",
                        "tags": []
                    }
                },
                "ip_address": {
                    "protected": true,
                    "doc": {
                        "description": "@var string",
                        "tags": []
                    }
                },
                "accept_lang": {
                    "protected": true,
                    "doc": {
                        "description": "@var string",
                        "tags": []
                    }
                },
                "auth": {
                    "protected": true,
                    "doc": {
                        "description": "@var bool",
                        "tags": []
                    }
                },
                "path": {
                    "protected": true,
                    "doc": {
                        "description": "@var string",
                        "tags": []
                    }
                },
                "tmp_path": {
                    "protected": true,
                    "doc": {
                        "description": "@var string",
                        "tags": []
                    }
                },
                "sql": {
                    "protected": true,
                    "doc": {
                        "description": "@var string",
                        "tags": []
                    }
                },
                "id": {
                    "protected": true,
                    "doc": {
                        "description": "@var int",
                        "tags": []
                    }
                },
                "id_group": {
                    "protected": true,
                    "doc": {
                        "description": "@var int",
                        "tags": []
                    }
                },
                "alert": {
                    "protected": true,
                    "doc": {
                        "description": "@var mixed",
                        "tags": []
                    }
                },
                "cfg": {
                    "protected": true,
                    "doc": {
                        "description": "@var array",
                        "tags": []
                    }
                },
                "sess_cfg": {
                    "protected": true,
                    "doc": {
                        "description": "@var array",
                        "tags": []
                    }
                },
                "db": {
                    "public": true,
                    "doc": {
                        "description": "@var db",
                        "tags": []
                    }
                },
                "prev_time": {
                    "public": true,
                    "doc": {
                        "description": "@var mixed",
                        "tags": []
                    }
                },
                "errors": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "errors",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "debug": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "boolean"
                            }
                        ]
                    },
                    "parent": {
                        "name": "debug",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "log": {
                    "protected": true,
                    "doc": {
                        "description": "",
                        "tags": [
                            {
                                "tag": "var",
                                "type": "array"
                            }
                        ]
                    },
                    "parent": {
                        "name": "log",
                        "static": false,
                        "private": false,
                        "protected": true,
                        "public": false,
                        "doc": "",
                        "parent": "bbn\\Models\\Cls\\Basic"
                    }
                },
                "retriever_instance": {
                    "static": true,
                    "protected": true
                },
                "retriever_exists": {
                    "static": true,
                    "protected": true
                },
                "class_cfg": {
                    "protected": true,
                    "doc": {
                        "description": "@var array",
                        "tags": []
                    }
                },
                "fields": {
                    "protected": true,
                    "doc": {
                        "description": "@var array",
                        "tags": []
                    }
                },
                "class_table": {
                    "protected": true,
                    "doc": {
                        "description": "@var string",
                        "tags": []
                    }
                },
                "class_table_index": {
                    "protected": true,
                    "doc": {
                        "description": "@var string",
                        "tags": []
                    }
                }
            },
            "staticProperties": {
                "sn": "bbn_session",
                "un": "bbn_user",
                "_defaults": {
                    "errors": {
                        "0": "login failed",
                        "2": "password sent",
                        "3": "no email such as",
                        "4": "too many attempts",
                        "5": "impossible to create the user",
                        "6": "wrong user and\/or password",
                        "7": "different passwords",
                        "8": "less than 5 mn between emailing password",
                        "9": "user already exists",
                        "10": "problem during user creation",
                        "11": "no salt in session",
                        "12": "login and password are mandatory",
                        "13": "impossible to save the session",
                        "14": "impossible to retrieve the session",
                        "15": "no session in memory",
                        "16": "impossible to add session in the database",
                        "17": "non matching salt",
                        "18": "incorrect magic string",
                        "19": "wrong fingerprint"
                    },
                    "table": "bbn_users",
                    "tables": {
                        "groups": "bbn_users_groups",
                        "hotlinks": "bbn_users_hotlinks",
                        "passwords": "bbn_users_passwords",
                        "sessions": "bbn_users_sessions",
                        "users": "bbn_users"
                    },
                    "arch": {
                        "groups": {
                            "id": "id",
                            "group": "group",
                            "type": "type",
                            "code": "code",
                            "cfg": "cfg"
                        },
                        "hotlinks": {
                            "id": "id",
                            "id_user": "id_user",
                            "magic_string": "magic_string",
                            "expire": "expire"
                        },
                        "passwords": {
                            "id_user": "id_user",
                            "pass": "pass",
                            "added": "added"
                        },
                        "sessions": {
                            "id": "id",
                            "id_user": "id_user",
                            "sess_id": "sess_id",
                            "ip_address": "ip_address",
                            "user_agent": "user_agent",
                            "opened": "opened",
                            "creation": "creation",
                            "last_activity": "last_activity",
                            "cfg": "cfg"
                        },
                        "users": {
                            "id": "id",
                            "id_group": "id_group",
                            "email": "email",
                            "username": "username",
                            "login": "login",
                            "admin": "admin",
                            "dev": "dev",
                            "cfg": "cfg",
                            "active": "active",
                            "enckey": "enckey"
                        }
                    },
                    "fields": {
                        "user": "user",
                        "pass": "pass",
                        "salt": "appui_salt",
                        "key": "key",
                        "id": "id",
                        "pass1": "pass1",
                        "pass2": "pass2",
                        "action": "appui_action"
                    },
                    "encryption": "sha1",
                    "conditions": [],
                    "max_attempts": 10,
                    "max_sessions": 5,
                    "hotlinks": false,
                    "show": "name"
                },
                "retriever_instance": {
                    "db": {
                        "last_error": false,
                        "debug": false,
                        "engine": "mysql",
                        "host": "mysql.lan",
                        "username": "bbn",
                        "current": "apst_app"
                    },
                    "prev_time": null
                },
                "retriever_exists": true
            },
            "costants": null,
            "numMethods": 77,
            "numProperties": 30,
            "numConstants": 0,
            "numStaticProperties": 5,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [
                "bbn\\Models\\Tts\\Retriever",
                "bbn\\Models\\Tts\\Dbconfig"
            ],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": "bbn\\Models\\Cls\\Basic",
            "isSubclassOf": false,
            "defaultProperties": {
                "sn": "bbn_session",
                "un": "bbn_user",
                "_defaults": {
                    "errors": {
                        "0": "login failed",
                        "2": "password sent",
                        "3": "no email such as",
                        "4": "too many attempts",
                        "5": "impossible to create the user",
                        "6": "wrong user and\/or password",
                        "7": "different passwords",
                        "8": "less than 5 mn between emailing password",
                        "9": "user already exists",
                        "10": "problem during user creation",
                        "11": "no salt in session",
                        "12": "login and password are mandatory",
                        "13": "impossible to save the session",
                        "14": "impossible to retrieve the session",
                        "15": "no session in memory",
                        "16": "impossible to add session in the database",
                        "17": "non matching salt",
                        "18": "incorrect magic string",
                        "19": "wrong fingerprint"
                    },
                    "table": "bbn_users",
                    "tables": {
                        "groups": "bbn_users_groups",
                        "hotlinks": "bbn_users_hotlinks",
                        "passwords": "bbn_users_passwords",
                        "sessions": "bbn_users_sessions",
                        "users": "bbn_users"
                    },
                    "arch": {
                        "groups": {
                            "id": "id",
                            "group": "group",
                            "type": "type",
                            "code": "code",
                            "cfg": "cfg"
                        },
                        "hotlinks": {
                            "id": "id",
                            "id_user": "id_user",
                            "magic_string": "magic_string",
                            "expire": "expire"
                        },
                        "passwords": {
                            "id_user": "id_user",
                            "pass": "pass",
                            "added": "added"
                        },
                        "sessions": {
                            "id": "id",
                            "id_user": "id_user",
                            "sess_id": "sess_id",
                            "ip_address": "ip_address",
                            "user_agent": "user_agent",
                            "opened": "opened",
                            "creation": "creation",
                            "last_activity": "last_activity",
                            "cfg": "cfg"
                        },
                        "users": {
                            "id": "id",
                            "id_group": "id_group",
                            "email": "email",
                            "username": "username",
                            "login": "login",
                            "admin": "admin",
                            "dev": "dev",
                            "cfg": "cfg",
                            "active": "active",
                            "enckey": "enckey"
                        }
                    },
                    "fields": {
                        "user": "user",
                        "pass": "pass",
                        "salt": "appui_salt",
                        "key": "key",
                        "id": "id",
                        "pass1": "pass1",
                        "pass2": "pass2",
                        "action": "appui_action"
                    },
                    "encryption": "sha1",
                    "conditions": [],
                    "max_attempts": 10,
                    "max_sessions": 5,
                    "hotlinks": false,
                    "show": "name"
                },
                "retriever_instance": {
                    "db": {
                        "last_error": false,
                        "debug": false,
                        "engine": "mysql",
                        "host": "mysql.lan",
                        "username": "bbn",
                        "current": "apst_app"
                    },
                    "prev_time": null
                },
                "retriever_exists": true,
                "_just_login": false,
                "_encryption_key": null,
                "session": null,
                "error": null,
                "user_agent": null,
                "ip_address": null,
                "accept_lang": null,
                "auth": false,
                "path": null,
                "tmp_path": null,
                "sql": null,
                "id": null,
                "id_group": null,
                "alert": null,
                "cfg": null,
                "sess_cfg": null,
                "db": null,
                "prev_time": null,
                "errors": [],
                "debug": false,
                "log": [],
                "class_cfg": null,
                "fields": null,
                "class_table": null,
                "class_table_index": null
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "user"
        },
        "x": {
            "doc": {
                "description": "A container of tools.",
                "tags": {
                    "author": "Thomas Nabet <thomas.nabet@gmail.com>",
                    "copyright": "BBN Solutions",
                    "since": "Apr 4, 2011, 23:23:55 +0000",
                    "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
                    "version": "0.2r89",
                    "todo": "Look into the check function and divide it"
                }
            },
            "name": "bbn\\X",
            "namespace": true,
            "traits": [],
            "interfaces": [],
            "isInstantiable": true,
            "cloneable": true,
            "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/x.php",
            "startLine": 17,
            "endLine": 2032,
            "contentConstructor": null,
            "methods": {
                "private": {
                    "_init_count": {
                        "file": "bbn\\X",
                        "static": true,
                        "private": true,
                        "code": "function($name)\n  {\n      $name = 'num';\n    }\n    if ( !isset(self::$_counters[$name]) ){\n      self::$_counters[$name] = 0;\n    }\n  }",
                        "startLine": 29,
                        "doc": {
                            "description": "",
                            "tags": []
                        },
                        "endLine": 36,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                },
                "protected": [],
                "public": {
                    "increment": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($name = 'num', $i = 1)\n  {\n    self::$_counters[$name] += $i;\n  }",
                        "startLine": 42,
                        "doc": {
                            "description": "",
                            "params": {
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$i": {
                                    "type": "int",
                                    "description": ""
                                }
                            },
                            "return": ""
                        },
                        "endLine": 45,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "num",
                                "default_name": ""
                            },
                            {
                                "name": "i",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 1,
                                "default_name": ""
                            }
                        ]
                    },
                    "count": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($name = 'num')\n  {\n    $tmp = self::$_counters[$name];\n    unset(self::$_counters[$name]);\n    return $tmp;\n  }",
                        "startLine": 51,
                        "doc": {
                            "description": "",
                            "params": {
                                "$name": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 56,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "num",
                                "default_name": ""
                            }
                        ]
                    },
                    "count_all": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($delete = false)\n  {\n    if ( $delete ){\n      self::$_counters = [];\n    }\n    return $tmp;\n  }",
                        "startLine": 58,
                        "endLine": 64,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "delete",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "log": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($st, $file = 'misc')\n  {\n      if ( !\\is_string($file) ){\n        $file = 'misc';\n      }\n      $log_file = BBN_DATA_PATH.'logs\/'.$file.'.log';\n      $backtrace = array_filter(debug_backtrace(), function($a){\n        return $a['function'] === 'log';\n      });\n      $i = end($backtrace);\n      $r = \"[\".date('d\/m\/Y H:i:s').\"]\\t\".$i['file'].\" - line \".$i['line'].\n        self::getDump($st).PHP_EOL;\n\n      if ( php_sapi_name() === 'cli' ){\n        global $argv;\n        if ( isset($argv[2]) && ($argv[2] === 'log') ){\n          echo self::getDump($st).PHP_EOL;\n        }\n      }\n      $s = ( file_exists($log_file) ) ? filesize($log_file) : 0;\n      if ( $s > 1048576 ){\n        file_put_contents($log_file.'.old', File_get_contents($log_file), FILE_APPEND);\n        file_put_contents($log_file, $r);\n      }\n      else{\n        file_put_contents($log_file, $r, FILE_APPEND);\n      }\n    }\n  }",
                        "startLine": 77,
                        "doc": {
                            "description": {
                                "description": "Saves logs to a file.\n  * ```php\n\\bbn\\X::log('My text', 'FileName');\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$st",
                                        "description": "Item to log."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$file",
                                        "description": "Filename, default: \"misc\"."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "void"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "mixed",
                                    "description": "Item to log."
                                },
                                "$file": {
                                    "type": "string",
                                    "description": "Filename, default: \"misc\"."
                                }
                            },
                            "return": "void",
                            "example_method": "```php\n\\bbn\\X::log('My text', 'FileName');\n```"
                        },
                        "endLine": 105,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "file",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "misc",
                                "default_name": ""
                            }
                        ]
                    },
                    "log_error": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($errno, $errstr, $errfile, $errline)\n  {\n      if ( is_dir(BBN_DATA_PATH.'logs') ){\n        $file = BBN_DATA_PATH.'logs\/_php_error.json';\n        $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 20);\n        foreach ($backtrace as &$b) {\n          if (!empty($b['file'])) {\n            $b['file'] = str_replace(BBN_APP_PATH, '', $b['file']);\n          }\n        }\n        $r = false;\n        if ( is_file($file) ){\n          $r = json_decode(file_get_contents($file), 1);\n        }\n        if ( !$r ){\n          $r = [];\n        }\n        $t = date('Y-m-d H:i:s');\n        if ( class_exists('\\\\bbn\\\\mvc') ){\n          $mvc = Mvc::getInstance();\n        }\n        $errfile = str_replace(BBN_APP_PATH, '', $errfile);\n        $idx = self::find($r, [\n          'type' => $errno,\n          'error' => $errstr,\n          'file' => $errfile,\n          'line' => $errline,\n          'request' => ''\n        ]);\n        if ( $idx !== false ){\n          $r[$idx]['count']++;\n          $r[$idx]['last_date'] = $t;\n          $r[$idx]['backtrace'] = $backtrace;\n        }\n        else{\n          $r[] = [\n            'first_date' => $t,\n            'last_date' => $t,\n            'count' => 1,\n            'type' => $errno,\n            'error' => $errstr,\n            'file' => $errfile,\n            'line' => $errline,\n            'backtrace' => $backtrace,\n            'request' => ''\n            \/\/'context' => $context\n          ];\n        }\n        self::sortBy($r, 'last_date', 'DESC');\n        file_put_contents($file, Json_encode($r, JSON_PRETTY_PRINT));\n      }\n      if ( $errno > 8 ){\n        die($errstr);\n      }\n    }\n    return false;\n  }",
                        "startLine": 116,
                        "doc": {
                            "description": "Puts the PHP errors into a JSON file.",
                            "params": {
                                "$errno": {
                                    "type": "string",
                                    "description": "The text to save."
                                },
                                "$errstr": {
                                    "type": "string",
                                    "description": "The file's name, default: \"misc\"."
                                },
                                "$errfile": {
                                    "type": "",
                                    "description": ""
                                },
                                "$errline": {
                                    "type": "",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 172,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 4,
                        "arguments": [
                            {
                                "name": "errno",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "errstr",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "errfile",
                                "position": 2,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "errline",
                                "position": 3,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "has_prop": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($obj, $prop, $check_empty = false)\n  {\n    if (is_array($obj)) {\n      return \\array_key_exists($prop, $obj) && (!$check_empty || !empty($obj[$prop]));\n    }\n    elseif (is_object($obj)) {\n      return \\property_exists($obj, $prop) && (!$check_empty || !empty($obj->$prop));\n    }\n    return null;\n  }",
                        "startLine": 181,
                        "doc": {
                            "description": "Check if an array or an object has the given property",
                            "params": {
                                "$obj": {
                                    "type": "array|object",
                                    "description": ""
                                },
                                "$prop": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "boolean|null"
                        },
                        "endLine": 190,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "obj",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "prop",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "check_empty",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "has_props": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($obj, array $props, $check_empty = false)\n  {\n    foreach ($props as $p) {\n      $test = self::hasProp($obj, $p, $check_empty);\n      if ($test === null) {\n        return null;\n      }\n      elseif (!$test) {\n        return false;\n      }\n    }\n    return true;\n  }",
                        "startLine": 199,
                        "doc": {
                            "description": "Check if an array or an object has the given properties",
                            "params": {
                                "$obj": {
                                    "type": "array|object",
                                    "description": ""
                                },
                                "$props": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "boolean|null"
                        },
                        "endLine": 211,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "obj",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "props",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "check_empty",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "make_storage_path": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($path, $format = 'Y\/m\/d', $max = 100, bbn\\File\\System $fs = NULL)\n  {\n    if ( empty($format) ){\n      $format = 'Y\/m\/d';\n    }\n    if ( !$max ){\n      $max = 100;\n    }\n    if ( !$fs ){\n      $fs = new file\\system();\n    }\n    \/\/ One dir per $format\n    $spath = date($format);\n    if ( $spath ){\n      $path = $fs->createPath($path.(substr($path, -1) === '\/' ? '' : '\/').$spath);\n      if ( $fs->isDir($path) ) {\n        $num = count($fs->getDirs($path));\n        if ($num) {\n          $num_files = count($fs->getFiles($path.'\/'.$num));\n          if ($num_files >= $max){\n            $num++;\n          }\n        }\n        else {\n          $num = 1;\n        }\n        if ( $fs->createPath($path.'\/'.$num) ){\n          return $path.'\/'.$num.'\/';\n        }\n\n      }\n    }\n    return null;\n  }",
                        "startLine": 213,
                        "endLine": 246,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "format",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "Y\/m\/d",
                                "default_name": ""
                            },
                            {
                                "name": "max",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 100,
                                "default_name": ""
                            },
                            {
                                "name": "fs",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "clean_storage_path": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($path, $format = 'Y\/m\/d', bbn\\File\\System $fs = NULL)\n  {\n    if ( empty($format) ){\n      $format = 'Y\/m\/d';\n    }\n    if ( !$fs ){\n      $fs = new file\\system();\n    }\n    if (!$fs->isDir($path)) {\n      return null;\n    }\n    $limit = count(self::split($format, '\/')) + 1;\n    $res = 0;\n    while ($limit > 0) {\n      if (!$fs->getNumFiles($path) && $fs->delete($path)) {\n        $limit--;\n        $res++;\n        $path = dirname($path);\n      }\n      else{\n        break;\n      }\n    }\n    return $res;\n  }",
                        "startLine": 248,
                        "endLine": 272,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "int",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "path",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "format",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "Y\/m\/d",
                                "default_name": ""
                            },
                            {
                                "name": "fs",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "merge_objects": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($o1, $o2)\n  {\n    \/* @todo check if it's working with more than 2 object arguments *\/\n    if ( \\count($args) > 2 ){\n      for ( $i = \\count($args) - 1; $i > 1; $i-- ){\n        $args[$i-1] = self::mergeArrays($args[$i-1], $args[$i]);\n      }\n      $o2 = $args[1];\n    }\n    $a1 = self::toArray($o1);\n    $a2 = self::toArray($o2);\n    $res = self::mergeArrays($a1, $a2);\n    return self::toObject($res);\n  }",
                        "startLine": 299,
                        "doc": {
                            "description": {
                                "description": "Returns to a merged object from two objects.\n  * ```php\nclass A {\n public $a = 10;\n public $b = 20;\n};\n  * class B {\n public $c = 30;\n public $d = 40;\n};\n  * $obj1 = new A;\n$obj2 = new B;\n  * \\bbn\\X::mergeObjects($obj1, $obj2);\n\/\/ object {'a': 10, 'b': 20, 'c': 30, 'd': 40}\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "object",
                                        "name": "$o",
                                        "description": "The first object to merge."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "object",
                                        "name": "$o",
                                        "description": "The second object to merge."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "object The merged object."
                                    }
                                ]
                            },
                            "params": {
                                "$o": {
                                    "type": "object",
                                    "description": "The second object to merge."
                                }
                            },
                            "return": "object The merged object.",
                            "example_method": "```php\nclass A {\n public $a = 10;\n public $b = 20;\n};\n\nclass B {\n public $c = 30;\n public $d = 40;\n};\n\n$obj1 = new A;\n$obj2 = new B;\n\n\\bbn\\X::mergeObjects($obj1, $obj2);\n\/\/ object {'a': 10, 'b': 20, 'c': 30, 'd': 40}\n```"
                        },
                        "endLine": 312,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "o1",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "o2",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "merge_arrays": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $a1, array $a2)\n  {\n    if ( \\count($args) > 2 ){\n      for ( $i = \\count($args) - 1; $i > 1; $i-- ){\n        $args[$i-1] = self::mergeArrays($args[$i-1], $args[$i]);\n      }\n      $a2 = $args[1];\n    }\n    if ( (self::isAssoc($a1) || empty($a1)) && (self::isAssoc($a2) || empty($a2)) ){\n      $keys = array_unique(array_merge(array_keys($a1), array_keys($a2)));\n      $r = [];\n      foreach ( $keys as $k ){\n        if ( !array_key_exists($k, $a1) && !array_key_exists($k, $a2) ){\n          continue;\n        }\n        else if ( !array_key_exists($k, $a2) ){\n          $r[$k] = $a1[$k];\n        }\n        else if ( !array_key_exists($k, $a1) || !\\is_array($a2[$k]) || !\\is_array($a1[$k]) || is_numeric(key($a2[$k])) ){\n          $r[$k] = $a2[$k];\n        }\n        else{\n          $r[$k] = self::mergeArrays($a1[$k], $a2[$k]);\n        }\n      }\n    }\n    else{\n      $r = array_merge($a1, $a2);\n    }\n    return $r;\n  }",
                        "startLine": 325,
                        "doc": {
                            "description": {
                                "description": "Returns to a merged array from two or more arrays.\n  * ```php\n\\bbn\\X::mergeArrays([1, 'Test'], [2, 'Example']);\n\/\/ array [1, 'Test', 2, 'Example']\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$a",
                                        "description": "The first array to merge."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$a",
                                        "description": "The second array to merge."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array The merged array."
                                    }
                                ]
                            },
                            "params": {
                                "$a": {
                                    "type": "array",
                                    "description": "The second array to merge."
                                }
                            },
                            "return": "array The merged array.",
                            "example_method": "```php\n\\bbn\\X::mergeArrays([1, 'Test'], [2, 'Example']);\n\/\/ array [1, 'Test', 2, 'Example']\n```"
                        },
                        "endLine": 355,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "a1",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "a2",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "to_object": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($ar)\n  {\n      return json_decode($ar);\n    }\n    return (object)$ar;\n  }",
                        "startLine": 368,
                        "doc": {
                            "description": {
                                "description": "Converts a JSON string or an array into an object.\n  * ```php\n\\bbn\\X::toObject([[1, 'Test'], [2, 'Example']]);\n\/\/ object {[1, 'Test'], [2, 'Example']}\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$ar",
                                        "description": "The array or JSON to convert."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "false | object"
                                    }
                                ]
                            },
                            "params": {
                                "$ar": {
                                    "type": "array",
                                    "description": "The array or JSON to convert."
                                }
                            },
                            "return": "false | object",
                            "example_method": "```php\n\\bbn\\X::toObject([[1, 'Test'], [2, 'Example']]);\n\/\/ object {[1, 'Test'], [2, 'Example']}\n```"
                        },
                        "endLine": 373,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "to_array": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($obj)\n  {\n      $res = json_decode($obj, 1);\n    }\n    foreach ($obj as $p => &$v) {\n      if (is_object($v)) {\n        $v = self::toArray($v);\n      }\n    }\n    unset($v);\n    return (array)$obj;\n  }",
                        "startLine": 392,
                        "doc": {
                            "description": {
                                "description": "Converts a JSON string or an object into an array.\n  * ```php\n$file = new stdClass();\n$file->foo = \"bar\";\n$file->bar = \"foo\";\necho \\bbn\\X::toArray($file);\n\/* array [\n  'foo' => 'bar',\n  'bar' => 'foo'\n]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "object",
                                        "name": "$obj",
                                        "description": "The object or JSON to convert."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "false | array"
                                    }
                                ]
                            },
                            "params": {
                                "$obj": {
                                    "type": "object",
                                    "description": "The object or JSON to convert."
                                }
                            },
                            "return": "false | array",
                            "example_method": "```php\n$file = new stdClass();\n$file->foo = \"bar\";\n$file->bar = \"foo\";\necho \\bbn\\X::toArray($file);\n\/* array [\n    'foo' => 'bar',\n    'bar' => 'foo'\n]\n```"
                        },
                        "endLine": 403,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "obj",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "js_object": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($obj)\n  {\n    $replace_keys = [];\n\n    \/\/$obj = \\bbn\\X::convertUids($obj);\n    $transform = function($o, $idx = 0) use(&$transform, &$value_arr, &$replace_keys){\n      foreach( $o as $key => &$value ){\n        $idx++;\n        if ( \\is_array($value) || \\is_object($value) ){\n          $value = $transform($value, $idx);\n        }\n        else if (\n          \\is_string($value) &&\n          \/\/ Look for values starting with 'function('\n          (strpos(trim($value), 'function(') === 0)\n        ){\n          \/\/ Store function string.\n          $value_arr[] = $value;\n          \/\/ Replace function string in $foo with a \u2018unique\u2019 special key.\n          $value = \"%bbn%$key%bbn%$idx%bbn%\";\n          \/\/ Later on, we\u2019ll look for the value, and replace it.\n          $replace_keys[] = '\"'.$value.'\"';\n        }\n      }\n      return $o;\n    };\n    \/\/ Now encode the array to json format\n    $json = json_encode($transform($obj));\n    \/* $json looks like:\n    {\n      \u201cnumber\u201d:1,\n      \u201cfloat\u201d:1.5,\n      \u201carray\u201d:[1,2],\n      \u201cstring\u201d:\u201dbar\u201d,\n      \u201cfunction\u201d:\u201d%bbn%function%bbn%5%bbn%\u201d\n    }\n    *\/\n    \/\/ Replace the special keys with the original string.\n    return \\count($replace_keys) ? str_replace($replace_keys, $value_arr, $json) : $json;\n  }",
                        "startLine": 405,
                        "endLine": 444,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "obj",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "indent_json": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($json)\n  {\n    $result      = '';\n    $pos         = 0;\n    $strLen      = \\strlen($json);\n    $indentStr   = '  ';\n    $newLine     = \"\\n\";\n    $prevChar    = '';\n    $outOfQuotes = true;\n\n    for ($i=0; $i<=$strLen; $i++){\n\n      \/\/ Grab the next character in the string.\n      $char = substr($json, $i, 1);\n\n      \/\/ Are we inside a quoted string?\n      if ($char == '\"' && $prevChar != '\\\\'){\n        $outOfQuotes = !$outOfQuotes;\n\n        \/\/ If this character is the end of an element,\n        \/\/ output a new line and indent the next line.\n      } else if(($char == '}' || $char == ']') && $outOfQuotes){\n        $result .= $newLine;\n        $pos --;\n        for ($j=0; $j<$pos; $j++){\n          $result .= $indentStr;\n        }\n      }\n\n      \/\/ Add the character to the result string.\n      $result .= $char;\n\n      \/\/ If the last character was the beginning of an element,\n      \/\/ output a new line and indent the next line.\n      if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes){\n        $result .= $newLine;\n        if ($char == '{' || $char == '['){\n          $pos ++;\n        }\n\n        for ($j = 0; $j < $pos; $j++){\n          $result .= $indentStr;\n        }\n      }\n\n      $prevChar = $char;\n    }\n\n    return $result;\n  }",
                        "startLine": 463,
                        "doc": {
                            "description": {
                                "description": "Indents a flat JSON string to make it human-readable.\n  * ```php\necho \\bbn\\X::indentJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}');\n\/*\n{\n \"firstName\": \"John\",\n \"lastName\": \"Smith\",\n \"isAlive\": true,\n \"age\": 25\n}\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$json",
                                        "description": "The original JSON string to process."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string Indented version of the original JSON string."
                                    }
                                ]
                            },
                            "params": {
                                "$json": {
                                    "type": "string",
                                    "description": "The original JSON string to process."
                                }
                            },
                            "return": "string Indented version of the original JSON string.",
                            "example_method": "```php\necho \\bbn\\X::indentJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}');\n\/*\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"isAlive\": true,\n  \"age\": 25\n}\n```"
                        },
                        "endLine": 512,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "json",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "remove_empty": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($arr, $remove_space = false)\n  {\n      if ( \\is_object($arr) ){\n        if ( \\is_array($v) || \\is_object($v) ){\n          $arr->$k = self::removeEmpty($v);\n        }\n        if ( empty($arr->$k) ){\n          unset($arr->$k);\n        }\n      }\n      else{\n        if ( \\is_array($v) || \\is_object($v) ){\n          $arr[$k] = self::removeEmpty($v);\n        }\n        else if ( $remove_space ){\n          $arr[$k] = trim($arr[$k]);\n        }\n        if ( empty($arr[$k]) ){\n          unset($arr[$k]);\n        }\n      }\n    }\n    return $arr;\n  }",
                        "startLine": 530,
                        "doc": {
                            "description": "Returns an object or an array cleaned of all empty values.",
                            "params": {
                                "$arr": {
                                    "type": "array|object",
                                    "description": "An object or array to clean."
                                },
                                "$remove": {
                                    "type": "bool",
                                    "description": "space If \"true\" the spaces are removed, default: \"false\"."
                                }
                            },
                            "return": "array The cleaned result."
                        },
                        "endLine": 553,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "arr",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "remove_space",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "to_groups": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $arr, $keyname = 'value', $valname = 'text')\n  {\n    foreach ( $arr as $k => $v ){\n      $r[] = [$keyname => $k, $valname => $v];\n    }\n    return $r;\n  }",
                        "startLine": 572,
                        "doc": {
                            "description": "Converts an indexed array into a numeric array where the original index is a property.",
                            "params": {
                                "$arr": {
                                    "type": "array",
                                    "description": "The original array."
                                },
                                "$keyname": {
                                    "type": "string",
                                    "description": "Alias for the index."
                                },
                                "$valname": {
                                    "type": "string",
                                    "description": "Alias for the value."
                                }
                            },
                            "return": "array Groups array."
                        },
                        "endLine": 578,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "arr",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "keyname",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "value",
                                "default_name": ""
                            },
                            {
                                "name": "valname",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "text",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_assoc": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $r)\n  {\n    $c = \\count($keys);\n    for ( $i = 0; $i < $c; $i++ ){\n      if ( $keys[$i] !== $i ){\n        return 1;\n      }\n    }\n    return false;\n  }",
                        "startLine": 601,
                        "doc": {
                            "description": "Checks if the given array is associative.\n```php\n\\bbn\\\\x::isAssoc(['id' => 0, 'name' => 'Allison']);\n  * \\bbn\\\\x::isAssoc(['Allison', 'John', 'Bert']);\n  * \\bbn\\\\x::isAssoc([0 => \"Allison\", 1 => \"John\", 2 => \"Bert\"]);\n  * \\bbn\\\\x::isAssoc([0 => \"Allison\", 1 => \"John\", 3 => \"Bert\"]);\n  * \/\/ boolean true\n\/\/ boolean false\n\/\/ boolean false\n\/\/ boolean true\n```",
                            "params": {
                                "$r": {
                                    "type": "array",
                                    "description": "The array to check."
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 610,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "r",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_cli": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    if (!isset(self::$_cli)) {\n      self::$_cli = (php_sapi_name() === 'cli');\n    }\n    return self::$_cli;\n  }",
                        "startLine": 612,
                        "endLine": 618,
                        "isUserDefined": true
                    },
                    "get_dump": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $st = '';\n    foreach ( $args as $a ){\n      $r = $a;\n      if ( \\is_null($a) ){\n        $r = 'null';\n      }\n      else if ( $a === false ){\n        $r = 'false';\n      }\n      else if ( $a === true ){\n        $r = 'true';\n      }\n      else if ( $a === 0 ){\n        $r = '0';\n      }\n      else if ( $a === '' ){\n        $r = '\"\"';\n      }\n      else if ( $a === [] ){\n        $r = '[]';\n      }\n      else if ( !$a ){\n        $r = '0';\n      }\n      else if ( !\\is_string($a) && \\is_callable($a) ){\n        $r = 'Function';\n      }\n      else if ( \\is_object($a) ){\n        $n = \\get_class($a);\n        if ( $n === 'stdClass' ){\n          $r = Str::export($a);\n        }\n        else{\n          $r = $n.' Object';\n        }\n      }\n      else if ( \\is_array($a) ){\n        $r = Str::export($a);\n      }\n      else if ( \\is_resource($a) ){\n        $r = 'Resource '.get_resource_type($a);\n      }\n      else if ( Str::isBuid($a) ){\n        $r = '0x'.bin2hex($a);\n      }\n      $st .= $r.PHP_EOL;\n    }\n    return PHP_EOL.$st;\n  }",
                        "startLine": 626,
                        "doc": {
                            "description": "Returns a dump of the given variable.",
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed"
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 676,
                        "isUserDefined": true
                    },
                    "get_hdump": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 684,
                        "doc": {
                            "description": "Returns an HTML dump of the given variable.",
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed"
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 686,
                        "isUserDefined": true
                    },
                    "dump": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n\n  }",
                        "startLine": 695,
                        "doc": {
                            "description": "Dumps the given variable.",
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed"
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 698,
                        "isUserDefined": true
                    },
                    "hdump": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n  }",
                        "startLine": 706,
                        "doc": {
                            "description": "Dumps the given variable in HTML.",
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed"
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 708,
                        "isUserDefined": true
                    },
                    "adump": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    return self::isCli() ? self::dump(...\\func_get_args()) : self::hdump(...\\func_get_args());\n  }",
                        "startLine": 716,
                        "doc": {
                            "description": "Adaptative dump, i.e. dunps in text if CLI, HTML otherwise.",
                            "params": {
                                "": {
                                    "type": "",
                                    "description": "mixed"
                                }
                            },
                            "return": "void"
                        },
                        "endLine": 719,
                        "isUserDefined": true
                    },
                    "build_options": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($values, $selected = '', $empty_label = false)\n  {\n    {\n      $r = '';\n      if ( $empty_label !== false ){\n        $r .= '<option value=\"\">'.$empty_label.'<\/option>';\n      }\n      $is_assoc = self::isAssoc($values);\n      foreach ( $values as $k => $v )\n      {\n        if ( \\is_array($v) && \\count($v) == 2 )\n        {\n          $value = $v[0];\n          $title = $v[1];\n        }\n        else if ( !isset($values[0]) && $is_assoc ){\n          $value = $k;\n          $title = $v;\n        }\n        else {\n          $value = $title = $v;\n        }\n        if ( isset($value,$title) ){\n          $r .= '<option value=\"'.$value.'\"'.\n            ( $value == $selected ? ' selected=\"selected\"' : '').\n            '>'.$title.'<\/option>';\n        }\n        unset($value,$title);\n      }\n      return $r;\n    }\n  }",
                        "startLine": 741,
                        "doc": {
                            "description": {
                                "description": "Returns the HTML code for creating the &lt;option&gt; tag(s) based on an array.\nIf the array is indexed, the index will be used as value\n  * ```php\n\\bbn\\X::buildOptions(['yes', 'no']);\n\/\/ string \"<option value=\"yes\">yes<\/option>;<option value=\"no\">no<\/option>\"\n\\bbn\\X::buildOptions(['yes', 'no'], 'no');\n\/\/ string \"<option value=\"yes\">yes<\/option><option value=\"no\" selected=\"selected\">no<\/option>\"\n\\bbn\\X::buildOptions(['yes', 'no'], 'no', 'LabelForEmpty');\n\/\/ string \"<option value=\"\">LabelForEmpty<\/option><option value=\"yes\">yes<\/option><option value=\"no\" selected=\"selected\">no<\/option>\"\n\\bbn\\X::dump(\\bbn\\X::buildOptions([3 => \"Allison\", 4 => \"Mike\", 5 => \"Andrew\"], 5, 'Who?'));\n\/\/ string \"<option value=\"\">Who?<\/option><option value=\"3\">Allison<\/option><option value=\"4\">Mike<\/option><option value=\"5\" selected=\"selected\">Andrew<\/option>\"\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$values",
                                        "description": "The source array for the options"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "mixed",
                                        "name": "$selected",
                                        "description": "The selected value"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "boolean",
                                        "name": "$empty",
                                        "description": "label A label for empty value"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string The HTML code."
                                    }
                                ]
                            },
                            "params": {
                                "$values": {
                                    "type": "array",
                                    "description": "The source array for the options"
                                },
                                "$selected": {
                                    "type": "mixed",
                                    "description": "The selected value"
                                },
                                "$empty": {
                                    "type": "boolean",
                                    "description": "label A label for empty value"
                                }
                            },
                            "return": "string The HTML code.",
                            "example_method": "If the array is indexed, the index will be used as value\n\n```php\n\\bbn\\X::buildOptions(['yes', 'no']);\n\/\/ string \"<option value=\"yes\">yes<\/option>;<option value=\"no\">no<\/option>\"\n\\bbn\\X::buildOptions(['yes', 'no'], 'no');\n\/\/ string \"<option value=\"yes\">yes<\/option><option value=\"no\" selected=\"selected\">no<\/option>\"\n\\bbn\\X::buildOptions(['yes', 'no'], 'no', 'LabelForEmpty');\n\/\/ string \"<option value=\"\">LabelForEmpty<\/option><option value=\"yes\">yes<\/option><option value=\"no\" selected=\"selected\">no<\/option>\"\n\\bbn\\X::dump(\\bbn\\X::buildOptions([3 => \"Allison\", 4 => \"Mike\", 5 => \"Andrew\"], 5, 'Who?'));\n\/\/ string \"<option  value=\"\">Who?<\/option><option  value=\"3\">Allison<\/option><option  value=\"4\">Mike<\/option><option  value=\"5\"  selected=\"selected\">Andrew<\/option>\"\n```"
                        },
                        "endLine": 772,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "values",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "selected",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "empty_label",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "to_keypair": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($arr, $protected = 1)\n  {\n    $res = [];\n    if ( ($num % 2) === 0 ){\n      $i = 0;\n      while ( isset($arr[$i]) ){\n        if ( !\\is_string($arr[$i]) || ( !$protected && !preg_match('\/[0-9A-z\\-_]+\/8', Str::cast($arr[$i])) ) ){\n          return false;\n        }\n        $res[$arr[$i]] = $arr[$i+1];\n        $i += 2;\n      }\n    }\n    return $res;\n  }",
                        "startLine": 786,
                        "doc": {
                            "description": {
                                "description": "Converts a numeric array into an associative one, alternating key and value.\n  * ```php\n\\bbn\\X::toKeypair(['Test', 'TestFile', 'Example', 'ExampleFile']);\n\/\/ string ['Test' => 'TestFile', 'Example' => 'ExampleFile']\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$arr",
                                        "description": "The array. It must contain an even number of values"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$protected",
                                        "description": "If false no index protection will be performed"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array|false"
                                    }
                                ]
                            },
                            "params": {
                                "$arr": {
                                    "type": "array",
                                    "description": "The array. It must contain an even number of values"
                                },
                                "$protected": {
                                    "type": "bool",
                                    "description": "If false no index protection will be performed"
                                }
                            },
                            "return": "array|false",
                            "example_method": "```php\n\\bbn\\X::toKeypair(['Test', 'TestFile', 'Example', 'ExampleFile']);\n\/\/ string ['Test' => 'TestFile', 'Example' => 'ExampleFile']\n```"
                        },
                        "endLine": 800,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "arr",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "protected",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": 1,
                                "default_name": ""
                            }
                        ]
                    },
                    "max_with_key": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($ar, $key)\n  {\n    $max = current($ar)[$key];\n    foreach ( $ar as $a ){\n      if ( is_float($a[$key]) || is_float($max) ){\n        if ( self::compareFloats($a[$key], $max, '>') ){\n          $max = $a[$key];\n        }\n      }\n      else if( $a[$key] > $max ){\n        $max = $a[$key];\n      }\n    }\n    return $max;\n  }",
                        "startLine": 821,
                        "doc": {
                            "description": "Returns the maximum value of a given property from a 2 dimensions array.",
                            "params": {
                                "$ar": {
                                    "type": "array",
                                    "description": "A multidimensional array"
                                },
                                "$key": {
                                    "type": "string",
                                    "description": "Where to check the property value from"
                                }
                            },
                            "return": "mixed"
                        },
                        "endLine": 835,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "key",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "min_with_key": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($array, $key)\n  {\n    $min = $array[0][$key];\n    foreach($array as $a){\n      if($a[$key] < $min){\n        $min = $a[$key];\n      }\n    }\n    return $min;\n  }",
                        "startLine": 855,
                        "doc": {
                            "description": {
                                "description": "Returns the minimum value of an index from a multidimensional array.\n  * ```php\n\\bbn\\X::minWithKey([\n ['age' => 1, 'name' => 'Michelle'],\n ['age' => 8, 'name' => 'John'],\n ['age' => 45, 'name' => 'Sarah'],\n ['age' => 45, 'name' => 'Camilla'],\n ['age' => 2, 'name' => 'Allison']\n], 'age');\n\/\/ int 1\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$array",
                                        "description": "A multidimensional array."
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$key",
                                        "description": "The index where to search."
                                    },
                                    {
                                        "tag": "return",
                                        "description": "mixed value"
                                    }
                                ]
                            },
                            "params": {
                                "$array": {
                                    "type": "array",
                                    "description": "A multidimensional array."
                                },
                                "$key": {
                                    "type": "string",
                                    "description": "The index where to search."
                                }
                            },
                            "return": "mixed value",
                            "example_method": "```php\n\\bbn\\X::minWithKey([\n ['age' => 1, 'name' => 'Michelle'],\n ['age' => 8, 'name' => 'John'],\n ['age' => 45, 'name' => 'Sarah'],\n ['age' => 45, 'name' => 'Camilla'],\n ['age' => 2, 'name' => 'Allison']\n], 'age');\n\/\/ int  1\n```"
                        },
                        "endLine": 864,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "array",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "key",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "debug": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($file = '')\n  {\n      if ( isset($a['object']) ){\n        unset($a['object']);\n      }\n      return $a;\n    }, debug_backtrace());\n    if ( empty($file) ){\n      self::hdump($debug);\n    }\n    else{\n      self::log($debug, $file);\n    }\n  }",
                        "startLine": 875,
                        "doc": {
                            "description": {
                                "description": "Gets the backtrace and dumps or logs it into a file.\n  * ```php\n\\bbn\\X::dump(\\bbn\\X::debug());\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$file",
                                        "description": "The file to debug"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "void"
                                    }
                                ]
                            },
                            "params": {
                                "$file": {
                                    "type": "string",
                                    "description": "The file to debug"
                                }
                            },
                            "return": "void",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\X::debug());\n```"
                        },
                        "endLine": 888,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "arguments": [
                            {
                                "name": "file",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "map": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($fn, array $ar, $items = NULL)\n  {\n    foreach ( $ar as $key => $a ){\n      $is_false = $a === false;\n      $r = $fn($a, $key);\n      if ( $is_false ){\n        $res[] = $r;\n      }\n      else if ( $r !== false ){\n        if ( \\is_array($r) && $items && isset($r[$items]) && \\is_array($r[$items]) ){\n          $r[$items] = self::map($fn, $r[$items], $items);\n        }\n        $res[] = $r;\n      }\n    }\n    return $res;\n  }",
                        "startLine": 962,
                        "doc": {
                            "description": {
                                "description": "Applies the given function at all levels of a multidimensional array (if defined param $item).\n  * ```php\n$ar = [\n  ['age' => 45,\n   'name' => 'John',\n   'children' => [\n  ['age' => 8, 'name' => 'Carol'],\n  ['age' => 24, 'name' => 'Jack'],\n   ]\n  ],\n  ['age' => 44, 'name' => 'Benjamin'],\n  ['age' => 60, 'name' => 'Paul', 'children' =>\n   [\n  ['age' => 36, 'name' => 'Mike'],\n  ['age' => 46, 'name' => 'Alan', 'children' =>\n   ['age' => 8, 'name' => 'Allison'],\n  ]\n   ]\n  ]\n ];\n\\bbn\\X::hdump(\\bbn\\X::map(function($a){\n if ( $a['age']>20){\n  $a['name'] = 'Mr. '.$a['name'];\n }\n return $a;\n}, $ar,'children'));\n\/* array [\n  [\n   \"age\" => 45,\n   \"name\" => \"Mr. John\",\n   \"children\" => [\n    [\n   \"age\" => 8,\n   \"name\" => \"Carol\",\n    ],\n    [\n   \"age\" => 24,\n   \"name\" => \"Mr. Jack\",\n    ],\n   ],\n  ],\n  [\n   \"age\" => 44,\n   \"name\" => \"Mr. Benjamin\",\n  ],\n  [\n   \"age\" => 60,\n   \"name\" => \"Mr. Paul\",\n   \"children\" => [\n    [\n   \"age\" => 36,\n   \"name\" => \"Mr. Mike\",\n    ],\n    [\n   \"age\" => 46,\n   \"name\" => \"Mr. Alan\",\n   \"children\" => [\n    \"age\" => 8,\n    \"name\" => \"Allison\",\n   ],\n    ],\n  ],\n   ]\n  * ```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "callable",
                                        "name": "$fn",
                                        "description": "The function to be applied to the items of the array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$ar"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string|null",
                                        "name": "$items",
                                        "description": "If null the function will be applied just to the item of the parent array"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$fn": {
                                    "type": "callable",
                                    "description": "The function to be applied to the items of the array"
                                },
                                "$ar": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$items": {
                                    "type": "string|null",
                                    "description": "If null the function will be applied just to the item of the parent array"
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n$ar = [\n       ['age' => 45,\n         'name' => 'John',\n         'children' => [\n           ['age' => 8, 'name' => 'Carol'],\n           ['age' => 24, 'name' => 'Jack'],\n         ]\n       ],\n       ['age' => 44, 'name' => 'Benjamin'],\n       ['age' => 60, 'name' => 'Paul', 'children' =>\n         [\n           ['age' => 36, 'name' => 'Mike'],\n           ['age' => 46, 'name' => 'Alan', 'children' =>\n             ['age' => 8, 'name' => 'Allison'],\n           ]\n         ]\n       ]\n     ];\n\\bbn\\X::hdump(\\bbn\\X::map(function($a){\n if ( $a['age']>20){\n   $a['name'] = 'Mr. '.$a['name'];\n }\n return $a;\n}, $ar,'children'));\n\/* array [\n           [\n             \"age\"  =>  45,\n             \"name\"  =>  \"Mr.  John\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  8,\n                 \"name\"  =>  \"Carol\",\n               ],\n               [\n                 \"age\"  =>  24,\n                 \"name\"  =>  \"Mr.  Jack\",\n               ],\n             ],\n           ],\n           [\n             \"age\"  =>  44,\n             \"name\"  =>  \"Mr.  Benjamin\",\n           ],\n           [\n             \"age\"  =>  60,\n             \"name\"  =>  \"Mr.  Paul\",\n             \"children\"  =>  [\n               [\n                 \"age\"  =>  36,\n                 \"name\"  =>  \"Mr.  Mike\",\n               ],\n               [\n                 \"age\"  =>  46,\n                 \"name\"  =>  \"Mr.  Alan\",\n                 \"children\"  =>  [\n                   \"age\"  =>  8,\n                   \"name\"  =>  \"Allison\",\n                 ],\n               ],\n           ],\n         ]\n\n```"
                        },
                        "endLine": 978,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "fn",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ar",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "items",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "find": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $ar, array $where, $from = 0)\n  {\n    if ( !empty($where) ){\n      foreach ( $ar as $i => $v ){\n        if (!$from || ($i >= $from)) {\n          $ok = 1;\n          $v = (array)$v;\n          foreach ( $where as $k => $w ){\n            if ( !array_key_exists($k, $v) || ($v[$k] !== $w) ){\n              $ok = false;\n              break;\n            }\n          }\n          if ( $ok ){\n            return $i;\n          }\n        }\n      }\n    }\n    return false;\n  }",
                        "startLine": 1026,
                        "doc": {
                            "description": {
                                "description": "Returns the array's first index, which satisfies the 'where' condition.\n  * ```php\n\\bbn\\X::hdump(\\bbn\\X::find([[\n  'id' => 1,\n  'name' => 'Andrew',\n  'fname' => 'Williams'\n  ], [\n 'id' => 2,\n  'name' => 'Albert',\n  'fname' => 'Taylor'\n  ], [\n  'id' => 3,\n  'name' => 'Mike',\n  'fname' => 'Smith'\n  ], [\n  'id' => 4,\n  'name' => 'John',\n  'fname' => 'White'\n  ]], ['id' => 4]));\n\/\/ int 3\n\\bbn\\X::hdump(\\bbn\\X::find([[\n  'id' => 1,\n  'name' => 'Andrew',\n  'fname' => 'Williams'\n  ], [\n 'id' => 2,\n  'name' => 'Albert',\n  'fname' => 'Taylor'\n  ], [\n  'id' => 3,\n  'name' => 'Mike',\n  'fname' => 'Smith'\n  ], [\n  'id' => 4,\n  'name' => 'John',\n  'fname' => 'White'\n  ]], ['name' => 'Albert', 'fname' => 'Taylor']));\n\/\/ int 1\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$ar",
                                        "description": "The search within the array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The where condition"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool|int"
                                    }
                                ]
                            },
                            "params": {
                                "$ar": {
                                    "type": "array",
                                    "description": "The search within the array"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The where condition"
                                }
                            },
                            "return": "bool|int",
                            "example_method": "```php\n\\bbn\\X::hdump(\\bbn\\X::find([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['id' => 4]));\n\/\/ int 3\n\\bbn\\X::hdump(\\bbn\\X::find([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert', 'fname' => 'Taylor']));\n\/\/ int 1\n```"
                        },
                        "endLine": 1046,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "from",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "filter": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $ar, array $where)\n  {\n    $res = [];\n    $num = count($ar);\n    $i = 0;\n    while ($i < $num) {\n      $idx = self::find($ar, $where, $i);\n      if ($idx === false) {\n        break;\n      }\n      else{\n        $res[] = $ar[$idx];\n        $i = $idx + 1;\n      }\n    }\n    return $res;\n  }",
                        "startLine": 1048,
                        "endLine": 1064,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_rows": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $ar, array $where)\n  {\n    return self::filter($ar, $where);\n  }",
                        "startLine": 1066,
                        "endLine": 1069,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "sum": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $ar, $field, array $where = NULL)\n  {\n    $tot = 0;\n    if ($res = $where ? self::filter($ar, $where) : $ar) {\n      foreach ($res as $r) {\n        $r = (array)$r;\n        $tot += (float)($r[$field]);\n      }\n    }\n    return $tot;\n  }",
                        "startLine": 1071,
                        "endLine": 1081,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "float"
                        ],
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "field",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "get_row": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $r, array $where)\n  {\n      return $r[$res];\n    }\n    return false;\n  }",
                        "startLine": 1112,
                        "doc": {
                            "description": {
                                "description": "Returns the first row of an array to satisfy the where parameters ({@link find()).\n  * ```php\n\\bbn\\X::dump(\\bbn\\X::getRow([[\n  'id' => 1,\n  'name' => 'Andrew',\n  'fname' => 'Williams'\n  ], [\n 'id' => 2,\n  'name' => 'Albert',\n  'fname' => 'Taylor'\n  ], [\n  'id' => 3,\n  'name' => 'Mike',\n  'fname' => 'Smith'\n  ], [\n  'id' => 4,\n  'name' => 'John',\n  'fname' => 'White'\n  ]], ['name' => 'Albert']));\n\/\/ array [ \"id\" => 2, \"name\" => \"Albert\", \"fname\" => \"Taylor\", ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$r",
                                        "description": "The array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The where condition"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool|mixed"
                                    }
                                ]
                            },
                            "params": {
                                "$r": {
                                    "type": "array",
                                    "description": "The array"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The where condition"
                                }
                            },
                            "return": "bool|mixed",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\X::getRow([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert']));\n\/\/ array [ \"id\" => 2, \"name\" => \"Albert\", \"fname\" => \"Taylor\", ]\n```"
                        },
                        "endLine": 1117,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "r",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "get_field": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $r, array $where, $field)\n  {\n      return $res[$field];\n    }\n    return false;\n  }",
                        "startLine": 1148,
                        "doc": {
                            "description": {
                                "description": "Returns the first value of a specific field of an array.\n  * ```php\n\\bbn\\X::dump(\\bbn\\X::getRow([[\n  'id' => 1,\n  'name' => 'Andrew',\n  'fname' => 'Williams'\n  ], [\n 'id' => 2,\n  'name' => 'Albert',\n  'fname' => 'Taylor'\n  ], [\n  'id' => 3,\n  'name' => 'Mike',\n  'fname' => 'Smith'\n  ], [\n  'id' => 4,\n  'name' => 'John',\n  'fname' => 'White'\n  ]], ['name' => 'Albert'],'id'));\n\/\/ int 2\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$r",
                                        "description": "The array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$where",
                                        "description": "The where condition"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$field",
                                        "description": "The field where to look for"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "bool|mixed"
                                    }
                                ]
                            },
                            "params": {
                                "$r": {
                                    "type": "array",
                                    "description": "The array"
                                },
                                "$where": {
                                    "type": "array",
                                    "description": "The where condition"
                                },
                                "$field": {
                                    "type": "string",
                                    "description": "The field where to look for"
                                }
                            },
                            "return": "bool|mixed",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\X::getRow([[\n   'id' => 1,\n   'name' => 'Andrew',\n   'fname' => 'Williams'\n   ], [\n  'id' => 2,\n   'name' => 'Albert',\n   'fname' => 'Taylor'\n   ], [\n   'id' => 3,\n   'name' => 'Mike',\n   'fname' => 'Smith'\n   ], [\n   'id' => 4,\n   'name' => 'John',\n   'fname' => 'White'\n   ]], ['name' => 'Albert'],'id'));\n\/\/ int 2\n```"
                        },
                        "endLine": 1153,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 3,
                        "arguments": [
                            {
                                "name": "r",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "where",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "field",
                                "position": 2,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "pick": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $ar, array $keys)\n  {\n      $r = array_shift($keys);\n      if ( isset($ar[$r]) ){\n        $ar = $ar[$r];\n        if ( !count($keys) ){\n          return $ar;\n        }\n      }\n    }\n  }",
                        "startLine": 1180,
                        "doc": {
                            "description": {
                                "description": "Returns a reference to a subarray targeted by an array $keys.\n  * ```php\n$ar = [\n 'session' => [\n  'user' => [\n 'profile' => [\n  'admin' => [\n   'email' => 'test@test.com'\n  ]\n ]\n  ]\n ]\n];\n\\bbn\\X::hdump(\\bbn\\X::pick($ar,['session', 'user', 'profile', 'admin', 'email']));\n\/\/ string test@test.com\n  * \\bbn\\X::hdump(\\bbn\\X::pick($ar,['session', 'user', 'profile', 'admin']));\n\/\/ [\"email\" => \"test@test.com\",]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$ar",
                                        "description": "The array"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$keys",
                                        "description": "The array's keys"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array|mixed"
                                    }
                                ]
                            },
                            "params": {
                                "$ar": {
                                    "type": "array",
                                    "description": "The array"
                                },
                                "$keys": {
                                    "type": "array",
                                    "description": "The array's keys"
                                }
                            },
                            "return": "array|mixed",
                            "example_method": "```php\n$ar = [\n 'session' => [\n   'user' => [\n     'profile' => [\n       'admin' => [\n         'email' => 'test@test.com'\n       ]\n     ]\n   ]\n ]\n];\n\\bbn\\X::hdump(\\bbn\\X::pick($ar,['session', 'user', 'profile', 'admin', 'email']));\n\/\/ string test@test.com\n\n\\bbn\\X::hdump(\\bbn\\X::pick($ar,['session', 'user', 'profile', 'admin']));\n\/\/ [\"email\"  =>  \"test@test.com\",]\n```"
                        },
                        "endLine": 1190,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "keys",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "sort": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(&$ar)\n  {\n      if ( !str::isNumber($a, $b) ){\n        $a = str_replace('.', '0', Str_replace('_', '1', Str::changeCase($a, 'lower')));\n        $b = str_replace('.', '0', Str_replace('_', '1', Str::changeCase($b, 'lower')));\n        return strcmp($a, $b);\n      }\n      if ( $a > $b ){\n        return 1;\n      }\n      else if ($a == $b){\n        return 0;\n      }\n      return -1;\n    });\n  }",
                        "startLine": 1206,
                        "doc": {
                            "description": {
                                "description": "Sorts the items of an array.\n  * ```php\n$var = [3, 2, 5, 6, 1];\n\\bbn\\X::sort($var);\n\\bbn\\X::hdump($var);\n\/\/ array [1,2,3,5,6]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "name": "$ar",
                                        "description": "array The reference of the array to sort"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "void"
                                    }
                                ]
                            },
                            "params": {
                                "$ar": {
                                    "type": "",
                                    "description": "array The reference of the array to sort"
                                }
                            },
                            "return": "void",
                            "example_method": "```php\n$var = [3, 2, 5, 6, 1];\n\\bbn\\X::sort($var);\n\\bbn\\X::hdump($var);\n\/\/ array [1,2,3,5,6]\n```"
                        },
                        "endLine": 1221,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "sort_by": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(&$ar, $key, $dir = '')\n  {\n    $args = \\func_get_args();\n    array_shift($args);\n    if ( \\is_string($key) ){\n      $args = [[\n        'key' => $key,\n        'dir' => $dir\n      ]];\n    }\n    usort($ar, function($a, $b) use($args){\n      foreach ( $args as $arg ){\n        $key = $arg['key'];\n        $dir = $arg['dir'] ?? 'asc';\n        if ( !\\is_array($key) ){\n          $key = [$key];\n        }\n        $v1 = self::pick($a, $key);\n        $v2 = self::pick($b, $key);\n        $a1 = strtolower($dir) === 'desc' ? ($v2 ?? null) : ($v1 ?? null);\n        $a2 = strtolower($dir) === 'desc' ? ($v1 ?? null) : ($v2 ?? null);\n        if ( !str::isNumber($v1, $v2) ){\n          $a1 = str_replace('.', '0', Str_replace('_', '1', Str::changeCase($a1, 'lower')));\n          $a2 = str_replace('.', '0', Str_replace('_', '1', Str::changeCase($a2, 'lower')));\n          $cmp = strcmp($a1, $a2);\n          if ( !empty($cmp) ){\n            return $cmp;\n          }\n        }\n        if ( $a1 > $a2 ){\n          return 1;\n        }\n        else if ( $a1 < $a2 ){\n          return -1;\n        }\n      }\n      return 0;\n    });\n  }",
                        "startLine": 1243,
                        "doc": {
                            "description": {
                                "description": "Sorts the items of an indexed array based on a given $key.\n  * ```php\n $v = [['age'=>10, 'name'=>'thomas'], ['age'=>22, 'name'=>'John'], ['age'=>37, 'name'=>'Michael']];\n \\bbn\\X::sortBy($v,'name','desc');\n \\bbn\\X::hdump($v);\n \\bbn\\X::sortBy($v,'name','asc');\n \\bbn\\X::hdump($v);\n \\bbn\\X::sortBy($v,'age','asc');\n \\bbn\\X::hdump($v);\n \\bbn\\X::sortBy($v,'age','desc');\n \\bbn\\X::hdump($v);\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$ar",
                                        "description": "The array of data to sort"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string|int",
                                        "name": "$key",
                                        "description": "The key to sort by"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$dir",
                                        "description": "The direction of the sort ('asc'|'desc')"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "void"
                                    }
                                ]
                            },
                            "params": {
                                "$ar": {
                                    "type": "array",
                                    "description": "The array of data to sort"
                                },
                                "$key": {
                                    "type": "string|int",
                                    "description": "The key to sort by"
                                },
                                "$dir": {
                                    "type": "string",
                                    "description": "The direction of the sort ('asc'|'desc')"
                                }
                            },
                            "return": "void",
                            "example_method": "```php\n $v = [['age'=>10, 'name'=>'thomas'], ['age'=>22, 'name'=>'John'], ['age'=>37, 'name'=>'Michael']];\n \\bbn\\X::sortBy($v,'name','desc');\n \\bbn\\X::hdump($v);\n \\bbn\\X::sortBy($v,'name','asc');\n \\bbn\\X::hdump($v);\n \\bbn\\X::sortBy($v,'age','asc');\n \\bbn\\X::hdump($v);\n \\bbn\\X::sortBy($v,'age','desc');\n \\bbn\\X::hdump($v);\n```"
                        },
                        "endLine": 1281,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "key",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "dir",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "is_windows": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    return strtoupper(substr(PHP_OS, 0, 3)) == 'WIN';\n  }",
                        "startLine": 1293,
                        "doc": {
                            "description": "Checks if the operating system, from which PHP is executed, is Windows or not.\n```php\n\\bbn\\X::dump(\\bbn\\X::isWindows());\n\/\/ boolean false\n```",
                            "params": [],
                            "return": "bool"
                        },
                        "endLine": 1296,
                        "isUserDefined": true
                    },
                    "curl": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($url, $param = NULL, array $options = array (\n  'post' => 1,\n))\n  {\n    self::$_last_curl = $ch;\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    if (\\is_object($param) ){\n      $param = self::toArray($param);\n    }\n    if ( \\defined('BBN_IS_SSL') && \\defined('BBN_IS_DEV') && BBN_IS_SSL && BBN_IS_DEV ){\n      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n      curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n      \/\/curl_setopt($ch, CURLOPT_SAFE_UPLOAD, false);\n    }\n    $options = array_change_key_case($options, CASE_UPPER);\n    foreach ( $options as $opt => $val ){\n      if ( \\defined('CURLOPT_'.$opt) ){\n        curl_setopt($ch, constant('CURLOPT_'.$opt), $val);\n      }\n    }\n    if ( $param ){\n      if ( !empty($options['POST']) ){\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $param);\n      }\n      else if ( !empty($options['DELETE']) ){\n        \/\/die($url.'?'.http_build_query($param));\n        curl_setopt($ch, CURLOPT_URL, $url.'?'.http_build_query($param));\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');        \n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n      }\n      else{\n        curl_setopt($ch, CURLOPT_URL, $url.'?'.http_build_query($param));\n      }\n    }\n    else{\n      curl_setopt($ch, CURLOPT_URL, $url);\n      if ( !empty($options['DELETE']) ){\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n      }\n    }\n\n    $r = curl_exec($ch);\n    if ( !$r ){\n      self::log([\"PROBLEME AVEC L'URL $url\", curl_error($ch), curl_getinfo($ch)], 'curl');\n    }\n    return $r;\n  }",
                        "startLine": 1314,
                        "doc": {
                            "description": {
                                "description": "Makes a Curl call towards a URL and returns the result as a string.\n  * ```php\n $url = 'https:\/\/www.omdbapi.com\/';\n $param = ['t'=>'la vita \u00e8 bella'];\n \\bbn\\X::hdump(\\bbn\\X::curl($url,$param, ['POST' => false]));\n  * \/\/ object {\"Title\":\"La vita \u00e8 bella\",\"Year\":\"1943\",\"Rated\":\"N\/A\",\"Released\":\"26 May 1943\",\"Runtime\":\"76 min\",\"Genre\":\"Comedy\",\"Director\":\"Carlo Ludovico Bragaglia\",\"Writer\":\"Carlo Ludovico Bragaglia (story and screenplay)\",\"Actors\":\"Alberto Rabagliati, Mar\u00eda Mercader, Anna Magnani, Carlo Campanini\",\"Plot\":\"N\/A\",\"Language\":\"Italian\",\"Country\":\"Italy\",\"Awards\":\"N\/A\",\"Poster\":\"http:\/\/ia.media-imdb.com\/images\/M\/MV5BYmYyNzA2YWQtNDgyZC00OWVkLWIwMTEtNTdhNDQwZjcwYTMwXkEyXkFqcGdeQXVyNTczNDAyMDc@._V1_SX300.jpg\",\"Metascore\":\"N\/A\",\"imdbRating\":\"7.9\",\"imdbVotes\":\"50\",\"imdbID\":\"tt0036502\",\"Type\":\"movie\",\"Response\":\"True\"}\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$url"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$param"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$options"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "mixed"
                                    }
                                ]
                            },
                            "params": {
                                "$url": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$param": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$options": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "mixed",
                            "example_method": "```php\n $url = 'https:\/\/www.omdbapi.com\/';\n $param = ['t'=>'la vita \u00e8 bella'];\n \\bbn\\X::hdump(\\bbn\\X::curl($url,$param, ['POST' => false]));\n\n\/\/ object {\"Title\":\"La  vita  \u00e8  bella\",\"Year\":\"1943\",\"Rated\":\"N\/A\",\"Released\":\"26  May  1943\",\"Runtime\":\"76  min\",\"Genre\":\"Comedy\",\"Director\":\"Carlo  Ludovico  Bragaglia\",\"Writer\":\"Carlo  Ludovico  Bragaglia  (story  and  screenplay)\",\"Actors\":\"Alberto  Rabagliati,  Mar\u00eda  Mercader,  Anna  Magnani,  Carlo  Campanini\",\"Plot\":\"N\/A\",\"Language\":\"Italian\",\"Country\":\"Italy\",\"Awards\":\"N\/A\",\"Poster\":\"http:\/\/ia.media-imdb.com\/images\/M\/MV5BYmYyNzA2YWQtNDgyZC00OWVkLWIwMTEtNTdhNDQwZjcwYTMwXkEyXkFqcGdeQXVyNTczNDAyMDc@._V1_SX300.jpg\",\"Metascore\":\"N\/A\",\"imdbRating\":\"7.9\",\"imdbVotes\":\"50\",\"imdbID\":\"tt0036502\",\"Type\":\"movie\",\"Response\":\"True\"}\n```"
                        },
                        "endLine": 1360,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "url",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "param",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            },
                            {
                                "name": "options",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": {
                                    "post": 1
                                },
                                "default_name": ""
                            }
                        ]
                    },
                    "last_curl_error": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n      return curl_error(self::$_last_curl);\n    }\n    return null;\n  }",
                        "startLine": 1362,
                        "endLine": 1367,
                        "isUserDefined": true
                    },
                    "last_curl_code": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n      $infos = curl_getinfo(self::$_last_curl);\n      if ( $infos ){\n        return $infos['http_code'];\n      }\n    }\n    return null;\n  }",
                        "startLine": 1369,
                        "endLine": 1377,
                        "isUserDefined": true
                    },
                    "last_curl_info": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n      return curl_getinfo(self::$_last_curl);\n    }\n    return null;\n  }",
                        "startLine": 1379,
                        "endLine": 1384,
                        "isUserDefined": true
                    },
                    "get_tree": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($ar)\n  {\n    foreach ( $ar as $k => $a ){\n      $r = ['text' => $k];\n      if ( \\is_object($a) ){\n        $a = self::toArray($a);\n      }\n      if ( \\is_array($a) ){\n        $r['items'] = self::getTree($a);\n      }\n      else if ( \\is_null($a) ){\n        $r['text'] .= ': null';\n      }\n      else if ( $a === false ){\n        $r['text'] .= ': false';\n      }\n      else if ( $a === true ){\n        $r['text'] .= ': true';\n      }\n      else {\n        $r['text'] .= ': '.(string)$a;\n      }\n      array_push($res, $r);\n    }\n    return $res;\n  }",
                        "startLine": 1398,
                        "doc": {
                            "description": {
                                "description": "Returns the given array or object as a tree structure ready for a JS tree.\n  * ```php\n\\bbn\\X::hdump(\\bbn\\X::getTree([['id' => 1,'name' => 'Andrew','fname' => 'Williams','children' =>[['name' => 'Emma','age' => 6],['name' => 'Giorgio','age' => 9]]], ['id' => 2,'name' => 'Albert','fname' => 'Taylor','children' =>[['name' => 'Esther','age' => 6],['name' => 'Paul','age' => 9]]], ['id' => 3,'name' => 'Mike','fname' => 'Smith','children' =>[['name' => 'Sara','age' => 6],['name' => 'Fred','age' => 9]]]]));\n\/* array [\n  [ \"text\" => 0, \"items\" => [ [ \"text\" => \"id: 1\", ], [ \"text\" => \"name: Andrew\", ], [ \"text\" => \"fname: Williams\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Emma\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Giorgio\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"id: 2\", ], [ \"text\" => \"name: Albert\", ], [ \"text\" => \"fname: Taylor\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Esther\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Paul\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], [ \"text\" => 2, \"items\" => [ [ \"text\" => \"id: 3\", ], [ \"text\" => \"name: Mike\", ], [ \"text\" => \"fname: Smith\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Sara\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Fred\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$ar"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$ar": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array",
                            "example_method": "```php\n\\bbn\\X::hdump(\\bbn\\X::getTree([['id' => 1,'name' => 'Andrew','fname' => 'Williams','children' =>[['name' => 'Emma','age' => 6],['name' => 'Giorgio','age' => 9]]], ['id' => 2,'name' => 'Albert','fname' => 'Taylor','children' =>[['name' => 'Esther','age' => 6],['name' => 'Paul','age' => 9]]], ['id' => 3,'name' => 'Mike','fname' => 'Smith','children' =>[['name' => 'Sara','age' => 6],['name' => 'Fred','age' => 9]]]]));\n\/* array [\n   [ \"text\" => 0, \"items\" => [ [ \"text\" => \"id: 1\", ], [ \"text\" => \"name: Andrew\", ], [ \"text\" => \"fname: Williams\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Emma\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Giorgio\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"id: 2\", ], [ \"text\" => \"name: Albert\", ], [ \"text\" => \"fname: Taylor\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Esther\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Paul\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], [ \"text\" => 2, \"items\" => [ [ \"text\" => \"id: 3\", ], [ \"text\" => \"name: Mike\", ], [ \"text\" => \"fname: Smith\", ], [ \"text\" => \"children\", \"items\" => [ [ \"text\" => 0, \"items\" => [ [ \"text\" => \"name: Sara\", ], [ \"text\" => \"age: 6\", ], ], ], [ \"text\" => 1, \"items\" => [ [ \"text\" => \"name: Fred\", ], [ \"text\" => \"age: 9\", ], ], ], ], ], ], ], ]\n```"
                        },
                        "endLine": 1423,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "make_tree": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $ar)\n  {\n  }",
                        "startLine": 1469,
                        "doc": {
                            "description": {
                                "description": "Returns a view of an array or object as a JS tree.\n  * ```php\n\\bbn\\X::dump(\\bbn\\X::makeTree([['id' => 1,'name' => 'Andrew','fname' => 'Williams','children' =>[['name' => 'Emma','age' => 6],['name' => 'Giorgio','age' => 9]]], ['id' => 2,'name' => 'Albert','fname' => 'Taylor','children' =>[['name' => 'Esther','age' => 6],['name' => 'Paul','age' => 9]]], ['id' => 3,'name' => 'Mike','fname' => 'Smith','children' =>[['name' => 'Sara','age' => 6],['name' => 'Fred','age' => 9]]]]));\n\/* string\n  0\n id: 1\n name: Andrew\n fname: Williams\n children:\n  0\n   name: Emma\n   age: 6\n  1\n   name: Giorgio\n   age: 9\n  1\n id: 2\n name: Albert\n fname: Taylor\n children\n  0\n   name: Esther\n   age: 6\n  1\n   name: Paul\n   age: 9\n  2\n id: 3\n name: Mike\n fname: Smith\n children\n 0\n  name: Sara\n  age: 6\n 1\n  name: Fred\n  age: 9\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$ar"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$ar": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "string",
                            "example_method": "```php\n\\bbn\\X::dump(\\bbn\\X::makeTree([['id' => 1,'name' => 'Andrew','fname' => 'Williams','children' =>[['name' => 'Emma','age' => 6],['name' => 'Giorgio','age' => 9]]], ['id' => 2,'name' => 'Albert','fname' => 'Taylor','children' =>[['name' => 'Esther','age' => 6],['name' => 'Paul','age' => 9]]], ['id' => 3,'name' => 'Mike','fname' => 'Smith','children' =>[['name' => 'Sara','age' => 6],['name' => 'Fred','age' => 9]]]]));\n\/* string\n   0\n     id: 1\n     name: Andrew\n     fname: Williams\n     children:\n       0\n         name: Emma\n         age: 6\n       1\n         name: Giorgio\n         age: 9\n   1\n     id: 2\n     name: Albert\n     fname: Taylor\n     children\n       0\n         name: Esther\n         age: 6\n       1\n         name: Paul\n         age: 9\n   2\n     id: 3\n     name: Mike\n     fname: Smith\n     children\n     0\n       name: Sara\n       age: 6\n     1\n       name: Fred\n       age: 9\n```"
                        },
                        "endLine": 1471,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "from_csv": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($st, $delimiter = ',', $enclosure = '\"', $separator = '\n')\n  {\n      $r = [];\n      $lines = explode($separator, $st);\n      foreach ( $lines as $line ){\n        array_push($r, Str_getcsv($line, $delimiter, $enclosure));\n      }\n      return $r;\n    }\n    return [];\n  }",
                        "startLine": 1491,
                        "doc": {
                            "description": {
                                "description": "Formats a CSV line(s) and returns it as an array.\nAdapted from http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120\n  * ```php\n \\bbn\\X::dump(\\bbn\\X::fromCsv(\n '\"141\";\"10\/11\/2002\";\"350.00\";\"1311742251\"\n \"142\";\"12\/12\/2002\";\"349.00\";\"1311742258\"'\n ));\n\/\/ [ [ \"141\", \"10\/11\/2002\", \"350.00\", \"1311742251\", ], [ \"142\", \"12\/12\/2002\", \"349.00\", \"1311742258\", ], ]\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "name": "$st",
                                        "description": "The Csv string to format"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$delimiter"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$enclosure"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$separator"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "array"
                                    }
                                ]
                            },
                            "params": {
                                "$st": {
                                    "type": "",
                                    "description": "The Csv string to format"
                                },
                                "$delimiter": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$enclosure": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$separator": {
                                    "type": "string",
                                    "description": ""
                                }
                            },
                            "return": "array",
                            "example_method": "Adapted from http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120\n\n```php\n \\bbn\\X::dump(\\bbn\\X::fromCsv(\n     '\"141\";\"10\/11\/2002\";\"350.00\";\"1311742251\"\n     \"142\";\"12\/12\/2002\";\"349.00\";\"1311742258\"'\n ));\n\/\/ [ [ \"141\", \"10\/11\/2002\", \"350.00\", \"1311742251\", ], [ \"142\", \"12\/12\/2002\", \"349.00\", \"1311742258\", ], ]\n```"
                        },
                        "endLine": 1501,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "delimiter",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": ",",
                                "default_name": ""
                            },
                            {
                                "name": "enclosure",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "\"",
                                "default_name": ""
                            },
                            {
                                "name": "separator",
                                "position": 3,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "\n",
                                "default_name": "bbn\\PHP_EOL"
                            }
                        ]
                    },
                    "to_csv": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $data, $delimiter = ';', $enclosure = '\"', $separator = '\n', $encloseAll = false, $nullToMysqlNull = false)\n  {\n    $enclosure_esc = preg_quote($enclosure, '\/');\n\n    $lines = [];\n    foreach ( $data as $d ){\n      $output = [];\n      foreach ( $d as $field ){\n        if ($field === null && $nullToMysqlNull){\n          $output[] = 'NULL';\n          continue;\n        }\n\n        \/\/ Enclose fields containing $delimiter, $enclosure or whitespace\n        if ( $encloseAll || preg_match( \"\/(?:${delimiter_esc}|${enclosure_esc}|\\s)\/\", $field ) ){\n          $output[] = $enclosure.str_replace($enclosure, '\\\\'.$enclosure, $field) . $enclosure;\n        }\n        else {\n          $output[] = $field;\n        }\n      }\n      $lines[] = implode($delimiter, $output);\n    }\n    return self::join($lines, $separator);\n  }",
                        "startLine": 1522,
                        "doc": {
                            "description": {
                                "description": "Formats an array as a CSV string.\nAdapted from http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120\n  * ```php\n\\bbn\\X::dump(\\bbn\\X::toCsv([[\"John\", \"Mike\", \"David\", \"Clara\"],[\"White\", \"Red\", \"Green\", \"Blue\"]]));\n\/* string John;Mike;David;Clara\n  White;Red;Green;Blue\n```",
                                "tags": [
                                    {
                                        "tag": "param",
                                        "type": "array",
                                        "name": "$data",
                                        "description": "The array to format"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$delimiter"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$enclosure"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "string",
                                        "name": "$separator"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$enclose",
                                        "description": "ll"
                                    },
                                    {
                                        "tag": "param",
                                        "type": "bool",
                                        "name": "$null",
                                        "description": "oMysqlNull"
                                    },
                                    {
                                        "tag": "return",
                                        "description": "string"
                                    }
                                ]
                            },
                            "params": {
                                "$data": {
                                    "type": "array",
                                    "description": "The array to format"
                                },
                                "$delimiter": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$enclosure": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$separator": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$enclose": {
                                    "type": "bool",
                                    "description": "ll"
                                },
                                "$null": {
                                    "type": "bool",
                                    "description": "oMysqlNull"
                                }
                            },
                            "return": "string",
                            "example_method": "Adapted from http:\/\/us3.php.net\/manual\/en\/function.fputcsv.php#87120\n\n```php\n\\bbn\\X::dump(\\bbn\\X::toCsv([[\"John\", \"Mike\", \"David\", \"Clara\"],[\"White\", \"Red\", \"Green\", \"Blue\"]]));\n\/* string  John;Mike;David;Clara\n           White;Red;Green;Blue\n```"
                        },
                        "endLine": 1546,
                        "isUserDefined": true,
                        "numberOfParameters": 6,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "data",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "delimiter",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": ";",
                                "default_name": ""
                            },
                            {
                                "name": "enclosure",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "\"",
                                "default_name": ""
                            },
                            {
                                "name": "separator",
                                "position": 3,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": "\n",
                                "default_name": "bbn\\PHP_EOL"
                            },
                            {
                                "name": "encloseAll",
                                "position": 4,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            },
                            {
                                "name": "nullToMysqlNull",
                                "position": 5,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "is_same": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($file1, $file2, $strict = false)\n  {\n      throw Exception(\"Boo! One of the files given to the X::is_same function doesn't exist\");\n    }\n    else{\n      $same = filesize($file1) === filesize($file2);\n      if ( !$strict || !$same ){\n        return $same;\n      }\n      return filemtime($file1) === filemtime($file2);\n    }\n  }",
                        "startLine": 1556,
                        "doc": {
                            "description": "Checks if two files are the same.",
                            "params": {
                                "$file": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$strict": {
                                    "type": "bool",
                                    "description": ""
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 1567,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "file1",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "file2",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "strict",
                                "position": 2,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "retrieve_array_var": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $props, array &$ar)\n  {\n    foreach ( $props as $p ){\n      if ( \\is_array($cur) && array_key_exists($p, $cur) ){\n        $cur =& $cur[$p];\n      }\n      else{\n        throw new \\Exception(\"Impossible to find the value in the array\");\n      }\n    }\n    return $cur;\n  }",
                        "startLine": 1569,
                        "endLine": 1580,
                        "isUserDefined": true,
                        "returnsReference": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "props",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "ar",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "retrieve_object_var": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $props, &$obj)\n  {\n    foreach ( $props as $p ){\n      if ( property_exists($cur, $p) ){\n        $cur =& $cur->{$p};\n      }\n      else{\n        throw new \\Exception(\"Impossible to find the value in the object\");\n      }\n    }\n    return $cur;\n  }",
                        "startLine": 1582,
                        "endLine": 1593,
                        "isUserDefined": true,
                        "returnsReference": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "props",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "obj",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "check_properties": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($obj)\n  {\n    array_shift($props);\n    foreach ( $props as $p ){\n      if ( \\is_array($p) ){\n        if ( (\\count($p) !== 2) ){\n          \/** @todo proper error *\/\n          die(\"Boo with check properties\");\n        }\n        if ( function_exists('is_'.$p[1]) ){\n\n        }\n      }\n    }\n  }",
                        "startLine": 1599,
                        "doc": {
                            "description": "",
                            "params": [],
                            "return": ""
                        },
                        "endLine": 1613,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "obj",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "count_properties": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($obj)\n  {\n  }",
                        "startLine": 1621,
                        "doc": {
                            "description": "Counts the properties of an object.",
                            "params": [],
                            "return": "int"
                        },
                        "endLine": 1623,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "obj",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "to_excel": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $data, $file, $with_titles = true, array $cfg = [])\n  {\n    $excel = new \\PhpOffice\\PhpSpreadsheet\\Spreadsheet();\n    $sheet = $excel->getActiveSheet();\n    $ow = new \\PhpOffice\\PhpSpreadsheet\\Writer\\Xlsx($excel);\n    $can_save = false;\n    if ( empty($cfg) ){\n      $todo = [];\n      $checked = false;\n      foreach ( $data as $d ){\n        if ( !$checked && self::isAssoc($d) ){\n          if ( $with_titles ){\n            $line1 = [];\n            $line2 = [];\n            foreach ( $d as $k => $v ){\n              $line1[] = $k;\n              $line2[] = '';\n            }\n            $todo[] = $line1;\n            $todo[] = $line2;\n          }\n          $checked = true;\n        }\n        $todo[] = array_values($d);\n      }\n      if ( count($todo) ){\n        $sheet->fromArray($todo, NULL, 'A1');\n        $excel\n          ->getDefaultStyle()\n          ->getNumberFormat()\n          ->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_TEXT);\n        $can_save = true;\n      }\n    }\n    else {\n      foreach ( $cfg['fields'] as $i => $field ){\n        \/\/ Get cell object\n        $cell = $sheet->getCellByColumnAndRow($i+1, 1);\n        \/\/ Get colum name\n        $col_idx = $cell->getColumn();\n        \/\/ Set auto width to the column\n        $sheet\n          ->getColumnDimension($col_idx)\n          ->setAutoSize(true);\n        \/\/ Cell style object\n        $style = $sheet->getStyle(\"$col_idx:$col_idx\");\n        \/\/ Get number format object\n        $format = $style->getNumberFormat();\n        \/\/ Set the vertical alignment to center\n        $style\n          ->getAlignment()\n          ->setVertical(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::VERTICAL_TOP);\n        \/\/ Set the correct data type\n        switch ( $field['type'] ){\n          case 'integer':\n            \/\/ Set code's format to number\n            $format->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_NUMBER);\n            break;\n          case 'decimal':\n            \/\/ Set code's format to decimal\n            $format->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_NUMBER_00);\n            break;\n          case 'money':\n            \/\/ Set code's format to currency\n            $format->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_CURRENCY_EUR);\n            break;\n          case 'date':\n            \/\/ Set code's format to date\n            $format->setFormatCode('dd\/mm\/yyyy');\n            \/\/ Set the horizontal alignment to center\n            $style->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_CENTER);\n            break;\n          case 'datetime':\n            \/\/ Set code's format to datetime\n            $format->setFormatCode('dd\/mm\/yyyy hh:mm');\n            \/\/ Set the horizontal alignment to center\n            $style->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_CENTER);\n            break;\n          case 'boolean':\n            \/\/ Set the horizontal alignment to center\n            $style->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_CENTER);\n            break;\n          case 'string':\n          default:\n            \/\/ Set code's format to text\n            $format->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_TEXT);\n            \/\/ Set wrap text\n            $style\n              ->getAlignment()\n              ->setWrapText(true);\n            break;\n        }\n        if ( $with_titles ){\n          \/\/$cell = $sheet->getCellByColumnAndRow($i+1, 1);\n          $style = $cell->getStyle();\n          \/\/ Set code's format to text\n          $style->getNumberFormat()->setFormatCode(\\PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat::FORMAT_TEXT);\n          \/\/ Set the horizontal alignment to center\n          $style->getAlignment()->setHorizontal(\\PhpOffice\\PhpSpreadsheet\\Style\\Alignment::HORIZONTAL_CENTER);\n          \/\/ Set bold to true\n          $style->getFont()->setBold(true);\n          \/\/ Set the column's title\n          $cell->setValue($field['title'] ?? $field['field']);\n        }\n      }\n      if (\n        isset($cfg['map'], $cfg['map']['callable']) &&\n        is_callable($cfg['map']['callable'])\n      ){\n        array_walk($data, $cfg['map']['callable'], is_array($cfg['map']['params']) ? $cfg['map']['params'] : []);\n      }\n      $sheet->fromArray($data, NULL, 'A' . ($with_titles ? '2' : '1'));\n      $can_save = true;\n    }\n    if (\n      $can_save &&\n      \\bbn\\File\\Dir::createPath(dirname($file))\n    ){\n      $ow->save($file);\n      return \\is_file($file);\n    }\n    return false;\n  }",
                        "startLine": 1633,
                        "doc": {
                            "description": "Creates an Excel file from a given array.",
                            "params": {
                                "$array": {
                                    "type": "array",
                                    "description": "The array to export"
                                },
                                "$file": {
                                    "type": "string",
                                    "description": "The file path"
                                },
                                "$with": {
                                    "type": "bool",
                                    "description": "titles Set it to false if you don't want the columns titles. Default true"
                                }
                            },
                            "return": "bool"
                        },
                        "endLine": 1755,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "data",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "file",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "with_titles",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": true,
                                "default_name": ""
                            },
                            {
                                "name": "cfg",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": [],
                                "default_name": ""
                            }
                        ]
                    },
                    "make_uid": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($binary = false, $hyphens = false)\n  {\n\n      \/\/ 32 bits for \"time_low\"\n      mt_rand(0, 0xffff), mt_rand(0, 0xffff),\n\n      \/\/ 16 bits for \"time_mid\"\n      mt_rand(0, 0xffff),\n\n      \/\/ 16 bits for \"time_hi_and_version\",\n      \/\/ four most significant bits holds version number 4\n      mt_rand(0, 0x0fff) | 0x4000,\n\n      \/\/ 16 bits, 8 bits for \"clk_seq_hi_res\",\n      \/\/ 8 bits for \"clk_seq_low\",\n      \/\/ two most significant bits holds zero and one for variant DCE1.1\n      mt_rand(0, 0x3fff) | 0x8000,\n\n      \/\/ 48 bits for \"node\"\n      mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)\n    );\n    return $binary ? hex2bin($tmp) : $tmp;\n  }",
                        "startLine": 1764,
                        "doc": {
                            "description": "Makes a UID.",
                            "params": {
                                "$binary": {
                                    "type": "bool",
                                    "description": "Set it to true if you want a binary UID"
                                },
                                "$hypens": {
                                    "type": "bool",
                                    "description": "Set it to true if you want hypens to seperate the UID"
                                }
                            },
                            "return": "string|bynary"
                        },
                        "endLine": 1786,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "arguments": [
                            {
                                "name": "binary",
                                "position": 0,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            },
                            {
                                "name": "hyphens",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": false,
                                "default_name": ""
                            }
                        ]
                    },
                    "convert_uids": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n      foreach ( $st as &$s ){\n        $s = self::convertUids($s);\n      }\n    }\n    else if ( \\bbn\\Str::isUid($st) ){\n      $st = bin2hex($st);\n    }\n    return $st;\n  }",
                        "startLine": 1793,
                        "doc": {
                            "description": "Converts a hex UID to a binary UID. You can also give an array or an object to convert the array's items or the object's properties.",
                            "params": {
                                "$st": {
                                    "type": "string|array|object",
                                    "description": ""
                                }
                            },
                            "return": "string"
                        },
                        "endLine": 1803,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "compare_floats": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($v1, $v2, $operator = '===', $precision = 4)\n  {\n    $v1 = round((float)$v1 * pow(10, $precision));\n    $v2 = round((float)$v2 * pow(10, $precision));\n    switch ($operator ){\n      case '===':\n        return $v1 === $v2;\n      case '==':\n        return $v1 == $v2;\n      case '>=':\n        return $v1 >= $v2;\n      case '<=':\n        return $v1 <= $v2;\n      case '>':\n        return $v1 > $v2;\n      case '<':\n        return $v1 < $v2;\n    }\n    return false;\n  }",
                        "startLine": 1814,
                        "doc": {
                            "description": "Compares two float numbers with the given operator.",
                            "params": {
                                "$v": {
                                    "type": "float",
                                    "description": ""
                                },
                                "$operator": {
                                    "type": "string",
                                    "description": ""
                                },
                                "$precision": {
                                    "type": "int",
                                    "description": ""
                                }
                            },
                            "return": "boolean"
                        },
                        "endLine": 1833,
                        "isUserDefined": true,
                        "numberOfParameters": 4,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "bool"
                        ],
                        "arguments": [
                            {
                                "name": "v1",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "v2",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "operator",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "===",
                                "default_name": ""
                            },
                            {
                                "name": "precision",
                                "position": 3,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 4,
                                "default_name": ""
                            }
                        ]
                    },
                    "json_base64_encode": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $arr, $json = true)\n  {\n    $res = [];\n    foreach ( $arr as $i => $a ){\n      if ( is_array($a) ){\n        $res[$i] = self::jsonBase64Encode($a, false);\n      }\n      else if ( is_string($a) ){\n        $res[$i] = base64_encode($a);\n      }\n      else{\n        $res[$i] = $a;\n      }\n    }\n    return $json ? json_encode($res) : $res;\n  }",
                        "startLine": 1842,
                        "doc": {
                            "description": "Encodes an array's values to the base64 encoding scheme. You can also convert the resulting array into a JSON string (default).",
                            "params": {
                                "$arr": {
                                    "type": "array",
                                    "description": ""
                                },
                                "$json": {
                                    "type": "boolean",
                                    "description": ""
                                }
                            },
                            "return": "string|array"
                        },
                        "endLine": 1857,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "arguments": [
                            {
                                "name": "arr",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "json",
                                "position": 1,
                                "type": null,
                                "required": false,
                                "has_default": true,
                                "default": true,
                                "default_name": ""
                            }
                        ]
                    },
                    "json_base64_decode": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($st)\n  {\n    $res = \\is_string($st) ? json_decode($st, true) : $st;\n    if ( \\is_array($res) ){\n      foreach ( $res as $i => $a ){\n        if ( \\is_array($a) ){\n          $res[$i] = self::jsonBase64Decode($a);\n        }\n        else if ( \\is_string($a) ){\n          $res[$i] = base64_decode($a);\n        }\n        else{\n          $res[$i] = $a;\n        }\n      }\n      return $res;\n    }\n    return null;\n  }",
                        "startLine": 1865,
                        "doc": {
                            "description": "Decodes the base64 array's values. You can also give a JSON string of an array.",
                            "params": {
                                "$st": {
                                    "type": "string|array",
                                    "description": ""
                                }
                            },
                            "return": ""
                        },
                        "endLine": 1883,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array",
                            null
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "index_by_first_val": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $ar)\n  {\n    if ( empty($ar) || !isset($ar[0]) || !\\count($ar[0]) ){\n      return $ar;\n    }\n    $cols = array_keys($ar[0]);\n    $idx = array_shift($cols);\n    $num_cols = \\count($cols);\n    $res = [];\n    foreach ( $ar as $d ){\n      $index = $d[$idx];\n      unset($d[$idx]);\n      $res[$index] = $num_cols > 1 ? $d : $d[$cols[0]];\n    }\n    return $res;\n  }",
                        "startLine": 1890,
                        "doc": {
                            "description": "Creates an associative array based on the first array's value.",
                            "params": {
                                "$ar": {
                                    "type": "array",
                                    "description": ""
                                }
                            },
                            "return": "array"
                        },
                        "endLine": 1905,
                        "isUserDefined": true,
                        "numberOfParameters": 1,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "join": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function(array $ar, $glue = '')\n  {\n    return implode($glue, $ar);\n  }",
                        "startLine": 1907,
                        "endLine": 1910,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 1,
                        "returns": [
                            "string"
                        ],
                        "arguments": [
                            {
                                "name": "ar",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "glue",
                                "position": 1,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "concat": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($st, $separator)\n  {\n    return explode($separator, $st);\n  }",
                        "startLine": 1912,
                        "endLine": 1915,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "separator",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "split": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($st, $separator)\n  {\n    return explode($separator, $st);\n  }",
                        "startLine": 1917,
                        "endLine": 1920,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "array"
                        ],
                        "arguments": [
                            {
                                "name": "st",
                                "position": 0,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "separator",
                                "position": 1,
                                "type": {},
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    },
                    "indexOf": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($subject, $search, $start = 0)\n  {\n    $res = false;\n    if ( is_array($subject) ){\n      $i = 0;\n      foreach ( $subject as $s ){\n        if ( ($i >= $start) && ($s === $search) ){\n          $res = $i;\n          break;\n        }\n        else{\n          $i++;\n        }\n      }\n    }\n    else if ( is_string($subject) ){\n      $res = strpos($subject, $search, $start);\n    }\n    return $res === false ? -1 : $res;\n  }",
                        "startLine": 1925,
                        "doc": {
                            "description": "Searches from start to end",
                            "tags": []
                        },
                        "endLine": 1944,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "int"
                        ],
                        "arguments": [
                            {
                                "name": "subject",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "search",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": 0,
                                "default_name": ""
                            }
                        ]
                    },
                    "lastIndexOf": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($subject, $search, $start = NULL)\n  {\n    $res = false;\n    if ( is_array($subject) ){\n      $i = count($subject) - 1;\n      if ( $i ){\n        if ( $start > 0 ){\n          if ( $start > $i ){\n            return -1;\n          }\n          $i = $start;\n        }\n        else if ( $start < 0 ){\n          $i -= $start;\n          if ( $i < 0 ){\n            return -1;\n          }\n        }\n        foreach ( $subject as $s ){\n          if ( ($i <= $start) && ($s === $search) ){\n            $res = $i;\n            break;\n          }\n          else{\n            $i--;\n          }\n        }\n      }\n    }\n    else if ( is_string($subject) ){\n      if ( $start > 0 ){\n        $start = strlen($subject) - (strlen($subject) - $start);\n      }\n      $res = strrpos($subject, $search, $start);\n    }\n    return $res === false ? -1 : $res;\n  }",
                        "startLine": 1949,
                        "doc": {
                            "description": "Searches from end to start",
                            "tags": []
                        },
                        "endLine": 1985,
                        "isUserDefined": true,
                        "numberOfParameters": 3,
                        "numberOfRequiredParameters": 2,
                        "returns": [
                            "int"
                        ],
                        "arguments": [
                            {
                                "name": "subject",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "search",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "start",
                                "position": 2,
                                "type": {},
                                "required": false,
                                "has_default": true,
                                "default": null,
                                "default_name": ""
                            }
                        ]
                    },
                    "output": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function()\n  {\n    $wrote = false;\n    foreach (func_get_args() as $a) {\n      if ($a === null){\n        $st = 'null';\n      }\n      else if ($a === true) {\n        $st = 'true';\n      }\n      else if ($a === false) {\n        $st = 'false';\n      }\n      else if (\\bbn\\Str::isNumber($a)) {\n        $st = $a;\n      }\n      else if (!is_string($a)) {\n        $st = self::getDump($a);\n      }\n      else {\n        $st = $a;\n      }\n      if ($st) {\n        $wrote = true;\n        echo $st.PHP_EOL;\n      }\n    }\n    if ($wrote) {\n      \/\/ob_end_flush();\n    }\n  }",
                        "startLine": 1987,
                        "endLine": 2017,
                        "isUserDefined": true
                    },
                    "__callStatic": {
                        "file": "bbn\\X",
                        "static": true,
                        "public": true,
                        "code": "function($name, $arguments)\n  {\n    if ((strpos($name, 'is_') === 0) && function_exists($name)) {\n      $res = null;\n      foreach ($arguments as $a) {\n        $res = $name($a);\n        if (!$res) {\n          return $res;\n        }\n      }\n      return $res;\n    }\n  }",
                        "startLine": 2019,
                        "endLine": 2031,
                        "isUserDefined": true,
                        "numberOfParameters": 2,
                        "numberOfRequiredParameters": 2,
                        "arguments": [
                            {
                                "name": "name",
                                "position": 0,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            },
                            {
                                "name": "arguments",
                                "position": 1,
                                "type": null,
                                "required": true,
                                "has_default": false,
                                "default": "",
                                "default_name": ""
                            }
                        ]
                    }
                }
            },
            "properties": {
                "_counters": {
                    "static": true,
                    "private": true
                },
                "_last_curl": {
                    "static": true,
                    "private": true
                },
                "_cli": {
                    "static": true,
                    "private": true
                }
            },
            "staticProperties": {
                "_counters": [],
                "_last_curl": null,
                "_cli": false
            },
            "costants": null,
            "numMethods": 68,
            "numProperties": 3,
            "numConstants": 0,
            "numStaticProperties": 3,
            "interfaceNames": [],
            "isInterface": false,
            "traitNames": [],
            "traitAliases": [],
            "isTrait": false,
            "isAbstract": false,
            "isFinal": false,
            "modifiers": 0,
            "parentClass": null,
            "isSubclassOf": false,
            "defaultProperties": {
                "_counters": [],
                "_last_curl": null,
                "_cli": false
            },
            "isIterable": false,
            "extensionName": false,
            "namespaceName": "bbn",
            "shortName": "x"
        }
    },
    "numClass": 13
}