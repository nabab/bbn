/**
 * Created by BBN on 14/02/2017.
 */
(function($, bbn){
  "use strict";

  /**
   * Classic input with normalized appearance
   */
  Vue.component('bbn-table', {
    mixins: [bbn.vue.vueComponent],
    template: '<div class="k-widget bbn-table"><slot>' + bbn._("No table") + '</slot></div>',
    props: {
      currency: {
        type: String
      },
      url: {
        type: String
      },
      take: {
        type: Number
      },
      skip: {
        type: Number
      },
      trClass: {
        type: [String,Function]
      },
      toolbar: {},
      xscroll: {},
      source: {},
      columns: {
        type: Array,
        default: function(){
          return [];
        }
      },
      cfg: {
        type: Object,
        default: function(){
          return {
            columns: [],
            take: 50,
            skip: 0,
            currency: ''
          };
        }
      },
      edit: {
        type: Function
      }
    },
    data: function(){
      return $.extend({
        buttonCls: 'bbn-table-command-',
        buttonDone: 'bbn-table-button',
        selectDone: 'bbn-table-select',
        widgetName: "DataTable",
        toolbarDone: [],
        tmpRow: false,
        originalRow: false,
        editedRow: false,
        editedTr: false
      }, bbn.vue.treatData(this));
    },
    methods: {
      getRow: function(where){
        var vm = this,
            retrieved = false,
            res = this.widget.row(function(idx, data, tr){
              if ( !retrieved ){
                var cfg = {
                  idx: idx,
                  data: data,
                  tr: tr
                };
                switch ( typeof(where) ){
                  case 'object':
                    // DOM Element
                    if ( bbn.fn.isDom(where) ){
                      if ( tr === where ){
                        retrieved = cfg;
                        return true;
                      }
                      return false;
                    }
                    else{
                      var ok = true;
                      for ( var n in where ){
                        if ( where[n] !== data[n] ){
                          ok = false;
                        }
                      }
                      if ( ok ){
                        retrieved = cfg;
                      }
                      return ok;
                    }
                    break;

                  case 'number':
                    if ( where === idx ){
                      retrieved = cfg;
                      return true;
                    }
                    return false;
                    break;
                }
              }
            });
        if ( retrieved ){
          retrieved.obj = res;
        }
        return retrieved;
      },
      defaultDataSet: function(data){
        var res = {},
            done = [];
        $.each(this.columns, function(i, a){
          if ( a.field && ($.inArray(a.field, done) === -1) ){
            done.push(a.field);
            res[a.field] = a.default !== undefined ? a.default : '';

          }
        });
        return $.extend(res, data ? data : {});
      },
      add: function(data){
        this.widget.rows().add([data]);
        this.widget.draw();
      },
      update: function(where, data, update){
        bbn.fn.log(where);
        var res = this.getRow(where);
        bbn.fn.log("UPDATE", res, where);
        if ( res ){
          if ( update ){
            data = $.extend({}, res.obj.data(), data);
          }
          res.obj.data(data);
        }
      },
      editRow: function(where){
        let vm = this,
            row = vm.getRow(where);
        bbn.fn.log("editRow");
        if ( row ){
          vm.editedRow = row.data;
        }
      },
      remove: function(where){
        var vm = this,
            res = this.getRow(where);
        if ( res ){
          res.obj.remove();
          vm.widget.draw();
        }
      },
      addTmp: function(data){
        var vm = this;
        if ( vm.tmpRow ){
          vm.removeTmp();
        }
        vm.tmpRow = vm.widget.rows.add([vm.defaultDataSet(data)]);
        vm.widget.draw();
      },
      removeTmp: function(){
        var vm = this;
        if ( vm.tmpRow ){
          vm.tmpRow.remove();
          vm.tmpRow = false;
          vm.widget.draw();
        }
      },
      editTmp: function(data, update){
        if ( this.tmpRow ){
          if ( update ){
            data = $.extend({}, this.tmpRow.data(), data);
          }
          this.tmpRow.data(data);
        }
      },
      getConfig: function(){
        var
          /**
           * @type {bbn-table}
           */
          vm = this,
          /**
           * @type {HTMLElement}
           */
          $ele = $(this.$el),
          /**
           * Number of fixed columns on the left
           * @type {number}
           */
          fixedLeft = 0,
          /**
           * Number of fixed columns on the right
           * @type {number}
           */
          fixedRight = 0,
          /**
           * When false, will stop to look for fixed left columns
           * @type {boolean}
           */
          fixed = true,
          /**
           * Columns configuration
           * @type {[]}
           */
          columns = $.map(vm.columns, function(a, i){
            bbn.fn.log(a);
            if ( a.fixed && fixed ){
              fixedLeft++;
            }
            else if ( !a.fixed && fixed ){
              fixed = false;
            }
            else if ( a.fixed ){
              fixedRight++;
            }
            else if ( fixedRight ){
              fixedRight = 0;
            }
            var r = {
              data: a.field
            };
            if ( a.cls ){
              r.className = a.cls;
            }
            if ( a.title ){
              r.title = a.title;
            }
            if ( a.source ){
              var obj = false,
                  v = vm;
              while ( v ){
                if ( v[a.source] !== undefined ){
                  obj = v;
                  break;
                }
                else{
                  v = v.$parent;
                }
              }
              if ( obj ){
                r.render = function(data, type, row){
                  if ( data ){
                    if ( $.isArray(obj[a.source]) ){
                      return bbn.fn.get_field(obj[a.source], 'value', data, 'text');
                    }
                    else if ( obj[a.source][data] !== undefined ){
                      return obj[a.source][data];
                    }
                    return bbn._("<em>?</em>");
                  }
                  return "<em>-</em>";
                }
              }
            }
            else if ( a.type ){
              switch ( a.type ){
                case "date":
                  if ( a.format ){
                    r.render = function(data){
                      return data ? (new moment(data)).format(a.format) : '-';
                    };
                  }
                  r.render = function(data){
                    return data ? bbn.fn.fdate(data) : '-';
                  };
                  break;
                case "email":
                  r.render = function(data, type, row){
                    return data ? '<a href="mailto:' + data + '">' + data + '</a>' : '-';
                  };
                  break;
                case "url":
                  r.render = function(data, type, row){
                    return data ? '<a href="' + data + '">' + data + '</a>' : '-';
                  };
                  break;
                case "number":
                  r.render = function(data, type, row){
                    return data ? kendo.toString(parseInt(data), "n0") + ( a.unit || vm.unit ? " " + ( a.unit || vm.unit ) : "") : '-';
                  };
                  break;
                case "money":
                  r.render = function(data, type, row){
                    return data ?
                      bbn.fn.money(data) + (
                        a.unit || vm.currency ?
                          " " + ( a.unit || vm.currency )
                          : ""
                      )
                      : '-';
                  };
                  break;
                case "bool":
                  r.render = function(data, type, row){
                    return data && (data !== 'false') && (data !== '0') ? bbn._("Yes") : bbn._("No");
                  };
                  break;
              }
            }
            else if ( a.buttons && (typeof(a.buttons) === 'string') ){
              if ( $.isFunction(vm.$parent[a.buttons]) ){
                r.render = function (data, type, row){
                  var buttons = vm.$parent[a.buttons](row),
                      st = '';
                  if ( $.isArray(buttons) ){
                    $.each(buttons, function(k, button){
                      if ( $.isFunction(vm.$parent[button.command]) || $.isFunction(vm[button.command]) ){
                        st += '<button class="k-button ' + vm.buttonCls + button.command;
                        st += button.cls ? " " + button.cls : '';
                        st += '"';
                        st += button.text ? ' title="' + button.text + '"' : '';
                        st += ' data="' + ( a.field ? a.field : i ) + '"';
                        st += ' data-command="' + ( button.command ? button.command : i ) + '"';
                        st += '>';
                        st += button.icon ? ' <i class="' + button.icon + '"> </i> ' : '';
                        st += button.text && !button.notext ? button.text : '';
                        st += '</button>';
                      }
                    });
                  }
                  return st;
                };
              }
              else {
                var buttons = false;
                try{
                  buttons = eval(a.buttons);
                }
                catch (e){
                  bbn.fn.log("Error parsing buttons", a.buttons, e);
                }
                if ( $.isArray(buttons) ){
                  var st = '';
                  $.each(buttons, function(k, button){
                    if ( $.isFunction(vm.$parent[button.command]) || $.isFunction(vm[button.command]) ){
                      st += '<button class="k-button ' + vm.buttonCls + button.command;
                      st += button.cls ? " " + button.cls : '';
                      st += '"';
                      st += button.text ? ' title="' + button.text + '"' : '';
                      st += ' data="' + ( a.field ? a.field : i ) + '"';
                      st += ' data-command="' + ( button.command ? button.command : i ) + '"';
                      st += '>';
                      st += button.icon ? ' <i class="' + button.icon + '"> </i> ' : '';
                      st += button.text && !button.notext ? button.text : '';
                      st += '</button>';
                    }
                  });
                  r.render = function (data, type, row){
                    return st;
                  };
                }
              }
            }
            else if ( a.render ){
              if ( $.isFunction(a.render) ){
                r.render = a.render;
              }
              else{
                var v = vm;
                while ( v ){
                  if ( v[a.render] && $.isFunction(v[a.render]) ){
                    r.render = function(data, type, row){
                      return v[a.render](data, a.field, row);
                    };
                    break;
                  }
                  else{
                    v = v.$parent;
                  }
                }
              }
              if ( !r.render ){
                r.render = function(data, type, row){
                  var tmp = '(function(',
                      i = 0,
                      num = bbn.fn.countProperties(row);
                  for ( var n in row ){
                    tmp += n;
                    i++;
                    if ( i !== num ){
                      tmp += ', ';
                    }
                    else{
                      tmp += '){ return (' + a.render + '); })(';
                      i = 0;
                      for ( var n in row ){
                        if ( typeof(row[n]) === 'string' ){
                          tmp += '"' + row[n].replace(/\"/g, '\\"') + '"';
                        }
                        else if ( typeof(row[n]) === "object" ){
                          tmp += JSON.stringify(row[n]);
                        }
                        else if ( row[n] === null ){
                          tmp += 'null'
                        }
                        else if ( row[n] === true ){
                          tmp += 'true'
                        }
                        else if ( row[n] === false ){
                          tmp += 'false'
                        }
                        else if ( row[n] === 0 ){
                          tmp += '0';
                        }
                        else{
                          tmp += row[n];
                        }
                        i++;

                        if ( i !== num ){
                          tmp += ', ';
                        }
                        else{
                          tmp += ');';
                        }
                      }
                      bbn.fn.log(tmp);
                    }
                  }
                  //bbn.fn.log(tmp);
                  return eval(tmp);
                }
              }
            }
            return r;
          });
        /**
         * The widget configuration
         * @type {{pageLength, asStripeClasses: [*], scrollY: number, scrollX: boolean, scrollCollapse: boolean, drawCallback: drawCallback}}
         */
        var cfg = {
          /*
           info: false,
           paging: false,
           searching: false,
           */
          /** @property Number of records to show */
          pageLength: this.cfg.take,
          //lengthChange: false,
          /** @property Classes added on columns */
          asStripeClasses: ["", "k-alt"],
          /** @property The height of the table's body */
          scrollY: 300,
          /** @property  */
          deferRender: true,
          /** @property Do not expand cells to the whole table's height */
          scrollCollapse: true,
          /** @property Resize and restyle functions after draw */
          drawCallback: function(settings){
            bbn.fn.log("settings", settings);
            // Be sure all is drawn
            // We need to resize the table to fit the container
            var h = $ele.height();
            $ele.children().height(h);
            // Kendo styling
            $ele.find(".dataTables_filter input").addClass("k-textbox");
            $ele.find(".DTFC_Blocker:first").addClass("k-header");
            // Height calculation
            $ele.children().children(".fg-toolbar").each(function(){
              $(this).find("select:visible:not('." + vm.selectDone +"')")
                .addClass(vm.selectDone)
                .kendoDropDownList();
              h -= $(this).outerHeight(true) || 0;
            });
            h -= ($ele.find(".dataTables_scrollHead:first").outerHeight(true) || 0);
            h -= ($ele.find(".dataTables_scrollFoot:first").outerHeight(true) || 0);
            h = Math.round(h);
            if ( h && (Math.abs(h - settings.oScroll.sY) > 10) ){
              settings.oScroll.sY = h;
              if ( vm.widget ){
                vm.widget.draw();
              }
              bbn.fn.log("H", h);
              return false;
            }

            // Toolbar
            if ( vm.$options.propsData.toolbar ){
              var tb = vm.$options.propsData.toolbar,
                  tbEle = $ele.find(".fg-toolbar:first");
              if ( !$.isArray(tb) && (typeof(tb) === 'object') ){
                tb = [tb];
              }
              if ( $.isArray(tb) ){
                var target = $('<div class="bbn-table-toolbar"/>').prependTo(tbEle);
                $.each(tb, function(i, a){
                  var tmp = JSON.stringify(a);
                  if ( ($.inArray(tmp, vm.toolbarDone) === -1) && a.text && a.click ){
                    vm.toolbarDone.push(tmp);
                    target.append(
                      $('<button class="k-button">' +
                        ( a.icon ? '<i class="' + a.icon + '" title="' + a.text + '"></i> &nbsp; ' : '' ) +
                        ( a.notext ? '' : a.text ) +
                        '</button>').click(function(){
                        if ( $.isFunction(a.click) ){
                          return a.click(vm);
                        }
                        else if ( typeof(a.click) === 'string' ){
                          if ( $.isFunction(vm.$parent[a.click]) ){
                            return vm.$parent[a.click](vm);
                          }
                          // Otherwise we check if there is a default function defined by the component
                          else if ( $.isFunction(vm[a.click]) ){
                            return vm[a.click](vm);
                          }
                        }
                      })
                    )
                  }
                })
              }
            }

            // Buttons
            $(settings.nScrollBody)
            //.add($(settings.nScrollBody).siblings())
              .height(h)
              .css({maxHeight: h + "px"});
            // Buttons actions settings (only once per button)
            $("table:first > tbody > tr > td > button[class^='" + vm.buttonCls + "'],button[class*='" + vm.buttonCls + "']", vm.$el)
              .not("." + vm.buttonDone)
              .addClass(vm.buttonDone)
              .click(function(){
                let $$ = $(this),
                    fn = $$.attr("data-command");

                if ( fn ){
                  var cell = $$.closest("td"),
                      idx = $$.attr("data"),
                      row = cell.closest("tr"),
                      data = vm.widget.row(row).data();
                  if ( data ){
                    // First we check if it exists from the parent Vue object
                    if ( $.isFunction(vm.$parent[fn]) ){
                      return vm.$parent[fn](data[idx], idx, data);
                    }
                    // Otherwise we check if there is a default function defined by the component
                    else if ( $.isFunction(vm[fn]) ){
                      return vm[fn](data);
                    }
                  }
                }
              });
          }
        };
        if ( vm.$options.propsData.source ){
          if ( typeof(vm.$options.propsData.source) === 'string' ){
            cfg.processing = true;
            cfg.serverSide =  true;
            cfg.ajax = {
              url: vm.$options.propsData.source,
              type: "POST",
              data: {
                appui: 'public',
                take: this.cfg.take,
                skip: this.cfg.skip
              }
            };
          }
          else if ( $.isArray(vm.$options.propsData.source) ){
            cfg.data = JSON.parse(JSON.stringify(vm.$options.propsData.source));
          }
          else if ( (typeof vm.$options.propsData.source === 'object') && $.isArray(vm.$options.propsData.source.data) ){
            cfg.data = JSON.parse(JSON.stringify(vm.$options.propsData.source.data));
          }
        }
        if ( vm.$options.propsData.toolbar === false ){
          cfg.sDom = "t";
        }
        if ( vm.$options.propsData.xscroll ){
          cfg.scrollX = true;
        }
        if ( columns.length ){
          cfg.columns = columns;
        }
        if ( fixedLeft ){
          cfg.fixedColumns = {
            leftColumns: fixedLeft
          }
        }
        if ( fixedRight ){
          if ( !cfg.fixedColumns ){
            cfg.fixedColumns = {};
          }
          cfg.fixedColumns.rightColumns = fixedRight;
        }
        cfg.createdRow = function(row, data, dataIndex){
          if ( vm.$options.propsData.trClass ){
            bbn.fn.log("trClass : ", vm.$options.propsData.trClass);
            if ( $.isFunction(vm.$options.propsData.trClass) ){
              var cls = vm.$options.propsData.trClass(data);
              if ( cls ){
                $(row).addClass(cls);
              }
            }
            else{
              $(row).addClass(vm.$options.propsData.trClass);
            }
          }
          if ( vm.$options.propsData.trCSS ){
            bbn.fn.log("trStyle : ", vm.$options.propsData.trCSS);
            if ( $.isFunction(vm.$options.propsData.trCSS) ){
              var cls = vm.$options.propsData.trCSS(data);
              if ( cls && (cls instanceof Object) ){
                $(row).css(cls);
              }
            }
            else if ( vm.$options.propsData.trCSS instanceof Object ){
              $(row).css(vm.$options.propsData.trCSS);
            }
          }
          setTimeout(() => {
            new Vue({
              el: row,
              data: data
            });
          }, 0);
        };
        return cfg;
      },
    },
    mounted: function(){
      var vm = this,
          $ele = $(this.$el);

      if ( !$ele.find("table:first > tbody > tr").length ){
        $ele.find("table:first > thead > tr:last > th").each(function(i, col){
          vm.columns[i] = bbn.fn.getAttributes(col);
          if ( vm.columns[i].style ){
            delete vm.columns[i].style;
          }
          if ( vm.columns[i].class ){
            delete vm.columns[i].class;
          }
        });
      }
      vm.widgetCfg = vm.getConfig();
      vm.widget = $ele.children("table:first").addClass("k-grid").DataTable(vm.widgetCfg);
      vm.$nextTick(function(){
        vm.widget.draw();
      })
    },
    watch: {
      editedRow: {
        deep: true,
        handler(newVal, oldVal){
          if ( typeof(newVal) === 'object' ){
            var vm = this,
                change = {};
            if ( oldVal === false ){
              let row = vm.getRow(newVal);
              if ( row ){
                if ( vm.edit && $.isFunction(vm.edit) ){
                  vm.edit(newVal, row.index, vm);
                }
                vm.originalRow = $.extend({}, row.data);
                vm.editedTr = row;
              }
              vm.$emit("edit", newVal, row.index, vm);
            }
            else if ( vm.originalRow !== false ){
              for ( var n in vm.originalRow ){
                if ( newVal[n] !== vm.originalRow[n] ){
                  change[n] = newVal[n];
                }
              }
              if ( bbn.fn.countProperties(change) ){
                vm.update(vm.editedTr.tr, change, true);
              }
              for ( var n in change ){
                vm.$set(vm.originalRow, n, newVal[n]);
              }
            }
          }
        }
      },
      source: function(val){
        var vm = this,
            data = (typeof val === 'object') && $.isArray(val.data) ? val.data : ( $.isArray(val) ? val : []);
        vm.$nextTick(function(){
          if ( this.widget ){
            this.widget.clear().rows.add(data);
            this.widget.draw();
          }
        })
      },
      /*cfg: function(){

       }*/
    }
  });

})(jQuery, bbn);
