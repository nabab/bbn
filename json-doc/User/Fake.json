{
    "doc": {
        "description": "A user authentication Class\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Authentication",
            "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
            "version": "0.2r89",
            "todo": "Implement Cache for session requests' results?"
        }
    },
    "name": "bbn\\User\\Fake",
    "namespace": true,
    "realName": "Fake",
    "realNamespace": "bbn\\User",
    "traits": [
        "bbn\\User\\Common"
    ],
    "interfaces": {
        "bbn\\User\\Implementor": {
            "name": "bbn\\User\\Implementor"
        }
    },
    "fileName": "\/User\/Fake.php",
    "startLine": 31,
    "endLine": 505,
    "numMethods": 82,
    "numProperties": 20,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [
        "bbn\\User\\Implementor"
    ],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": true,
    "modifiers": 32,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "realUser": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_mailer": null,
        "auth": false,
        "path": null,
        "tmp_path": null,
        "id": null,
        "data": [],
        "id_group": null,
        "alert": null,
        "cfg": null,
        "db": null,
        "prev_time": null,
        "class_cfg": null,
        "api_request_output": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\User",
    "shortName": "Fake",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "User constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct($id, User $usr)\n  {\n    \/\/$this->initClassCfg([]);\n    $this->realUser = $usr;\n    $this->class_cfg = $this->realUser->getClassConfig();\n    $f = $this->class_cfg['arch']['users'];\n    $this->db = $this->realUser->getDbInstance();\n    $this->id = $id;\n    $this->id_group = $this->db->selectOne($this->class_cfg['table'], $f['id_group'], [\n      $f['id'] => $id\n    ]);\n    $this->auth = true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 45,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "usr",
                    "position": 1,
                    "type": "bbn\\User",
                    "type_arr": [
                        "bbn\\User"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "User constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "String",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "User",
                        "name": "$usr"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * User constructor.\n   *\n   * @param String $db\n   * @param User   $usr\n   *\/"
        },
        "isReset": {
            "name": "isReset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isReset(): bool\n  {\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 60,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isReset",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "getSalt": {
            "name": "getSalt",
            "summary": "Returns the salt string kept in session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSalt(): ?string\n  {\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 71,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getSalt",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the salt string kept in session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the salt string kept in session.\n   *\n   * @return null|string\n   *\/"
        },
        "checkSalt": {
            "name": "checkSalt",
            "summary": "Confronts the given string with the salt string kept in session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkSalt($salt): bool\n  {\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 82,
            "endLine": 85,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "checkSalt",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "salt",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Confronts the given string with the salt string kept in session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Confronts the given string with the salt string kept in session.\n   *\n   * @return bool\n   *\/"
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "Returns the current user's configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfg($attr = '')\n  {\n    return $attr ? '' : [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 94,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the current user's configuration.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$attr"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current user's configuration.\n   *\n   * @param string $attr\n   * @return mixed\n   *\/"
        },
        "setData": {
            "name": "setData",
            "summary": "Stores or deletes data in the object for the current authenticated user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setData($index, $data = null): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 108,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setData",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "index",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the index to set, or an associative array of key\/values"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The data to store; if null the given index will be unset"
                }
            ],
            "doc": {
                "description": "Stores or deletes data in the object for the current authenticated user.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$index",
                        "description": "The name of the index to set, or an associative array of key\/values"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$data",
                        "description": "The data to store; if null the given index will be unset"
                    }
                ],
                "return": "Chainable"
            },
            "comments": "  \/**\n   * Stores or deletes data in the object for the current authenticated user.\n   *\n   * @param string|array $index The name of the index to set, or an associative array of key\/values\n   * @param mixed        $data  The data to store; if null the given index will be unset\n   *\n   * @return self Chainable\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the current configuration of this very class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg(): array\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 119,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the current configuration of this very class.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current configuration of this very class.\n   *\n   * @return array\n   *\/"
        },
        "getTables": {
            "name": "getTables",
            "summary": "Returns the list of tables used by the current class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTables(): ?array\n  {\n    if (!empty($this->class_cfg)) {\n      return $this->class_cfg['tables'];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 129,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTables",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of tables used by the current class.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of tables used by the current class.\n   * @return array\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the list of fields of the given table, and if empty for each table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields(string $table = ''): ?array\n  {\n    if (!empty($this->class_cfg)) {\n      if ($table) {\n        return $this->class_cfg['arch'][$table] ?? null;\n      }\n\n      return $this->class_cfg['arch'];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 145,
            "endLine": 156,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the list of fields of the given table, and if empty for each table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of fields of the given table, and if empty for each table.\n   *\n   * @param string $table\n   * @return array|null\n   *\/"
        },
        "updateInfo": {
            "name": "updateInfo",
            "summary": "Changes the data in the user's table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateInfo(array $d): bool\n  {\n    \/*\n    if ($this->checkSession()) {\n      $update = [];\n      foreach ($d as $key => $val) {\n        if (($key !== $this->fields['id'])\n          && ($key !== $this->fields['cfg'])\n          && ($key !== 'auth')\n          && ($key !== 'admin')\n          && ($key !== 'dev')\n          && ($key !== 'pass')\n        ) {\n          $update[$key] = $val;\n        }\n      }\n\n      if (\\count($update) > 0) {\n        $r = (bool)$this->update($this->getId(), $update, true);\n        \/** @todo Why did I do this?? * \/\n        if ($r) {\n          \/** @todo WTF?? * \/\n          $this->setSession(['cfg' => false]);\n          $this->_user_info();\n        }\n      }\n      return $r ?? false;\n    }\n    *\/\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 165,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "updateInfo",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new data"
                }
            ],
            "doc": {
                "description": "Changes the data in the user's table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$d",
                        "description": "The new data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the data in the user's table.\n   *\n   * @param array $d The new data\n   * @return bool\n   *\/"
        },
        "getPassword": {
            "name": "getPassword",
            "summary": "Encrypts the given string to match the password.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPassword(string $st): string\n  {\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 205,
            "endLine": 208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPassword",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Encrypts the given string to match the password.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Encrypts the given string to match the password.\n   *\n   * @param string $st\n   * @return string\n   *\/"
        },
        "isJustLogin": {
            "name": "isJustLogin",
            "summary": "Returns true after the log in moment.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isJustLogin(): bool\n  {\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 216,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isJustLogin",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true after the log in moment.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true after the log in moment.\n   *\n   * @return bool\n   *\/"
        },
        "setSession": {
            "name": "setSession",
            "summary": "Sets the given attribute(s) in the user's session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setSession($attr): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 227,
            "endLine": 230,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setSession",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the given attribute(s) in the user's session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the given attribute(s) in the user's session.\n   *\n   * @return self\n   *\/"
        },
        "unsetSession": {
            "name": "unsetSession",
            "summary": "Unsets the given attribute(s) in the user's session if exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetSession(): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 238,
            "endLine": 241,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "unsetSession",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Unsets the given attribute(s) in the user's session if exists.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Unsets the given attribute(s) in the user's session if exists.\n   *\n   * @return self\n   *\/"
        },
        "getSession": {
            "name": "getSession",
            "summary": "Returns session property from the session's user array (userIndex).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSession($attr = null)\n  {\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 250,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSession",
            "returns": [],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The property to get"
                }
            ],
            "doc": {
                "description": "Returns session property from the session's user array (userIndex).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "description": "The property to get"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns session property from the session's user array (userIndex).\n   *\n   * @param null|string The property to get\n   * @return mixed\n   *\/"
        },
        "getOsession": {
            "name": "getOsession",
            "summary": "Gets an attribute or the whole the \"session\" part of the session  (sessIndex).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOsession($attr = null)\n  {\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 262,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOsession",
            "returns": [],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Name of the attribute to get."
                }
            ],
            "doc": {
                "description": "Gets an attribute or the whole the \"session\" part of the session  (sessIndex).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$attr",
                        "description": "Name of the attribute to get."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets an attribute or the whole the \"session\" part of the session  (sessIndex).\n   *\n   * @param string|null $attr Name of the attribute to get.\n   * @return mixed|null\n   *\/"
        },
        "setOsession": {
            "name": "setOsession",
            "summary": "Sets an attribute the \"session\" part of the session (sessIndex).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setOsession(): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 273,
            "endLine": 276,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setOsession",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Sets an attribute the \"session\" part of the session (sessIndex).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Sets an attribute the \"session\" part of the session (sessIndex).\n   *\n   * @return self\n   *\/"
        },
        "hasSession": {
            "name": "hasSession",
            "summary": "Checks if the given attribute exists in the user's session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSession($attr): bool\n  {\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 284,
            "endLine": 287,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasSession",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the given attribute exists in the user's session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the given attribute exists in the user's session.\n   *\n   * @return bool\n   *\/"
        },
        "updateActivity": {
            "name": "updateActivity",
            "summary": "Updates last activity value for the session in database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateActivity(): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 295,
            "endLine": 298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "updateActivity",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Updates last activity value for the session in database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Updates last activity value for the session in database.\n   *\n   * @return self\n   *\/"
        },
        "saveSession": {
            "name": "saveSession",
            "summary": "Saves the session config in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function saveSession(bool $force = false): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 307,
            "endLine": 310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "saveSession",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "force",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Saves the session config in the database.\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Use it only when needed!"
                }
            },
            "comments": "  \/**\n   * Saves the session config in the database.\n   *\n   * @todo Use it only when needed!\n   * @return self\n   *\/"
        },
        "closeSession": {
            "name": "closeSession",
            "summary": "Closes the session in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function closeSession($with_session = false): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 319,
            "endLine": 322,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "closeSession",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "with_session",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "session If true deletes also the session information"
                }
            ],
            "doc": {
                "description": "Closes the session in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "session If true deletes also the session information"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Closes the session in the database.\n   *\n   * @param bool $with_session If true deletes also the session information\n   * @return self\n   *\/"
        },
        "checkAttempts": {
            "name": "checkAttempts",
            "summary": "Returns false if the max number of connections attempts has been reached",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkAttempts(): bool\n  {\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 329,
            "endLine": 332,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkAttempts",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns false if the max number of connections attempts has been reached\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns false if the max number of connections attempts has been reached\n   * @return bool\n   *\/"
        },
        "saveCfg": {
            "name": "saveCfg",
            "summary": "Saves the user's config in the cfg field of the users' table.",
            "description": "return self",
            "description_parts": [
                {
                    "type": "text",
                    "content": "return self"
                }
            ],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function saveCfg(): self\n  {\n    if ($this->check()) {\n      $this->db->update(\n        $this->class_cfg['tables']['users'],\n        [$this->fields['cfg'] => json_encode($this->cfg)],\n        [$this->fields['id'] => $this->id]\n      );\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 340,
            "endLine": 351,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "saveCfg",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Saves the user's config in the cfg field of the users' table.\n\nreturn self",
                "tags": []
            },
            "comments": "  \/**\n   * Saves the user's config in the cfg field of the users' table.\n   *\n   * return self\n   *\/"
        },
        "setCfg": {
            "name": "setCfg",
            "summary": "Saves the attribute(s) values into the session config.",
            "description": "return self",
            "description_parts": [
                {
                    "type": "text",
                    "content": "return self"
                }
            ],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCfg($attr): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 359,
            "endLine": 362,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setCfg",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Saves the attribute(s) values into the session config.\n\nreturn self",
                "tags": []
            },
            "comments": "  \/**\n   * Saves the attribute(s) values into the session config.\n   *\n   * return self\n   *\/"
        },
        "unsetCfg": {
            "name": "unsetCfg",
            "summary": "Unsets the attribute(s) in the session config.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetCfg($attr): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 371,
            "endLine": 374,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetCfg",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Unsets the attribute(s) in the session config.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$attr"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Unsets the attribute(s) in the session config.\n   *\n   * @param $attr\n   * @return self\n   *\/"
        },
        "refreshInfo": {
            "name": "refreshInfo",
            "summary": "Regathers information from the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function refreshInfo(): self\n  {\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 382,
            "endLine": 385,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "refreshInfo",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Regathers information from the database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Regathers information from the database.\n   *\n   * @return self\n   *\/"
        },
        "checkSession": {
            "name": "checkSession",
            "summary": "Retrieves user's info from session if needed and checks if authenticated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkSession(): bool\n  {\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 393,
            "endLine": 396,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkSession",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Retrieves user's info from session if needed and checks if authenticated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves user's info from session if needed and checks if authenticated.\n   *\n   * @return bool\n   *\/"
        },
        "isAdmin": {
            "name": "isAdmin",
            "summary": "Checks whether the user is an admin or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAdmin(): bool\n  {\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 404,
            "endLine": 407,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isAdmin",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks whether the user is an admin or not.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the user is an admin or not.\n   *\n   * @return bool\n   *\/"
        },
        "isDev": {
            "name": "isDev",
            "summary": "Checks whether the user is an (admin or developer) or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDev(): bool\n  {\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 415,
            "endLine": 418,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDev",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks whether the user is an (admin or developer) or not.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the user is an (admin or developer) or not.\n   *\n   * @return bool\n   *\/"
        },
        "getManager": {
            "name": "getManager",
            "summary": "Gets a bbn\\User\\Manager instance.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getManager(): Manager\n  {\n    return new Manager($this->realUser);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 426,
            "endLine": 429,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getManager",
            "returns": [
                "bbn\\User\\Manager"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets a bbn\\User\\Manager instance.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a bbn\\User\\Manager instance.\n   *\n   * @return User\\Manager\n   *\/"
        },
        "setPassword": {
            "name": "setPassword",
            "summary": "Change the password in the database after checking the current one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setPassword(string $old_pass, string $new_pass): bool\n  {\n    return $this->forcePassword($new_pass);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 439,
            "endLine": 442,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setPassword",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "old_pass",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "pass The current password"
                },
                {
                    "name": "new_pass",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "pass The new password"
                }
            ],
            "doc": {
                "description": "Change the password in the database after checking the current one.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "pass The current password"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "pass The new password"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Change the password in the database after checking the current one.\n   *\n   * @param string $old_pass The current password\n   * @param string $new_pass The new password\n   * @return bool\n   *\/"
        },
        "getName": {
            "name": "getName",
            "summary": "Returns the full name of the given user or the current one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getName($usr = null): ?string\n  {\n    if ($this->auth) {\n      if (\\is_null($usr)) {\n        $usr = $this->id;\n      }\n\n      if (Str::isUid($usr)) {\n        $mgr = $this->getManager();\n        $usr = $mgr->getUser($usr);\n      }\n\n      if (isset($this->class_cfg['show'], $usr[$this->class_cfg['show']])) {\n        return $usr[$this->class_cfg['show']];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 450,
            "endLine": 468,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "usr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the full name of the given user or the current one.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full name of the given user or the current one.\n   *\n   * @return string|null\n   *\/"
        },
        "addToken": {
            "name": "addToken",
            "summary": "Generates and insert a token in database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToken(): ?string\n  {\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 476,
            "endLine": 479,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addToken",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Generates and insert a token in database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Generates and insert a token in database.\n   *\n   * @return string|null\n   *\/"
        },
        "getEmail": {
            "name": "getEmail",
            "summary": "Returns the email of the given user or the current one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Fake.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEmail($usr = null): ?string\n  {\n    if ($this->auth) {\n      if (\\is_null($usr)) {\n        $usr = $this->getSession();\n      } elseif (str::isUid($usr) && ($mgr = $this->getManager())) {\n        $usr = $mgr->getUser($usr);\n      }\n\n      if (isset($this->fields['email'], $usr[$this->fields['email']])) {\n        return $usr[$this->fields['email']];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 487,
            "endLine": 502,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getEmail",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "usr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the email of the given user or the current one.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the email of the given user or the current one.\n   *\n   * @return string|null\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks if an error has been thrown or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    return $this->getError() ? false : true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\User\\Common",
            "startLine": 230,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks if an error has been thrown or not.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if an error has been thrown or not.\n   *\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "Sets the error property once and for all.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null): self\n  {\n    $this->log([$err, $this->class_cfg['errors'][$err] ?? null], 'userError');\n    if (!$this->error) {\n      $this->error = $err;\n    }\n\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\User\\Common",
            "startLine": 421,
            "endLine": 429,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "error code"
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the error property once and for all.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$err",
                        "description": "error code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the error property once and for all.\n   *\n   * @param int $err error code\n   * @return self\n   *\/"
        },
        "getError": {
            "name": "getError",
            "summary": "Returns the first error in an array with the code and description.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError(): ?array\n  {\n    if ($this->error) {\n      return [\n        'code' => $this->error,\n        'text' => $this->class_cfg['errors'][$this->error]\n      ];\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": "bbn\\User\\Common",
            "startLine": 437,
            "endLine": 447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the first error in an array with the code and description.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the first error in an array with the code and description.\n   *\n   * @return null|array\n   *\/"
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "isVerifyPhoneNumberRequest": {
            "name": "isVerifyPhoneNumberRequest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isVerifyPhoneNumberRequest(array $params)\n  {\n    $f = $this->class_cfg['fields'];\n\n    return isset($params[$f['phone_number']], $params[$f['phone_verification_code']], $params[$f['device_uid']], $params[$f['token']])\n      && $params[$f['action']] === 'verifyCode';\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 65,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isVerifyPhoneNumberRequest",
            "returns": [],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isPhoneNumberCodeSendingRequest": {
            "name": "isPhoneNumberCodeSendingRequest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isPhoneNumberCodeSendingRequest(array $params)\n  {\n    $f = $this->class_cfg['fields'];\n\n    return isset($params[$f['phone_number']], $params[$f['device_uid']], $params[$f['token']])\n      && $params[$f['action']] === 'sendSmsCode';\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 73,
            "endLine": 79,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isPhoneNumberCodeSendingRequest",
            "returns": [],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isTokenLoginRequest": {
            "name": "isTokenLoginRequest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isTokenLoginRequest(array $params): bool\n  {\n    $f = $this->class_cfg['fields'];\n    return X::hasProps($params, [$f['token'], $f['device_uid']], true);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 81,
            "endLine": 85,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isTokenLoginRequest",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isToken": {
            "name": "isToken",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isToken(): bool\n  {\n    return (bool)$this->class_cfg['tables']['api_tokens'];\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 87,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isToken",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "getData": {
            "name": "getData",
            "summary": "Retrieves data stored in the data property of the user, only if authenticated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getData(string $idx)\n  {\n    if (!$this->auth) {\n      throw new Exception(X::_(\"Impossible to retrieve data for an authenticated user\"));\n    }\n\n    return $this->data[$idx] ?? null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 100,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getData",
            "returns": [],
            "arguments": [
                {
                    "name": "idx",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves data stored in the data property of the user, only if authenticated.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$idx"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves data stored in the data property of the user, only if authenticated.\n   *\n   * @param string $idx\n   *\n   * @return void\n   *\/"
        },
        "getPath": {
            "name": "getPath",
            "summary": "Returns the directory path for the user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPath(): ?string\n  {\n    return $this->path;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 115,
            "endLine": 118,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the directory path for the user.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the directory path for the user.\n   *\n   * @return string\n   *\/"
        },
        "getTmpDir": {
            "name": "getTmpDir",
            "summary": "Returns the tmp directory path for the user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTmpDir(): ?string\n  {\n    return $this->tmp_path;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 126,
            "endLine": 129,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTmpDir",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the tmp directory path for the user.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the tmp directory path for the user.\n   *\n   * @return string\n   *\/"
        },
        "isAuth": {
            "name": "isAuth",
            "summary": "Returns true if authenticated false otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAuth()\n  {\n    return $this->auth;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 137,
            "endLine": 140,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isAuth",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns true if authenticated false otherwise.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if authenticated false otherwise.\n   *\n   * @return bool\n   *\/"
        },
        "getId": {
            "name": "getId",
            "summary": "Returns the user's ID if there is no error.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getId(): ?string\n  {\n    if ($this->check()) {\n      return $this->id;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 148,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the user's ID if there is no error.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the user's ID if there is no error.\n   *\n   * @return null|string\n   *\/"
        },
        "getGroup": {
            "name": "getGroup",
            "summary": "Returns the user's group's ID if there is no error.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGroup(): ?string\n  {\n    if ($this->check()) {\n      return $this->id_group;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 163,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getGroup",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the user's group's ID if there is no error.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the user's group's ID if there is no error.\n   *\n   * @return null|string\n   *\/"
        },
        "expireHotlink": {
            "name": "expireHotlink",
            "summary": "Expires an hotlink by setting the expire column to now.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function expireHotlink($id): int\n  {\n    if ($this->check()) {\n      return $this->db->update(\n        $this->class_cfg['tables']['hotlinks'],\n        [$this->class_cfg['arch']['hotlinks']['expire'] => date('Y-m-d H:i:s')],\n        [$this->class_cfg['arch']['hotlinks']['id'] => $id]\n      );\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 178,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "expireHotlink",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Expires an hotlink by setting the expire column to now.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Expires an hotlink by setting the expire column to now.\n   *\n   * @return int\n   *\/"
        },
        "getIdFromMagicString": {
            "name": "getIdFromMagicString",
            "summary": "Retrieves a user's ID from the hotlink's magic string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdFromMagicString(string $id, string $key): ?string\n  {\n    if ($val = $this->db->rselect(\n      $this->class_cfg['tables']['hotlinks'], [\n      'magic' => $this->class_cfg['arch']['hotlinks']['magic'],\n      'id_user' => $this->class_cfg['arch']['hotlinks']['id_user'],\n      'expire' => $this->class_cfg['arch']['hotlinks']['expire'],\n      ],[\n      $this->class_cfg['arch']['hotlinks']['id'] => $id\n      ]\n    )\n    ) {\n      if ($val['expire'] < date('Y-m-d H:i:s')) {\n        if (method_exists($this, 'setError')) {\n          $this->setError(27);\n        }\n      }\n      elseif (self::isMagicString($key, $val['magic'])) {\n        return $val['id_user'];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 199,
            "endLine": 222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getIdFromMagicString",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a user's ID from the hotlink's magic string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$key"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a user's ID from the hotlink's magic string.\n   *\n   * @param string $id\n   * @param string $key\n   * @return null|string\n   *\/"
        },
        "logout": {
            "name": "logout",
            "summary": "Unauthenticates, resets the config and destroys the session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function logout()\n  {\n    $this->auth = false;\n    $this->cfg  = [];\n    $this->closeSession();\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 241,
            "endLine": 246,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "logout",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Unauthenticates, resets the config and destroys the session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Unauthenticates, resets the config and destroys the session.\n   *\n   * @return void\n   *\/"
        },
        "getMailer": {
            "name": "getMailer",
            "summary": "Returns an instance of the mailer class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMailer()\n  {\n    if (!$this->_mailer) {\n      if (class_exists($this->class_cfg['mailer'])) {\n        $this->_mailer = new $this->class_cfg['mailer']();\n      }\n      else {\n        throw new Exception(X::_(\"Impossible to find the mailer class %s\", (string)$this->class_cfg['mailer']));\n      }\n    }\n\n    return $this->_mailer;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 255,
            "endLine": 267,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMailer",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns an instance of the mailer class.\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns an instance of the mailer class.\n   *\n   * @return Mail\n   * @throws Exception\n   *\/"
        },
        "forcePassword": {
            "name": "forcePassword",
            "summary": "Changes the password in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function forcePassword($pass): bool\n  {\n    if ($this->id) {\n      return (bool)$this->db->insert(\n        $this->class_cfg['tables']['passwords'], [\n        $this->class_cfg['arch']['passwords']['pass'] => $this->_hash($pass),\n        $this->class_cfg['arch']['passwords']['id_user'] => $this->id,\n        $this->class_cfg['arch']['passwords']['added'] => date('Y-m-d H:i:s')\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 275,
            "endLine": 288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "forcePassword",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "pass",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the password in the database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the password in the database.\n   *\n   * @return bool\n   *\/"
        },
        "addToTmp": {
            "name": "addToTmp",
            "summary": "Adds a file to the tmp folder of the user and returns its path.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToTmp(string $file, string|null $name = null, $move = true):? string\n  {\n    if ($this->auth) {\n      $fs   = new System();\n      $path = $this->getTmpDir().microtime(true).'\/';\n      if ($fs->isFile($file) && $fs->createPath($path)) {\n        $dest = $path.($name ?: X::basename($file));\n        if ($move) {\n          if ($fs->move($file, X::dirname($dest)) && $fs->rename(X::dirname($dest).'\/'.X::basename($file), X::basename($dest))) {\n            return $dest;\n          }\n        }\n        elseif ($fs->copy($file, $dest)) {\n          return $dest;\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 323,
            "endLine": 342,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "addToTmp",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "move",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a file to the tmp folder of the user and returns its path.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$move"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a file to the tmp folder of the user and returns its path.\n   *\n   * @param string $file\n   * @param string $name\n   * @param bool   $move\n   * @return string|null\n   *\/"
        },
        "crypt": {
            "name": "crypt",
            "summary": "Encrypts the given string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function crypt(string $st): ?string\n  {\n    if ($enckey = $this->_get_encryption_key()) {\n      return Enc::crypt($st, $enckey) ?: null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 351,
            "endLine": 358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "crypt",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Encrypts the given string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Encrypts the given string.\n   *\n   * @param string $st\n   * @return string|null\n   *\/"
        },
        "decrypt": {
            "name": "decrypt",
            "summary": "Decrypts the given string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function decrypt(string $st): ?string\n  {\n    if ($enckey = $this->_get_encryption_key()) {\n      return Enc::decrypt($st, $enckey) ?: null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 367,
            "endLine": 374,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "decrypt",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Decrypts the given string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Decrypts the given string.\n   *\n   * @param string $st\n   * @return string|null\n   *\/"
        },
        "makeFingerprint": {
            "name": "makeFingerprint",
            "summary": "Generates a random long string (16-32 chars) used as unique fingerprint.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function makeFingerprint(): string\n  {\n    return Str::genpwd(32, 16);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 381,
            "endLine": 384,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeFingerprint",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Generates a random long string (16-32 chars) used as unique fingerprint.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a random long string (16-32 chars) used as unique fingerprint.\n   * @return string\n   *\/"
        },
        "makeMagicString": {
            "name": "makeMagicString",
            "summary": "Returns an array with a key and a magic string used for making hotlinks.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function makeMagicString(): array\n  {\n    $key = self::makeFingerprint();\n    return [\n      'key' => $key,\n      'hash' => hash('sha256', $key)\n    ];\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 392,
            "endLine": 399,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeMagicString",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns an array with a key and a magic string used for making hotlinks.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array with a key and a magic string used for making hotlinks.\n   *\n   * @return array\n   *\/"
        },
        "isMagicString": {
            "name": "isMagicString",
            "summary": "Checks if a given string corresponds to the given hash.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isMagicString(string $key, string $hash): bool\n  {\n    return hash('sha256', $key) === $hash;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 409,
            "endLine": 412,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "isMagicString",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The key"
                },
                {
                    "name": "hash",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The corresponding hash"
                }
            ],
            "doc": {
                "description": "Checks if a given string corresponds to the given hash.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$key",
                        "description": "The key"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$hash",
                        "description": "The corresponding hash"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a given string corresponds to the given hash.\n   *\n   * @param string $key  The key\n   * @param string $hash The corresponding hash\n   * @return bool\n   *\/"
        },
        "_get_encryption_key": {
            "name": "_get_encryption_key",
            "summary": "Retrieves the encryption key from database if not defined and saves it.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_encryption_key(): ?string\n  {\n    if (is_null($this->_encryption_key)) {\n      if ($this->auth) {\n        $this->_encryption_key = $this->db->selectOne(\n          $this->class_cfg['table'],\n          $this->class_cfg['arch']['users']['enckey'],\n          ['id' => $this->id]\n        );\n        if (!$this->_encryption_key) {\n          $this->_encryption_key = Str::genpwd(32, 16);\n          $this->db->update(\n            $this->class_cfg['table'],\n            [$this->class_cfg['arch']['users']['enckey'] => $this->_encryption_key],\n            ['id' => $this->id]\n          );\n        }\n      }\n    }\n\n    return $this->_encryption_key;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 454,
            "endLine": 475,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_encryption_key",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Retrieves the encryption key from database if not defined and saves it.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves the encryption key from database if not defined and saves it.\n   *\n   * @return string|null\n   *\/"
        },
        "_hash": {
            "name": "_hash",
            "summary": "Use the configured hash function to encrypt a password string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _hash(string $st): string\n  {\n    if (empty($this->class_cfg['encryption']) || !function_exists($this->class_cfg['encryption'])) {\n      return hash('sha256', $st);\n    }\n\n    return $this->class_cfg['encryption']($st);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 484,
            "endLine": 491,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_hash",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to crypt"
                }
            ],
            "doc": {
                "description": "Use the configured hash function to encrypt a password string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to crypt"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n    * Use the configured hash function to encrypt a password string.\n    *\n    * @param string $st The string to crypt\n    * @return string\n    *\/"
        },
        "_init_dir": {
            "name": "_init_dir",
            "summary": "Defines user's directory and constant BBN_USER_PATH if not done yet.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _init_dir(bool $create = false): self\n  {\n    if (\\defined('BBN_DATA_PATH') && $this->getId()) {\n      $this->path     = Mvc::getUserDataPath($this->getId());\n      $this->tmp_path = Mvc::getUserTmpPath($this->getId());\n      if (!\\defined('BBN_USER_PATH')) {\n        define('BBN_USER_PATH', $this->path);\n      }\n\n      if ($create && !empty($this->path) && !empty($this->tmp_path)) {\n        Dir::createPath($this->path);\n        Dir::createPath($this->tmp_path);\n        Dir::delete($this->tmp_path, false);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 502,
            "endLine": 519,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_init_dir",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "create",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true creates it and remove temp files if any"
                }
            ],
            "doc": {
                "description": "Defines user's directory and constant BBN_USER_PATH if not done yet.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "If true creates it and remove temp files if any"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n    * Defines user's directory and constant BBN_USER_PATH if not done yet.\n    *\n    * @param bool $create If true creates it and remove temp files if any\n    * @return self\n    *\/"
        },
        "saveNewPermissionTokens": {
            "name": "saveNewPermissionTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function saveNewPermissionTokens(string $access_token, string $refresh_token, int $expires_in, string $account_name): bool\n  {\n    if ($this->id) {\n      $account_exists = $this->db->count(\n        $this->class_cfg['tables']['permission_accounts'],\n        [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      );\n      \n      if ($account_exists > 0 ){\n        throw new Exception(X::_('Account already exists!'));\n      }\n      \n      if ($this->db->insert(\n          $this->class_cfg['tables']['permission_accounts'], [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      )) {\n        return (bool)$this->db->insert(\n          $this->class_cfg['tables']['permission_tokens'], [\n            $this->class_cfg['arch']['permission_tokens']['id_account']    => $this->db->lastId(),\n            $this->class_cfg['arch']['permission_tokens']['access_token']  => $access_token,\n            $this->class_cfg['arch']['permission_tokens']['refresh_token'] => $refresh_token,\n            $this->class_cfg['arch']['permission_tokens']['expire']        => time() + $expires_in,\n          ]\n        );\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 530,
            "endLine": 563,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "saveNewPermissionTokens",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "access_token",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "token"
                },
                {
                    "name": "refresh_token",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "token"
                },
                {
                    "name": "expires_in",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "in"
                },
                {
                    "name": "account_name",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$access",
                        "description": "token"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$refresh",
                        "description": "token"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$expires",
                        "description": "in"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$account",
                        "description": "name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $access_token\n   * @param string $refresh_token\n   * @param int $expires_in\n   * @param string $account_name\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "getPermissionAccountFromName": {
            "name": "getPermissionAccountFromName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPermissionAccountFromName(string $account_name)\n  {\n    if ($this->id) {\n      return $this->db->rselect(\n        $this->class_cfg['tables']['permission_accounts'],\n        $this->class_cfg['arch']['permission_accounts'],\n        [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 565,
            "endLine": 579,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPermissionAccountFromName",
            "returns": [],
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPermissionTokensFromAccountName": {
            "name": "getPermissionTokensFromAccountName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPermissionTokensFromAccountName(string $account_name)\n  {\n    if ($this->id) {\n      if ($account = $this->getPermissionAccountFromName($account_name)) {\n        return $this->db->rselect(\n          $this->class_cfg['tables']['permission_tokens'],\n          $this->class_cfg['arch']['permission_tokens'],\n          [\n            $this->class_cfg['arch']['permission_tokens']['id_account'] => $account[$this->class_cfg['arch']['permission_accounts']['id']],\n          ]\n        ); \n      }\n    }\n    \n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 585,
            "endLine": 600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPermissionTokensFromAccountName",
            "returns": [],
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$account",
                        "description": "name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $account_name\n   * @return array|false|null\n   *\/"
        },
        "updatePermissionTokens": {
            "name": "updatePermissionTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updatePermissionTokens(string $account_name, string $access_token, string $refresh_token, int $expire_in)\n  {\n    if ($this->id && $account = $this->getPermissionAccountFromName($account_name)) {\n        return $this->db->update(\n          $this->class_cfg['tables']['permission_tokens'], [\n          $this->class_cfg['arch']['permission_tokens']['access_token']   => $access_token,\n          $this->class_cfg['arch']['permission_tokens']['refresh_token']  => $refresh_token,\n          $this->class_cfg['arch']['permission_tokens']['expire']         => time() + $expire_in,\n        ], [\n            $this->class_cfg['arch']['permission_tokens']['id_account'] => $account[$this->class_cfg['arch']['permission_accounts']['id']]\n          ]\n        );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 602,
            "endLine": 617,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "updatePermissionTokens",
            "returns": [],
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "access_token",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "refresh_token",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "expire_in",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "findByPhoneNumber": {
            "name": "findByPhoneNumber",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function findByPhoneNumber(string $phone_number)\n  {\n    try {\n      $phone = PhoneNumber::parse($phone_number);\n    }\n    catch (PhoneNumberParseException $e) {\n      return false;\n    }\n    $phone_number = $phone->format(PhoneNumberFormat::E164);\n    $user = $this->db->rselect(\n      $this->class_cfg['tables']['users'],\n      $this->class_cfg['arch']['users'],\n      [\n        $this->class_cfg['arch']['users']['login'] => $phone_number\n      ]\n    );\n    return !empty($user) && !$this->hasSkipVerification($user[$this->class_cfg['arch']['users']['id']]) && !$phone->isValidNumber() ? false : $user;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 623,
            "endLine": 640,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "findByPhoneNumber",
            "returns": [],
            "arguments": [
                {
                    "name": "phone_number",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "number"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$phone",
                        "description": "number"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $phone_number\n   * @return array|null\n   *\/"
        },
        "findUserByApiTokenAndDeviceUid": {
            "name": "findUserByApiTokenAndDeviceUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function findUserByApiTokenAndDeviceUid(string $token, $device_uid)\n  {\n    if ($user_id = $this->getUserByTokenAndDeviceUid($token, $device_uid)) {\n\n      return $this->db->rselect(\n        $this->class_cfg['tables']['users'],\n        $this->class_cfg['arch']['users'],\n        [\n          $this->class_cfg['arch']['users']['id'] => $user_id\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 647,
            "endLine": 661,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "findUserByApiTokenAndDeviceUid",
            "returns": [],
            "arguments": [
                {
                    "name": "token",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "device_uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$token"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $token\n   * @return array|null\n   *\/"
        },
        "updatePhoneVerificationCode": {
            "name": "updatePhoneVerificationCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function updatePhoneVerificationCode($phone_number, ?string $code): bool\n  {\n    if ($oldCfg = $this->db->selectOne($this->class_cfg['tables']['users'], $this->class_cfg['arch']['users']['cfg'], [\n      $this->class_cfg['arch']['users']['id'] => $this->id\n    ])) {\n      $oldCfg = json_decode($oldCfg, true);\n    }\n    else {\n      $oldCfg = [];\n    }\n    $cfg = json_encode(\\array_merge($oldCfg, ['phone_verification_code' => $code]));\n    try {\n      $phone = PhoneNumber::parse($phone_number);\n    }\n    catch (PhoneNumberParseException $e) {\n      return false;\n    }\n    \n    if (!$this->hasSkipVerification() && !$phone->isValidNumber()) {\n      return false;\n    }\n\n\n    $number = $phone->format(PhoneNumberFormat::E164);\n\n    return (bool)$this->db->update(\n      $this->class_cfg['tables']['users'],\n      [\n        $this->class_cfg['arch']['users']['login'] => $number,\n        $this->class_cfg['arch']['users']['phone'] => $number,\n        $this->class_cfg['arch']['users']['cfg'] => $cfg\n      ],\n      [$this->class_cfg['arch']['users']['id'] => $this->id]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 667,
            "endLine": 701,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "updatePhoneVerificationCode",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "phone_number",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|null $code\n   * @return int|null\n   *\/"
        },
        "verifyTokenAndDeviceUid": {
            "name": "verifyTokenAndDeviceUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function verifyTokenAndDeviceUid($device_uid, $token)\n  {\n    return $this->db->count(\n      $this->class_cfg['tables']['api_tokens'],\n      [\n        $this->class_cfg['arch']['api_tokens']['token']      => $token,\n        $this->class_cfg['arch']['api_tokens']['device_uid'] => $device_uid,\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 705,
            "endLine": 714,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "verifyTokenAndDeviceUid",
            "returns": [],
            "arguments": [
                {
                    "name": "device_uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "token",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUserByTokenAndDeviceUid": {
            "name": "getUserByTokenAndDeviceUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getUserByTokenAndDeviceUid($token, $device_uid)\n  {\n    return $this->db->selectOne(\n      $this->class_cfg['tables']['api_tokens'],\n      $this->class_cfg['arch']['api_tokens']['id_user'],\n      [\n        $this->class_cfg['arch']['api_tokens']['token']      => $token,\n        $this->class_cfg['arch']['api_tokens']['device_uid'] => $device_uid,\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 716,
            "endLine": 726,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getUserByTokenAndDeviceUid",
            "returns": [],
            "arguments": [
                {
                    "name": "token",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "device_uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateApiTokenUserByTokenDevice": {
            "name": "updateApiTokenUserByTokenDevice",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function updateApiTokenUserByTokenDevice(string $token, string $deviceUid, string $idUser, string $deviceLang = ''): bool\n  {\n    if (!empty($token) && !empty($deviceUid) && !empty($idUser)) {\n      return (bool)$this->db->update(\n        $this->class_cfg['tables']['api_tokens'],\n        [\n          $this->class_cfg['arch']['api_tokens']['id_user'] => $idUser,\n          $this->class_cfg['arch']['api_tokens']['device_lang'] => $deviceLang\n        ],\n        [\n          $this->class_cfg['arch']['api_tokens']['token'] => $token,\n          $this->class_cfg['arch']['api_tokens']['device_uid'] => $deviceUid\n        ]\n      );\n    }\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 728,
            "endLine": 744,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "updateApiTokenUserByTokenDevice",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "token",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deviceUid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idUser",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deviceLang",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getApiRequestOutput": {
            "name": "getApiRequestOutput",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApiRequestOutput()\n  {\n    return $this->api_request_output;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 746,
            "endLine": 749,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getApiRequestOutput",
            "returns": [],
            "arguments": []
        },
        "getApiNotificationsToken": {
            "name": "getApiNotificationsToken",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApiNotificationsToken(string $idUser = ''): ?string\n  {\n    return $this->db->selectOne([\n      'table' => $this->class_cfg['tables']['api_tokens'],\n      'fields' => $this->class_cfg['arch']['api_tokens']['notifications_token'],\n      'where' => [ \n        $this->class_cfg['arch']['api_tokens']['id_user'] => $idUser ?: $this->id\n      ],\n      'order' => [[\n        'field' => $this->class_cfg['arch']['api_tokens']['last'],\n        'dir' => 'DESC'\n      ]]\n    ]);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 751,
            "endLine": 764,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getApiNotificationsToken",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idUser",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPhoneNumber": {
            "name": "getPhoneNumber",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPhoneNumber(string $idUser = ''): ?string\n  {\n    return $this->db->selectOne($this->class_cfg['table'], $this->class_cfg['arch']['users']['phone'], [\n      $this->class_cfg['arch']['users']['id'] => $idUser ?: $this->id\n    ]);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 766,
            "endLine": 771,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getPhoneNumber",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idUser",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasSkipVerification": {
            "name": "hasSkipVerification",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSkipVerification(string $id = ''): bool\n  {\n    if ($cfg = $this->db->selectOne(\n      $this->class_cfg['tables']['users'],\n      $this->class_cfg['arch']['users']['cfg'],\n      [\n        $this->class_cfg['arch']['users']['id'] => $id ?: $this->id\n      ]\n    )) {\n      $cfg = json_decode($cfg);\n      return !empty($cfg->skip_verification);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 774,
            "endLine": 787,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "hasSkipVerification",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDbInstance": {
            "name": "getDbInstance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Fake",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDbInstance(): Db\n  {\n    return $this->db;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 792,
            "endLine": 795,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDbInstance",
            "returns": [
                "bbn\\Db"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "db"
            },
            "comments": "  \/**\n   * @return Db db\n   *\/"
        }
    },
    "properties": {
        "realUser": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Fake",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var User $realUser",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "_mailer": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "auth": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "tmp_path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "id": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "data": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "id_group": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "alert": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var mixed",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Db",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "prev_time": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var mixed",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $class_cfg",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "api_request_output": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Fake"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "An output string to be returned when in api requests.\nWill be mainly used to return tokens response in api request.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": [],
    "constants": null,
    "uses": {
        "bbn\\Models\\Cls\\Basic": "Basic",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\User": "User",
        "bbn\\User\\Common": "Common",
        "bbn\\User\\Implementor": "Implementor",
        "bbn\\Models\\Tts\\DbActions": "DbActions"
    },
    "dummyComments": [
        "\/**\n * @package user\n *\/",
        "\/**\n * A user authentication Class\n *\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Apr 4, 2011, 23:23:55 +0000\n * @category  Authentication\n * @license   http:\/\/opensource.org\/licenses\/MIT MIT\n * @version 0.2r89\n * @todo Groups and hotlinks features\n * @todo Implement Cache for session requests' results?\n *\/"
    ],
    "summary": "A user authentication Class",
    "description": "",
    "description_parts": []
}