{
    "doc": {
        "description": "A permission system linked to options, User classes and preferences.\n\nA permission is an option under the permission option (\"permissions\", \"appui\") or one of its aliases.\nThey are ONLY permissions.\n\nNo(bool)! From the moment a user or a group has a preference on an item, it is considered to have a permission.\nNo(bool)! Deleting a permission deletes the preference\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Nov 24, 2016, 13:23:12 +0000",
            "category": "Authentication",
            "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
            "version": "0.1",
            "todo": "Store the deleted preferences? And restore them if the a permission is re-given"
        }
    },
    "name": "bbn\\User\\Permissions",
    "namespace": true,
    "realName": "Permissions",
    "realNamespace": "bbn\\User",
    "traits": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\Current"
    ],
    "interfaces": [],
    "fileName": "\/User\/Permissions.php",
    "startLine": 38,
    "endLine": 1415,
    "numMethods": 52,
    "numProperties": 16,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "retriever_instance": null,
        "retriever_exists": false,
        "current": null,
        "opt": null,
        "pref": null,
        "user": null,
        "db": null,
        "plugins": [],
        "allowedRoutes": [],
        "forbiddenRoutes": [],
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\User",
    "shortName": "Permissions",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Permissions constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(array|null $routes = null)\n  {\n    if (!($this->opt = Option::getInstance())) {\n      throw new Exception(X::_('Impossible to construct permissions: you need to instantiate options before'));\n    }\n\n    if (!($this->user = User::getInstance())) {\n      throw new Exception(X::_('Impossible to construct permissions: you need to instantiate user before'));\n    }\n\n    if (!($this->pref = Preferences::getInstance())) {\n      throw new Exception(X::_('Impossible to construct permissions: you need to instantiate preferences before'));\n    }\n\n    \/** @todo Add the default routes from Mvc::getInstance *\/\n    if (empty($routes)) {\n      $mvc    = Mvc::getInstance();\n      $routes = $mvc->getRoutes();\n    }\n\n    if ($routes) {\n      if (!empty($routes['root'])) {\n        foreach ($routes['root'] as $url => $plugin) {\n          $plugin['url']   = $url;\n          $this->plugins[] = $plugin;\n        }\n      }\n\n      if (!empty($routes['allowed']) && is_array($routes['allowed'])) {\n        $this->allowedRoutes = $routes['allowed'];\n      }\n\n      if (!empty($routes['forbidden']) && is_array($routes['forbidden'])) {\n        $this->forbiddenRoutes = $routes['forbidden'];\n      }\n    }\n\n    self::retrieverInit($this);\n    $this->db = Db::getInstance();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 70,
            "endLine": 109,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "routes",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "An array of routes to the plugins"
                }
            ],
            "doc": {
                "description": "Permissions constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$routes",
                        "description": "An array of routes to the plugins"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Permissions constructor.\n   *\n   * @param array $routes An array of routes to the plugins\n   *\/"
        },
        "isAuthorizedRoute": {
            "name": "isAuthorizedRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAuthorizedRoute($url): bool\n  {\n    if (in_array($url, $this->allowedRoutes, true)) {\n      return true;\n    }\n\n    foreach ($this->allowedRoutes as $ar) {\n      if (substr($ar, -1) === '*') {\n        if ((strlen($ar) === 1) || (strpos($url, substr($ar, 0, -1)) === 0)) {\n          if (in_array($url, $this->forbiddenRoutes, true)) {\n            return false;\n          }\n\n          foreach ($this->forbiddenRoutes as $ar2) {\n            if (substr($ar2, -1) === '*') {\n              if (strpos($url, substr($ar2, 0, -1)) === 0) {\n                return false;\n              }\n            }\n          }\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 112,
            "endLine": 139,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isAuthorizedRoute",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fromPathInfo": {
            "name": "fromPathInfo",
            "summary": "Returns the option's ID corresponds to the given path.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fromPathInfo(string $path): ?array\n  {\n    $bits = X::split(trim($path, ' \/'), '\/');\n    $remain = [];\n    while ($path) {\n      if ($id = $this->fromPath($path)) {\n        return [\n          'id'    => $id,\n          'path'  => $path,\n          'param' => X::join($remain, '\/')\n        ];\n      }\n      array_unshift($remain, array_pop($bits));\n      $path = X::join($bits, '\/');\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 151,
            "endLine": 168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fromPathInfo",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path"
                }
            ],
            "doc": {
                "description": "Returns the option's ID corresponds to the given path.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "The type shouldn't always be access as it's a path?"
                }
            },
            "comments": "  \/**\n   * Returns the option's ID corresponds to the given path.\n   *\n   * @todo The type shouldn't always be access as it's a path?\n   *\n   * @param string $path The path\n   * @param string $type The type\n   * @return null|string\n   *\/"
        },
        "fromPath": {
            "name": "fromPath",
            "summary": "Returns the option's ID corresponds to the given path.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fromPath(string $path, $type = 'access', $create = false): ?string\n  {\n    $parent = null;\n    $root   = false;\n    $old_path = $path;\n    if (($type === 'access') && $this->plugins && !empty($path)) {\n      foreach ($this->plugins as $plugin) {\n        if (strpos($path, $plugin['url'].'\/') === 0) {\n          if (strpos($plugin['name'], 'appui-') === 0) {\n            $root = $this->opt->fromCode(\n              $type,\n              'permissions',\n              substr($plugin['name'], 6),\n              'appui',\n              'plugins'\n            );\n            $path = substr($path, strlen($plugin['url']) + 1);\n          }\n          elseif ($plugin['name']) {\n            $root = $this->opt->fromCode(\n              $type,\n              'permissions',\n              $plugin['name'],\n              'plugins',\n            );\n            $path = substr($path, strlen($plugin['url']) + 1);\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (!$root) {\n      $root = $this->opt->fromCode($type, 'permissions');\n    }\n\n    if (!$root) {\n      throw new Exception(X::_(\"Impossible to find the permission code for %s as %s\", $path, $type));\n    }\n\n    $parts  = explode('\/', trim($path, '\/'));\n    $parent = $root;\n\n    $path = '';\n    foreach ($parts as $i => $p){\n      $is_last = $i === (\\count($parts) - 1);\n      if (!empty($p)) {\n        $prev_parent = $parent;\n        \/\/ Adds a slash for each bit of the path except the last one\n        $parent = $this->opt->fromCode($p.($is_last ? '' : '\/'), $prev_parent);\n        \/\/ If not found looking for a subpermission\n        if (!$parent && !$is_last) {\n          $parent = $this->opt->fromCode($p, $prev_parent);\n        }\n        elseif ($is_last && $prev_parent && !$parent && $create) {\n          if ($this->_add(\n            [\n              'code' => $p,\n              'text' => $p\n            ],\n            $prev_parent,\n          )\n          ) {\n            $parent = $this->db->lastId();\n          }\n        }\n      }\n    }\n\n    return $parent ?: null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 180,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "fromPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type"
                },
                {
                    "name": "create",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's ID corresponds to the given path.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "The type shouldn't always be access as it's a path?"
                }
            },
            "comments": "  \/**\n   * Returns the option's ID corresponds to the given path.\n   *\n   * @todo The type shouldn't always be access as it's a path?\n   *\n   * @param string $path The path\n   * @param string $type The type\n   * @return null|string\n   *\/"
        },
        "toPath": {
            "name": "toPath",
            "summary": "Returns the path corresponding to the given ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function toPath(string $id_option): ?string\n  {\n    if ($parents = $this->opt->parents($id_option)) {\n      $idPlugin = $this->opt->getTemplateId('plugin');\n      $prefix = '';\n      foreach ($parents as $i => $p) {\n        if ($this->opt->getIdAlias($p) === $idPlugin) {\n          $codes = $this->opt->getCodePath($id_option);\n          if (!is_array($codes)) {\n            throw new Exception(\"No array for path in $id_option\");\n          }\n\n          $path = array_slice($codes, 0, $i - 1);\n          if ($p !== $this->opt->getDefault()) {\n            $isOk = true;\n            while ($isOk) {\n              $prefix = $this->opt->code($p) . ($prefix ? '-' . $prefix : '');\n              $i++;\n              $p = $parents[$i] ?? null;\n              $isOk = $p && ($code = $this->opt->code($p)) && ($code !== 'plugins');\n            }\n\n            $plugin = X::getRow($this->plugins, ['name' => $prefix]);\n            $prefix = $plugin['url'] . '\/';\n          }\n\n          return $prefix.X::join(array_reverse($path), '');\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 261,
            "endLine": 293,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "toPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option The option's UID"
                }
            ],
            "doc": {
                "description": "Returns the path corresponding to the given ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option The option's UID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path corresponding to the given ID\n   *\n   * @param string $id_option The option's UID\n   *\n   * @return string|null\n   *\/"
        },
        "options": {
            "name": "options",
            "summary": "Returns the result of Option::Options filtered through current user's permissions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function options(string|null $id_option = null, string $type = 'access'): ?array\n  {\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && ($os = $this->opt->options($id_option))\n    ) {\n      $res = [];\n      foreach ($os as $id => $o){\n        if ($this->pref->has($id)) {\n          $res[$id] = $o;\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 303,
            "endLine": 319,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "options",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                }
            ],
            "doc": {
                "description": "Returns the result of Option::Options filtered through current user's permissions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the result of Option::Options filtered through current user's permissions.\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @return array|null\n   *\/"
        },
        "fullOptions": {
            "name": "fullOptions",
            "summary": "Returns the result of Option::fullOptions filtered through current user's permissions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullOptions(string|null $id_option = null, string $type = 'access'): ?array\n  {\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && ($os = $this->opt->fullOptions($id_option))\n    ) {\n      $res = [];\n      foreach ($os as $o){\n        \/* if ( ($ids = $this->pref->retrieveIds($o['id'])) && ($cfg = $this->pref->get($ids[0])) ){\n          $res[] = X::mergeArrays($o, $cfg);\n        } *\/\n        if ($this->has($o['id'], $type)) {\n          $res[] = X::mergeArrays($o, $this->pref->getByOption($o['id']) ?: []);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 329,
            "endLine": 348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "fullOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                }
            ],
            "doc": {
                "description": "Returns the result of Option::fullOptions filtered through current user's permissions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the result of Option::fullOptions filtered through current user's permissions.\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @return array|null\n   *\/"
        },
        "getAll": {
            "name": "getAll",
            "summary": "Returns the full list of permissions existing in the given option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAll(string|null $id_option = null, string $type = 'access'): ?array\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->options($id_option ?: $this->getCurrent());\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 358,
            "endLine": 365,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                }
            ],
            "doc": {
                "description": "Returns the full list of permissions existing in the given option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full list of permissions existing in the given option\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @return null|array\n   *\/"
        },
        "getFull": {
            "name": "getFull",
            "summary": "Returns the full list of permissions existing in the given option with all the current user's preferences",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFull($id_option = null, string $type = 'access'): ?array\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->fullOptions($id_option ?: $this->getCurrent());\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 375,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getFull",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                }
            ],
            "doc": {
                "description": "Returns the full list of permissions existing in the given option with all the current user's preferences\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full list of permissions existing in the given option with all the current user's preferences\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @return array|bool|false\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "Returns an option combined with its sole\/first permission",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get(string|null $id_option = null, string $type = 'access', bool $force = false): ?array\n  {\n    \/*\n    if ( $all = $this->getAll($id_option, $type) ){\n      $r = [];\n      foreach ( $all as $a ){\n        if ( $this->has($a['id'], '', $force) ){\n          $r[] = $a;\n        }\n      }\n      return $r;\n    }\n    *\/\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && $this->has($id_option, $type, $force)\n    ) {\n      return $this->pref->option($id_option);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 393,
            "endLine": 413,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "get",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Force permission check"
                }
            ],
            "doc": {
                "description": "Returns an option combined with its sole\/first permission\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force",
                        "description": "Force permission check"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an option combined with its sole\/first permission\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @param bool        $force     Force permission check\n   * @return array|bool\n   *\/"
        },
        "has": {
            "name": "has",
            "summary": "Checks if a user and\/or a group has a permission.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function has(string|null $id_option = null, string $type = 'access', bool $force = false): bool\n  {\n    if (!$force && $this->user && $this->user->isDev()) {\n      return true;\n    }\n\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      $option = $this->opt->option($id_option);\n      if (!empty($option['public'])) {\n        return true;\n      }\n\n      return $this->pref->has($id_option, $force);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 424,
            "endLine": 440,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "has",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Force permission check"
                }
            ],
            "doc": {
                "description": "Checks if a user and\/or a group has a permission.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force",
                        "description": "Force permission check"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a user and\/or a group has a permission.\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @param bool        $force     Force permission check\n   * @return bool\n   *\/"
        },
        "is": {
            "name": "is",
            "summary": "Alias of fromPath.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function is(string $path, string $type = 'access'): ?string\n  {\n    return $this->fromPath($path, $type);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 450,
            "endLine": 453,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "is",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                }
            ],
            "doc": {
                "description": "Alias of fromPath.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Alias of fromPath.\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @return null|string\n   *\/"
        },
        "customize": {
            "name": "customize",
            "summary": "Adapts a given array of options' to user's permissions",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function customize(array $arr): array\n  {\n    $res = [];\n    if (isset($arr[0])) {\n      foreach ($arr as $a){\n        if (isset($a['id']) && $this->has($a['id'])) {\n          $res[] = $a;\n        }\n      }\n    }\n    elseif (isset($arr['items'])) {\n      $res = $arr;\n      unset($res['items']);\n      foreach ($arr['items'] as $a){\n        if (isset($a['id']) && $this->has($a['id'])) {\n          if (!isset($res['items'])) {\n            $res['items'] = [];\n          }\n\n          $res['items'][] = $a;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 464,
            "endLine": 489,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "customize",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adapts a given array of options' to user's permissions\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$arr"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check if it's used anywhere.\n"
                }
            },
            "comments": "  \/**\n   * Adapts a given array of options' to user's permissions\n   *\n   * @todo Check if it's used anywhere.\n   * \n   * @param array $arr\n   * @return array\n   *\/"
        },
        "add": {
            "name": "add",
            "summary": "Grants a new permission to a user or a group.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function add(string $id_option, string $type = 'access'): ?int\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->setByOption($id_option, []);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 499,
            "endLine": 506,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "add",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                }
            ],
            "doc": {
                "description": "Grants a new permission to a user or a group.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Grants a new permission to a user or a group.\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @return int\n   *\/"
        },
        "remove": {
            "name": "remove",
            "summary": "Deletes a preference for a path or an ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function remove($id_option, string $type = 'access'): ?int\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->delete($id_option);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 516,
            "endLine": 523,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "remove",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "The type: access or option"
                }
            ],
            "doc": {
                "description": "Deletes a preference for a path or an ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type",
                        "description": "The type: access or option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a preference for a path or an ID.\n   *\n   * @param string|null $id_option The option's UID\n   * @param string      $type      The type: access or option\n   * @return null|int\n   *\/"
        },
        "getApplicableCfg": {
            "name": "getApplicableCfg",
            "summary": "Returns the permissions inherited properties.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApplicableCfg(string $id_option): ?array\n  {\n    foreach ($this->opt->parents($id_option) as $i => $p) {\n      $cfg = $this->opt->getCfg($p);\n      if (!empty($cfg['permissions'])) {\n        if ((!$i && ($cfg['permissions'] === 'children')) \n          || in_array($cfg['permissions'], ['all', 'cascade'])\n        ) {\n          return [\n            'cfg' => $cfg['permissions'],\n            'from' => $p,\n            'from_text' => $this->opt->text($p),\n            'cascade' => in_array($cfg['permissions'], ['all', 'cascade'])\n          ];\n        }\n\n        break;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 532,
            "endLine": 553,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getApplicableCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option The option's UID"
                }
            ],
            "doc": {
                "description": "Returns the permissions inherited properties.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the permissions inherited properties.\n   *\n   * @param string|null $id_option The option's UID\n   * @return array|null\n   *\/"
        },
        "optionToPermission": {
            "name": "optionToPermission",
            "summary": "Returns the corresponding permission of a given option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function optionToPermission(string $id_option, bool $create = false): ?string\n  {\n    \/** @var string The result - an option's ID *\/\n    $id_perm = null;\n\n    if (!Str::isUid($id_option)) {\n      throw new Exception(\"The string sent is not a UID: $id_option\");\n    }\n\n    if (!$this->opt->exists($id_option)) {\n      throw new Exception(\"The options with a UID $id_option doesn't exist\");\n    }\n\n    \/** @var array List of aliases (permissions have aliases to the original options) *\/\n    $aliases = $this->opt->getAliasItems($id_option);\n\n    \/** @var string The root (with options code) for this option's permission *\/\n    $root    = $this->optionPermissionRoot($id_option);\n\n    \/\/X::ddump($root);\n    foreach ($aliases as $a) {\n      $parents = $this->opt->parents($a);\n      if (in_array($root, $parents)) {\n        $id_perm = $a;\n        break;\n      }\n    }\n\n    if (!$id_perm && $create) {\n      return $this->createFromId($id_option);\n    }\n\n    return $id_perm ?: null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 564,
            "endLine": 597,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "optionToPermission",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option The option's UID"
                },
                {
                    "name": "create",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "The permission will be created if it doesn't exist."
                }
            ],
            "doc": {
                "description": "Returns the corresponding permission of a given option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option The option's UID"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "The permission will be created if it doesn't exist."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the corresponding permission of a given option.\n   *\n   * @param string|null $id_option The option's UID\n   * @param bool        $create    The permission will be created if it doesn't exist.\n   *\n   * @return string|null\n   *\/"
        },
        "readOption": {
            "name": "readOption",
            "summary": "Checks if the given option is readable by the current user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function readOption(string|null $id_option = null, bool $force = false): ?bool\n  {\n    if ($this->user->isAdmin()) {\n      return true;\n    }\n\n    if ($id_perm = $this->optionToPermission($id_option)) {\n      return $this->pref->has($id_perm, $force) ?: $this->user->isAdmin();\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 606,
            "endLine": 617,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "readOption",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the given option is readable by the current user.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the given option is readable by the current user.\n   *\n   * @param string|null $id_option\n   * @return bool|null\n   *\/"
        },
        "writeOption": {
            "name": "writeOption",
            "summary": "Checks if the given option is writable by the current user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function writeOption(string $id_option, bool $force = false): ?bool\n  {\n    if ($this->user->isAdmin()) {\n      return true;\n    }\n\n    if ($id_perm = $this->optionToPermission($id_option)) {\n      $p = $this->pref->get($id_perm);\n      if (is_array($p) && isset($p['write']) && $p['write']) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 626,
            "endLine": 640,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "writeOption",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the given option is writable by the current user.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the given option is writable by the current user.\n   *\n   * @param string|null $id_option\n   * @return bool|null\n   *\/"
        },
        "getSources": {
            "name": "getSources",
            "summary": "Returns an array corresponding to the different roots for permissions in the project.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSources($only_with_children = true): array\n  {\n    $root    = $this->opt->fromCode('permissions');\n    $access  = $this->opt->fromCode('access', $root);\n    $options = $this->opt->fromCode('options', $root);\n    $sources = [];\n    $all     = $this->opt->getPlugins(null, true);\n    foreach ($all as $o) {\n      if ($id_perm = $this->opt->fromCode('access', $o['rootPermissions'])) {\n        $id_option = $this->opt->fromCode('options', $o['rootPermissions']);\n        $tmp       = $this->opt->option($id_perm);\n        if (!$only_with_children || !empty($tmp['num_children'])) {\n          $sources[] = [\n            'text' => $o['text'],\n            'code' => $o['code'],\n            'rootAccess' => $id_perm,\n            'rootOptions' => $id_option\n          ];\n        }\n      }\n    }\n\n    X::sortBy($sources, 'text');\n    array_unshift($sources, [\n      'text' => _(\"Main application\"),\n      'rootAccess' => $access,\n      'rootOptions' => $options,\n      'code' => ''\n    ]);\n\n    return $sources;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 650,
            "endLine": 681,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSources",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "only_with_children",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "with_children Only the ones having children will be returned"
                }
            ],
            "doc": {
                "description": "Returns an array corresponding to the different roots for permissions in the project.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$only",
                        "description": "with_children Only the ones having children will be returned"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array corresponding to the different roots for permissions in the project.\n   *\n   * @param bool $only_with_children Only the ones having children will be returned\n   *\n   * @return array\n   *\/"
        },
        "optionPermissionRoot": {
            "name": "optionPermissionRoot",
            "summary": "Returns the closest Plugin > Permissions > Options root for the given option.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function optionPermissionRoot(string $id): ?string\n  {\n    if ($idSubplugin = $this->opt->getParentSubplugin($id)) {\n      return $this->opt->fromCode('permissions', $idSubplugin);\n    }\n    if ($idPlugin = $this->opt->getParentPlugin($id)) {\n      return $this->opt->fromCode('options', 'permissions', $idPlugin);\n    }\n\n    return $this->opt->fromCode('options', 'permissions');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 691,
            "endLine": 701,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "optionPermissionRoot",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the closest Plugin > Permissions > Options root for the given option.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the closest Plugin > Permissions > Options root for the given option.\n   *\n   * @param string $name\n   *\n   * @return string|null\n   *\/"
        },
        "accessExists": {
            "name": "accessExists",
            "summary": "Checks if the given permission corresponds to real file in mvc\/public.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function accessExists(string $id_perm): bool\n  {\n    $idPlugin = $this->opt->getTemplateId('plugin');\n    $parents = $this->opt->parents($id_perm);\n    $pluginName = '';\n    foreach ($parents as $i => $p) {\n      if ($this->opt->getIdAlias($p) === $idPlugin) {\n        $access = $parents[$i-2];\n        if ($idPlugin === $this->opt->getDefault()) {\n          $isOk = true;\n          $current = $p;\n          while ($isOk) {\n            $pluginName = $this->opt->code($p) . ($pluginName ? '-' : '') . $pluginName;\n            $i++;\n            $current = $parents[$i];\n            $isOk = $this->opt->parent($current)['code'] === 'plugins';\n          }\n        }\n        break;\n      }\n    }\n\n    if (!empty($access)) {\n      $path_to_file = $this->opt->toPath($id_perm, '', $access);\n      if ($pluginName) {\n        if (substr($path_to_file, -1) === '\/') {\n          return is_dir(Mvc::getPluginPath($pluginName).'mvc\/public\/'.substr($path_to_file, 0, -1));\n        }\n\n        return file_exists(Mvc::getPluginPath($pluginName).'mvc\/public\/'.$path_to_file.'.php');\n      }\n      else {\n            if (substr($path_to_file, -1) === '\/') {\n        return is_dir(Mvc::getAppPath().'mvc\/public\/'.substr($path_to_file, 0, -1));\n      }\n\n      return file_exists(Mvc::getAppPath().'mvc\/public\/'.$path_to_file.'.php');\n}\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 711,
            "endLine": 752,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "accessExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_perm",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "perm"
                }
            ],
            "doc": {
                "description": "Checks if the given permission corresponds to real file in mvc\/public.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "perm"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the given permission corresponds to real file in mvc\/public.\n   *\n   * @param string $id_perm\n   *\n   * @return bool\n   *\/"
        },
        "accessPluginRoot": {
            "name": "accessPluginRoot",
            "summary": "Returns",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function accessPluginRoot(string $name): ?string\n  {\n    $args = ['access', 'permissions'];\n    if (strpos($name, 'appui-') === 0) {\n      array_push($args, substr($name, 6), 'appui', 'plugins');\n    }\n    else {\n      array_push($args, $name, 'plugins');\n    }\n\n    return $this->opt->fromCode(...$args);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 762,
            "endLine": 773,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "accessPluginRoot",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns\n   *\n   * @param string $name\n   *\n   * @return string|null\n   *\/"
        },
        "accessUpdatePath": {
            "name": "accessUpdatePath",
            "summary": "Updates all access permission for the given path in the given root.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function accessUpdatePath(\n      string $path,\n      string $root,\n      string $url = '',\n      array $res = []\n  ): array\n  {\n    if (!empty($url) && (substr($url, -1) !== '\/')) {\n      $url .= '\/';\n    }\n\n    $num = 0;\n    $fs  = new System();\n    $ff  = function ($a) use ($url, $path) {\n      if (empty($url)) {\n        $a['path'] = substr($a['name'], strlen(Mvc::getAppPath() . 'mvc\/public\/'));\n      }\n      else {\n        $a['path'] = $url.substr($a['name'], strlen($path.'mvc\/public\/'));\n      }\n\n      if (substr($a['path'], -4) === '.php') {\n        $a['path'] = substr($a['path'], 0, -4);\n      }\n\n      return $this->fFilter($a);\n    };\n\n    $res = [];\n    if ($all = $fs->getTree($path.'mvc\/public', '', false, $ff)) {\n      $all = self::fTreat($all, false);\n      usort($all, ['\\\\bbn\\User\\\\Permissions', 'fSort']);\n      array_walk($all, ['\\\\bbn\\\\User\\\\Permissions', 'fWalk']);\n\n      foreach ($all as $i => $it) {\n        $it['cfg'] = json_encode(['order' => $i + 1]);\n        $this->_add($it, $root, $url, $res);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 786,
            "endLine": 827,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "accessUpdatePath",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path to look for files in (mustn't include mvc\/public)"
                },
                {
                    "name": "root",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the root access option"
                },
                {
                    "name": "url",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The path part of the URL root of the given absolute path"
                },
                {
                    "name": "res",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The part of the absolute path corresponding to the url"
                }
            ],
            "doc": {
                "description": "Updates all access permission for the given path in the given root.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path to look for files in (mustn't include mvc\/public)"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$root",
                        "description": "The ID of the root access option"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The path part of the URL root of the given absolute path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$res",
                        "description": "The part of the absolute path corresponding to the url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates all access permission for the given path in the given root.\n   *\n   * @param string $path    The path to look for files in (mustn't include mvc\/public)\n   * @param string $root    The ID of the root access option\n   * @param string $url     The path part of the URL root of the given absolute path\n   * @param array  $res The part of the absolute path corresponding to the url\n   *\n   * @return array\n   *\/"
        },
        "accessUpdateApp": {
            "name": "accessUpdateApp",
            "summary": "Updates all access permission for the main app.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function accessUpdateApp(): ?array\n  {\n    if ($id_page = $this->opt->fromCode('access', 'permissions')) {\n      return $this->accessUpdatePath(Mvc::getAppPath(), $id_page);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 835,
            "endLine": 842,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "accessUpdateApp",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Updates all access permission for the main app.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Updates all access permission for the main app.\n   *\n   * @return array|null\n   *\/"
        },
        "optionsUpdateAll": {
            "name": "optionsUpdateAll",
            "summary": "Updates all the permission for the options.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function optionsUpdateAll()\n  {\n    $cf = $this->opt->getClassCfg();\n    $of =& $cf['arch']['options'];\n\n    $num = 0;\n\n    $tmp = $this->db->getColumnValues(\n      [\n        'table' => $cf['table'],\n        'fields' => [$of['id']],\n        'join' => [\n          [\n            'table' => $cf['table'],\n            'alias' => 'parent_option',\n            'type' => 'left',\n            'on' => [\n              [\n                'field' => 'parent_option.'.$of['id'],\n                'exp' => $cf['table'].'.'.$of['id_parent']\n              ], [\n                'field' => 'parent_option.'.$of['cfg'],\n                'operator' => 'contains',\n                'value' => '\"permissions\":'\n              ]\n            ]\n          ]\n        ],\n        'where' => [\n          [\n            'field' =>  $cf['table'].'.'.$of['cfg'],\n            'operator' => 'contains',\n            'value' => '\"permissions\":'\n          ], [\n            'field' => $cf['table'].'.'.$of['id'],\n            'operator' => '!=',\n            'value' => $this->opt->getRoot()\n          ], [\n            'field' => $cf['table'].'.'.$of['id'],\n            'operator' => '!=',\n            'value' => $this->opt->fromCode('appui')\n          ], [\n            'field' => $cf['table'].'.'.$of['id'],\n            'operator' => '!=',\n            'value' => $this->opt->fromCode('plugins')\n          ], [\n            'field' => 'parent_option.'.$of['id'],\n            'operator' => 'isnull'\n          ]\n        ]\n      ]\n    );\n\n    if ($tmp) {\n      $permissions = [];\n      foreach ($tmp as $id) {\n        \/** @var array The option's config *\/\n        $cfg = $this->opt->getCfg($id) ?: [];\n        if (!empty($cfg['permissions'])) {\n          $permissions[$id] = $cfg['permissions'];\n          foreach ($this->opt->getAliasItems($id) as $alias) {\n            $permissions[$alias] = $cfg['permissions'];\n          }\n        }\n\n        \/*\n        if (isset($cfg['scfg']) && !empty($cfg['scfg']['permissions'])) {\n          foreach ($this->opt->items($id) as $ido) {\n            $permissions[$ido] = $cfg['scfg']['permissions'];\n          }\n        }\n        *\/\n      }\n\n\n      foreach ($permissions as $id => $mode) {\n        $all = [];\n        \/** @var array The parents, starting from root *\/\n        if (!($root = $this->optionPermissionRoot($id, true))) {\n          continue;\n        }\n\n        $it = false;\n        switch ($mode) {\n          case 'single':\n            if ($tmp = $this->opt->option($id)) {\n              $it = $tmp;\n            }\n            break;\n          case 'cascade':\n          case 'all':\n            if ($tmp = $this->opt->fullTree($id)) {\n              $it = $tmp;\n            }\n            break;\n          case 'children':\n          case 1:\n          case '1':\n            if ($tmp = $this->opt->fullOptions($id)) {\n              $it = $this->opt->option($id);\n              $it['items'] = $tmp;\n            }\n            break;\n        }\n\n        if ($it) {\n          $all = X::rmap(\n            function ($a) {\n              $tmp = [\n                'text' => '',\n                'code' => null,\n                'id_alias' => $a['id']\n              ];\n              if (!empty($a['items'])) {\n                $tmp['items'] = $a['items'];\n              }\n\n              return $tmp;\n            },\n            [$it],\n            'items'\n          );\n\n          $all[0]['id_parent'] = $root;\n          $num += $this->createOptionPermission($all[0]);\n        }\n      }\n    }\n\n    return $num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 850,
            "endLine": 980,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "optionsUpdateAll",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Updates all the permission for the options.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Updates all the permission for the options.\n   *\n   * @return int|null\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOptionRoot()\n  {\n    return $this->opt->fromCode('access', 'permissions');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 982,
            "endLine": 985,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "updateAll": {
            "name": "updateAll",
            "summary": "update All",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateAll(array $routes)\n  {\n    $this->opt->deleteCache();\n\n    $res = ['total' => 0];\n\n    \/** @var string The option's ID of the permissions on pages (controllers) $id_page *\/\n    $id_page = $this->opt->fromCode('access', 'permissions');\n\n    \/** @var string The option's ID of the permissions on pages (controllers) $id_page *\/\n\n    \/\/ The app base access\n    if ($id_page) {\n\n      \/** @todo Add the possibility to do it for another project? *\/\n      $idPluginsTemplate = $this->opt->getPluginsTemplateId();\n      $idPluginTemplate = $this->opt->getPluginTemplateId();\n      $aliases = $this->opt->getAliasFullOptions($idPluginTemplate);\n      $aliasesByName = [];\n      \/\/ Each plugin, including the main app\n      foreach ($aliases as $a) {\n        $pluginGroup = $this->opt->closest($a['id'], $idPluginsTemplate);\n        if ($pluginGroup) {\n          $name = $this->opt->toPath($a['id'], '-', $pluginGroup);\n        }\n        elseif ($a['code'] === constant('BBN_APP_NAME')) {\n          $name = $a['code'];\n        }\n\n        if ($name) {\n          $aliasesByName[$name] = $a;\n        }\n\n      }\n\n      if (!empty($routes)) {\n        foreach ($routes as $url => $route) {\n          if (!isset($aliasesByName[$route['name']])) {\n            $err = X::_(\"Impossible to find the plugin %s\", $route['name']);\n            X::log($err, 'errorUpdatePermissions');\n            throw new Exception($err);\n          }\n\n          $root = $this->opt->fromCode('access', 'permissions', $aliasesByName[$route['name']]['id']);\n          if (!$root) {\n            $err = X::_(\"Impossible to find the plugin %s\", $route['name']);\n            X::log($err, 'errorUpdatePermissions');\n            throw new Exception($err);\n          }\n\n          $res['data'] = $this->accessUpdatePath($route['path'], $root, $url);\n        }\n      }\n\n      \/\/$res['total'] += $this->optionsUpdateAll();\n\n      $this->opt->deleteCache();\n    }\n\n    return $res;\n\n  }",
            "parent": false,
            "trait": false,
            "startLine": 994,
            "endLine": 1055,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "updateAll",
            "returns": [],
            "arguments": [
                {
                    "name": "routes",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "update All\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$routes"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * update All\n   *\n   * @param array $routes\n   *\n   * @return void\n   *\/"
        },
        "createFromId": {
            "name": "createFromId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createFromId(string $id): ?string\n  {\n    $opt = $this->opt->option($id);\n    if (!$opt) {\n      X::log($this->opt->option($id));\n      throw new Exception(\"The option $id doesn't exist\");\n    }\n\n    if ($this->optionToPermission($id)) {\n      throw new Exception(\"The permission for option $id already exist\");\n    }\n\n    \/** @var string The option's ID for appui *\/\n    $appui   = $this->opt->fromCode('appui');\n\n    \/** @var string The option's ID for plugins *\/\n    $plugins = $this->opt->fromCode('plugins');\n\n    \/** @var array The parents, the first being root *\/\n    $parents = array_reverse($this->opt->parents($id));\n\n    \/** @var string The root (with options code) for this option's permission *\/\n    $root    = $this->optionPermissionRoot($id);\n\n    $num     = count($parents);\n\n    if ($num < 2) {\n      throw new Exception(\"The permission for option $id already exist\");\n    }\n\n    \/\/ Removing root\n    array_shift($parents);\n    \/\/ appui or plugins or neither (main app)\n    $root_original = array_shift($parents);\n\n    \/\/ Looking for the root of the options' permissions\n    if (($num > 2) && \\in_array($root_original, [$appui, $plugins])) {\n\n      \/\/ Plugin inside a plugin\n      if (($num > 4) && ($this->opt->code($parents[1]) === 'plugins')) {\n\n        \/** @var string  *\/\n        $id_plugin = array_shift($parents);\n        \/\/ dropping 'plugins'\n        array_shift($parents);\n\n        $root_parent = $this->opt->fromCode('plugins', 'permissions', $id_plugin);\n        if (!$root_parent) {\n          throw new Exception(\"Impossible to find a parent for plugin's permission \".$id_plugin);\n        }\n\n        $id_subplugin = array_shift($parents);\n        $subplugin  = $this->opt->code($id_subplugin);\n        if ($root_original === $appui) {\n\n        }\n        $alias = $this->opt->fromCode(\n          'options',\n          'permissions',\n          substr($subplugin, $root_original === $appui ? 6: 0),\n          $root_original\n        );\n\n        $id_root = $this->opt->fromCode($subplugin, $root_parent);\n\n        if (!$id_root) {\n          $id_root = $this->opt->add([\n            'id_parent' => $root_parent,\n            'code' => $subplugin,\n            'text' => $subplugin,\n            'id_alias' => $alias\n          ]);\n        }\n\n      }\n      else {\n        $id_root = $this->opt->fromCode('options', 'permissions', array_shift($parents));\n      }\n    }\n    else {\n      $id_root = $this->opt->fromCode('options', 'permissions');\n    }\n\n    if (!$id_root) {\n      throw new Exception(\"No root found for option $id\");\n    }\n\n    $parents = array_reverse($parents);\n    \/\/ All the parents from the closest\n    $parents = $this->opt->parents($id);\n    \/\/ The farest parent having permissions set\n    $id_parent = false;\n    $perm_parents = [];\n    $id_parent_perm = null;\n    \/\/ Looping all the parent IDs from the deepest\n    foreach ($parents as $i => $p) {\n      $cfg = $this->opt->getCfg($p);\n      $id_parent = null;\n      \/\/ The root is the last with permnission on\n      if (!$cfg['permissions'] ) {\n        $parent_option = $this->opt->option($p);\n        if (!empty($parent_option['alias'])) {\n          $scfg = $this->opt->getCfg($parent_option['id_alias']);\n          if ($scfg['permissions']) {\n            $id_parent = $p;\n          }\n        }\n      }\n      else {\n        if (!$i && ($cfg['permissions'] === 'children')) {\n          $id_parent = $p;\n        }\n        elseif (in_array($cfg['permissions'], ['all', 'cascade'])) {\n          $id_parent = $p;\n        }\n      }\n\n      if ($id_parent) {\n        \/\/ Looking for the permission\n        $aliases = $this->opt->getAliasItems($id_parent);\n        foreach ($aliases as $a) {\n          if (in_array($root, $this->opt->parents($a))) {\n            $id_parent_perm = $a;\n            break;\n          }\n        }\n        \n        \/\/ We break at first permission found\n        if ($id_parent_perm) {\n          break;\n        }\n        else {\n          $perm_parents[] = $id_parent;\n        }\n      }\n    }\n\n    $id_parent = $id_parent_perm ?: $id_root;\n    foreach (array_reverse($perm_parents) as $a) {\n      $id_parent = $this->opt->add(\n        [\n          'id_parent' => $id_parent,\n          'id_alias'  => $a\n        ]\n      );\n    }\n\n    return $this->opt->add(\n      [\n        'id_parent' => $id_parent,\n        'id_alias'  => $id\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1058,
            "endLine": 1211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "createFromId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createOptionPermission": {
            "name": "createOptionPermission",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createOptionPermission(array $item): ?int\n  {\n    if (X::hasProps($item, ['id_parent', 'id_alias'], true)) {\n      $cf       = $this->opt->getClassCfg();\n      $co       =& $cf['arch']['options'];\n      $res      = 0;\n      $children = false;\n      $id       = $this->db->selectOne(\n        $cf['table'],\n        $co['id'],\n        [\n          $co['id_parent'] => $item['id_parent'],\n          $co['id_alias'] => $item['id_alias']\n        ]\n      );\n      if (!empty($item['items'])) {\n        $children = $item['items'];\n        unset($item['items']);\n      }\n\n      if (!$id) {\n        $item['text'] = null;\n        $id = $this->opt->add($item);\n        if ($id) {\n          $res++;\n        }\n      }\n      elseif ($this->opt->text($id)) {\n        $this->db->update(\n          $cf['table'],\n          [\n            $co['text'] => null,\n            $co['cfg'] => null,\n            $co['value'] => null\n          ],\n          [$co['id'] => $id]\n        );\n      }\n\n      if ($id && $children) {\n        \/\/die(var_dump($subitems, $item));\n        foreach ($children as $it) {\n          $it['id_parent'] = $id;\n          $res             += (int)$this->createOptionPermission($it);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1214,
            "endLine": 1266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "createOptionPermission",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fFilter": {
            "name": "fFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fFilter(array $a): bool\n  {\n    if (!empty($a['num'])\n      || ((substr($a['name'], -4) === '.php')\n          && (X::basename($a['name']) !== '_super.php'))\n    ) {\n      if (!$this->isAuthorizedRoute($a['path'])) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1269,
            "endLine": 1281,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fFilter",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "a",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fTreat": {
            "name": "fTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function fTreat(array $tree, $parent = false)\n  {\n    $res = [];\n    foreach ($tree as $i => $t){\n      $code      = $t['type'] === 'dir' ? X::basename($t['name']).'\/' : X::basename($t['name'], '.php');\n      $text      = $t['type'] === 'dir' ? X::basename($t['name']) : X::basename($t['name'], '.php');\n      $o         = [\n        'code' => $code,\n        'text' => $text\n      ];\n      if ($t['type'] === 'file') {\n        $o['type'] = 'file';\n      }\n\n      if (!empty($t['items'])) {\n        $o['items'] = self::fTreat($t['items'], $o['code']);\n      }\n\n      array_push($res, $o);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1284,
            "endLine": 1306,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fTreat",
            "returns": [],
            "arguments": [
                {
                    "name": "tree",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "fSort": {
            "name": "fSort",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function fSort($a, $b)\n  {\n    if (substr($a['code'], -1) === '\/') {\n      $a['code'] = '00'.$a['code'];\n    }\n\n    if (substr($b['code'], -1) === '\/') {\n      $b['code'] = '00'.$b['code'];\n    }\n\n    $a = str_replace('.', '0', str_replace('_', '1', Str::changeCase($a['code'], 'lower')));\n    $b = str_replace('.', '0', str_replace('_', '1', Str::changeCase($b['code'], 'lower')));\n    return strcmp($a, $b);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1310,
            "endLine": 1323,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "fSort",
            "returns": [],
            "arguments": [
                {
                    "name": "a",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "b",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fWalk": {
            "name": "fWalk",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function fWalk(&$a)\n  {\n    if (!empty($a['items'])) {\n      usort($a['items'],  ['\\\\bbn\\User\\\\Permissions', 'fSort']);\n      array_walk($a['items'], ['\\\\bbn\\User\\\\Permissions', 'fWalk']);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1327,
            "endLine": 1333,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fWalk",
            "returns": [],
            "arguments": [
                {
                    "name": "a",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fMerge": {
            "name": "fMerge",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function fMerge(&$target, $src, $path)\n  {\n    $parts = explode('\/', $path);\n    foreach ($parts as $p){\n      if (!empty($p)) {\n        foreach ($target as $i => $a){\n          if (($a['code'] === $p.'\/') && !empty($target[$i]['items'])) {\n            self::fMerge($target[$i]['items'], $src, substr($path, \\strlen($p) + 1));\n            return;\n          }\n        }\n\n        array_push(\n          $target, [\n          'code' => $p.'\/',\n          'text' => $p,\n          'items' => $src\n          ]\n        );\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1336,
            "endLine": 1357,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "fMerge",
            "returns": [],
            "arguments": [
                {
                    "name": "target",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "src",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_add": {
            "name": "_add",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _add($o, $id_parent, string $url = '', array &$res = []): int\n  {\n    $total = 0;\n    $items = isset($o['items']) ? $o['items'] : false;\n    unset($o['items']);\n    $path = $url . $o['code'];\n    $o['id_parent'] = $id_parent;\n    if (!($id = $this->opt->fromCode($o['code'], $id_parent))) {\n      if ($id = $this->opt->add($o)) {\n        $res[$id] = $path;\n      }\n    }\n\n    \/* No(bool)!\n    else if ( isset($o['cfg']) ){\n      $this->opt->set($id, $o);\n    }\n    *\/\n    if (\\is_array($items)) {\n      foreach ($items as $it){\n        if (substr($path, -1) !== '\/') {\n          $path .= '\/';\n        }\n\n        $total += $this->_add($it, $id, $path, $res);\n      }\n    }\n\n    return $total;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1361,
            "endLine": 1390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "_add",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "o",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "url",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "res",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "_get_id_option": {
            "name": "_get_id_option",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_id_option(string|null $id_option = null, $type = 'access'): ?string\n  {\n    if ($id_option && !Str::isUid($id_option)) {\n      $id_option = $this->fromPath($id_option, $type);\n    }\n    elseif (null === $id_option) {\n      $id_option = $this->getCurrent();\n    }\n\n    if (Str::isUid($id_option)) {\n      return $id_option;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1398,
            "endLine": 1412,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_id_option",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|null $id_option\n   * @param string      $type\n   * @return null|string\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "retrieverInit": {
            "name": "retrieverInit",
            "summary": "Initialize the retriever by putting its own instance as static property.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function retrieverInit(self $instance): void\n  {\n    self::$retriever_exists = true;\n    if (!self::$retriever_instance) {\n      self::$retriever_instance = $instance;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 31,
            "endLine": 37,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieverInit",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "instance",
                    "position": 0,
                    "type": "self",
                    "type_arr": [
                        "self"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The instance object."
                }
            ],
            "doc": {
                "description": "Initialize the retriever by putting its own instance as static property.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "self",
                        "name": "$instance",
                        "description": "The instance object."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the retriever by putting its own instance as static property.\n   *\n   * @param self $instance The instance object.\n   * @return void\n   *\/"
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getInstance(): ?self\n  {\n    return self::$retriever_instance;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 44,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getInstance",
            "returns": [
                null,
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the instance of the singleton or null.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the instance of the singleton or null.\n   * \n   * @return self\n   *\/"
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function retrieverExists(): bool\n  {\n    return self::$retriever_exists;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 54,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "retrieverExists",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if an instance as been initiated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if an instance as been initiated.\n   *\n   * @return bool\n   *\/"
        },
        "_set_current": {
            "name": "_set_current",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Current.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _set_current(string $current): void\n  {\n    self::$current = $current;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Current",
            "startLine": 21,
            "endLine": 24,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_current",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "current",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$current"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $current\n   *\/"
        },
        "setCurrent": {
            "name": "setCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Current.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCurrent(string $id_option): void\n  {\n    self::_set_current($id_option);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Current",
            "startLine": 29,
            "endLine": 32,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setCurrent",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_option\n   *\/"
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Permissions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Current.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrent(): ?string\n  {\n    return self::$current;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Current",
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrent",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|string\n   *\/"
        }
    },
    "properties": {
        "opt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\User\\Permissions",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Option",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "pref": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\User\\Permissions",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Preferences",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\User\\Permissions",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var User",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\User\\Permissions",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Db",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "plugins": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\User\\Permissions",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "allowedRoutes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\User\\Permissions",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "forbiddenRoutes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\User\\Permissions",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "retriever_instance": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "self",
                        "description": "An instance of the current class."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "retriever_exists": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Will be true from the moment an instance exists."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "current": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Permissions"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Current",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string The current ID",
                "tags": []
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "retriever_instance": {},
        "retriever_exists": true,
        "current": "f8c061f7194711eb83ae0050560a97cd"
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\User": "User",
        "bbn\\Db": "Db",
        "bbn\\Mvc": "Mvc",
        "bbn\\User\\Preferences": "Preferences",
        "bbn\\Appui\\Option": "Option",
        "bbn\\File\\System": "System",
        "bbn\\Models\\Cls\\Basic": "Basic",
        "bbn\\Models\\Tts\\Retriever": "Retriever",
        "bbn\\Models\\Tts\\Current": "Current"
    },
    "dummyComments": [
        "\/**\n * @package user\n *\/",
        "\/**\n * A permission system linked to options, User classes and preferences.\n *\n * A permission is an option under the permission option (\"permissions\", \"appui\") or one of its aliases.\n * They are ONLY permissions.\n *\n * No(bool)! From the moment a user or a group has a preference on an item, it is considered to have a permission.\n * No(bool)! Deleting a permission deletes the preference\n *\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Nov 24, 2016, 13:23:12 +0000\n * @category  Authentication\n * @license   http:\/\/opensource.org\/licenses\/MIT MIT\n * @version 0.1\n * @todo Store the deleted preferences? And restore them if the a permission is re-given\n *\/"
    ],
    "summary": "A permission system linked to options, User classes and preferences.",
    "description": "A permission is an option under the permission option (\"permissions\", \"appui\") or one of its aliases.\nThey are ONLY permissions.\n\nNo(bool)! From the moment a user or a group has a preference on an item, it is considered to have a permission.\nNo(bool)! Deleting a permission deletes the preference",
    "description_parts": [
        {
            "type": "text",
            "content": "A permission is an option under the permission option (\"permissions\", \"appui\") or one of its aliases.\nThey are ONLY permissions.\n\nNo(bool)! From the moment a user or a group has a preference on an item, it is considered to have a permission.\nNo(bool)! Deleting a permission deletes the preference"
        }
    ]
}