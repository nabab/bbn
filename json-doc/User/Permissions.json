{
    "doc": {
        "description": "A permission system linked to options, User classes and preferences.\n *\nA permission is an option under the permission option (\"permissions\", \"appui\") or one of its aliases.\nThey are ONLY permissions.\n *\nNo!!! From the moment a user or a group has a preference on an item, it is considered to have a permission.\nNo!!! Deleting a permission deletes the preference",
        "tags": {
            "copyright": "BBN Solutions",
            "since": "Nov 24, 2016, 13:23:12 +0000",
            "category": "Authentication",
            "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
            "version": "0.1",
            "todo": "Store the deleted preferences? And restore them if the a permission is re-given"
        }
    },
    "name": "bbn\\User\\Permissions",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Current"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/User\/Permissions.php",
    "startLine": 33,
    "endLine": 1285,
    "contentConstructor": {
        "file": "bbn\\User\\Permissions",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Permissions constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $routes = NULL)\n  {\n    if (!($this->opt = Option::getInstance())) {\n      throw new \\Exception(X::_('Impossible to construct permissions: you need to instantiate options before'));\n    }\n\n    if (!($this->user = User::getInstance())) {\n      throw new \\Exception(X::_('Impossible to construct permissions: you need to instantiate user before'));\n    }\n\n    if (!($this->pref = Preferences::getInstance())) {\n      throw new \\Exception(X::_('Impossible to construct permissions: you need to instantiate preferences before'));\n    }\n\n    if ($routes) {\n      foreach ($routes as $url => $plugin) {\n        $plugin['url']   = $url;\n        $this->plugins[] = $plugin;\n      }\n    }\n\n    self::retrieverInit($this);\n    self::optionalInit();\n    $this->db = Db::getInstance();\n  }",
            "startLine": 60,
            "endLine": 84,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "routes",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "fromPath": {
            "name": "fromPath",
            "summary": "Returns the option's ID corresponds to the given path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $type = 'access', $create = false)\n  {\n    $opath  = $path;\n    $parent = null;\n    $root   = false;\n    if (($type === 'access') && $this->plugins && !empty($path)) {\n      foreach ($this->plugins as $plugin) {\n        if (strpos($path, $plugin['url'].'\/') === 0) {\n          if (strpos($plugin['name'], 'appui-') === 0) {\n            $root = $this->opt->fromCode(\n              'access',\n              'permissions',\n              substr($plugin['name'], 6),\n              BBN_APPUI\n            );\n            $path = substr($path, strlen($plugin['url']) + 1);\n          }\n          elseif ($plugin['name']) {\n            $root = $this->opt->fromCode(\n              'access',\n              'permissions',\n              $plugin['name'],\n              'plugins',\n            );\n            $path = substr($path, strlen($plugin['url']) + 1);\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (!$root) {\n      $root = $this->opt->fromCode($type, self::$option_root_id);\n    }\n\n    if (!$root) {\n      throw new \\Exception(X::_(\"Impossible to find the permission code for $path\"));\n    }\n\n    $parts  = explode('\/', trim($path, '\/'));\n    $parent = $root;\n\n    foreach ($parts as $i => $p){\n      $is_last = $i === (\\count($parts) - 1);\n      if (!empty($p)) {\n        $prev_parent = $parent;\n        \/\/ Adds a slash for each bit of the path except the last one\n        $parent = $this->opt->fromCode($p.($is_last ? '' : '\/'), $prev_parent);\n            \/\/ If not found looking for a subpermission\n        if (!$parent && !$is_last) {\n          $parent = $this->opt->fromCode($p, $prev_parent);\n        }\n        elseif ($is_last && $prev_parent && !$parent && $create) {\n          if ($this->_add(\n            [\n              'code' => $p,\n              'text' => $p\n            ],\n            $prev_parent\n          )\n          ) {\n            $parent = $this->db->lastId();\n          }\n        }\n      }\n    }\n\n    return $parent ?: null;\n  }",
            "startLine": 96,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The type"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                },
                {
                    "name": "create",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "toPath": {
            "name": "toPath",
            "summary": "Returns the path corresponding to the given ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    $p    = [];\n    $bits = $this->opt->getCodePath($id_option);\n    \/\/ Minimum: appui, plugin, permissions, path\n    if (empty($bits) || (count($bits) < 4)) {\n      return null;\n    }\n\n    $bits = array_reverse($bits);\n    if (array_shift($bits) !== 'appui') {\n      return null;\n    }\n\n    $root   = array_shift($bits);\n    $ok     = false;\n    $prefix = '';\n    \/\/ Main application\n    if ($root === 'permissions') {\n      if (array_shift($bits) !== 'access') {\n        throw new \\Exception(\"The permission should be under access\");\n      }\n\n      $ok = true;\n    }\n    \/\/ Plugins\n    elseif ($plugin = X::getRow($this->plugins, ['name' => 'appui-'.$root])) {\n      if ((array_shift($bits) !== 'permissions') || (array_shift($bits) !== 'access')) {\n        throw new \\Exception(\"The permission should be under permissions\/access of the plugin\");\n      }\n\n      $prefix = $plugin['url'].'\/';\n      $ok     = true;\n    }\n\n    if ($ok) {\n      return $prefix.X::join($bits, '');\n    }\n\n    return null;\n  }",
            "startLine": 175,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "options": {
            "name": "options",
            "summary": "Returns the result of Option::Options filtered through current user's permissions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access')\n  {\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && ($os = $this->opt->options($id_option))\n    ) {\n      $res = [];\n      foreach ($os as $id => $o){\n        if ($this->pref->has($id)) {\n          $res[$id] = $o;\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 225,
            "endLine": 241,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "fullOptions": {
            "name": "fullOptions",
            "summary": "Returns the result of Option::fullOptions filtered through current user's permissions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access')\n  {\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && ($os = $this->opt->fullOptions($id_option))\n    ) {\n      $res = [];\n      foreach ($os as $o){\n        \/* if ( ($ids = $this->pref->retrieveIds($o['id'])) && ($cfg = $this->pref->get($ids[0])) ){\n          $res[] = X::mergeArrays($o, $cfg);\n        } *\/\n        if ($this->has($o['id'], $type)) {\n          $res[] = X::mergeArrays($o, $this->pref->getByOption($o['id']) ?: []);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 251,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "getAll": {
            "name": "getAll",
            "summary": "Returns the full list of permissions existing in the given option",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access')\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->options($id_option ?: $this->getCurrent());\n    }\n\n    return null;\n  }",
            "startLine": 280,
            "endLine": 287,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "getFull": {
            "name": "getFull",
            "summary": "Returns the full list of permissions existing in the given option with all the current user's preferences",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access')\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->fullOptions($id_option ?: $this->getCurrent());\n    }\n\n    return null;\n  }",
            "startLine": 297,
            "endLine": 304,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "Returns an option combined with its sole\/first permission",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access', $force = false)\n  {\n    \/*\n    if ( $all = $this->getAll($id_option, $type) ){\n      $r = [];\n      foreach ( $all as $a ){\n        if ( $this->has($a['id'], '', $force) ){\n          $r[] = $a;\n        }\n      }\n      return $r;\n    }\n    *\/\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && $this->has($id_option, $type, $force)\n    ) {\n      return $this->pref->option($id_option);\n    }\n\n    return null;\n  }",
            "startLine": 315,
            "endLine": 335,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "Force permission check"
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "has": {
            "name": "has",
            "summary": "Checks if a user and\/or a group has a permission.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access', $force = false)\n  {\n    if (!$force && $this->user && $this->user->isDev()) {\n      return true;\n    }\n\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      $option = $this->opt->option($id_option);\n      if (!empty($option['public'])) {\n        return true;\n      }\n\n      return $this->pref->has($id_option, $force);\n    }\n\n    return false;\n  }",
            "startLine": 346,
            "endLine": 362,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "Force permission check"
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasDeep": {
            "name": "hasDeep",
            "summary": "Checks if a user and\/or a group has a permission for the given option or for its childern.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $type = 'access', $force = false)\n  {\n    if (!$force && $this->user && $this->user->isDev()) {\n      return true;\n    }\n\n    if ($this->has($id_option, $type, $force)) {\n      return true;\n    }\n\n    if (($id_option = $this->_get_id_option($id_option, $type))\n        && ($options = $this->opt->fullOptions($id_option))\n    ) {\n      foreach ($options as $option){\n        if ($this->hasDeep($option['id'], $type, $force)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
            "startLine": 373,
            "endLine": 394,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": "",
                    "description": "Force permission check"
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "is": {
            "name": "is",
            "summary": "Alias of fromPath.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $type = 'access')\n  {\n    return $this->fromPath($path, $type);\n  }",
            "startLine": 404,
            "endLine": 407,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "customize": {
            "name": "customize",
            "summary": "Adapts a given array of options' to user's permissions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $arr)\n  {\n    $res = [];\n    if (isset($arr[0])) {\n      foreach ($arr as $a){\n        if (isset($a['id']) && $this->has($a['id'])) {\n          $res[] = $a;\n        }\n      }\n    }\n    elseif (isset($arr['items'])) {\n      $res = $arr;\n      unset($res['items']);\n      foreach ($arr['items'] as $a){\n        if (isset($a['id']) && $this->has($a['id'])) {\n          if (!isset($res['items'])) {\n            $res['items'] = [];\n          }\n\n          $res['items'][] = $a;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 418,
            "endLine": 443,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "add": {
            "name": "add",
            "summary": "Grants a new permission to a user or a group.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option, $type = 'access')\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->setByOption($id_option, []);\n    }\n\n    return null;\n  }",
            "startLine": 453,
            "endLine": 460,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "remove": {
            "name": "remove",
            "summary": "Deletes a preference for a path or an ID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option, $type = 'access')\n  {\n    if ($id_option = $this->_get_id_option($id_option, $type)) {\n      return $this->pref->delete($id_option);\n    }\n\n    return null;\n  }",
            "startLine": 470,
            "endLine": 477,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The type: access or option"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "access",
                    "default_name": ""
                }
            ]
        },
        "getParentCfg": {
            "name": "getParentCfg",
            "summary": "Returns the permissions inherited properties.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    foreach ($this->opt->parents($id_option) as $i => $p) {\n      $cfg = $this->opt->getCfg($p);\n      if (!empty($cfg['permissions'])) {\n        if ((!$i && ($cfg['permissions'] === 'children')) \n          || in_array($cfg['permissions'], ['all', 'cascade'])\n        ) {\n          return [\n            'cfg' => $cfg['permissions'],\n            'from' => $p,\n            'from_text' => $this->opt->text($p),\n            'cascade' => in_array($cfg['permissions'], ['all', 'cascade'])\n          ];\n        }\n\n        break;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 486,
            "endLine": 507,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "optionToPermission": {
            "name": "optionToPermission",
            "summary": "Returns the corresponding permission of a given option.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option, $create = false)\n  {\n    if (bbn\\Str::isUid($id_option)) {\n      $aliases = $this->opt->getAliasItems($id_option);\n      $root    = $this->optionPermissionRoot($id_option);\n      $id_perm = null;\n      $all     = [];\n      foreach ($aliases as $a) {\n        $parents = $this->opt->parents($a);\n        if (in_array($root, $parents)) {\n          $id_perm = $a;\n          break;\n        }\n      }\n\n      \/*\n      if (!$id_perm) {\n        foreach ($aliases as $i => $a) {\n          foreach ($all[$i] as $b) {\n            if ($this->opt->alias($b) === $root) {\n              $id_perm = $a;\n              break;\n            }\n          }\n        }\n      }\n      *\/\n\n      if (!$id_perm && $create) {\n        $this->createFromId($id_option);\n        return $this->optionToPermission($id_option);\n      }\n\n      return $id_perm ?: null;\n    }\n  }",
            "startLine": 518,
            "endLine": 553,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The permission will be created if it doesn't exist."
                },
                {
                    "name": "create",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "readOption": {
            "name": "readOption",
            "summary": "Checks if the given option is readable by the current user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option = NULL, $force = false)\n  {\n    if ($this->user->isAdmin()) {\n      return true;\n    }\n\n    if ($id_perm = $this->optionToPermission($id_option)) {\n      return $this->pref->has($id_perm, $force) ?: $this->user->isAdmin();\n    }\n\n    return true;\n  }",
            "startLine": 562,
            "endLine": 573,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "writeOption": {
            "name": "writeOption",
            "summary": "Checks if the given option is writable by the current user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option, $force = false)\n  {\n    return $this->readOption($id_option, $force);\n  }",
            "startLine": 582,
            "endLine": 585,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getSources": {
            "name": "getSources",
            "summary": "Returns an array corresponding to the different roots for permissions in the project.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($only_with_children = true)\n  {\n    $appui   = $this->opt->fromCode('appui');\n    $root    = $this->opt->fromCode('permissions', $appui);\n    $access  = $this->opt->fromCode('access', $root);\n    $options = $this->opt->fromCode('options', $root);\n    $plugins = $this->opt->fromCode('plugins');\n    $sources = [[\n      'text' => _(\"Main application\"),\n      'rootAccess' => $access,\n      'rootOptions' => $options,\n      'code' => ''\n    ]];\n    $all     = array_merge(\n      array_map(\n        function($a) {\n          $a['code'] = 'appui-'.$a['code'];\n          return $a;\n        },\n        $this->opt->fullOptions($appui)\n      ),\n      $this->opt->fullOptions($plugins)\n    );\n    foreach ($all as $o) {\n      if (!empty($o['plugin'])\n          && ($id_perm = $this->opt->fromCode('access', 'permissions', $o['id']))\n      ) {\n        $id_option = $this->opt->fromCode('options', 'permissions', $o['id']);\n        $tmp       = $this->opt->option($id_perm);\n        if (!$only_with_children || !empty($tmp['num_children'])) {\n          $sources[] = [\n            'text' => $o['text'],\n            'code' => $o['code'],\n            'rootAccess' => $id_perm,\n            'rootOptions' => $id_option\n          ];\n        }\n      }\n    }\n\n    return $sources;\n  }",
            "startLine": 595,
            "endLine": 636,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "only_with_children",
                    "position": 0,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "accessExists": {
            "name": "accessExists",
            "summary": "Checks if the given permission corresponds to real file in mvc\/public.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_perm)\n  {\n    $real    = false;\n    $parents = array_reverse($this->opt->parents($id_perm));\n    $access  = $this->opt->fromCode('access', 'permissions', 'appui');\n    if (in_array($access, $parents, true)) {\n      $path_to_file = $this->opt->toPath($id_perm, '', $access);\n      if (substr($path_to_file, -1) === '\/') {\n        return is_dir(bbn\\Mvc::getAppPath().'mvc\/public\/'.substr($path_to_file, 0, -1));\n      }\n\n      return file_exists(bbn\\Mvc::getAppPath().'mvc\/public\/'.$path_to_file.'.php');\n    }\n    else {\n      $plugin_name = $this->opt->code($parents[2]);\n      if ($this->opt->code($parents[1]) === 'appui') {\n        $plugin_name = 'appui-'.$plugin_name;\n      }\n\n      $path_to_file = $this->opt->toPath($id_perm, '', $parents[4]);\n      if (substr($path_to_file, -1) === '\/') {\n        return is_dir(bbn\\Mvc::getPluginPath($plugin_name).'mvc\/public\/'.substr($path_to_file, 0, -1));\n      }\n\n      return file_exists(bbn\\Mvc::getPluginPath($plugin_name).'mvc\/public\/'.$path_to_file.'.php');\n    }\n\n    return false;\n  }",
            "startLine": 646,
            "endLine": 674,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_perm",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "accessPluginRoot": {
            "name": "accessPluginRoot",
            "summary": "Returns",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name)\n  {\n    $args = ['access', 'permissions'];\n    if (strpos($name, 'appui-') === 0) {\n      array_push($args, substr($name, 6), 'appui');\n    }\n    else {\n      array_push($args, $name, 'plugins');\n    }\n    X::log($args, 'errorUpdatePermissions');\n\n    return $this->opt->fromCode(...$args);\n  }",
            "startLine": 684,
            "endLine": 696,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "optionPermissionRoot": {
            "name": "optionPermissionRoot",
            "summary": "Returns",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $create = false)\n  {\n    \/** @var string The option's ID for appui *\/\n    $appui   = $this->opt->fromCode('appui');\n    \/** @var string The option's ID for plugins *\/\n    $plugins = $this->opt->fromCode('plugins');\n    \/** @var array The parents, the first being root *\/\n    $parents = array_reverse($this->opt->parents($id));\n    $num     = count($parents);\n\n    \/\/ Looking for the root of the options' permissions\n    if (($num > 2) && \\in_array($parents[1], [$appui, $plugins])) {\n\n      if (($num > 4) && ($this->opt->code($parents[3]) === 'plugins')) {\n        $root_parent = $this->opt->fromCode('plugins', 'permissions', $parents[2]);\n        if (!$root_parent) {\n          throw new \\Exception(\"Impossible to find a parent for plugin $plugin\");\n        }\n\n        $plugin  = $this->opt->code($parents[4]);\n        if ($parents[1] === $appui) {\n          $alias = $this->opt->fromCode('options', 'permissions', $plugin, 'appui');\n        }\n        else {\n          $alias = $this->opt->fromCode('options', 'permissions', $plugin, 'plugins');\n        }\n\n        $id_root = $this->opt->fromCode($plugin, $root_parent);\n        if (!$id_root && $create) {\n          $id_root = $this->opt->add([\n            'id_parent' => $root_parent,\n            'code' => $plugin,\n            'text' => $plugin,\n            'id_alias' => $alias\n          ]);\n        }\n\n        return $id_root;\n      }\n\n      return $this->opt->fromCode('options', 'permissions', $parents[2]);\n    }\n\n    \/** @var string The option's ID of the permissions on options $id_option *\/\n    return $this->getOptionId('options');\n  }",
            "startLine": 706,
            "endLine": 751,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "create",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "accessUpdatePath": {
            "name": "accessUpdatePath",
            "summary": "Updates all access permission for the given path in the given root.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $root, $url = '')\n  {\n      string $root,\n      string $url = ''\n  ): int\n  {\n    if (!empty($url) && (substr($url, -1) !== '\/')) {\n      $url .= '\/';\n    }\n\n    $num = 0;\n    $fs  = new bbn\\File\\System();\n    $ff  = function ($a) use ($url, $path) {\n      $mvc = \\bbn\\Mvc::getInstance();\n      if (empty($url)) {\n        $a['path'] = substr($a['name'], strlen(\\bbn\\Mvc::appPath().'mvc\/public\/'));\n      }\n      else {\n        $a['path'] = $url.substr($a['name'], strlen($path.'mvc\/public\/'));\n      }\n\n      if (substr($a['path'], -4) === '.php') {\n        $a['path'] = substr($a['path'], 0, -4);\n      }\n\n      return \\bbn\\User\\Permissions::fFilter($a);\n    };\n    if ($all = $fs->getTree($path.'mvc\/public', '', false, $ff)) {\n      $all = self::fTreat($all, false);\n      usort($all, ['\\\\bbn\\User\\\\Permissions', 'fSort']);\n      array_walk($all, ['\\\\bbn\\\\User\\\\Permissions', 'fWalk']);\n      foreach ($all as $i => $it) {\n        $it['cfg'] = json_encode(['order' => $i + 1]);\n        $num      += $this->_add($it, $root);\n      }\n    }\n\n    return $num;\n  }",
            "startLine": 764,
            "endLine": 802,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The ID of the root access option"
                },
                {
                    "name": "root",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path part of the URL root of the given absolute path"
                },
                {
                    "name": "url",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "ath The part of the absolute path corresponding to the url"
                }
            ]
        },
        "accessUpdateApp": {
            "name": "accessUpdateApp",
            "summary": "Updates all access permission for the main app.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($id_page = $this->getOptionId('access')) {\n      return $this->accessUpdatePath(bbn\\Mvc::getAppPath(), $id_page);\n    }\n\n    return null;\n  }",
            "startLine": 810,
            "endLine": 817,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "optionsUpdateAll": {
            "name": "optionsUpdateAll",
            "summary": "Updates all the permission for the options.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $cf = $this->opt->getClassCfg();\n    $of =& $cf['arch']['options'];\n\n    $num = 0;\n\n    $tmp = $this->db->getColumnValues(\n      [\n        'table' => $cf['table'],\n        'fields' => [$of['id']],\n        'join' => [\n          [\n            'table' => $cf['table'],\n            'alias' => 'parent_option',\n            'type' => 'left',\n            'on' => [\n              [\n                'field' => 'parent_option.'.$of['id'],\n                'exp' => $cf['table'].'.'.$of['id_parent']\n              ], [\n                'field' => 'parent_option.'.$of['cfg'],\n                'operator' => 'contains',\n                'value' => '\"permissions\":'\n              ]\n            ]\n          ]\n        ],\n        'where' => [\n          [\n            'field' =>  $cf['table'].'.'.$of['cfg'],\n            'operator' => 'contains',\n            'value' => '\"permissions\":'\n          ], [\n            'field' => $cf['table'].'.'.$of['id'],\n            'operator' => '!=',\n            'value' => $this->opt->getRoot()\n          ], [\n            'field' => $cf['table'].'.'.$of['id'],\n            'operator' => '!=',\n            'value' => $this->opt->fromCode('appui')\n          ], [\n            'field' => $cf['table'].'.'.$of['id'],\n            'operator' => '!=',\n            'value' => $this->opt->fromCode('plugins')\n          ], [\n            'field' => 'parent_option.'.$of['id'],\n            'operator' => 'isnull'\n          ]\n        ]\n      ]\n    );\n\n    if ($tmp) {\n      $permissions = [];\n      foreach ($tmp as $id) {\n        \/** @var array The option's config *\/\n        $cfg = $this->opt->getCfg($id) ?: [];\n        if (!empty($cfg['permissions'])) {\n          $permissions[$id] = $cfg['permissions'];\n          foreach ($this->opt->getAliasItems($id) as $alias) {\n            $permissions[$alias] = $cfg['permissions'];\n          }\n        }\n\n        \/*\n        if (isset($cfg['scfg']) && !empty($cfg['scfg']['permissions'])) {\n          foreach ($this->opt->items($id) as $ido) {\n            $permissions[$ido] = $cfg['scfg']['permissions'];\n          }\n        }\n        *\/\n      }\n\n\n      foreach ($permissions as $id => $mode) {\n        $all = [];\n        \/** @var array The parents, starting from root *\/\n        if (!($root = $this->optionPermissionRoot($id, true))) {\n          continue;\n        }\n\n        $it = false;\n        switch ($mode) {\n          case 'single':\n            if ($tmp = $this->opt->option($id)) {\n              $it = $tmp;\n            }\n            break;\n          case 'cascade':\n          case 'all':\n            if ($tmp = $this->opt->fullTree($id)) {\n              $it = $tmp;\n            }\n            break;\n          case 'children':\n          case 1:\n          case '1':\n            if ($tmp = $this->opt->fullOptions($id)) {\n              $it = $this->opt->option($id);\n              $it['items'] = $tmp;\n            }\n            break;\n        }\n\n        if ($it) {\n          $all = X::rmap(\n            function ($a) {\n              $tmp = [\n                'text' => '',\n                'code' => null,\n                'id_alias' => $a['id']\n              ];\n              if (!empty($a['items'])) {\n                $tmp['items'] = $a['items'];\n              }\n\n              return $tmp;\n            },\n            [$it],\n            'items'\n          );\n\n          $all[0]['id_parent'] = $root;\n          $num += $this->createOptionPermission($all[0]);\n        }\n      }\n    }\n\n    return $num;\n  }",
            "startLine": 825,
            "endLine": 955,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "updateAll": {
            "name": "updateAll",
            "summary": "update All",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $routes, $withApp = false)\n  {\n    $this->opt->deleteCache();\n\n    $res = ['total' => 0];\n\n    \/** @var string The ID option for permissions < appui *\/\n    if ($id_permission = $this->getOptionRoot()) {\n      \/** @var string The option's ID for appui *\/\n      $appui = $this->opt->fromCode('appui');\n\n      \/** @var string The option's ID for plugins *\/\n      $plugins = $this->opt->fromCode('plugins');\n\n      \/** @var string The option's ID of the permissions on pages (controllers) $id_page *\/\n      $id_page = $this->getOptionId('access');\n\n      \/** @var string The option's ID of the permissions on pages (controllers) $id_page *\/\n      $id_plugins = $this->getOptionId('plugins');\n\n      \/\/ The app base access\n      if ($id_page) {\n\n        \/** @todo Add the possibility to do it for another project? *\/\n        $fs = new bbn\\File\\System();\n\n        if ($withApp) {\n          $res['total'] += (int)$this->accessUpdateApp();\n        }\n\n        if (!empty($routes)) {\n          foreach ($routes as $url => $route) {\n            $root = $this->accessPluginRoot($route['name']);\n\n            if (!$root) {\n              $err = X::_(\n                \"Impossible to find the plugin %s\",\n                substr($route['name'], 6)\n              );\n              X::log($err, 'errorUpdatePermissions');\n              continue;\n              throw new \\Exception($err);\n            }\n\n            $res['total'] += $this->accessUpdatePath($route['path'].'src\/', $root, $url);\n          }\n        }\n      }\n\n      $res['total'] += $this->optionsUpdateAll();\n\n      $this->opt->deleteCache();\n    }\n\n    return $res;\n\n  }",
            "startLine": 965,
            "endLine": 1021,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "routes",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "withApp",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "createFromId": {
            "name": "createFromId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    \/\/ The option\n    if ($opt = $this->opt->option($id)) {\n      \/\/ All the parents from the closest\n      $parents = $this->opt->parents($id);\n      \/\/ The farest parent having permissions set\n      $id_parent = false;\n      foreach ($parents as $i => $p) {\n        $cfg = $this->opt->getCfg($p);\n        if (!$cfg['permissions']) {\n          break;\n        }\n        else {\n          if (!$i && ($cfg['permissions'] === 'children')) {\n            $id_parent = $p;\n          }\n          elseif (in_array($cfg['permissions'], ['all', 'cascade'])) {\n            $id_parent = $p;\n          }\n        }\n      }\n      \/\/ If no parent with permissions this option must have it\n      if (!$id_parent) {\n        $cfg = $this->opt->getCfg($id);\n        if (!$cfg['permissions']) {\n          return null;\n        }\n\n        \/** @var string The option's ID for appui *\/\n        $appui = $this->opt->fromCode('appui');\n\n        \/** @var string The option's ID for plugins *\/\n        $plugins = $this->opt->fromCode('plugins');\n\n        \/** @var string The option's ID of the permissions on options $id_option *\/\n        $id_option = $this->getOptionId('options');\n        \/\/ we need to locate the root of the permission\n        $rparents = array_reverse($parents);\n        \/\/ Looking for the root of the options' permissions\n        if ((count($rparents) > 2) && \\in_array($rparents[1], [$appui, $plugins])) {\n          $id_perm = $this->opt->fromCode('options', 'permissions', $rparents[2]);\n        }\n        else {\n          $id_perm = $id_option;\n        }\n        \n      }\n      \/\/ Otherwise the parent permission needs to exist\n      elseif (!($id_perm = $this->optionToPermission($id_parent))) {\n        return null;\n      }\n\n      return $this->opt->add([\n        'id_parent' => $id_perm,\n        'id_alias' => $id\n      ]) ? 1 : 0;\n    }\n\n    return null;\n  }",
            "startLine": 1024,
            "endLine": 1084,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createOptionPermission": {
            "name": "createOptionPermission",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $item)\n  {\n    if (X::hasProps($item, ['id_parent', 'id_alias'], true)) {\n      $cf       = $this->opt->getClassCfg();\n      $co       =& $cf['arch']['options'];\n      $res      = 0;\n      $children = false;\n      $id       = $this->db->selectOne(\n        $cf['table'],\n        $co['id'],\n        [\n          $co['id_parent'] => $item['id_parent'],\n          $co['id_alias'] => $item['id_alias']\n        ]\n      );\n      if (!empty($item['items'])) {\n        $children = $item['items'];\n        unset($item['items']);\n      }\n\n      if (!$id) {\n        $item['text'] = null;\n        $id = $this->opt->add($item);\n        X::log($this->opt->getPathArray($item['id_alias']), 'insertPerm');\n        if ($id) {\n          $res++;\n        }\n\n      }\n      elseif ($this->opt->text($id)) {\n        $this->db->update(\n          $cf['table'],\n          [\n            $co['text'] => null,\n            $co['cfg'] => null,\n            $co['value'] => null\n          ],\n          [$co['id'] => $id]\n        );\n      }\n\n      if ($id && $children) {\n        \/\/die(var_dump($subitems, $item));\n        foreach ($children as $it) {\n          $it['id_parent'] = $id;\n          $res             += (int)$this->createOptionPermission($it);\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n\n  }",
            "startLine": 1087,
            "endLine": 1141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fFilter": {
            "name": "fFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $a)\n  {\n    $mvc = bbn\\Mvc::getInstance();\n    if (!empty($a['num'])\n      || ((substr($a['name'], -4) === '.php')\n          && (basename($a['name']) !== '_ctrl.php'))\n    ) {\n      if (!$mvc->isAuthorizedRoute($a['path'])) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1144,
            "endLine": 1157,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "a",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fTreat": {
            "name": "fTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $tree, $parent = false)\n  {\n    $res = [];\n    foreach ($tree as $i => $t){\n      $code      = $t['type'] === 'dir' ? basename($t['name']).'\/' : basename($t['name'], '.php');\n      $text      = $t['type'] === 'dir' ? basename($t['name']) : basename($t['name'], '.php');\n      $o         = [\n        'code' => $code,\n        'text' => $text\n      ];\n      if ($t['type'] === 'file') {\n        $o['type'] = 'file';\n      }\n\n      if (!empty($t['items'])) {\n        $o['items'] = self::fTreat($t['items'], $o['code']);\n      }\n\n      array_push($res, $o);\n    }\n\n    return $res;\n  }",
            "startLine": 1160,
            "endLine": 1182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "tree",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "parent",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "fSort": {
            "name": "fSort",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($a, $b)\n  {\n    if (substr($a['code'], -1) === '\/') {\n      $a['code'] = '00'.$a['code'];\n    }\n\n    if (substr($b['code'], -1) === '\/') {\n      $b['code'] = '00'.$b['code'];\n    }\n\n    $a = str_replace('.', '0', str_replace('_', '1', Str::changeCase($a['code'], 'lower')));\n    $b = str_replace('.', '0', str_replace('_', '1', Str::changeCase($b['code'], 'lower')));\n    return strcmp($a, $b);\n  }",
            "startLine": 1186,
            "endLine": 1199,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "a",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "b",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fWalk": {
            "name": "fWalk",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(&$a)\n  {\n    if (!empty($a['items'])) {\n      usort($a['items'],  ['\\\\bbn\\User\\\\Permissions', 'fSort']);\n      array_walk($a['items'], ['\\\\bbn\\User\\\\Permissions', 'fWalk']);\n    }\n  }",
            "startLine": 1203,
            "endLine": 1209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "a",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fMerge": {
            "name": "fMerge",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(&$target, $src, $path)\n  {\n    $parts = explode('\/', $path);\n    foreach ($parts as $p){\n      if (!empty($p)) {\n        foreach ($target as $i => $a){\n          if (($a['code'] === $p.'\/') && !empty($target[$i]['items'])) {\n            self::fMerge($target[$i]['items'], $src, substr($path, \\strlen($p) + 1));\n            return;\n          }\n        }\n\n        array_push(\n          $target, [\n          'code' => $p.'\/',\n          'text' => $p,\n          'items' => $src\n          ]\n        );\n      }\n    }\n  }",
            "startLine": 1212,
            "endLine": 1233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "target",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "src",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 2,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": null,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_instance;\n  }",
            "startLine": 44,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_exists;\n  }",
            "startLine": 54,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "startLine": 145,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiRoot": {
            "name": "getAppuiRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::optionalInit();\n    return self::$option_appui_id;\n  }",
            "startLine": 152,
            "endLine": 156,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $o = bbn\\Appui\\Option::getInstance();\n    if (!$o) {\n      throw new \\Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "startLine": 159,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "parent": false,
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 176,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())), function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 182,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "startLine": 194,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 200,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "startLine": 206,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 212,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionId": {
            "name": "getAppuiOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 224,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsIds": {
            "name": "getAppuiOptionsIds",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(\n          ...self::_treat_args(func_get_args(), true)\n        ),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "startLine": 230,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTree": {
            "name": "getAppuiOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args(), true)) ) ? $tree['items'] : [];\n  }",
            "startLine": 245,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptions": {
            "name": "getAppuiOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOption": {
            "name": "getAppuiOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args(), true));\n  }",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppuiOptionsTextValue": {
            "name": "getAppuiOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ($id = self::getAppuiOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "startLine": 263,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setCurrent": {
            "name": "setCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id_option)\n  {\n    self::_set_current($id_option);\n  }",
            "startLine": 29,
            "endLine": 32,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ]
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User\\Permissions",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$current;\n  }",
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        }
    },
    "properties": null,
    "staticProperties": {
        "retriever_instance": {},
        "retriever_exists": true,
        "optional_is_init": true,
        "option_root_id": "05c471dc025011e8beb3005056014c9f",
        "option_appui_id": "05c471dc025011e8beb3005056014c9f",
        "current": "f8c061f7194711eb83ae0050560a97cd"
    },
    "constants": null,
    "numMethods": 60,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 6,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Current"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "retriever_instance": {},
        "retriever_exists": true,
        "optional_is_init": true,
        "option_root_id": "05c471dc025011e8beb3005056014c9f",
        "option_appui_id": "05c471dc025011e8beb3005056014c9f",
        "current": "f8c061f7194711eb83ae0050560a97cd",
        "opt": null,
        "pref": null,
        "user": null,
        "db": null,
        "plugins": [],
        "errors": [],
        "error": false,
        "debug": false,
        "log": [],
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\User",
    "shortName": "Permissions",
    "summary": "A permission system linked to options, User classes and preferences.",
    "description": "*\nA permission is an option under the permission option (\"permissions\", \"appui\") or one of its aliases.\nThey are ONLY permissions.\n *\nNo!!! From the moment a user or a group has a preference on an item, it is considered to have a permission.\nNo!!! Deleting a permission deletes the preference",
    "description_parts": [
        {
            "type": "text",
            "content": "<p><em>\nA permission is an option under the permission option (&quot;permissions&quot;, &quot;appui&quot;) or one of its aliases.\nThey are ONLY permissions.\n<\/em>\nNo!!! From the moment a user or a group has a preference on an item, it is considered to have a permission.\nNo!!! Deleting a permission deletes the preference<\/p>"
        }
    ]
}