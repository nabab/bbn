{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\User\\Email",
    "namespace": true,
    "realName": "Email",
    "realNamespace": "bbn\\User",
    "traits": [
        "bbn\\Models\\Tts\\DbActions",
        "bbn\\Models\\Tts\\Optional"
    ],
    "interfaces": [],
    "fileName": "\/User\/Email.php",
    "startLine": 19,
    "endLine": 1695,
    "numMethods": 108,
    "numProperties": 25,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_users_emails",
            "tables": {
                "users_emails": "bbn_users_emails",
                "users_emails_aliases": "bbn_users_emails_aliases",
                "users_emails_recipients": "bbn_users_emails_recipients",
                "users_contacts": "bbn_users_contacts",
                "users_contacts_links": "bbn_users_contacts_links"
            },
            "arch": {
                "users_emails": {
                    "id": "id",
                    "id_user": "id_user",
                    "id_folder": "id_folder",
                    "msg_uid": "msg_uid",
                    "msg_unique_id": "msg_unique_id",
                    "date": "date",
                    "id_sender": "id_sender",
                    "subject": "subject",
                    "excerpt": "excerpt",
                    "size": "size",
                    "attachments": "attachments",
                    "flags": "flags",
                    "is_read": "is_read",
                    "id_parent": "id_parent",
                    "id_thread": "id_thread",
                    "external_uids": "external_uids"
                },
                "users_emails_aliases": {
                    "id_account": "id_account",
                    "id_link": "id_link",
                    "main": "main"
                },
                "users_emails_recipients": {
                    "id_email": "id_email",
                    "id_contact_link": "id_contact_link",
                    "type": "type"
                },
                "users_contacts": {
                    "id": "id",
                    "id_user": "id_user",
                    "name": "name",
                    "blacklist": "blacklist",
                    "cfg": "cfg"
                },
                "users_contacts_links": {
                    "id": "id",
                    "id_contact": "id_contact",
                    "type": "type",
                    "value": "value",
                    "num_sent": "num_sent",
                    "last_sent": "last_sent"
                }
            }
        },
        "optional_is_init": false,
        "option_root_id": null,
        "mboxes": [],
        "opt": null,
        "pw": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_isInitClassCfg": false,
        "fields": null,
        "class_cfg": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": [],
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\User",
    "shortName": "Email",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "getFolderTypes": {
            "name": "getFolderTypes",
            "summary": "Returns a list typical folder types as they are recorded in the options",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getFolderTypes(): array\r\n  {\r\n    return self::getOptions('folders');\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 97,
            "endLine": 100,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFolderTypes",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns a list typical folder types as they are recorded in the options\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\r\n   * Returns a list typical folder types as they are recorded in the options\r\n   *\r\n   * @return array\r\n   *\/"
        },
        "getAccountTypes": {
            "name": "getAccountTypes",
            "summary": "Returns a list of typical email accounts types as they are recorded in the options",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getAccountTypes(): array\r\n  {\r\n    return self::getOptions('types');\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 108,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAccountTypes",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns a list of typical email accounts types as they are recorded in the options\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\r\n   * Returns a list of typical email accounts types as they are recorded in the options\r\n   *\r\n   * @return array\r\n   *\/"
        },
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(\r\n    private Db $db,\r\n    \/** @var user The user object *\/\r\n    protected ?User $user = null,\r\n    \/** @var preferences The preferences object *\/\r\n    protected ?Preferences $pref = null\r\n  )\r\n  {\r\n    self::optionalInit();\r\n    $this->initClassCfg();\r\n    if (!$this->user) {\r\n      $this->user = User::getInstance();\r\n    }\r\n\r\n    if (!$this->pref) {\r\n      $this->pref = Preferences::getInstance();\r\n    }\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 114,
            "endLine": 131,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "promoted": "private"
                },
                {
                    "name": "user",
                    "position": 1,
                    "type": "null|bbn\\User",
                    "type_arr": [
                        "null",
                        "bbn\\User"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "promoted": "protected"
                },
                {
                    "name": "pref",
                    "position": 2,
                    "type": "null|bbn\\User\\Preferences",
                    "type_arr": [
                        "null",
                        "bbn\\User\\Preferences"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "promoted": "protected"
                }
            ]
        },
        "getMailbox": {
            "name": "getMailbox",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMailbox(string $id_account): ?Mailbox\r\n  {\r\n    if (!isset($this->mboxes[$id_account])) {\r\n      $this->getAccount($id_account);\r\n    }\r\n\r\n    if (isset($this->mboxes[$id_account])) {\r\n      $mb = &$this->mboxes[$id_account];\r\n      if (!isset($mb['mailbox'])) {\r\n        $cfg = $this->mboxes[$id_account];\r\n        $cfg['pass'] = $this->_get_password()->userGet($id_account, $this->user);\r\n        $mb['mailbox'] = new Mailbox($cfg);\r\n      }\r\n\r\n      if (isset($mb['mailbox'])) {\r\n        return $mb['mailbox'];\r\n      }\r\n    }\r\n\r\n    return null;\r\n\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 134,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getMailbox",
            "returns": [
                null,
                "bbn\\Appui\\Mailbox"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAccountsIds": {
            "name": "getAccountsIds",
            "summary": "Returns the list of the accounts' IDs of the current user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAccountsIds(): ?array\r\n  {\r\n    if ($id_accounts = self::getOptionId('accounts')) {\r\n      return $this->pref->retrieveIds($id_accounts);\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 164,
            "endLine": 171,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAccountsIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of the accounts' IDs of the current user.\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\r\n   * Returns the list of the accounts' IDs of the current user.\r\n   *\r\n   * @param bool $force\r\n   * @return array|null\r\n   *\/"
        },
        "getAccounts": {
            "name": "getAccounts",
            "summary": "Returns the list of the accounts of the current user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAccounts(bool $force = false): array\r\n  {\r\n    $res = [];\r\n    if ($ids = $this->getAccountsIds()) {\r\n      foreach ($ids as $id) {\r\n        $res[] = $this->getAccount($id, $force);\r\n      }\r\n    }\r\n\r\n    return $res;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 180,
            "endLine": 190,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAccounts",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "force",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the list of the accounts of the current user.\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\r\n   * Returns the list of the accounts of the current user.\r\n   *\r\n   * @param bool $force\r\n   * @return array|null\r\n   *\/"
        },
        "setAccountStage": {
            "name": "setAccountStage",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setAccountStage(string $id_account, int $stage): bool\r\n  {\r\n    if ($a = $this->pref->get($id_account)) {\r\n      $a['stage'] = $stage;\r\n      return $this->pref->set($id_account, $a);\r\n    }\r\n\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 193,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setAccountStage",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "stage",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAccount": {
            "name": "getAccount",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAccount(string $id_account, bool $force = false): ?array\r\n  {\r\n    if ($force || !isset($this->mboxes[$id_account])) {\r\n      if ($a = $this->pref->get($id_account)) {\r\n        $this->mboxes[$id_account] = [\r\n          'id' => $a['id'],\r\n          'host' => $a['host'] ?? null,\r\n          'login' => $a['login'],\r\n          'type' => $a['type'],\r\n          'port' => $a['port'] ?? null,\r\n          'ssl' => $a['ssl'] ?? true,\r\n          'folders' => null,\r\n          'last_uid' => $a['last_uid'] ?? null,\r\n          'last_check' => $a['last_check'] ?? null,\r\n          'id_account' => $id_account\r\n        ];\r\n        $this->mboxes[$id_account]['folders'] = $this->getFolders($this->mboxes[$id_account]);\r\n        if (!isset($a['stage'])) {\r\n          $a['stage'] = 1;\r\n          $this->pref->set($id_account, $a);\r\n        }\r\n\r\n        $this->mboxes[$id_account]['stage'] = $a['stage'];\r\n      }\r\n    }\r\n    return $this->mboxes[$id_account] ?? null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 203,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getAccount",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "checkConfig": {
            "name": "checkConfig",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkConfig($cfg): bool\r\n  {\r\n    if (X::hasProps($cfg, ['login', 'pass', 'type'], true)) {\r\n      $mb = new Mailbox($cfg);\r\n      return $mb->check();\r\n    }\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 232,
            "endLine": 239,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "checkConfig",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateAccount": {
            "name": "updateAccount",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateAccount(string $id_account, array $cfg): bool\r\n  {\r\n    if (X::hasProps($cfg, ['login', 'pass', 'type'], true)\r\n      && $this->getAccount($id_account)\r\n    ) {\r\n      $d = X::mergeArrays($this->pref->getCfg($id_account) ?: [], [\r\n        'host' => $cfg['host'] ?? null,\r\n        'login' => $cfg['login'],\r\n        'type' => $cfg['type'],\r\n        'port' => $cfg['port'] ?? null,\r\n        'ssl' => $cfg['ssl'] ?? true,\r\n        'last_uid' => $cfg['last_uid'] ?? null,\r\n        'last_check' => $cfg['last_check'] ?? null\r\n      ]);\r\n      return (bool)$this->pref->setCfg($id_account, $d);\r\n    }\r\n\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 242,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "updateAccount",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteAccount": {
            "name": "deleteAccount",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteAccount(string $id_account): bool\r\n  {\r\n    return (bool)$this->pref->delete($id_account);\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 263,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteAccount",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addAccount": {
            "name": "addAccount",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addAccount(array $cfg): string\r\n  {\r\n    if (!X::hasProps($cfg, ['login', 'pass', 'type'], true)) {\r\n      throw new \\Exception(\"Missing arguments\");\r\n    }\r\n\r\n    if (!($id_accounts = self::getOptionId('accounts'))) {\r\n      throw new \\Exception(\"Impossible to find the account option\");\r\n    }\r\n\r\n    \/\/ toGroup as this option will use different user options\r\n    if (!($id_pref = $this->pref->addToGroup(\r\n      $id_accounts,\r\n      [\r\n        'id_user' => $this->user->getId(),\r\n        'login' => $cfg['login'],\r\n        'type' => $cfg['type'],\r\n        'host' => $cfg['host'] ?? null,\r\n        'port' => $cfg['port'] ?? null,\r\n        'ssl' => $cfg['ssl'] ?? true\r\n      ]\r\n    ))\r\n    ) {\r\n      throw new \\Exception(\"Impossible to add the preference\");\r\n    }\r\n\r\n    if (!$this->_get_password()->userStore($cfg['pass'], $id_pref, $this->user)) {\r\n      throw new \\Exception(\"Impossible to set the password\");\r\n    }\r\n\r\n    $this->getAccount($id_pref, true);\r\n    if (!empty($cfg['folders'])) {\r\n      $this->syncFolders($id_pref, $cfg['folders']);\r\n    }\r\n\r\n    return $id_pref;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 269,
            "endLine": 305,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "addAccount",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "reset": {
            "name": "reset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function reset(string $id_account): bool\r\n  {\r\n    if (($account = $this->getAccount($id_account))\r\n      && ($num = $this->pref->deleteBits($id_account))\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 308,
            "endLine": 317,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "reset",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createFolder": {
            "name": "createFolder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createFolder(string $id_account, string $name, string|null $id_parent = null): bool\r\n  {\r\n    $mb = $this->getMailbox($id_account);\r\n    $uid_parent = \"\";\r\n    if ($id_parent) {\r\n      $uid_parent = $this->getFolder($id_parent)['uid'];\r\n    }\r\n    $mboxName = $id_parent ? $uid_parent . '.' . $name : $name;\r\n    if ($mb && $mb->createMbox($mboxName)) {\r\n      if ($this->createFolderDb($id_account, $name, $id_parent)) {\r\n        $this->mboxes[$id_account]['folders'] = $this->getFolders($this->mboxes[$id_account]);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 320,
            "endLine": 335,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "createFolder",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "createFolderDb": {
            "name": "createFolderDb",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createFolderDb(string $id_account, string $name, string|null $id_parent = null): bool\r\n  {\r\n    $types = self::getFolderTypes();\r\n\r\n    $a = [\r\n      'id_option' => X::getField($types, ['code' => 'folders'], 'id'),\r\n      'text' => $name,\r\n      'uid' => $name,\r\n      'subscribed' => true\r\n    ];\r\n\r\n    if ($id_parent) {\r\n      $uid_parent = $this->getFolder($id_parent)['uid'];\r\n      $a['uid'] = $uid_parent . '.' . $name;\r\n      $a['id_parent'] = $id_parent;\r\n    }\r\n\r\n    return (bool)$this->pref->addBit($id_account, $a);\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 338,
            "endLine": 356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "createFolderDb",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "renameFolder": {
            "name": "renameFolder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameFolder(string $id, string $name, string $id_account, string|null $id_parent = null): bool\r\n  {\r\n    $mb = $this->getMailbox($id_account);\r\n    $uid_parent = \"\";\r\n    if ($id_parent) {\r\n      $uid_parent = $this->getFolder($id_parent)['uid'];\r\n    }\r\n    $mboxName = $id_parent ? $uid_parent . '.' . $name : $name;\r\n    if ($mb && $mb->renameMbox($this->getFolder($id)['uid'], $mboxName)) {\r\n      if ($this->renameFolderDb($id, $name, $id_account, $id_parent)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 359,
            "endLine": 373,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "renameFolder",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_account",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "renameFolderDb": {
            "name": "renameFolderDb",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameFolderDb(string $id, string $name, string $id_account, string|null $id_parent = null): bool\r\n  {\r\n    $a = [\r\n      'text' => $name,\r\n      'uid' => $name,\r\n    ];\r\n\r\n    if ($id_parent) {\r\n      $uid_parent = $this->getFolder($id_parent)['uid'];\r\n      $a['uid'] = $uid_parent . '.' . $name;\r\n      $a['id_parent'] = $id_parent;\r\n    }\r\n    if ($this->pref->updateBit($id, $a)) {\r\n      if (!$id_parent) {\r\n        $this->pref->moveBit($id, null);\r\n      }\r\n      $this->mboxes[$id_account]['folders'] = $this->getFolders($this->mboxes[$id_account]);\r\n      return true;\r\n    };\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 376,
            "endLine": 396,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "renameFolderDb",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_account",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_parent",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteFolder": {
            "name": "deleteFolder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteFolder(string $id, string $id_account): bool\r\n  {\r\n    $mb = $this->getMailbox($id_account);\r\n    $folder = $this->getFolder($id);\r\n    if ($folder && $mb->deleteMbox($folder['uid'])) {\r\n      if ($this->deleteFolderDb($id)) {\r\n        $this->mboxes[$id_account]['folders'] = $this->getFolders($this->mboxes[$id_account]);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 399,
            "endLine": 410,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "deleteFolder",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_account",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteFolderDb": {
            "name": "deleteFolderDb",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteFolderDb(string $id): bool\r\n  {\r\n    return (bool)$this->pref->deleteBit($id);\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 413,
            "endLine": 416,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteFolderDb",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "checkFolder": {
            "name": "checkFolder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkFolder(array|string $folder, $sync = false)\r\n  {\r\n    if (Str::isUid($folder)) {\r\n      $folder = $this->getFolder($folder);\r\n    }\r\n\r\n    if (X::hasProp($folder, 'uid')\r\n      && ($mb = $this->getMailbox($folder['id_account']))\r\n      && $mb->check()\r\n    ) {\r\n      if ($mb->update($folder['uid'])\r\n        && ($folders = $mb->getFolders())\r\n        && ($res = $folders[$folder['uid']])\r\n      ) {\r\n        $res['hash'] = $this->makeFolderHash($folder['id'], $res['num_msg'], $res['last_uid']);\r\n        if (($res['num_msg'] && !$folder['last_uid'])\r\n          || ($folder['hash'] !== $res['hash'])\r\n        ) {\r\n          $this->pref->updateBit($folder['id'], $res, true);\r\n          $this->getAccount($folder['id_account'], true);\r\n        }\r\n\r\n        return $res;\r\n      }\r\n    }\r\n\r\n    return null;\r\n\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 419,
            "endLine": 447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "checkFolder",
            "returns": [],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "sync",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getInfoFolder": {
            "name": "getInfoFolder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getInfoFolder($id)\r\n  {\r\n    $folder = $this->getFolder($id);\r\n    if ($folder) {\r\n      $mb = $this->getMailbox($folder['id_account']);\r\n      if ($mb) {\r\n        return $mb->getInfoFolder($folder['uid']);\r\n      }\r\n    }\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 449,
            "endLine": 459,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getInfoFolder",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFolders": {
            "name": "getFolders",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFolders(string|array $account, bool $force = false): ?array\r\n  {\r\n    if (!is_array($account)) {\r\n      $account = $this->getAccount($account);\r\n    }\r\n\r\n    if (!empty($account)) {\r\n      if ($force) {\r\n        $this->syncFolders($account['id']);\r\n      }\r\n\r\n      $t =& $this;\r\n      return X::map(\r\n        function ($f) use ($t) {\r\n          $res = $t->normalizeFolder($f);\r\n          if (!empty($f['items'])) {\r\n            $res['items'] = $f['items'];\r\n          }\r\n\r\n          return $res;\r\n        },\r\n        $this->pref->getFullBits($account['id']),\r\n        'items'\r\n      );\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 462,
            "endLine": 489,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getFolders",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "account",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "flattenFolders": {
            "name": "flattenFolders",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function flattenFolders($folders): array\r\n  {\r\n    $res = [];\r\n    foreach ($folders as $f) {\r\n      if (!empty($f['items']) && is_array($f['items']) && count($f['items'])) {\r\n        $res = array_merge($res, $this->flattenFolders($f['items']));\r\n      }\r\n      $res[] = $f;\r\n    }\r\n    return $res;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 491,
            "endLine": 501,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "flattenFolders",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "folders",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getHashes": {
            "name": "getHashes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHashes(): ?array\r\n  {\r\n    $res = [];\r\n    $account_hash = \"\";\r\n    foreach ($this->getAccounts() as $a) {\r\n      $res[$a['id']] = [\r\n        'hash' => \"\",\r\n        'folders' => []\r\n      ];\r\n      $folders = $this->flattenFolders($this->getFolders($a['id']));\r\n      foreach ($folders as $f) {\r\n        $res[$a['id']]['folders'][$f['id']] = $f['hash'];\r\n        if ($f['hash']) {\r\n          $account_hash .= $f['hash'];\r\n        } else {\r\n          $account_hash .= $f['id'];\r\n        }\r\n      }\r\n      $res[$a['id']]['hash'] = md5($account_hash);\r\n    }\r\n    return $res;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 503,
            "endLine": 524,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHashes",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getFolder": {
            "name": "getFolder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFolder(string $id, bool $force = false): ?array\r\n  {\r\n    if ($f = $this->pref->getBit($id)) {\r\n      return $this->normalizeFolder($f);\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 526,
            "endLine": 533,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getFolder",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getNextUid": {
            "name": "getNextUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNextUid(array $folder, int $uid): ?int\r\n  {\r\n    $mb = $this->getMailbox($folder['id_account']);\r\n    $mb->selectFolder($folder['uid']);\r\n    return $mb->getNextUid($uid);\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 535,
            "endLine": 540,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getNextUid",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "syncEmails": {
            "name": "syncEmails",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function syncEmails(string|array $folder, int $limit = 0, bool $generator = false): int|null|Generator\r\n  {\r\n    if (Str::isUid($folder)) {\r\n      $folder = $this->getFolder($folder);\r\n    }\r\n\r\n    if (X::hasProps($folder, ['id', 'id_account', 'last_uid', 'uid'])) {\r\n      try {\r\n        $check = $this->checkFolder($folder);\r\n      }\r\n      catch (\\Exception $e) {\r\n        X::log($e->getMessage(), \"poller_email_error\");\r\n        $check = false;\r\n      }\r\n\r\n      if ($check) {\r\n        $added = 0;\r\n        $mb = $this->getMailbox($folder['id_account']);\r\n        $info = $mb->getInfoFolder($folder['uid']);\r\n        $mb->selectFolder($folder['uid']);\r\n        $this->setAccountSync(\r\n          $folder['id_account'],\r\n          $folder['id'],\r\n          $folder['uid'],\r\n          $info->Nmsgs\r\n        );\r\n        if ($info->Nmsgs === 0) {\r\n          if ($generator) {\r\n            yield 0;\r\n          }\r\n\r\n          return 0;\r\n        }\r\n\r\n        $first_uid = $mb->getFirstUid();\r\n        $last_uid = $mb->getLastUid();\r\n        $start = null;\r\n        $real_end = null;\r\n        if (isset($folder['db_uid_min'])\r\n          && isset($folder['db_uid_max'])\r\n        ) {\r\n          if (($folder['db_uid_min'] == $first_uid)\r\n            && ($folder['db_uid_max'] == $last_uid)\r\n          ) {\r\n            return 0;\r\n          }\r\n\r\n          if ($folder['db_uid_max'] != $last_uid) {\r\n            $start = $last_uid;\r\n            $real_end = $mb->getNextUid($folder['db_uid_max']);\r\n          }\r\n          else if ($folder['db_uid_min'] != $first_uid) {\r\n            $start = $folder['db_uid_min'];\r\n            if (!empty($limit)) {\r\n              $nstart = $mb->getMsgNo($start);\r\n              $nstart -= $limit;\r\n              if ($nstart < 1) {\r\n                $real_end = $first_uid;\r\n              }\r\n              else {\r\n                $real_end = $mb->getMsgUid($nstart);\r\n              }\r\n            }\r\n            else {\r\n              $real_end = $first_uid;\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          $start = $last_uid;\r\n          if (!empty($limit)) {\r\n            $nstart = $mb->getMsgNo($start);\r\n            $nstart -= $limit;\r\n            if ($nstart < 1) {\r\n              $real_end = $first_uid;\r\n            }\r\n            else {\r\n              $real_end = $mb->getMsgUid($nstart);\r\n            }\r\n          }\r\n          else {\r\n            $real_end = $first_uid;\r\n          }\r\n        }\r\n\r\n        try {\r\n          $start = $mb->getMsgNo($start);\r\n          $real_end = $mb->getMsgNo($real_end < 1 ? $first_uid : $real_end);\r\n        }\r\n        catch (\\Exception $e) {\r\n          $start = $mb->getMsgNo($last_uid);\r\n          $real_end = $mb->getMsgNo($first_uid);\r\n\r\n          if ($folder['db_uid_min']\r\n            && ($folder['db_uid_max'] == $last_uid)\r\n          ) {\r\n            $start = $folder['db_uid_min'];\r\n          }\r\n          else if ($folder['db_uid_max'] != $last_uid) {\r\n            $start = $last_uid;\r\n            $real_end = $mb->getNextUid($folder['db_uid_max']);\r\n          }\r\n        }\r\n\r\n        if (!$start || !$real_end) {\r\n          return 0;\r\n        }\r\n\r\n        $end = $start;\r\n        $all = $mb->getEmailsList($folder, $start, $real_end, true);\r\n        if ($all) {\r\n          foreach ($all as $i => $a) {\r\n            if ($this->insertEmail($folder, $a)) {\r\n              $this->setAccountSync(\r\n                $folder['id_account'],\r\n                $folder['id'],\r\n                $folder['uid'],\r\n                $info->Nmsgs\r\n              );\r\n              $added++;\r\n              if ($generator) {\r\n                yield $i + 1;\r\n              }\r\n            }\r\n            else {\r\n              \/\/throw new \\Exception(X::_(\"Impossible to insert the email with ID\").' '.$a['message_id']);\r\n              $this->log(X::_(\"Impossible to insert the email with ID\") . ' ' . $a['message_id']);\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          X::log(X::_(\"Impossible to get the emails for folder\") . ' ' . $folder['uid'] . ' ' . X::_(\"from\") . ' ' . $start . ' ' . X::_(\"to\") . ' ' . $end . ' (' . $real_end . ')');\r\n          throw new \\Exception(\r\n            X::_(\"Impossible to get the emails for folder\")\r\n            . ' ' . $folder['uid']\r\n            . ' ' . X::_(\"from\") . ' ' . $start\r\n            . ' ' . X::_(\"to\") . ' ' . $end\r\n            . ' (' . $real_end . ')'\r\n          );\r\n        }\r\n\r\n        if ($info->Nmsgs > ($added + $folder['num_msg'])) {\r\n          $emailsFields = $this->class_cfg['arch']['users_emails'];\r\n          $emailsTable = $this->class_cfg['tables']['users_emails'];\r\n          $num = $added + $folder['num_msg'];\r\n          $s2 = 0;\r\n          while ($info->Nmsgs < $num) {\r\n            $msg = $this->db->rselect(\r\n              $emailsTable,\r\n              [$emailsFields['id'], $emailsFields['msg_uid']],\r\n              [$emailsFields['id_folder'] => $folder['id']],\r\n              [$emailsFields['msg_uid'] => 'DESC'],\r\n              $s2\r\n            );\r\n            if (!$mb->getMsgNo($msg['msg_uid'])\r\n              && ($this->db->delete($emailsTable, [$emailsFields['id'] => $msg['id']]))\r\n            ) {\r\n              $num--;\r\n              $s2--;\r\n            }\r\n\r\n            $s2++;\r\n          }\r\n        }\r\n\r\n        return $added;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 542,
            "endLine": 712,
            "isDeprecated": false,
            "isGenerator": true,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "syncEmails",
            "returns": [
                null
            ],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "generator",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getLastUid": {
            "name": "getLastUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastUid($folder)\r\n  {\r\n    $mb = $this->getMailbox($folder['id_account']);\r\n    $mb->selectFolder($folder['uid']);\r\n    return $mb->getLastUid();\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 714,
            "endLine": 719,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLastUid",
            "returns": [],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFirstUid": {
            "name": "getFirstUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFirstUid($folder)\r\n  {\r\n    $mb = $this->getMailbox($folder['id_account']);\r\n    $mb->selectFolder($folder['uid']);\r\n    return $mb->getFirstUid();\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 721,
            "endLine": 726,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFirstUid",
            "returns": [],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getList": {
            "name": "getList",
            "summary": "Returns a list of emails based on their folder.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getList(string|array $id_folder, array $post): ?array\r\n  {\r\n    if (is_array($id_folder)) {\r\n      $ids = [];\r\n      foreach ($id_folder as $i) {\r\n        $ids = array_merge($ids, $this->idsFromFolder($i));\r\n      }\r\n    }\r\n    else {\r\n      $ids = $this->idsFromFolder($id_folder);\r\n    }\r\n\r\n    if (!empty($ids)) {\r\n      $filters = [];\r\n      if (count($ids) > 1) {\r\n        $filters = [\r\n          'logic' => 'OR',\r\n          'conditions' => []\r\n        ];\r\n        foreach ($ids as $i) {\r\n          $filters['conditions'][] = [\r\n            'field' => $this->fields['id_folder'],\r\n            'value' => $i\r\n          ];\r\n        }\r\n      }\r\n      else {\r\n        $filters[] = [\r\n          'field' => $this->fields['id_folder'],\r\n          'value' => $ids[0]\r\n        ];\r\n      }\r\n\r\n      $contactsTable = $this->class_cfg['tables']['users_contacts'];\r\n      $contactsFields = $this->class_cfg['arch']['users_contacts'];\r\n      $linksTable = $this->class_cfg['tables']['users_contacts_links'];\r\n      $linksFields = $this->class_cfg['arch']['users_contacts_links'];\r\n      $recTable = $this->class_cfg['tables']['users_emails_recipients'];\r\n      $recFields = $this->class_cfg['arch']['users_emails_recipients'];\r\n      $prefCgf = $this->pref->getClassCfg();\r\n      $prefOptTable = $prefCgf['tables']['user_options'];\r\n      $prefOptFields = $prefCgf['arch']['user_options'];\r\n      $prefOptBitsTable = $prefCgf['tables']['user_options_bits'];\r\n      $prefOptBitsFields = $prefCgf['arch']['user_options_bits'];\r\n      $grid = new \\bbn\\Appui\\Grid($this->db, $post, [\r\n        'table' => $this->class_table,\r\n        'fields' => X::mergeArrays(\r\n          array_map(\r\n            fn($f) => $this->db->cfn($f, $this->class_table), $this->fields\r\n          ),\r\n          [\r\n            'from' => 'CONCAT('.$this->db->cfn($contactsFields['name'], 'fromname').', \" <\", '.$this->db->cfn($linksFields['value'], 'fromlink').', \">\")',\r\n            'from_email' => $this->db->cfn($linksFields['value'], 'fromlink'),\r\n            'from_name' => $this->db->cfn($contactsFields['name'], 'fromname'),\r\n            'to' => 'IFNULL(CONCAT('.$this->db->cfn($contactsFields['name'], 'toname').', \" <\", '.$this->db->cfn($linksFields['value'], 'tolink').', \">\"), '.$this->db->cfn($linksFields['value'], 'tolink').')',\r\n            'to_email' => $this->db->cfn($linksFields['value'], 'tolink'),\r\n            'to_name' => $this->db->cfn($contactsFields['name'], 'toname'),\r\n            'id_account' => $this->db->cfn($prefOptFields['id'], $prefOptTable),\r\n          ]\r\n        ),\r\n        'join' => [[\r\n          'table' => $linksTable,\r\n          'alias' => 'fromlink',\r\n          'on' => [[\r\n            'field' => $this->db->cfn($linksFields['id'], 'fromlink'),\r\n            'exp' => $this->db->cfn($this->fields['id_sender'], $this->class_table)\r\n          ]]\r\n        ], [\r\n          'table' => $contactsTable,\r\n          'alias' => 'fromname',\r\n          'on' => [[\r\n            'field' => $this->db->cfn($contactsFields['id'], 'fromname'),\r\n            'exp' => $this->db->cfn($linksFields['id_contact'], 'fromlink')\r\n          ]]\r\n        ], [\r\n          'table' => $recTable,\r\n          'alias' => 'rec',\r\n          'on' => [[\r\n            'field' => $this->db->cfn($recFields['id_email'], 'rec'),\r\n            'exp' => $this->db->cfn($this->fields['id'], $this->class_table)\r\n          ], [\r\n            'field' => $this->db->cfn($recFields['type'], 'rec'),\r\n            'value' => 'to'\r\n          ]]\r\n        ], [\r\n          'table' => $linksTable,\r\n          'alias' => 'tolink',\r\n          'on' => [[\r\n            'field' => $this->db->cfn($linksFields['id'], 'tolink'),\r\n            'exp' => $this->db->cfn($recFields['id_contact_link'], 'rec')\r\n          ]]\r\n        ], [\r\n          'table' => $contactsTable,\r\n          'alias' => 'toname',\r\n          'on' => [[\r\n            'field' => $this->db->cfn($contactsFields['id'], 'toname'),\r\n            'exp' => $this->db->cfn($linksFields['id_contact'], 'tolink')\r\n          ]]\r\n        ], [\r\n          'table' => $prefOptBitsTable,\r\n          'on' => [[\r\n            'field' => $this->db->cfn($prefOptBitsFields['id'], $prefOptBitsTable),\r\n            'exp' => $this->db->cfn($this->fields['id_folder'], $this->class_table)\r\n          ]]\r\n        ], [\r\n          'table' => $prefOptTable,\r\n          'on' => [[\r\n            'field' => $this->db->cfn($prefOptBitsFields['id_user_option'], $prefOptBitsTable),\r\n            'exp' => $this->db->cfn($prefOptFields['id'], $prefOptTable)\r\n          ]]\r\n        ]],\r\n        'filters' => $filters,\r\n        'group_by' => [$this->db->cfn($this->fields['id'], $this->class_table)],\r\n      ]);\r\n\r\n\r\n      if ($grid->check()) {\r\n        $dataTable = $grid->getDatatable();\r\n        if (!empty($dataTable['data'])) {\r\n          foreach ($dataTable['data'] as $i => $d) {\r\n            $dataTable['data'][$i]['attachments'] = !empty($d['attachments']) ? json_decode($d['attachments'], true) : [];\r\n            $dataTable['data'][$i]['external_uids'] = !empty($d['external_uids']) ? json_decode($d['external_uids'], true) : new stdClass();\r\n          }\r\n        }\r\n        return $dataTable;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 739,
            "endLine": 868,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getList",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_folder",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "folder"
                },
                {
                    "name": "post",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a list of emails based on their folder.\n\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "folder"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\r\n   * Returns a list of emails based on their folder.\r\n   *\r\n   * @param string $id_folder\r\n   * @param array $filter\r\n   * @param int $limit\r\n   * @param int $start\r\n   *\r\n   * @return array|null\r\n   *\/"
        },
        "getLoginByEmailId": {
            "name": "getLoginByEmailId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLoginByEmailId($id)\r\n  {\r\n    $cfg = $this->class_cfg['arch']['users_emails'];\r\n    $table = $this->class_cfg['tables']['users_emails'];\r\n    $em = $this->db->rselect($table, $cfg, [$cfg['id'] => $id]);\r\n    if ($em) {\r\n      $folder = $this->getFolder($em['id_folder']);\r\n      if ($folder\r\n        && ($mb = $this->getAccount($folder['id_account']))) {\r\n        return $mb;\r\n      }\r\n    }\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 871,
            "endLine": 884,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLoginByEmailId",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getEmail": {
            "name": "getEmail",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEmail($id): ?array\r\n  {\r\n    if (($em = $this->db->rselect($this->class_table, $this->fields, [$this->fields['id'] => $id]))\r\n      && ($folder = $this->getFolder($em['id_folder']))\r\n      && ($mb = $this->getMailbox($folder['id_account']))\r\n      && $mb->selectFolder($folder['uid'])\r\n      && Str::isInteger($number = $mb->getMsgNo($em['msg_uid']))\r\n    ) {\r\n      if ($number === 0) {\r\n        $this->db->delete($this->class_table, [$this->fields['id'] => $id]);\r\n        return null;\r\n      }\r\n\r\n      $arr = $mb->getMsg($number);\r\n      $arr['id_account'] = $folder['id_account'];\r\n      $arr['msg_unique_id'] = Str::toUtf8($em['msg_unique_id']);\r\n      return $arr;\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 886,
            "endLine": 906,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getEmail",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getEmailByUID": {
            "name": "getEmailByUID",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEmailByUID($post): ?array\r\n  {\r\n    $cfg = $this->class_cfg['arch']['users_emails'];\r\n    $table = $this->class_cfg['tables']['users_emails'];\r\n\r\n    $grid = new \\bbn\\Appui\\Grid($this->db, $post, [\r\n      'table' => $table,\r\n      'fields' => $cfg\r\n    ]);\r\n\r\n    if ($grid->check()) {\r\n      return $grid->getDatatable();\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 908,
            "endLine": 923,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getEmailByUID",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "post",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getThreadId": {
            "name": "getThreadId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getThreadId(?string $id): ?string\r\n  {\r\n    if ($id === null) {\r\n      return null;\r\n    }\r\n    $cfg = $this->class_cfg['arch']['users_emails'];\r\n    $table = $this->class_cfg['tables']['users_emails'];\r\n\r\n    $email = $this->db->rselect([\r\n      'table' => $table,\r\n      'fields' => $cfg,\r\n      'where' => [\r\n        'conditions' => [\r\n          $cfg['id'] => $id\r\n        ]\r\n      ]\r\n    ]);\r\n\r\n    while ($email['id_parent']) {\r\n      $email = $this->db->rselect([\r\n        'table' => $table,\r\n        'fields' => $cfg,\r\n        'where' => [\r\n          'conditions' => [\r\n            $cfg['id'] => $email['id_parent']\r\n          ]\r\n        ]\r\n      ]);\r\n    }\r\n\r\n    return $email['thread_id'];\r\n\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 925,
            "endLine": 957,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getThreadId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateRead": {
            "name": "updateRead",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateRead($id)\r\n  {\r\n    $cfg = $this->class_cfg['arch']['users_emails'];\r\n    $table = $this->class_cfg['tables']['users_emails'];\r\n    $this->db->update($table, [$cfg['is_read'] => 1], [$cfg['id'] => $id]);\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 959,
            "endLine": 964,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "updateRead",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "syncThreads": {
            "name": "syncThreads",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function syncThreads(int $limit): int\r\n  {\r\n    $did = 0;\r\n    \/\/ select all emails of the user where id_thread is null and external_id is not null\r\n    if ($emails = $this->db->rselectAll([\r\n      'table' => $this->class_table,\r\n      'fields' => $this->fields,\r\n      'where' => [[\r\n        'field' => $this->fields['id_user'],\r\n        'value' => $this->user->getId()\r\n      ], [\r\n        'field' => $this->fields['external_uids'],\r\n        'operator' => 'isnotnull'\r\n      ], [\r\n        'field' => $this->fields['id_thread'],\r\n        'operator' => 'isnull'\r\n      ]],\r\n      'order' => [\r\n        $this->fields['date'] => 'DESC'\r\n      ]\r\n    ])) {\r\n      foreach ($emails as $email) {\r\n        $external_uids = json_decode($email[$this->fields['external_uids']], true);\r\n        $toUpd = [];\r\n        if (!empty($external_uids['in_reply_to'])\r\n          && ($parentId = $this->db->selectOne($this->class_table, $this->fields['id'], [$this->fields['msg_unique_id'] => $external_uids['in_reply_to']]))\r\n        ) {\r\n          $toUpd[$this->fields['id_parent']] = $parentId;\r\n        }\r\n\r\n        if (!empty($toUpd)) {\r\n          $did += $this->db->update($this->class_table, $toUpd, [$this->fields['id'] => $email['id']]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return $did;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 966,
            "endLine": 1003,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "syncThreads",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insertEmail": {
            "name": "insertEmail",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertEmail(array $folder, array $email)\r\n  {\r\n    $id = false;\r\n    if (X::hasProps($email, ['from', 'uid'])) {\r\n      $cfg = $this->class_cfg['arch']['users_emails'];\r\n      $table = $this->class_cfg['tables']['users_emails'];\r\n      $existing = $this->db->selectOne(\r\n        $table,\r\n        $cfg['id'],\r\n        [\r\n          $cfg['id_user'] => $this->user->getId(),\r\n          $cfg['msg_uid'] => $email['uid'],\r\n          $cfg['id_folder'] => $folder['id']\r\n        ]\r\n      );\r\n      $uid = $email['uid'];\r\n      foreach (Mailbox::getDestFields() as $df) {\r\n        if (!empty($email[$df])) {\r\n          foreach ($email[$df] as &$dest) {\r\n            if ($id = $this->retrieveEmail($dest['email'])) {\r\n              $sent_opt = X::getField(self::getFolderTypes(), ['code' => 'sent'], 'id');\r\n              if ($sent_opt === $folder['id_option']) {\r\n                $this->addSentToLink($id, Date('Y-m-d H:i:s', strtotime($email['date'])));\r\n              }\r\n            } elseif (!($id = $this->addContactFromMail($dest))) {\r\n              X::log(\"Impossible to add contact from mail\" . $dest['email'], 'poller_email_error');\r\n            }\r\n\r\n            $dest['id'] = $id;\r\n          }\r\n\r\n          if ($df === 'from') {\r\n            $id_sender = $id;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!empty($id_sender)) {\r\n        $id_parent = null;\r\n        $id_thread = null;\r\n        $external = null;\r\n        if (!empty($email['in_reply_to']) || !empty($email['references'])) {\r\n          $external = [\r\n            'in_reply_to' => $email['in_reply_to'] ?? null,\r\n            'references' => $email['references'] ?? null\r\n          ];\r\n        }\r\n\r\n        if ($email['priority']) {\r\n          \/\/ if Flagged dont contains none of the priority flag, add it\r\n          if (!str_contains($email['Flagged'], 'Highest')\r\n            && !str_contains($email['Flagged'], 'High')\r\n            && !str_contains($email['Flagged'], 'Normal')\r\n            && !str_contains($email['Flagged'], 'Low')\r\n            && !str_contains($email['Flagged'], 'Lowest')\r\n          ) {\r\n            switch ($email['priority']) {\r\n              case 1:\r\n                $email['Flagged'] .= ' Highest';\r\n                break;\r\n              case 2:\r\n                $email['Flagged'] .= ' High';\r\n                break;\r\n              case 3:\r\n                $email['Flagged'] .= ' Normal';\r\n                break;\r\n              case 4:\r\n                $email['Flagged'] .= ' Low';\r\n                break;\r\n              case 5:\r\n                $email['Flagged'] .= ' Lowest';\r\n                break;\r\n            }\r\n            \/\/ trim the space if is in first position\r\n            if (str_starts_with($email['Flagged'], ' ')) {\r\n              $email['Flagged'] = substr($email['Flagged'], 1);\r\n            }\r\n          }\r\n        }\r\n\r\n        $ar = [\r\n          $cfg['id_user'] => $this->user->getId(),\r\n          $cfg['id_folder'] => $folder['id'],\r\n          $cfg['msg_uid'] => $email['uid'],\r\n          $cfg['msg_unique_id'] => Str::toUtf8($email['message_id']),\r\n          $cfg['date'] => date('Y-m-d H:i:s', strtotime($email['date'])),\r\n          $cfg['id_sender'] => $id_sender,\r\n          $cfg['subject'] => $email['subject'] ?: '',\r\n          $cfg['size'] => $email['Size'],\r\n          $cfg['attachments'] => empty($email['attachments']) ? null : json_encode($email['attachments']),\r\n          $cfg['flags'] => $email['Flagged'] ?: null,\r\n          $cfg['is_read'] => $email['Unseen'] ? 0 : 1,\r\n          $cfg['id_parent'] => $id_parent,\r\n          $cfg['id_thread'] => $id_thread,\r\n          $cfg['external_uids'] => $external ? json_encode($external) : null,\r\n          $cfg['excerpt'] => \"\"\r\n        ];\r\n\r\n        if ($existing) {\r\n          $id = $existing;\r\n        }\r\n        else if ($this->db->insert($table, $ar)) {\r\n          $id = $this->db->lastId();\r\n          $mb = $this->getMailbox($folder['id_account']);\r\n          $mb->selectFolder($folder['uid']);\r\n          $number = $mb->getMsgNo($email['uid']);\r\n          $text = '';\r\n          if ($number) {\r\n            $msg = $mb->getMsg($number);\r\n            $text = Str::toUtf8($msg['plain'] ?: (!empty($msg['html']) ? Str::html2text(quoted_printable_decode($msg['html'])) : ''));\r\n            if (strlen($text) > 65500) {\r\n              $text = substr($text, 0, 65500);\r\n            }\r\n          }\r\n\r\n          \/\/ update excerpt column where id is same\r\n          try {\r\n            $this->db->update($table, [$cfg['excerpt'] => trim(normalizer_normalize($text))], [$cfg['id'] => $id]);\r\n          }\r\n          catch (\\Exception $e) {\r\n            X::log([\r\n              'id' => $id,\r\n              'email' => $email,\r\n              'cfg' => $ar,\r\n              'text' => trim($text),\r\n              'error' => $e->getMessage()\r\n            ], 'poller_email_error');\r\n            throw new \\Exception($e->getMessage());\r\n          }\r\n\r\n          foreach (Mailbox::getDestFields() as $df) {\r\n            if (in_array($df, ['to', 'cc', 'bcc'])\r\n              && !empty($email[$df])\r\n            ) {\r\n              foreach ($email[$df] as $dest) {\r\n                if (!empty($dest['id'])) {\r\n                  $this->addLinkToMail($id, $dest['id'], $df);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return $id;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1006,
            "endLine": 1152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "insertEmail",
            "returns": [],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "email",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addContactFromMail": {
            "name": "addContactFromMail",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addContactFromMail(array $dest, bool $blacklist = false): ?string\r\n  {\r\n    if (X::hasProp($dest, 'email', true)) {\r\n      if (!Str::isEmail($dest['email'])) {\r\n        return null;\r\n      }\r\n\r\n      $cfg_contacts = $this->class_cfg['arch']['users_contacts'];\r\n      $cfg_links = $this->class_cfg['arch']['users_contacts_links'];\r\n      $table_contacts = $this->class_cfg['tables']['users_contacts'];\r\n      $table_links = $this->class_cfg['tables']['users_contacts_links'];\r\n      if ($this->db->insert($table_contacts, [\r\n        $cfg_contacts['id_user'] => $this->user->getId(),\r\n        $cfg_contacts['name'] => empty($dest['name']) ? null : mb_substr($dest['name'], 0, 100),\r\n        $cfg_contacts['blacklist'] => $blacklist ? 1 : 0\r\n      ])) {\r\n        $id_contact = $this->db->lastId();\r\n        if ($this->db->insert($table_links, [\r\n          'id_contact' => $id_contact,\r\n          'type' => 'email',\r\n          'value' => $dest['email']\r\n        ])) {\r\n          return $this->db->lastId();\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1155,
            "endLine": 1183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "addContactFromMail",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "dest",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "blacklist",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getLink": {
            "name": "getLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLink($id): ?array\r\n  {\r\n    $cfg = $this->class_cfg['arch']['users_contacts_links'];\r\n    $table = $this->class_cfg['tables']['users_contacts_links'];\r\n    $data = $this->db->rselect($table, $cfg, [$cfg['id'] => $id]);\r\n    return $data ?: null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1186,
            "endLine": 1192,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLink",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addLinkToMail": {
            "name": "addLinkToMail",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addLinkToMail(string $id_email, string $id_link, string $type): bool\r\n  {\r\n    $cfg = $this->class_cfg['arch']['users_emails_recipients'];\r\n    $table = $this->class_cfg['tables']['users_emails_recipients'];\r\n    return (bool)$this->db->insertIgnore(\r\n      $table,\r\n      [\r\n        $cfg['id_email'] => $id_email,\r\n        $cfg['id_contact_link'] => $id_link,\r\n        $cfg['type'] => $type\r\n      ]\r\n    );\r\n\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1195,
            "endLine": 1208,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "addLinkToMail",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_email",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_link",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addSentToLink": {
            "name": "addSentToLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addSentToLink(string $id_link, string|null $date = null): bool\r\n  {\r\n    if ($link = $this->getLink($id_link)) {\r\n      $cfg = $this->class_cfg['arch']['users_contacts_links'];\r\n      $table = $this->class_cfg['tables']['users_contacts_links'];\r\n      if (!$date) {\r\n        $date = date('Y-m-d H:i:s');\r\n      }\r\n      if ($link['last_sent'] && ($link['last_sent'] > $date)) {\r\n        $date = $link['last_sent'];\r\n      }\r\n\r\n      return (bool)$this->db->update(\r\n        $table,\r\n        [\r\n          $cfg['num_sent'] => $link[$cfg['num_sent']] + 1,\r\n          $cfg['last_sent'] => $date\r\n        ], [\r\n          'id' => $id_link\r\n        ]\r\n      );\r\n    }\r\n\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1211,
            "endLine": 1235,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "addSentToLink",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_link",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "date",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "retrieveEmail": {
            "name": "retrieveEmail",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function retrieveEmail(string $email): ?string\r\n  {\r\n    if (Str::isEmail($email)) {\r\n      $contacts = $this->class_cfg['tables']['users_contacts'];\r\n      $contactsFields = $this->class_cfg['arch']['users_contacts'];\r\n      $links = $this->class_cfg['tables']['users_contacts_links'];\r\n      $linksFields = $this->class_cfg['arch']['users_contacts_links'];\r\n      return $this->db->selectOne([\r\n        'table' => $links,\r\n        'fields' => [$this->db->cfn($linksFields['id'], $links)],\r\n        'join' => [[\r\n          'table' => $contacts,\r\n          'on' => [[\r\n            'field' => $linksFields['id_contact'],\r\n            'exp' => $this->db->cfn($contactsFields['id'], $contacts)\r\n          ]]\r\n        ]],\r\n        'where' => [\r\n          'value' => $email,\r\n          'id_user' => $this->user->getId(),\r\n          'type' => 'email'\r\n        ]\r\n      ]);\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1238,
            "endLine": 1264,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieveEmail",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "email",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getContact": {
            "name": "getContact",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getContact(string $email, string $name, $force)\r\n  {\r\n\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1267,
            "endLine": 1270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getContact",
            "returns": [],
            "arguments": [
                {
                    "name": "email",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getContacts": {
            "name": "getContacts",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getContacts(): array\r\n  {\r\n    $contacts = $this->class_cfg['tables']['users_contacts'];\r\n    $cfg_c = $this->class_cfg['arch']['users_contacts'];\r\n    $links = $this->class_cfg['tables']['users_contacts_links'];\r\n    $cfg_l = $this->class_cfg['arch']['users_contacts_links'];\r\n    $rows = $this->db->rselectAll(\r\n      [\r\n        'tables' => [$links],\r\n        'fields' => [\r\n          $this->db->cfn($cfg_l['id'], $links),\r\n          $this->db->cfn($cfg_l['value'], $links),\r\n          $this->db->cfn($cfg_l['id_contact'], $links),\r\n          $this->db->cfn($cfg_l['num_sent'], $links),\r\n          $this->db->cfn($cfg_l['last_sent'], $links),\r\n          $this->db->cfn($cfg_c['name'], $contacts),\r\n          $this->db->cfn($cfg_c['cfg'], $contacts),\r\n          $this->db->cfn($cfg_c['blacklist'], $contacts),\r\n          'sortIndex' => 'IFNULL(' . $this->db->cfn($cfg_c['name'], $contacts, true) . ',' . $this->db->cfn($cfg_l['value'], $links) . ')'\r\n        ],\r\n        'join' => [\r\n          [\r\n            'table' => $contacts,\r\n            'on' => [\r\n              [\r\n                'field' => $cfg_l['id_contact'],\r\n                'exp' => $this->db->cfn($cfg_c['id'], $contacts)\r\n              ]\r\n            ]\r\n\r\n          ]\r\n        ],\r\n        'where' => [\r\n          'id_user' => $this->user->getId(),\r\n          'type' => 'email'\r\n        ],\r\n        'order' => [\r\n          'sortIndex' => 'ASC'\r\n        ]\r\n      ]\r\n    );\r\n    $res = [];\r\n    if ($rows) {\r\n      foreach ($rows as $r) {\r\n        $res[] = [\r\n          'value' => $r['id'],\r\n          'text' => (empty($r['name']) ? '' : $r['name'] . ' - ') . $r['value'],\r\n          'cfg' => empty($r['cfg']) ? [] : json_decode($r['cfg'], true),\r\n          'id_contact' => $r['id_contact'],\r\n          'num_sent' => $r['num_sent'],\r\n          'last_sent' => $r['last_sent'],\r\n          'blacklist' => $r['blacklist']\r\n        ];\r\n      }\r\n    }\r\n\r\n    return $res;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1273,
            "endLine": 1330,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getContacts",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "syncFolders": {
            "name": "syncFolders",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function syncFolders(string $id_account, array $subscribed = [])\r\n  {\r\n    \/\/ get Mailbox account\r\n    if ($mb = $this->getMailbox($id_account)) {\r\n      \/\/ get the parameter (host and port)\r\n      $mbParam = $mb->getParams();\r\n      \/\/ get the option 'folders'\r\n      $types = self::getFolderTypes();\r\n\r\n      $put_in_res = function (array $a, &$res, $prefix = '') use (&$put_in_res, $subscribed, $mb) {\r\n        \/\/ set the first value of $a in $ele and remove it in the array\r\n        $ele = array_shift($a);\r\n        \/\/ search if res contain an array with 'text' => $ele and return the index or null instead\r\n        $idx = X::search($res, ['text' => $ele]);\r\n\r\n        if (null === $idx) {\r\n          \/\/ count number of element in array (useless ?)\r\n          $idx = count($res);\r\n          $info = $mb->getInfoFolder($prefix . $ele);\r\n          $mb->selectFolder($prefix . $ele);\r\n          \/\/ add $ele in the res array\r\n          $res[] = [\r\n            'text' => $ele,\r\n            'uid' => $prefix . $ele,\r\n            'items' => [],\r\n            'subscribed' => in_array($prefix . $ele, $subscribed),\r\n            'num_msg' => $info->Nmsgs,\r\n            'last_uid' => !empty($info->Nmsgs) ? $mb->getMsgUid($info->Nmsgs) : null,\r\n          ];\r\n        }\r\n\r\n        if (count($a)) {\r\n          $put_in_res($a, $res[$idx]['items'], $prefix . $ele . '.');\r\n        }\r\n      };\r\n\r\n      $compare = function (\r\n        array $real,\r\n        array $db,\r\n        array|null &$res = null,\r\n              $id_parent = null\r\n      ) use (&$compare): array {\r\n        if (!$res) {\r\n          $res = [\r\n            'add' => [],\r\n            'update' => [],\r\n            'delete' => []\r\n          ];\r\n        }\r\n\r\n        foreach ($real as $r) {\r\n          $idx = X::search($db, ['text' => $r['text']]);\r\n          if (null === $idx) {\r\n            if ($id_parent) {\r\n              $r['id_parent'] = $id_parent;\r\n            }\r\n\r\n            $res['add'][] = $r;\r\n          }\r\n          else {\r\n            if (!array_key_exists('num_msg', $db[$idx])\r\n              || !array_key_exists('last_uid', $db[$idx])\r\n              || ($r['num_msg'] !== $db[$idx]['num_msg'])\r\n              || ($r['last_uid'] !== $db[$idx]['last_uid'])\r\n            ) {\r\n              $res['update'][] = [\r\n                'id' => $db[$idx]['id'],\r\n                'num_msg' => $r['num_msg'],\r\n                'last_uid' => $r['last_uid']\r\n              ];\r\n            }\r\n\r\n            if ($r['items'] && $db[$idx]['items']) {\r\n              $compare($r['items'], $db[$idx]['items'], $res, $db[$idx]['id']);\r\n            }\r\n          }\r\n        }\r\n\r\n        foreach ($db as $r) {\r\n          $idx = X::search($real, ['text' => $r['text']]);\r\n          if (null === $idx) {\r\n            $res['delete'][] = $r;\r\n          }\r\n        }\r\n\r\n        return $res;\r\n      };\r\n\r\n      $pref = $this->pref;\r\n\r\n      $import = function (array $to_add, $id_parent = null) use ($id_account, &$pref, &$import, &$types) {\r\n        foreach ($to_add as $a) {\r\n          if ($id_parent) {\r\n            $a['id_parent'] = $id_parent;\r\n            $a['id_option'] = X::getField($types, ['code' => 'folders'], 'id');\r\n          }\r\n          else {\r\n            foreach ($types as $type) {\r\n              if (!empty($type['names'])) {\r\n                if (in_array($a['text'], $type['names'], true)) {\r\n                  $a['id_option'] = $type['id'];\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (!isset($a['id_option'])) {\r\n              $a['id_option'] = X::getField($types, ['code' => 'folders'], 'id');\r\n            }\r\n          }\r\n\r\n          if ($id_bit = $pref->addBit($id_account, $a)) {\r\n            if (!empty($a['items'])) {\r\n              $import($a['items'], $id_bit);\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      $update = function(array $toUpdate) use ($pref) {\r\n        foreach ($toUpdate as $u) {\r\n          $pref->updateBit($u['id'], $u);\r\n        }\r\n      };\r\n\r\n      $remove = function(array $toRemove) use ($pref) {\r\n        foreach ($toRemove as $r) {\r\n          $pref->deleteBit($r['id']);\r\n        }\r\n      };\r\n\r\n      $res = [];\r\n      $all = $mb->listAllFolders();\r\n      foreach ($all as $dir) {\r\n        $tmp = str_replace($mbParam, '', $dir);\r\n        $bits = X::split($tmp, '.');\r\n        $put_in_res($bits, $res);\r\n      }\r\n\r\n      $db_tree = $this->pref->getFullBits($id_account);\r\n      $result = $compare($res, $db_tree);\r\n      $import($result['add']);\r\n      $update($result['update']);\r\n      $remove($result['delete']);\r\n      return [\r\n        'real' => $res,\r\n        'db' => $this->pref->getFullBits($id_account),\r\n        'compare' => $result\r\n      ];\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1333,
            "endLine": 1485,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "syncFolders",
            "returns": [],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subscribed",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "send": {
            "name": "send",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function send(string $id_account, array $cfg): int\r\n  {\r\n    if ($mb = $this->getMailbox($id_account)) {\r\n      $fields = ['to', 'cc', 'bcc'];\r\n      $num = 0;\r\n      $dest = [];\r\n      \/*\r\n                foreach ($fields as $field) {\r\n                  $dest[$field] = [];\r\n                  if (!empty($cfg[$field])) {\r\n                    foreach ($cfg[$field] as $d) {\r\n                      if (Str::isEmail($d)) {\r\n                        $dest[$field][] = $d;\r\n                        $num++;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n                *\/\r\n\r\n      if (!empty($cfg['title']) || !empty($cfg['text'])) {\r\n        $mailer = $mb->getMailer();\r\n        return $mailer->send($cfg);\r\n      }\r\n    }\r\n\r\n    throw new \\Exception(X::_(\"Impossible to find the mailbox\"));\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1488,
            "endLine": 1515,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "send",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getStructure": {
            "name": "getStructure",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getStructure($id_account, $force)\r\n  {\r\n\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1518,
            "endLine": 1521,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getStructure",
            "returns": [],
            "arguments": [
                {
                    "name": "id_account",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAttachments": {
            "name": "getAttachments",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAttachments(string $id, ?string $filename = null): ?array\r\n  {\r\n    if (($em = $this->db->rselect($this->class_table, $this->fields, [$this->fields['id'] => $id]))\r\n      && ($folder = $this->getFolder($em['id_folder']))\r\n      && ($mb = $this->getMailbox($folder['id_account']))\r\n      && $mb->selectFolder($folder['uid'])\r\n      && ($msgNum = $mb->getMsgNo($em['msg_uid']))\r\n    ) {\r\n      return $mb->getAttachments($msgNum, $filename);\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1524,
            "endLine": 1536,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getAttachments",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filename",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "idsFromFolder": {
            "name": "idsFromFolder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function idsFromFolder($id_folder): ?array\r\n  {\r\n    $types = self::getFolderTypes();\r\n    if ($common_folder = X::getRow($types, ['id' => $id_folder])) {\r\n      $ids = [];\r\n      $accounts = $this->getAccounts();\r\n      foreach ($accounts as $a) {\r\n        foreach ($this->getFolders($a['id']) as $f) {\r\n          if ($f['id_option'] === $common_folder['id']) {\r\n            $ids[] = $f['id'];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    elseif (Str::isUid($id_folder)) {\r\n      $bit = $this->pref->getBit($id_folder);\r\n      if (!$bit) {\r\n        \/\/ It's not a folder but an account\r\n        if ($pref = $this->pref->get($id_folder)) {\r\n          \/\/ we look for inbox\r\n        }\r\n      } else {\r\n        $ids = [$id_folder];\r\n      }\r\n    }\r\n    else if ($id_folder === 'conversations') {\r\n      $inbox = X::getRow($types, ['code' => 'inbox']);\r\n      $sent = X::getRow($types, ['code' => 'sent']);\r\n      $ids = [];\r\n      $accounts = $this->getAccounts();\r\n      foreach ($accounts as $a) {\r\n        foreach ($this->getFolders($a['id']) as $f) {\r\n          if (($f['id_option'] === $inbox['id']) || ($f['id_option'] === $sent['id'])) {\r\n            $ids[] = $f['id'];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!empty($ids)) {\r\n      return $ids;\r\n    }\r\n\r\n    return null;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1539,
            "endLine": 1583,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "idsFromFolder",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_folder",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setAccountSync": {
            "name": "setAccountSync",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setAccountSync(\r\n    string $idAccount,\r\n    string $idFolder,\r\n    string $folderName,\r\n    int $numMsg\r\n  ): bool\r\n  {\r\n    if ($account = $this->pref->get($idAccount)) {\r\n      if (!isset($account['sync'])) {\r\n        $account['sync'] = [];\r\n      }\r\n\r\n      if (!isset($account['sync']['folders'])) {\r\n        $account['sync']['folders'] = [];\r\n      }\r\n\r\n      $account['sync']['folders'][$idFolder] = [\r\n        'id' => $idFolder,\r\n        'name' => $folderName,\r\n        'db_msg' => $this->db->count($this->class_table, [$this->fields['id_folder'] => $idFolder]),\r\n        'msg' => $numMsg,\r\n      ];\r\n      return (bool)$this->pref->set($idAccount, $account);\r\n    }\r\n\r\n    return false;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1586,
            "endLine": 1612,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "setAccountSync",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "idAccount",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idFolder",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "folderName",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "numMsg",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeFolder": {
            "name": "normalizeFolder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function normalizeFolder(array $folder): array\r\n  {\r\n    $types = self::getFolderTypes();\r\n    return [\r\n      'id' => $folder['id'],\r\n      'id_account' => $folder['id_user_option'],\r\n      'text' => $folder['text'],\r\n      'uid' => $folder['uid'],\r\n      'id_option' => $folder['id_option'],\r\n      'id_parent' => $folder['id_parent'] ?? null,\r\n      'type' => X::getField($types, ['id' => $folder['id_option']], 'code'),\r\n      'db_uid_max' => $this->getDbUidMax($folder['id']),\r\n      'db_uid_min' => $this->getDbUidMin($folder['id']),\r\n      'db_num_msg' => $this->getNumMsg($folder['id']),\r\n      'num_msg' => $folder['num_msg'] ?? 0,\r\n      'last_uid' => $folder['last_uid'] ?? null,\r\n      'last_check' => $folder['last_check'] ?? null,\r\n      'hash' => $folder['hash'] ?? null,\r\n      'subscribed' => $folder['subscribed'] ?? false\r\n    ];\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1615,
            "endLine": 1635,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normalizeFolder",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "folder",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_get_password": {
            "name": "_get_password",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_password(): Passwords\r\n  {\r\n    if (!$this->pw) {\r\n      $this->pw = new Passwords($this->db);\r\n    }\r\n\r\n    return $this->pw;\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1638,
            "endLine": 1645,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_password",
            "returns": [
                "bbn\\Appui\\Passwords"
            ],
            "arguments": []
        },
        "getDbUidMax": {
            "name": "getDbUidMax",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getDbUidMax(string $idFolder): ?int\r\n  {\r\n    return $this->db->selectOne(\r\n      $this->class_table,\r\n      'MAX(' . $this->db->csn($this->fields['msg_uid'], true) . ')',\r\n      [\r\n        $this->fields['id_folder'] => $idFolder,\r\n        $this->fields['id_user'] => $this->user->getId()\r\n      ]\r\n    );\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1648,
            "endLine": 1658,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDbUidMax",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "idFolder",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDbUidMin": {
            "name": "getDbUidMin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getDbUidMin(string $idFolder): ?int\r\n  {\r\n    return $this->db->selectOne(\r\n      $this->class_table,\r\n      'MIN(' . $this->db->csn($this->fields['msg_uid'], true) . ')',\r\n      [\r\n        $this->fields['id_folder'] => $idFolder,\r\n        $this->fields['id_user'] => $this->user->getId()\r\n      ]\r\n    );\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1661,
            "endLine": 1671,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDbUidMin",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "idFolder",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getNumMsg": {
            "name": "getNumMsg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getNumMsg(string $idFolder): int\r\n  {\r\n    return $this->db->count(\r\n      $this->class_table,\r\n      [\r\n        $this->fields['id_folder'] => $idFolder,\r\n        $this->fields['id_user'] => $this->user->getId()\r\n      ]\r\n    );\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1674,
            "endLine": 1683,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getNumMsg",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "idFolder",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "makeFolderHash": {
            "name": "makeFolderHash",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Email.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function makeFolderHash(string $idFolder, int $numMsg = 0, int $lastUid = 0): ?string\r\n  {\r\n    return md5(json_encode([\r\n      'idFolder' => $idFolder,\r\n      'lastUid' => $lastUid,\r\n      'numMsg' => $numMsg\r\n    ]));\r\n  }\r",
            "parent": false,
            "trait": false,
            "startLine": 1686,
            "endLine": 1693,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "makeFolderHash",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idFolder",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "numMsg",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "lastUid",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(IFNULL(' . $this->db->csn($col, true) . ' ,\"{}\")';\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n\n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string|null $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the class configuration.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array|null $cfg = null)\n  {\n    $arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n\n      foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 41,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 96,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 144,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 152,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 164,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string|null $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 205,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string|null $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      $cls = false;\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      if (!$path) {\n        $tmp = explode('\\\\', __CLASS__);\n        $cls = strtolower(end($tmp));\n        $path = [$cls, 'appui', 'plugins'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      \/\/X::ddump($path, self::$option_root_id);\n      if (!self::$option_root_id) {\n        if (empty($cls)) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array|null $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!$path) {\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 78,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array|null $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 104,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 115,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 122,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fromCode(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 139,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(...$codes): array\n  {\n    $codes[] = self::getOptionRoot();\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...$codes),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 152,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTree(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return ($tree = self::getOptionsObject()->fullTreeRef(...$codes)) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 173,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptions(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSimpleOptions": {
            "name": "getSimpleOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getSimpleOptions(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->options(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 187,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSimpleOptions",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->fullOptionsRef(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption(...$codes)\n  {\n    $codes[] = self::getOptionRoot();\n    return self::getOptionsObject()->option(...$codes);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 201,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": [
                {
                    "name": "codes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = [$id];\n    }\n\n    if (is_array($id)) {\n      $id[] = self::getOptionRoot();\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptions($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 208,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValue",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Email",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef(string|array $id, string $text = 'text', string $value = 'value', ...$additionalFields): array\n  {\n    if (is_string($id) && !Str::isUid($id)) {\n      $id = self::getOptionId($id);\n    }\n\n    return $id ? self::getOptionsObject()->textValueOptionsRef($id, $text, $value, ...$additionalFields) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 222,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getOptionsTextValueRef",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "text",
                    "default_name": ""
                },
                {
                    "name": "value",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "value",
                    "default_name": ""
                },
                {
                    "name": "additionalFields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\User\\Email",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": {
                "table": "bbn_users_emails",
                "tables": {
                    "users_emails": "bbn_users_emails",
                    "users_emails_aliases": "bbn_users_emails_aliases",
                    "users_emails_recipients": "bbn_users_emails_recipients",
                    "users_contacts": "bbn_users_contacts",
                    "users_contacts_links": "bbn_users_contacts_links"
                },
                "arch": {
                    "users_emails": {
                        "id": "id",
                        "id_user": "id_user",
                        "id_folder": "id_folder",
                        "msg_uid": "msg_uid",
                        "msg_unique_id": "msg_unique_id",
                        "date": "date",
                        "id_sender": "id_sender",
                        "subject": "subject",
                        "excerpt": "excerpt",
                        "size": "size",
                        "attachments": "attachments",
                        "flags": "flags",
                        "is_read": "is_read",
                        "id_parent": "id_parent",
                        "id_thread": "id_thread",
                        "external_uids": "external_uids"
                    },
                    "users_emails_aliases": {
                        "id_account": "id_account",
                        "id_link": "id_link",
                        "main": "main"
                    },
                    "users_emails_recipients": {
                        "id_email": "id_email",
                        "id_contact_link": "id_contact_link",
                        "type": "type"
                    },
                    "users_contacts": {
                        "id": "id",
                        "id_user": "id_user",
                        "name": "name",
                        "blacklist": "blacklist",
                        "cfg": "cfg"
                    },
                    "users_contacts_links": {
                        "id": "id",
                        "id_contact": "id_contact",
                        "type": "type",
                        "value": "value",
                        "num_sent": "num_sent",
                        "last_sent": "last_sent"
                    }
                }
            }
        },
        "mboxes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\User\\Email",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array An array of connection objects",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "opt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\User\\Email",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bbn\\Appui\\Option The options object",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "pw": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\User\\Email",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bbn\\Appui\\Passwords The passwords object",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Db",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\User\\Email",
            "promoted": true,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\User",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\User\\Email",
            "promoted": true,
            "visibility": "protected",
            "doc": {
                "description": "@var user The user object",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "pref": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\User\\Preferences",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\User\\Email",
            "promoted": true,
            "visibility": "protected",
            "doc": {
                "description": "@var preferences The preferences object",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Email"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_users_emails",
            "tables": {
                "users_emails": "bbn_users_emails",
                "users_emails_aliases": "bbn_users_emails_aliases",
                "users_emails_recipients": "bbn_users_emails_recipients",
                "users_contacts": "bbn_users_contacts",
                "users_contacts_links": "bbn_users_contacts_links"
            },
            "arch": {
                "users_emails": {
                    "id": "id",
                    "id_user": "id_user",
                    "id_folder": "id_folder",
                    "msg_uid": "msg_uid",
                    "msg_unique_id": "msg_unique_id",
                    "date": "date",
                    "id_sender": "id_sender",
                    "subject": "subject",
                    "excerpt": "excerpt",
                    "size": "size",
                    "attachments": "attachments",
                    "flags": "flags",
                    "is_read": "is_read",
                    "id_parent": "id_parent",
                    "id_thread": "id_thread",
                    "external_uids": "external_uids"
                },
                "users_emails_aliases": {
                    "id_account": "id_account",
                    "id_link": "id_link",
                    "main": "main"
                },
                "users_emails_recipients": {
                    "id_email": "id_email",
                    "id_contact_link": "id_contact_link",
                    "type": "type"
                },
                "users_contacts": {
                    "id": "id",
                    "id_user": "id_user",
                    "name": "name",
                    "blacklist": "blacklist",
                    "cfg": "cfg"
                },
                "users_contacts_links": {
                    "id": "id",
                    "id_contact": "id_contact",
                    "type": "type",
                    "value": "value",
                    "num_sent": "num_sent",
                    "last_sent": "last_sent"
                }
            }
        },
        "optional_is_init": false,
        "option_root_id": null
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\X": "X",
        "bbn\\Db": "Db",
        "bbn\\Str": "Str",
        "bbn\\User": "User",
        "bbn\\User\\Preferences": "Preferences",
        "bbn\\Appui\\Mailbox": "Mailbox",
        "bbn\\Appui\\Passwords": "Passwords",
        "bbn\\Models\\Cls\\Basic": "Basic",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Tts\\Optional": "Optional",
        "Generator": "Generator",
        "stdClass": "stdClass"
    },
    "dummyComments": [],
    "summary": "",
    "description": "",
    "description_parts": []
}