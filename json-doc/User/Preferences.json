{
    "doc": {
        "description": "A user's preference system linked to options and user classes\n\nA preference consists in a row with an ID_OPTION and a ID_USER, ID_GROUP, or PUBLIC.\nThe class needs a user object on which each query will be based.\nThis class must be able to:\n- read options with the same arguments as the option class (filtered based on preference existence)\n- retrieve preference(s) for an option\n- write preference by adding to an existing set or setting a unique\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Oct 28, 2015, 10:23:55 +0000",
            "category": "Authentication",
            "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
            "version": "0.1",
            "todo": "Groups and hotlinks features"
        }
    },
    "name": "bbn\\User\\Preferences",
    "namespace": true,
    "realName": "Preferences",
    "realNamespace": "bbn\\User",
    "traits": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\DbActions",
        "bbn\\Models\\Tts\\Optional",
        "bbn\\Models\\Tts\\Current"
    ],
    "interfaces": [],
    "fileName": "\/User\/Preferences.php",
    "startLine": 43,
    "endLine": 2654,
    "numMethods": 128,
    "numProperties": 26,
    "numConstants": 0,
    "numStaticProperties": 6,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Db",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_users_options",
            "tables": {
                "user_options": "bbn_users_options",
                "user_options_bits": "bbn_users_options_bits"
            },
            "arch": {
                "user_options": {
                    "id": "id",
                    "id_option": "id_option",
                    "num": "num",
                    "id_user": "id_user",
                    "id_group": "id_group",
                    "id_alias": "id_alias",
                    "public": "public",
                    "id_link": "id_link",
                    "text": "text",
                    "cfg": "cfg"
                },
                "user_options_bits": {
                    "id": "id",
                    "id_user_option": "id_user_option",
                    "id_parent": "id_parent",
                    "id_option": "id_option",
                    "num": "num",
                    "text": "text",
                    "cfg": "cfg"
                }
            }
        },
        "retriever_instance": null,
        "retriever_exists": false,
        "optional_is_init": false,
        "option_root_id": null,
        "current": null,
        "opt": null,
        "user": null,
        "id_user": null,
        "id_group": null,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_isInitClassCfg": false,
        "fields": null,
        "class_cfg": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": [],
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\User",
    "shortName": "Preferences",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "getPreferences": {
            "name": "getPreferences",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getPreferences(): ?preferences\n  {\n    return self::getInstance();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPreferences",
            "returns": [
                null,
                "bbn\\User\\preferences"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return preferences|null\n   *\/"
        },
        "__construct": {
            "name": "__construct",
            "summary": "Preferences constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, array $cfg = [])\n  {\n      parent::__construct($db);\n    $this->initClassCfg($cfg);\n    if ($user = User::getInstance()) {\n      $this->_initUser($user);\n    }\n\n    $this->opt = Option::getInstance();\n    if ($this->user && $this->opt) {\n      self::retrieverInit($this);\n    }\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 111,
            "endLine": 123,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database connection object"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "A configuration array for tha tables' structure"
                }
            ],
            "doc": {
                "description": "Preferences constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db",
                        "description": "The database connection object"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "A configuration array for tha tables' structure"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Preferences constructor.\n   *\n   * @param Db $db The database connection object\n   * @param array $cfg A configuration array for tha tables' structure\n   * @throws Exception\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns an array describing the structures of the tables for the class.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->getClassCfg();\n\n\/\/ (array) = [\n\/\/   \"table\" => \"bbn_users_options\",\n\/\/   \"tables\" => [\n\/\/     \"user_options\" => \"bbn_users_options\",\n\/\/     \"user_options_bits\" => \"bbn_users_options_bits\"\n\/\/   ],\n\/\/   \"arch\" => [\n\/\/     \"user_options\" => [\n\/\/       \"id\" => \"id\",\n\/\/       \"id_option\" => \"id_option\",\n\/\/       \"num\" => \"num\",\n\/\/       \"id_user\" => \"id_user\",\n\/\/       \"id_group\" => \"id_group\",\n\/\/       \"id_alias\" => \"id_alias\",\n\/\/       \"public\" => \"public\",\n\/\/       \"id_link\" => \"id_link\",\n\/\/       \"text\" => \"text\",\n\/\/       \"cfg\" => \"cfg\"\n\/\/     ],\n\/\/     \"user_options_bits\" => [\n\/\/       \"id\" => \"id\",\n\/\/       \"id_user_option\" => \"id_user_option\",\n\/\/       \"id_parent\" => \"id_parent\",\n\/\/       \"id_option\" => \"id_option\",\n\/\/       \"num\" => \"num\",\n\/\/       \"text\" => \"text\",\n\/\/       \"cfg\" => \"cfg\"\n\/\/     ]\n\/\/   ]\n\/\/ ];"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg(): array\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 166,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns an array describing the structures of the tables for the class.\n\n```\n$pref->getClassCfg();\n\n\/\/ (array) = [\n\/\/   \"table\" => \"bbn_users_options\",\n\/\/   \"tables\" => [\n\/\/     \"user_options\" => \"bbn_users_options\",\n\/\/     \"user_options_bits\" => \"bbn_users_options_bits\"\n\/\/   ],\n\/\/   \"arch\" => [\n\/\/     \"user_options\" => [\n\/\/       \"id\" => \"id\",\n\/\/       \"id_option\" => \"id_option\",\n\/\/       \"num\" => \"num\",\n\/\/       \"id_user\" => \"id_user\",\n\/\/       \"id_group\" => \"id_group\",\n\/\/       \"id_alias\" => \"id_alias\",\n\/\/       \"public\" => \"public\",\n\/\/       \"id_link\" => \"id_link\",\n\/\/       \"text\" => \"text\",\n\/\/       \"cfg\" => \"cfg\"\n\/\/     ],\n\/\/     \"user_options_bits\" => [\n\/\/       \"id\" => \"id\",\n\/\/       \"id_user_option\" => \"id_user_option\",\n\/\/       \"id_parent\" => \"id_parent\",\n\/\/       \"id_option\" => \"id_option\",\n\/\/       \"num\" => \"num\",\n\/\/       \"text\" => \"text\",\n\/\/       \"cfg\" => \"cfg\"\n\/\/     ]\n\/\/   ]\n\/\/ ];\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array describing the structures of the tables for the class.\n   *\n   * ```\n   * $pref->getClassCfg();\n   *\n   * \/\/ (array) = [\n   * \/\/   \"table\" => \"bbn_users_options\",\n   * \/\/   \"tables\" => [\n   * \/\/     \"user_options\" => \"bbn_users_options\",\n   * \/\/     \"user_options_bits\" => \"bbn_users_options_bits\"\n   * \/\/   ],\n   * \/\/   \"arch\" => [\n   * \/\/     \"user_options\" => [\n   * \/\/       \"id\" => \"id\",\n   * \/\/       \"id_option\" => \"id_option\",\n   * \/\/       \"num\" => \"num\",\n   * \/\/       \"id_user\" => \"id_user\",\n   * \/\/       \"id_group\" => \"id_group\",\n   * \/\/       \"id_alias\" => \"id_alias\",\n   * \/\/       \"public\" => \"public\",\n   * \/\/       \"id_link\" => \"id_link\",\n   * \/\/       \"text\" => \"text\",\n   * \/\/       \"cfg\" => \"cfg\"\n   * \/\/     ],\n   * \/\/     \"user_options_bits\" => [\n   * \/\/       \"id\" => \"id\",\n   * \/\/       \"id_user_option\" => \"id_user_option\",\n   * \/\/       \"id_parent\" => \"id_parent\",\n   * \/\/       \"id_option\" => \"id_option\",\n   * \/\/       \"num\" => \"num\",\n   * \/\/       \"text\" => \"text\",\n   * \/\/       \"cfg\" => \"cfg\"\n   * \/\/     ]\n   * \/\/   ]\n   * \/\/ ];\n   * ```\n   *\n   * @return array\n   *\/"
        },
        "retrieveIds": {
            "name": "retrieveIds",
            "summary": "Returns all preferences' IDs from the option's ID.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->retrieveIds(\"944190af24ef11eca47652540000cfbe\");\n\n\/\/ (array) = [\n\/\/   \"8380126d2b4d11eca47652540000cfbe\",\n\/\/   \"309f8a1c2c2f11eca47652540000cfbe\",\n\/\/   \"ef2cefe52c2f11eca47652540000cfbe\",\n\/\/   \"042b29722c2f11eca47652540000cfbe\",\n\/\/   \"eac3729c2b6c11eca47652540000cfbe\",\n\/\/   \"d38e7e692cd011eca47652540000cfbe\",\n\/\/   \"26e3dd9a2c2611eca47652540000cfbe\",\n\/\/   \"3ef413ad2b6b11eca47652540000cfbe\",\n\/\/   \"f47d188b2b5911eca47652540000cfbe\",\n\/\/   \"179d85a0284911eca47652540000cfbe\",\n\/\/   \"7238e8932c0e11eca47652540000cfbe\",\n\/\/   \"89ceab0b2aa111eca47652540000cfbe\",\n\/\/   \"96203fbb2b5911eca47652540000cfbe\",\n\/\/ ]"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function retrieveIds(string $id_option = null): ?array\n  {\n    return $this->_retrieveIds($id_option, $this->id_user, $this->id_group);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 199,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "retrieveIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Returns all preferences' IDs from the option's ID.\n\n```\n$pref->retrieveIds(\"944190af24ef11eca47652540000cfbe\");\n\n\/\/ (array) = [\n\/\/   \"8380126d2b4d11eca47652540000cfbe\",\n\/\/   \"309f8a1c2c2f11eca47652540000cfbe\",\n\/\/   \"ef2cefe52c2f11eca47652540000cfbe\",\n\/\/   \"042b29722c2f11eca47652540000cfbe\",\n\/\/   \"eac3729c2b6c11eca47652540000cfbe\",\n\/\/   \"d38e7e692cd011eca47652540000cfbe\",\n\/\/   \"26e3dd9a2c2611eca47652540000cfbe\",\n\/\/   \"3ef413ad2b6b11eca47652540000cfbe\",\n\/\/   \"f47d188b2b5911eca47652540000cfbe\",\n\/\/   \"179d85a0284911eca47652540000cfbe\",\n\/\/   \"7238e8932c0e11eca47652540000cfbe\",\n\/\/   \"89ceab0b2aa111eca47652540000cfbe\",\n\/\/   \"96203fbb2b5911eca47652540000cfbe\",\n\/\/ ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns all preferences' IDs from the option's ID.\n   *\n   * ```\n   * $pref->retrieveIds(\"944190af24ef11eca47652540000cfbe\");\n   *\n   * \/\/ (array) = [\n   * \/\/   \"8380126d2b4d11eca47652540000cfbe\",\n   * \/\/   \"309f8a1c2c2f11eca47652540000cfbe\",\n   * \/\/   \"ef2cefe52c2f11eca47652540000cfbe\",\n   * \/\/   \"042b29722c2f11eca47652540000cfbe\",\n   * \/\/   \"eac3729c2b6c11eca47652540000cfbe\",\n   * \/\/   \"d38e7e692cd011eca47652540000cfbe\",\n   * \/\/   \"26e3dd9a2c2611eca47652540000cfbe\",\n   * \/\/   \"3ef413ad2b6b11eca47652540000cfbe\",\n   * \/\/   \"f47d188b2b5911eca47652540000cfbe\",\n   * \/\/   \"179d85a0284911eca47652540000cfbe\",\n   * \/\/   \"7238e8932c0e11eca47652540000cfbe\",\n   * \/\/   \"89ceab0b2aa111eca47652540000cfbe\",\n   * \/\/   \"96203fbb2b5911eca47652540000cfbe\",\n   * \/\/ ]\n   * ```\n   *\n   * @param null|string $id_option\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "retrieveUserIds": {
            "name": "retrieveUserIds",
            "summary": "Returns preferences' IDs from the option's ID and the given user ID.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->retrieveUserIds('944190af24ef11eca47652540000cfbe');\n\n\/\/ (array) = [\n\/\/   \"8380126d2b4d11eca47652540000cfbe\",\n\/\/   \"309f8a1c2c2f11eca47652540000cfbe\",\n\/\/   \"ef2cefe52c2f11eca47652540000cfbe\",\n\/\/   \"042b29722c2f11eca47652540000cfbe\",\n\/\/   \"eac3729c2b6c11eca47652540000cfbe\",\n\/\/   \"d38e7e692cd011eca47652540000cfbe\",\n\/\/   \"26e3dd9a2c2611eca47652540000cfbe\",\n\/\/   \"3ef413ad2b6b11eca47652540000cfbe\",\n\/\/   \"f47d188b2b5911eca47652540000cfbe\",\n\/\/   \"179d85a0284911eca47652540000cfbe\",\n\/\/   \"7238e8932c0e11eca47652540000cfbe\",\n\/\/   \"89ceab0b2aa111eca47652540000cfbe\",\n\/\/   \"96203fbb2b5911eca47652540000cfbe\",\n\/\/ ]"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function retrieveUserIds(string $id_option = null, string $id_user = null): ?array\n  {\n    if (!$id_user) {\n      $id_user = $this->id_user;\n    }\n\n    return $this->_retrieveIds($id_option, $id_user);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 233,
            "endLine": 240,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "retrieveUserIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                }
            ],
            "doc": {
                "description": "Returns preferences' IDs from the option's ID and the given user ID.\n\n```\n$pref->retrieveUserIds('944190af24ef11eca47652540000cfbe');\n\n\/\/ (array) = [\n\/\/   \"8380126d2b4d11eca47652540000cfbe\",\n\/\/   \"309f8a1c2c2f11eca47652540000cfbe\",\n\/\/   \"ef2cefe52c2f11eca47652540000cfbe\",\n\/\/   \"042b29722c2f11eca47652540000cfbe\",\n\/\/   \"eac3729c2b6c11eca47652540000cfbe\",\n\/\/   \"d38e7e692cd011eca47652540000cfbe\",\n\/\/   \"26e3dd9a2c2611eca47652540000cfbe\",\n\/\/   \"3ef413ad2b6b11eca47652540000cfbe\",\n\/\/   \"f47d188b2b5911eca47652540000cfbe\",\n\/\/   \"179d85a0284911eca47652540000cfbe\",\n\/\/   \"7238e8932c0e11eca47652540000cfbe\",\n\/\/   \"89ceab0b2aa111eca47652540000cfbe\",\n\/\/   \"96203fbb2b5911eca47652540000cfbe\",\n\/\/ ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "user"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns preferences' IDs from the option's ID and the given user ID.\n   *\n   * ```\n   * $pref->retrieveUserIds('944190af24ef11eca47652540000cfbe');\n   *\n   * \/\/ (array) = [\n   * \/\/   \"8380126d2b4d11eca47652540000cfbe\",\n   * \/\/   \"309f8a1c2c2f11eca47652540000cfbe\",\n   * \/\/   \"ef2cefe52c2f11eca47652540000cfbe\",\n   * \/\/   \"042b29722c2f11eca47652540000cfbe\",\n   * \/\/   \"eac3729c2b6c11eca47652540000cfbe\",\n   * \/\/   \"d38e7e692cd011eca47652540000cfbe\",\n   * \/\/   \"26e3dd9a2c2611eca47652540000cfbe\",\n   * \/\/   \"3ef413ad2b6b11eca47652540000cfbe\",\n   * \/\/   \"f47d188b2b5911eca47652540000cfbe\",\n   * \/\/   \"179d85a0284911eca47652540000cfbe\",\n   * \/\/   \"7238e8932c0e11eca47652540000cfbe\",\n   * \/\/   \"89ceab0b2aa111eca47652540000cfbe\",\n   * \/\/   \"96203fbb2b5911eca47652540000cfbe\",\n   * \/\/ ]\n   * ```\n   *\n   * @param null|string $id_option\n   * @param string|null $id_user\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "retrieveGroupIds": {
            "name": "retrieveGroupIds",
            "summary": "Returns preferences' IDs from the option's ID and the given group ID.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->retrieveGroupIdsIds('944190af24ef11eca47652540000cfbe', '930ac00324ef11eca47652540000cfbe');"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function retrieveGroupIds(string $id_option = null, string $id_group = null): ?array\n  {\n    if (!$id_group) {\n      $id_group = $this->id_group;\n    }\n\n    return $this->_retrieveIds($id_option, null, $id_group);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 255,
            "endLine": 262,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "retrieveGroupIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_group",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "group"
                }
            ],
            "doc": {
                "description": "Returns preferences' IDs from the option's ID and the given group ID.\n\n```\n$pref->retrieveGroupIdsIds('944190af24ef11eca47652540000cfbe', '930ac00324ef11eca47652540000cfbe');\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "group"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns preferences' IDs from the option's ID and the given group ID.\n   *\n   * ```\n   * $pref->retrieveGroupIdsIds('944190af24ef11eca47652540000cfbe', '930ac00324ef11eca47652540000cfbe');\n   * ```\n   *\n   * @param null|string $id_option\n   * @param string|null $id_group\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "isAuthorized": {
            "name": "isAuthorized",
            "summary": "Checks if the given user or the current user is authorized to access a user_option.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->isAuthorized(\"930ac00324ef11eca47652540000cfbe\");\n\n\/\/ (bool) = false;\n\n$pref->isAuthorized(\"eac3729c2b6c11eca47652540000cfbe\");\n\n\/\/ (bool) = true;\n`"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAuthorized(string $id_user_option): bool\n  {\n    return (bool)$this->get($id_user_option, false);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 282,
            "endLine": 285,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isAuthorized",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_user_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user_option"
                }
            ],
            "doc": {
                "description": "Checks if the given user or the current user is authorized to access a user_option.\n\n```\n$pref->isAuthorized(\"930ac00324ef11eca47652540000cfbe\");\n\n\/\/ (bool) = false;\n\n$pref->isAuthorized(\"eac3729c2b6c11eca47652540000cfbe\");\n\n\/\/ (bool) = true;\n````\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user_option"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Checks if the given user or the current user is authorized to access a user_option.\n   *\n   * ```\n   * $pref->isAuthorized(\"930ac00324ef11eca47652540000cfbe\");\n   *\n   * \/\/ (bool) = false;\n   *\n   * $pref->isAuthorized(\"eac3729c2b6c11eca47652540000cfbe\");\n   *\n   * \/\/ (bool) = true;\n   * ````\n   *\n   * @param string $id_user_option\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "has": {
            "name": "has",
            "summary": "Returns true if the current user can access a preference, false otherwise.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->has('9439491824ef11eca47652540000cfbe');\n\n\/\/ (bool) = true;"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function has(string $id_option = null, bool $force = false): bool\n  {\n    if (!$force && $this->user->isDev()) {\n      return true;\n    }\n\n    return (bool)$this->retrieveIds($id_option);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 302,
            "endLine": 309,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "has",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the current user can access a preference, false otherwise.\n\n```\n$pref->has('9439491824ef11eca47652540000cfbe');\n\n\/\/ (bool) = true;\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns true if the current user can access a preference, false otherwise.\n   *\n   * ```\n   * $pref->has('9439491824ef11eca47652540000cfbe');\n   *\n   * \/\/ (bool) = true;\n   * ```\n   *\n   * @param string|null $id_option\n   * @param bool $force\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "userHas": {
            "name": "userHas",
            "summary": "Checks if a user has the given preference.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->userHas('042b29722c2f11eca47652540000cfbe');\n\n\/\/ (bool) = false;"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function userHas(string $id_option, string $id_user = null): bool\n  {\n    return (bool)$this->_retrieveIds($id_option, $id_user);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 326,
            "endLine": 329,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "userHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                }
            ],
            "doc": {
                "description": "Checks if a user has the given preference.\n\n```\n$pref->userHas('042b29722c2f11eca47652540000cfbe');\n\n\/\/ (bool) = false;\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "user"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Checks if a user has the given preference.\n   *\n   * ```\n   * $pref->userHas('042b29722c2f11eca47652540000cfbe');\n   *\n   * \/\/ (bool) = false;\n   * ```\n   *\n   * @param string $id_option\n   * @param string|null $id_user\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "groupHas": {
            "name": "groupHas",
            "summary": "Checks if a group has the given preference.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->groupHas('042b29722c2f11eca47652540000cfbe', $pref->getGroup());\n\n\/\/ (bool) = false;"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function groupHas(string $id_option, string $id_group): bool\n  {\n    return (bool)$this->_retrieveIds($id_option, null, $id_group);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 345,
            "endLine": 348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "groupHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_group",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "group"
                }
            ],
            "doc": {
                "description": "Checks if a group has the given preference.\n\n```\n$pref->groupHas('042b29722c2f11eca47652540000cfbe', $pref->getGroup());\n\n\/\/ (bool) = false;\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "group"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Checks if a group has the given preference.\n   *\n   * ```\n   * $pref->groupHas('042b29722c2f11eca47652540000cfbe', $pref->getGroup());\n   *\n   * \/\/ (bool) = false;\n   * ```\n   * @param string $id_option\n   * @param string $id_group\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "getUser": {
            "name": "getUser",
            "summary": "Returns the Id of the current user.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->getUser();\n\n\/\/(string) = \"980dd074514ef11eca56895680000cers\";"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUser(): ?string\n  {\n    return $this->id_user;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 362,
            "endLine": 365,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUser",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the Id of the current user.\n\n```\n$pref->getUser();\n\n\/\/(string) = \"980dd074514ef11eca56895680000cers\";\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the Id of the current user.\n   *\n   * ```\n   * $pref->getUser();\n   *\n   * \/\/(string) = \"980dd074514ef11eca56895680000cers\";\n   * ```\n   *\n   * @return null|string\n   *\/"
        },
        "getGroup": {
            "name": "getGroup",
            "summary": "Returns the Id of the current group.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->getGroup();\n\n\/\/(string) = \"980dd074514ef11eca56895680000cers\";"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGroup(): ?string\n  {\n    return $this->id_group;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 379,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getGroup",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the Id of the current group.\n\n```\n$pref->getGroup();\n\n\/\/(string) = \"980dd074514ef11eca56895680000cers\";\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the Id of the current group.\n   *\n   * ```\n   * $pref->getGroup();\n   *\n   * \/\/(string) = \"980dd074514ef11eca56895680000cers\";\n   * ```\n   *\n   * @return null|string\n   *\/"
        },
        "setUser": {
            "name": "setUser",
            "summary": "Changes the current user and return the changed preferences class.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->setUser($ctrl->inc->user);\n\n\/\/(bbn\\User\\Preferences) = $pref;"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setUser(User $user): preferences\n  {\n    $this->_initUser($user);\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 398,
            "endLine": 402,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setUser",
            "returns": [
                "bbn\\User\\preferences"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "bbn\\User",
                    "type_arr": [
                        "bbn\\User"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the current user and return the changed preferences class.\n\n```\n$pref->setUser($ctrl->inc->user);\n\n\/\/(bbn\\User\\Preferences) = $pref;\n\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "User",
                        "name": "$user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the current user and return the changed preferences class.\n   *\n   * ```\n   * $pref->setUser($ctrl->inc->user);\n   *\n   * \/\/(bbn\\User\\Preferences) = $pref;\n   *\n   * ```\n   *\n   * @param User $user\n   * @return preferences\n   *\/"
        },
        "setGroup": {
            "name": "setGroup",
            "summary": "Changes the current group and return the changed preferences class.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->setGroup('930ac00324ef11eca47652540000cfbe');\n\n\/\/ (bbn\\User\\Preferences) = $pref;"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setGroup(string $id_group): preferences\n  {\n    if (Str::isUid($id_group)) {\n      $this->id_group = $id_group;\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 417,
            "endLine": 424,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setGroup",
            "returns": [
                "bbn\\User\\preferences"
            ],
            "arguments": [
                {
                    "name": "id_group",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "group"
                }
            ],
            "doc": {
                "description": "Changes the current group and return the changed preferences class.\n\n```\n$pref->setGroup('930ac00324ef11eca47652540000cfbe');\n\n\/\/ (bbn\\User\\Preferences) = $pref;\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "group"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the current group and return the changed preferences class.\n   *\n   * ```\n   * $pref->setGroup('930ac00324ef11eca47652540000cfbe');\n   *\n   * \/\/ (bbn\\User\\Preferences) = $pref;\n   * ```\n   *\n   * @param string $id_group\n   * @return preferences\n   *\/"
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "Gets the cfg array, normalized either from the DB or from the $cfg argument.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfg(string $id = null, array $cfg = null): ?array\n  {\n    if (\n        (null !== $cfg)\n        || ($cfg = $this->db->selectOne(\n            $this->class_cfg['table'],\n            $this->fields['cfg'],\n            [$this->fields['id'] => $id ]\n        ))\n    ) {\n      if (Str::isJson($cfg)) {\n        $cfg = json_decode($cfg, 1);\n      }\n\n      if (\\is_array($cfg)) {\n        $new = [];\n        foreach ($cfg as $k => $v) {\n          if (!\\in_array($k, $this->fields, true)) {\n            $new[$k] = $v;\n          }\n        }\n\n        return $new;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 434,
            "endLine": 461,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cfg array, normalized either from the DB or from the $cfg argument.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "null|array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cfg array, normalized either from the DB or from the $cfg argument.\n   *\n   * @param string|null $id\n   * @param null|array $cfg\n   * @return null|array\n   *\/"
        },
        "getCfgByOption": {
            "name": "getCfgByOption",
            "summary": "Gets the cfg array, normalized either from the DB or from the $cfg argument.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->getCfgByOption(\"9439491824ef11eca47652540000cfbe\");\n\n(array) = [];"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfgByOption(string $id_option, string $id_user = null): ?array\n  {\n    if (\n        ($cfg = $this->db->selectOne(\n            $this->class_cfg['table'],\n            $this->fields['cfg'],\n            [\n            $this->fields['id_option'] => $id_option,\n            $this->fields['id_user'] => $id_user ?: $this->id_user,\n            ]\n        ))\n    ) {\n      if (Str::isJson($cfg)) {\n        $cfg = json_decode($cfg, 1);\n      }\n\n      return $this->getCfg(false, $cfg);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 477,
            "endLine": 497,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCfgByOption",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                }
            ],
            "doc": {
                "description": "Gets the cfg array, normalized either from the DB or from the $cfg argument.\n\n```\n$pref->getCfgByOption(\"9439491824ef11eca47652540000cfbe\");\n\n(array) = [];\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cfg array, normalized either from the DB or from the $cfg argument.\n   *\n   * ```\n   * $pref->getCfgByOption(\"9439491824ef11eca47652540000cfbe\");\n   *\n   * (array) = [];\n   * ```\n   *\n   * @param string $id_option\n   * @param string|null $id_user\n   * @return null|array\n   *\/"
        },
        "getLinks": {
            "name": "getLinks",
            "summary": "Gets the preferences which have the option's $id as id_link.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->getLinks(\"9439491824ef11eca47652540000cfbe\");\n\n\/\/(array) = [];"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLinks(string $id): ?array\n  {\n    return $this->_getLinks($id, $this->id_user, $this->id_group);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 513,
            "endLine": 516,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLinks",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the preferences which have the option's $id as id_link.\n\n```\n$pref->getLinks(\"9439491824ef11eca47652540000cfbe\");\n\n\/\/(array) = [];\n\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Gets the preferences which have the option's $id as id_link.\n   *\n   * ```\n   * $pref->getLinks(\"9439491824ef11eca47652540000cfbe\");\n   *\n   * \/\/(array) = [];\n   *\n   * ```\n   * @param string $id\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "Returns the current user's preference based on the given id, his own profile and his group.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get(string $id, bool $with_config = true): ?array\n  {\n    if (Str::isUid($id)) {\n      $table    = $this->db->tsn($this->class_cfg['table'], true);\n      $uid      = $this->db->csn($this->fields['id'], true);\n      $id_user  = $this->db->csn($this->fields['id_user'], true);\n      $id_group = $this->db->csn($this->fields['id_group'], true);\n      $public   = $this->db->csn($this->fields['public'], true);\n      if (\n          $row = $this->db->rselect(\n              [\n              'table' => $table,\n              'fields' => $this->fields,\n              'where' => [\n              'conditions' => [[\n              'field' => $uid,\n              'value' => $id\n              ], [\n              'logic' => 'OR',\n              'conditions' => [[\n              'field' => $id_user,\n              'value' => $this->id_user\n              ], [\n              'field' => $id_group,\n              'value' => $this->id_group\n              ], [\n              'field' => $public,\n              'value' => 1\n              ]]\n              ]]\n              ]\n              ]\n          )\n      ) {\n        if ($with_config) {\n          if (empty($row['cfg']) && !empty($row['id_alias'])) {\n            \/\/if it's the case of a shared list takes the $cfg and the text from the alias\n            $alias       = $this->db->rselect(\n                [\n                'table' => $table,\n                'fields' => ['cfg', 'text'],\n                'where' => [\n                'conditions' => [[\n                  'field' => 'id',\n                  'value' => $row['id_alias']\n                ]]\n                ]\n                ]\n            );\n            $row['cfg']  = $alias['cfg'];\n            $row['text'] = $alias['text'];\n          }\n\n          $cfg = $row[$this->fields['cfg']];\n          unset($row[$this->fields['cfg']]);\n          if ($cfg && ($cfg = json_decode($cfg, true))) {\n            $row = X::mergeArrays($cfg, $row);\n          }\n\n        }\n\n        return $row;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 527,
            "endLine": 593,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "get",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "with_config",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config"
                }
            ],
            "doc": {
                "description": "Returns the current user's preference based on the given id, his own profile and his group.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the current user's preference based on the given id, his own profile and his group.\n   *\n   * @param string $id\n   * @param bool $with_config\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "getAll": {
            "name": "getAll",
            "summary": "Returns an array of the current user's preferences based on the given id_option, his own profile and his group's.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAll(string $id_option = null, bool $with_config = true): ?array\n  {\n    if ($id_option = $this->_getIdOption($id_option)) {\n      $farch  = $this->fields;\n      $fields = [];\n      foreach ($farch as $k => $f) {\n        $field = $this->class_table . '.' . $f;\n        if ($k === 'cfg') {\n          $fields[$farch['cfg']] = \"IFNULL($field, aliases.$farch[cfg])\";\n        }\n        elseif ($k === 'text') {\n          $fields[$farch['text']] = \"IFNULL($field, aliases.$farch[text])\";\n        }\n        else {\n          $fields[] = $field;\n        }\n      }\n\n      if (\n          $rows = $this->db->rselectAll(\n              [\n              'table' => $this->class_table,\n              'fields' => $fields,\n              'join' => [[\n              'table' => $this->class_table,\n              'type' => 'left',\n              'alias' => 'aliases',\n              'on' => [\n              'conditions' => [[\n              'field' => $farch['id_alias'],\n              'exp' => 'aliases.id'\n              ]]\n              ]]\n              ],\n              'where' => [\n              'conditions' => [\n              [\n              'field' => $farch['id_option'],\n              'value' => $id_option\n              ], [\n              'logic' => 'OR',\n              'conditions' => [\n                [\n                  'field' => $farch['id_user'],\n                  'value' => $this->id_user\n                ], [\n                  'field' => $farch['id_group'],\n                  'value' => $this->id_group\n                ], [\n                  'field' => $farch['public'],\n                  'value' => 1\n                ]\n              ]\n              ]\n              ]\n              ]\n              ]\n          )\n      ) {\n        return $with_config ? array_map(\n            function ($a) use ($farch) {\n              $cfg = $a[$farch['cfg']];\n              unset($a[$farch['cfg']]);\n              if ($cfg && ($cfg = json_decode($cfg, true))) {\n                $a = X::mergeArrays($cfg, $a);\n              }\n\n\n              return $a;\n            },\n            $rows\n        ) : $rows;\n      }\n\n      return [];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 604,
            "endLine": 682,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "with_config",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config"
                }
            ],
            "doc": {
                "description": "Returns an array of the current user's preferences based on the given id_option, his own profile and his group's.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns an array of the current user's preferences based on the given id_option, his own profile and his group's.\n   *\n   * @param null|string $id_option\n   * @param bool $with_config\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "getAllNotMine": {
            "name": "getAllNotMine",
            "summary": "Returns an array of the users' preferences (the current user and group are excluded) based on the given id_option.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->getAllNotMine('9439491824ef11eca47652540000cfbe', true);\n\n\/\/ (array) = [];"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAllNotMine(string $id_option = null, bool $with_config = true): ?array\n  {\n    if ($id_option = $this->_getIdOption($id_option)) {\n      $fields = $this->fields;\n      if (!$with_config) {\n        unset($fields['cfg']);\n      }\n\n      if (\n          $rows = $this->db->rselectAll(\n              [\n              'table' => $this->class_table,\n              'fields' => $fields,\n              'join' => [[\n              'table' => $this->class_table,\n              'type' => 'left',\n              'alias' => 'aliases',\n              'on' => [\n              'conditions' => [[\n              'field' => $this->fields['id_alias'],\n              'exp' => 'aliases.id'\n              ]]\n              ]\n              ]],\n              'where' => [\n              'conditions' => [[\n              'field' => $this->fields['id_option'],\n              'value' => $id_option\n              ], [\n              'field' => $this->fields['public'],\n              'value' => 0\n              ], [\n              'logic' => 'OR',\n              'conditions' => [[\n              'field' => $this->fields['id_user'],\n              'operator' => '!=',\n              'value' => $this->id_user\n              ], [\n              'field' => $this->fields['id_user'],\n              'operator' => 'isnull'\n              ]]\n              ], [\n              'logic' => 'OR',\n              'conditions' => [[\n              'field' => $this->fields['id_group'],\n              'operator' => 'neq',\n              'value' => $this->id_group\n              ], [\n              'field' => $this->fields['id_group'],\n              'operator' => 'isnull'\n              ]]\n              ]]\n              ]\n              ]\n          )\n      ) {\n        return $with_config ? array_map(\n            function ($a) {\n              $cfg = $a['cfg'];\n              unset($a['cfg']);\n              if (($cfg = json_decode($cfg, true))) {\n                $a = X::mergeArrays($cfg, $a);\n              }\n\n              return $a;\n            },\n            $rows\n        ) : $rows;\n      }\n\n      return [];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 699,
            "endLine": 773,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getAllNotMine",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "with_config",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config Adds the `cfg` field in the result if true"
                }
            ],
            "doc": {
                "description": "Returns an array of the users' preferences (the current user and group are excluded) based on the given id_option.\n\n```\n$pref->getAllNotMine('9439491824ef11eca47652540000cfbe', true);\n\n\/\/ (array) = [];\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config Adds the `cfg` field in the result if true"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns an array of the users' preferences (the current user and group are excluded) based on the given id_option.\n   *\n   * ```\n   * $pref->getAllNotMine('9439491824ef11eca47652540000cfbe', true);\n   *\n   * \/\/ (array) = [];\n   * ```\n   *\n   * @param null|string $id_option\n   * @param bool $with_config Adds the `cfg` field in the result if true\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "getByOption": {
            "name": "getByOption",
            "summary": "Returns the current user's preference and the config if second parameter set to true, based on the given option id, his own profile and his group.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->getByOption('944190af24ef11eca47652540000cfbe', true);\n\n\/\/ (array) = [\n\/\/  \"path\" => \"\/\",\n\/\/  \"host\" => \"\",\n\/\/  \"user\" => \"\",\n\/\/  \"type\" => \"local\",\n\/\/  \"id\" => \"8380126d2b4d11eca47652540000cfbe\",\n\/\/  \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/  \"num\" => null,\n\/\/  \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n\/\/  \"id_group\" => null,\n\/\/  \"id_alias\" => null,\n\/\/  \"public\" => 0,\n\/\/  \"id_link\" => null,\n\/\/  \"text\" => 1\n\/\/ ];\n\n$pref->getByOption('944190af24ef11eca47652540000cfbe', false);\n\n\/\/ (array) = [\n\/\/   \"id\" => \"8380126d2b4d11eca47652540000cfbe\",\n\/\/   \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/   \"num\" => null,\n\/\/   \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n\/\/   \"id_group\" => null,\n\/\/   \"id_alias\" => null,\n\/\/   \"public\" => 0,\n\/\/   \"id_link\" => null,\n\/\/   \"text\" => 1,\n\/\/   \"cfg\" => \"{\"path\":\"\\\/\",\"host\":\"\",\"user\":\"\",\"type\":\"local\"}\"\n\/\/ ]"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getByOption(string $id_option, bool $with_config = true): ?array\n  {\n    if ($id = $this->retrieveUserIds($id_option, $this->id_user)) {\n      return $this->get($id[0], $with_config);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 819,
            "endLine": 826,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getByOption",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "with_config",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config"
                }
            ],
            "doc": {
                "description": "Returns the current user's preference and the config if second parameter set to true, based on the given option id, his own profile and his group.\n\n```\n$pref->getByOption('944190af24ef11eca47652540000cfbe', true);\n\n\/\/ (array) = [\n\/\/  \"path\" => \"\/\",\n\/\/  \"host\" => \"\",\n\/\/  \"user\" => \"\",\n\/\/  \"type\" => \"local\",\n\/\/  \"id\" => \"8380126d2b4d11eca47652540000cfbe\",\n\/\/  \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/  \"num\" => null,\n\/\/  \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n\/\/  \"id_group\" => null,\n\/\/  \"id_alias\" => null,\n\/\/  \"public\" => 0,\n\/\/  \"id_link\" => null,\n\/\/  \"text\" => 1\n\/\/ ];\n\n$pref->getByOption('944190af24ef11eca47652540000cfbe', false);\n\n\/\/ (array) = [\n\/\/   \"id\" => \"8380126d2b4d11eca47652540000cfbe\",\n\/\/   \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/   \"num\" => null,\n\/\/   \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n\/\/   \"id_group\" => null,\n\/\/   \"id_alias\" => null,\n\/\/   \"public\" => 0,\n\/\/   \"id_link\" => null,\n\/\/   \"text\" => 1,\n\/\/   \"cfg\" => \"{\"path\":\"\\\/\",\"host\":\"\",\"user\":\"\",\"type\":\"local\"}\"\n\/\/ ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the current user's preference and the config if second parameter set to true, based on the given option id, his own profile and his group.\n   *\n   * ```\n   * $pref->getByOption('944190af24ef11eca47652540000cfbe', true);\n   *\n   * \/\/ (array) = [\n   * \/\/  \"path\" => \"\/\",\n   * \/\/  \"host\" => \"\",\n   * \/\/  \"user\" => \"\",\n   * \/\/  \"type\" => \"local\",\n   * \/\/  \"id\" => \"8380126d2b4d11eca47652540000cfbe\",\n   * \/\/  \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n   * \/\/  \"num\" => null,\n   * \/\/  \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n   * \/\/  \"id_group\" => null,\n   * \/\/  \"id_alias\" => null,\n   * \/\/  \"public\" => 0,\n   * \/\/  \"id_link\" => null,\n   * \/\/  \"text\" => 1\n   * \/\/ ];\n   *\n   * $pref->getByOption('944190af24ef11eca47652540000cfbe', false);\n   *\n   * \/\/ (array) = [\n   * \/\/   \"id\" => \"8380126d2b4d11eca47652540000cfbe\",\n   * \/\/   \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n   * \/\/   \"num\" => null,\n   * \/\/   \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n   * \/\/   \"id_group\" => null,\n   * \/\/   \"id_alias\" => null,\n   * \/\/   \"public\" => 0,\n   * \/\/   \"id_link\" => null,\n   * \/\/   \"text\" => 1,\n   * \/\/   \"cfg\" => \"{\"path\":\"\\\/\",\"host\":\"\",\"user\":\"\",\"type\":\"local\"}\"\n   * \/\/ ]\n   * ```\n   *\n   * @param string $id_option\n   * @param bool $with_config\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "option": {
            "name": "option",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function option(): ?array\n  {\n    if ($o = $this->opt->option(\\func_get_args())) {\n      if (($ids = $this->retrieveIds($o['id'])) && ($cfg = $this->get($ids[0]))) {\n        $o = X::mergeArrays($o, $cfg);\n      }\n\n      return $o;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 832,
            "endLine": 843,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "option",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n     * @return array|null\n     * @throws Exception\n     *\/"
        },
        "fullOptions": {
            "name": "fullOptions",
            "summary": "Returns all the children IDs of the given code with their property and their preferences.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\/\/[\n\/\/ [\n\/\/   \"id\" => \"943d955824ef11eca47652540000cfbe\",\n\/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/   \"id_alias\" => null,\n\/\/   \"num\" => null,\n\/\/   \"text\" => \"Favourites\",\n\/\/   \"code\" => \"favourites\",\n\/\/   \"value\" => null,\n\/\/   \"num_children\" => 0,\n\/\/   \"items\" => [\n\/\/   ]\n\/\/ ],\n\/\/ [\n\/\/   \"id\" => \"9c57439824ef11eca47652540000cfbe\",\n\/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/   \"id_alias\" => \"9891c4d624ef11eca47652540000cfbe\",\n\/\/   \"num\" => null,\n\/\/   \"text\" => \"Permissions\",\n\/\/   \"code\" => \"permissions\",\n\/\/   \"num_children\" => 3,\n\/\/   \"icon\" => \"nf nf-fa-key\",\n\/\/   \"alias\" => [\n\/\/     \"id\" => \"9891c4d624ef11eca47652540000cfbe\",\n\/\/     \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n\/\/     \"id_alias\" => null,\n\/\/     \"num\" => null,\n\/\/     \"text\" => \"Permissions\",\n\/\/     \"code\" => \"permissions\",\n\/\/     \"num_children\" => 3,\n\/\/     \"icon\" => \"nf nf-fa-key\"\n\/\/   ],\n\/\/   \"items\" => [\n\/\/   ]\n\/\/ ],\n\/\/ [\n\/\/   \"id\" => \"9ee7450224ef11eca47652540000cfbe\",\n\/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/   \"id_alias\" => \"98a3dfca24ef11eca47652540000cfbe\",\n\/\/   \"num\" => null,\n\/\/   \"text\" => \"Plugins\",\n\/\/   \"code\" => \"plugins\",\n\/\/   \"num_children\" => 0,\n\/\/   \"icon\" => \"nf nf-md-puzzle\",\n\/\/   \"alias\" => [\n\/\/     \"id\" => \"98a3dfca24ef11eca47652540000cfbe\",\n\/\/     \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n\/\/     \"id_alias\" => null,\n\/\/     \"num\" => null,\n\/\/     \"text\" => \"Plugins\",\n\/\/     \"code\" => \"plugins\",\n\/\/     \"num_children\" => 0,\n\/\/     \"icon\" => \"nf nf-md-puzzle\"\n\/\/   ],\n\/\/   \"items\" => [\n\/\/   ]\n\/\/ ],\n\/\/ [\n\/\/   \"id\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/   \"id_alias\" => null,\n\/\/   \"num\" => null,\n\/\/   \"text\" => \"Sources\",\n\/\/   \"code\" => \"sources\",\n\/\/   \"value\" => null,\n\/\/   \"num_children\" => 0,\n\/\/   \"items\" => [\n\/\/     [\n\/\/       \"path\" => \"\/home\/\",\n\/\/       \"host\" => \"185.142.53.114\",\n\/\/       \"pass\" => \"******\",\n\/\/       \"user\" => \"root\",\n\/\/       \"type\" => \"ssh\",\n\/\/       \"id\" => \"042b29722c2f11eca47652540000cfbe\",\n\/\/       \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/       \"num\" => null,\n\/\/       \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n\/\/       \"id_group\" => null,\n\/\/       \"id_alias\" => null,\n\/\/       \"public\" => 0,\n\/\/       \"id_link\" => null,\n\/\/       \"text\" => \"inova\"\n\/\/     ],\n\/\/     [\n\/\/       \"path\" => \"\",\n\/\/       \"host\" => \"qr.dev.bbn.io\",\n\/\/       \"user\" => \"qr\",\n\/\/       \"type\" => \"ssh\",\n\/\/       \"id\" => \"179d85a0284911eca47652540000cfbe\",\n\/\/       \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/       \"num\" => null,\n\/\/       \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n\/\/       \"id_group\" => null,\n\/\/       \"id_alias\" => null,\n\/\/       \"public\" => 0,\n\/\/       \"id_link\" => null,\n\/\/       \"text\" => \"quentin\"\n\/\/     ],\n\/\/   ]\n\/\/ ]\n\/\/];"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fullOptions($code): ?array\n  {\n    if ($ops = $this->opt->fullOptions(\\func_get_args())) {\n      foreach ($ops as &$o) {\n        $o['items'] = $this->getAll($o['id']);\n      }\n\n      return $ops;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 956,
            "endLine": 967,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fullOptions",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns all the children IDs of the given code with their property and their preferences.\n\n```\n\/\/[\n\/\/ [\n\/\/   \"id\" => \"943d955824ef11eca47652540000cfbe\",\n\/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/   \"id_alias\" => null,\n\/\/   \"num\" => null,\n\/\/   \"text\" => \"Favourites\",\n\/\/   \"code\" => \"favourites\",\n\/\/   \"value\" => null,\n\/\/   \"num_children\" => 0,\n\/\/   \"items\" => [\n\/\/   ]\n\/\/ ],\n\/\/ [\n\/\/   \"id\" => \"9c57439824ef11eca47652540000cfbe\",\n\/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/   \"id_alias\" => \"9891c4d624ef11eca47652540000cfbe\",\n\/\/   \"num\" => null,\n\/\/   \"text\" => \"Permissions\",\n\/\/   \"code\" => \"permissions\",\n\/\/   \"num_children\" => 3,\n\/\/   \"icon\" => \"nf nf-fa-key\",\n\/\/   \"alias\" => [\n\/\/     \"id\" => \"9891c4d624ef11eca47652540000cfbe\",\n\/\/     \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n\/\/     \"id_alias\" => null,\n\/\/     \"num\" => null,\n\/\/     \"text\" => \"Permissions\",\n\/\/     \"code\" => \"permissions\",\n\/\/     \"num_children\" => 3,\n\/\/     \"icon\" => \"nf nf-fa-key\"\n\/\/   ],\n\/\/   \"items\" => [\n\/\/   ]\n\/\/ ],\n\/\/ [\n\/\/   \"id\" => \"9ee7450224ef11eca47652540000cfbe\",\n\/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/   \"id_alias\" => \"98a3dfca24ef11eca47652540000cfbe\",\n\/\/   \"num\" => null,\n\/\/   \"text\" => \"Plugins\",\n\/\/   \"code\" => \"plugins\",\n\/\/   \"num_children\" => 0,\n\/\/   \"icon\" => \"nf nf-md-puzzle\",\n\/\/   \"alias\" => [\n\/\/     \"id\" => \"98a3dfca24ef11eca47652540000cfbe\",\n\/\/     \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n\/\/     \"id_alias\" => null,\n\/\/     \"num\" => null,\n\/\/     \"text\" => \"Plugins\",\n\/\/     \"code\" => \"plugins\",\n\/\/     \"num_children\" => 0,\n\/\/     \"icon\" => \"nf nf-md-puzzle\"\n\/\/   ],\n\/\/   \"items\" => [\n\/\/   ]\n\/\/ ],\n\/\/ [\n\/\/   \"id\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/   \"id_alias\" => null,\n\/\/   \"num\" => null,\n\/\/   \"text\" => \"Sources\",\n\/\/   \"code\" => \"sources\",\n\/\/   \"value\" => null,\n\/\/   \"num_children\" => 0,\n\/\/   \"items\" => [\n\/\/     [\n\/\/       \"path\" => \"\/home\/\",\n\/\/       \"host\" => \"185.142.53.114\",\n\/\/       \"pass\" => \"******\",\n\/\/       \"user\" => \"root\",\n\/\/       \"type\" => \"ssh\",\n\/\/       \"id\" => \"042b29722c2f11eca47652540000cfbe\",\n\/\/       \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/       \"num\" => null,\n\/\/       \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n\/\/       \"id_group\" => null,\n\/\/       \"id_alias\" => null,\n\/\/       \"public\" => 0,\n\/\/       \"id_link\" => null,\n\/\/       \"text\" => \"inova\"\n\/\/     ],\n\/\/     [\n\/\/       \"path\" => \"\",\n\/\/       \"host\" => \"qr.dev.bbn.io\",\n\/\/       \"user\" => \"qr\",\n\/\/       \"type\" => \"ssh\",\n\/\/       \"id\" => \"179d85a0284911eca47652540000cfbe\",\n\/\/       \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/       \"num\" => null,\n\/\/       \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n\/\/       \"id_group\" => null,\n\/\/       \"id_alias\" => null,\n\/\/       \"public\" => 0,\n\/\/       \"id_link\" => null,\n\/\/       \"text\" => \"quentin\"\n\/\/     ],\n\/\/   ]\n\/\/ ]\n\/\/];\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$code"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns all the children IDs of the given code with their property and their preferences.\n   *\n   * ```\n   * \/\/[\n   * \/\/ [\n   * \/\/   \"id\" => \"943d955824ef11eca47652540000cfbe\",\n   * \/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n   * \/\/   \"id_alias\" => null,\n   * \/\/   \"num\" => null,\n   * \/\/   \"text\" => \"Favourites\",\n   * \/\/   \"code\" => \"favourites\",\n   * \/\/   \"value\" => null,\n   * \/\/   \"num_children\" => 0,\n   * \/\/   \"items\" => [\n   * \/\/   ]\n   * \/\/ ],\n   * \/\/ [\n   * \/\/   \"id\" => \"9c57439824ef11eca47652540000cfbe\",\n   * \/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n   * \/\/   \"id_alias\" => \"9891c4d624ef11eca47652540000cfbe\",\n   * \/\/   \"num\" => null,\n   * \/\/   \"text\" => \"Permissions\",\n   * \/\/   \"code\" => \"permissions\",\n   * \/\/   \"num_children\" => 3,\n   * \/\/   \"icon\" => \"nf nf-fa-key\",\n   * \/\/   \"alias\" => [\n   * \/\/     \"id\" => \"9891c4d624ef11eca47652540000cfbe\",\n   * \/\/     \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n   * \/\/     \"id_alias\" => null,\n   * \/\/     \"num\" => null,\n   * \/\/     \"text\" => \"Permissions\",\n   * \/\/     \"code\" => \"permissions\",\n   * \/\/     \"num_children\" => 3,\n   * \/\/     \"icon\" => \"nf nf-fa-key\"\n   * \/\/   ],\n   * \/\/   \"items\" => [\n   * \/\/   ]\n   * \/\/ ],\n   * \/\/ [\n   * \/\/   \"id\" => \"9ee7450224ef11eca47652540000cfbe\",\n   * \/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n   * \/\/   \"id_alias\" => \"98a3dfca24ef11eca47652540000cfbe\",\n   * \/\/   \"num\" => null,\n   * \/\/   \"text\" => \"Plugins\",\n   * \/\/   \"code\" => \"plugins\",\n   * \/\/   \"num_children\" => 0,\n   * \/\/   \"icon\" => \"nf nf-md-puzzle\",\n   * \/\/   \"alias\" => [\n   * \/\/     \"id\" => \"98a3dfca24ef11eca47652540000cfbe\",\n   * \/\/     \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n   * \/\/     \"id_alias\" => null,\n   * \/\/     \"num\" => null,\n   * \/\/     \"text\" => \"Plugins\",\n   * \/\/     \"code\" => \"plugins\",\n   * \/\/     \"num_children\" => 0,\n   * \/\/     \"icon\" => \"nf nf-md-puzzle\"\n   * \/\/   ],\n   * \/\/   \"items\" => [\n   * \/\/   ]\n   * \/\/ ],\n   * \/\/ [\n   * \/\/   \"id\" => \"944190af24ef11eca47652540000cfbe\",\n   * \/\/   \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n   * \/\/   \"id_alias\" => null,\n   * \/\/   \"num\" => null,\n   * \/\/   \"text\" => \"Sources\",\n   * \/\/   \"code\" => \"sources\",\n   * \/\/   \"value\" => null,\n   * \/\/   \"num_children\" => 0,\n   * \/\/   \"items\" => [\n   * \/\/     [\n   * \/\/       \"path\" => \"\/home\/\",\n   * \/\/       \"host\" => \"185.142.53.114\",\n   * \/\/       \"pass\" => \"******\",\n   * \/\/       \"user\" => \"root\",\n   * \/\/       \"type\" => \"ssh\",\n   * \/\/       \"id\" => \"042b29722c2f11eca47652540000cfbe\",\n   * \/\/       \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n   * \/\/       \"num\" => null,\n   * \/\/       \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n   * \/\/       \"id_group\" => null,\n   * \/\/       \"id_alias\" => null,\n   * \/\/       \"public\" => 0,\n   * \/\/       \"id_link\" => null,\n   * \/\/       \"text\" => \"inova\"\n   * \/\/     ],\n   * \/\/     [\n   * \/\/       \"path\" => \"\",\n   * \/\/       \"host\" => \"qr.dev.bbn.io\",\n   * \/\/       \"user\" => \"qr\",\n   * \/\/       \"type\" => \"ssh\",\n   * \/\/       \"id\" => \"179d85a0284911eca47652540000cfbe\",\n   * \/\/       \"id_option\" => \"944190af24ef11eca47652540000cfbe\",\n   * \/\/       \"num\" => null,\n   * \/\/       \"id_user\" => \"930cc07724ef11eca47652540000cfbe\",\n   * \/\/       \"id_group\" => null,\n   * \/\/       \"id_alias\" => null,\n   * \/\/       \"public\" => 0,\n   * \/\/       \"id_link\" => null,\n   * \/\/       \"text\" => \"quentin\"\n   * \/\/     ],\n   * \/\/   ]\n   * \/\/ ]\n   * \/\/];\n   * ```\n   *\n   * @param $code\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "text": {
            "name": "text",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function text(string $id_option)\n  {\n    if ($id_option = $this->_getIdOption($id_option)) {\n      return $this->db->selectOne($this->class_table, $this->fields['text'], [$this->fields['id'] => $id_option]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 974,
            "endLine": 981,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "text",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n     * @param string $id_option\n     * @return mixed|null\n     * @throws Exception\n     *\/"
        },
        "items": {
            "name": "items",
            "summary": "Return all the IDs of the children of the given option where the user has a preference in the user's order.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->items('finder', 'appui');\n\n\/\/ (array) = [\n\/\/   \"943d955824ef11eca47652540000cfbe\",\n\/\/   \"9c57439824ef11eca47652540000cfbe\",\n\/\/   \"9ee7450224ef11eca47652540000cfbe\",\n\/\/   \"944190af24ef11eca47652540000cfbe\",\n\/\/ ]"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function items($code)\n  {\n    \/\/ Gets the Ids of the corresponding options in their natural order (num or text)\n    if ($items = $this->opt->items(\\func_get_args())) {\n      \/\/ Creating an array based on the user's order\n      $res = [];\n      \/\/ Replacing regular num values by user's values if any\n      foreach ($items as $i => $it) {\n        $res[] = ['id' => $it, 'num' => $i + 1];\n        if ($tmp = $this->get($it)) {\n          if (isset($tmp['num'])) {\n            $res[$i]['num'] = $tmp['num'];\n          }\n        }\n      }\n      \/\/ Reordering the array based on num\n      X::sortBy($res, 'num');\n      \/\/ Returns a simple array with only the IDs\n      return array_map(\n          function ($a) {\n            return $a['id'];\n          },\n          $res\n      );\n    }\n\n    return $items;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1002,
            "endLine": 1029,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "items",
            "returns": [],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return all the IDs of the children of the given option where the user has a preference in the user's order.\n\n```\n$pref->items('finder', 'appui');\n\n\/\/ (array) = [\n\/\/   \"943d955824ef11eca47652540000cfbe\",\n\/\/   \"9c57439824ef11eca47652540000cfbe\",\n\/\/   \"9ee7450224ef11eca47652540000cfbe\",\n\/\/   \"944190af24ef11eca47652540000cfbe\",\n\/\/ ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$code"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                },
                "todo": {
                    "tag": "todo",
                    "text": "Review the way user's num replaces default one"
                }
            },
            "comments": "  \/**\n   * Return all the IDs of the children of the given option where the user has a preference in the user's order.\n   *\n   * ```\n   * $pref->items('finder', 'appui');\n   *\n   * \/\/ (array) = [\n   * \/\/   \"943d955824ef11eca47652540000cfbe\",\n   * \/\/   \"9c57439824ef11eca47652540000cfbe\",\n   * \/\/   \"9ee7450224ef11eca47652540000cfbe\",\n   * \/\/   \"944190af24ef11eca47652540000cfbe\",\n   * \/\/ ]\n   * ```\n   *\n   * @param $code\n   * @return array|null\n   * @throws Exception\n   * @todo Review the way user's num replaces default one\n   *\/"
        },
        "options": {
            "name": "options",
            "summary": "Returns all children of the given code with they own attributes.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->options('finder', 'appui');\n\n\/\/ (array)  = [\n\/\/     [\n\/\/       \"id\" => \"943d955824ef11eca47652540000cfbe\",\n\/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/       \"id_alias\" => null,\n\/\/       \"num\" => null,\n\/\/       \"text\" => \"Favourites\",\n\/\/       \"code\" => \"favourites\",\n\/\/       \"value\" => null,\n\/\/       \"num_children\" => 0,\n\/\/       \"items\" => null\n\/\/     ],\n\/\/     [\n\/\/       \"id\" => \"9c57439824ef11eca47652540000cfbe\",\n\/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/       \"id_alias\" => \"9891c4d624ef11eca47652540000cfbe\",\n\/\/       \"num\" => null,\n\/\/       \"text\" => \"Permissions\",\n\/\/       \"code\" => \"permissions\",\n\/\/       \"num_children\" => 3,\n\/\/       \"icon\" => \"nf nf-fa-key\",\n\/\/       \"alias\" => [\n\/\/         \"id\" => \"9891c4d624ef11eca47652540000cfbe\",\n\/\/         \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n\/\/         \"id_alias\" => null,\n\/\/         \"num\" => null,\n\/\/         \"text\" => \"Permissions\",\n\/\/         \"code\" => \"permissions\",\n\/\/         \"num_children\" => 3,\n\/\/         \"icon\" => \"nf nf-fa-key\"\n\/\/       ],\n\/\/       \"items\" => null\n\/\/     ],\n\/\/     [\n\/\/       \"id\" => \"9ee7450224ef11eca47652540000cfbe\",\n\/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/       \"id_alias\" => \"98a3dfca24ef11eca47652540000cfbe\",\n\/\/       \"num\" => null,\n\/\/       \"text\" => \"Plugins\",\n\/\/       \"code\" => \"plugins\",\n\/\/       \"num_children\" => 0,\n\/\/       \"icon\" => \"nf nf-md-puzzle\",\n\/\/       \"alias\" => [\n\/\/         \"id\" => \"98a3dfca24ef11eca47652540000cfbe\",\n\/\/         \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n\/\/         \"id_alias\" => null,\n\/\/         \"num\" => null,\n\/\/         \"text\" => \"Plugins\",\n\/\/         \"code\" => \"plugins\",\n\/\/         \"num_children\" => 0,\n\/\/         \"icon\" => \"nf nf-md-puzzle\"\n\/\/       ],\n\/\/       \"items\" => null\n\/\/     ],\n\/\/     [\n\/\/       \"id\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/       \"id_alias\" => null,\n\/\/       \"num\" => null,\n\/\/       \"text\" => \"Sources\",\n\/\/       \"code\" => \"sources\",\n\/\/       \"value\" => null,\n\/\/       \"num_children\" => 0,\n\/\/       \"items\" => null\n\/\/     ]\n\/\/   ];"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function options($code): ?array\n  {\n    \/\/ List of the options' id corresponding to the given code\n    if ($list = $this->items(\\func_get_args())) {\n      $res = [];\n      foreach ($list as $i => $li) {\n        $res[$i]          = $this->opt->option($li);\n        $res[$i]['items'] = $this->get($li);\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1111,
            "endLine": 1125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "options",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns all children of the given code with they own attributes.\n\n```\n$pref->options('finder', 'appui');\n\n\/\/ (array)  = [\n\/\/     [\n\/\/       \"id\" => \"943d955824ef11eca47652540000cfbe\",\n\/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/       \"id_alias\" => null,\n\/\/       \"num\" => null,\n\/\/       \"text\" => \"Favourites\",\n\/\/       \"code\" => \"favourites\",\n\/\/       \"value\" => null,\n\/\/       \"num_children\" => 0,\n\/\/       \"items\" => null\n\/\/     ],\n\/\/     [\n\/\/       \"id\" => \"9c57439824ef11eca47652540000cfbe\",\n\/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/       \"id_alias\" => \"9891c4d624ef11eca47652540000cfbe\",\n\/\/       \"num\" => null,\n\/\/       \"text\" => \"Permissions\",\n\/\/       \"code\" => \"permissions\",\n\/\/       \"num_children\" => 3,\n\/\/       \"icon\" => \"nf nf-fa-key\",\n\/\/       \"alias\" => [\n\/\/         \"id\" => \"9891c4d624ef11eca47652540000cfbe\",\n\/\/         \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n\/\/         \"id_alias\" => null,\n\/\/         \"num\" => null,\n\/\/         \"text\" => \"Permissions\",\n\/\/         \"code\" => \"permissions\",\n\/\/         \"num_children\" => 3,\n\/\/         \"icon\" => \"nf nf-fa-key\"\n\/\/       ],\n\/\/       \"items\" => null\n\/\/     ],\n\/\/     [\n\/\/       \"id\" => \"9ee7450224ef11eca47652540000cfbe\",\n\/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/       \"id_alias\" => \"98a3dfca24ef11eca47652540000cfbe\",\n\/\/       \"num\" => null,\n\/\/       \"text\" => \"Plugins\",\n\/\/       \"code\" => \"plugins\",\n\/\/       \"num_children\" => 0,\n\/\/       \"icon\" => \"nf nf-md-puzzle\",\n\/\/       \"alias\" => [\n\/\/         \"id\" => \"98a3dfca24ef11eca47652540000cfbe\",\n\/\/         \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n\/\/         \"id_alias\" => null,\n\/\/         \"num\" => null,\n\/\/         \"text\" => \"Plugins\",\n\/\/         \"code\" => \"plugins\",\n\/\/         \"num_children\" => 0,\n\/\/         \"icon\" => \"nf nf-md-puzzle\"\n\/\/       ],\n\/\/       \"items\" => null\n\/\/     ],\n\/\/     [\n\/\/       \"id\" => \"944190af24ef11eca47652540000cfbe\",\n\/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n\/\/       \"id_alias\" => null,\n\/\/       \"num\" => null,\n\/\/       \"text\" => \"Sources\",\n\/\/       \"code\" => \"sources\",\n\/\/       \"value\" => null,\n\/\/       \"num_children\" => 0,\n\/\/       \"items\" => null\n\/\/     ]\n\/\/   ];\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$code"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                },
                "todo": {
                    "tag": "todo",
                    "text": "Check if this->get is needed, but why in items ?"
                }
            },
            "comments": "  \/**\n   * Returns all children of the given code with they own attributes.\n   *\n   * ```\n   * $pref->options('finder', 'appui');\n   *\n   * \/\/ (array)  = [\n   * \/\/     [\n   * \/\/       \"id\" => \"943d955824ef11eca47652540000cfbe\",\n   * \/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n   * \/\/       \"id_alias\" => null,\n   * \/\/       \"num\" => null,\n   * \/\/       \"text\" => \"Favourites\",\n   * \/\/       \"code\" => \"favourites\",\n   * \/\/       \"value\" => null,\n   * \/\/       \"num_children\" => 0,\n   * \/\/       \"items\" => null\n   * \/\/     ],\n   * \/\/     [\n   * \/\/       \"id\" => \"9c57439824ef11eca47652540000cfbe\",\n   * \/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n   * \/\/       \"id_alias\" => \"9891c4d624ef11eca47652540000cfbe\",\n   * \/\/       \"num\" => null,\n   * \/\/       \"text\" => \"Permissions\",\n   * \/\/       \"code\" => \"permissions\",\n   * \/\/       \"num_children\" => 3,\n   * \/\/       \"icon\" => \"nf nf-fa-key\",\n   * \/\/       \"alias\" => [\n   * \/\/         \"id\" => \"9891c4d624ef11eca47652540000cfbe\",\n   * \/\/         \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n   * \/\/         \"id_alias\" => null,\n   * \/\/         \"num\" => null,\n   * \/\/         \"text\" => \"Permissions\",\n   * \/\/         \"code\" => \"permissions\",\n   * \/\/         \"num_children\" => 3,\n   * \/\/         \"icon\" => \"nf nf-fa-key\"\n   * \/\/       ],\n   * \/\/       \"items\" => null\n   * \/\/     ],\n   * \/\/     [\n   * \/\/       \"id\" => \"9ee7450224ef11eca47652540000cfbe\",\n   * \/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n   * \/\/       \"id_alias\" => \"98a3dfca24ef11eca47652540000cfbe\",\n   * \/\/       \"num\" => null,\n   * \/\/       \"text\" => \"Plugins\",\n   * \/\/       \"code\" => \"plugins\",\n   * \/\/       \"num_children\" => 0,\n   * \/\/       \"icon\" => \"nf nf-md-puzzle\",\n   * \/\/       \"alias\" => [\n   * \/\/         \"id\" => \"98a3dfca24ef11eca47652540000cfbe\",\n   * \/\/         \"id_parent\" => \"988d97ee24ef11eca47652540000cfbe\",\n   * \/\/         \"id_alias\" => null,\n   * \/\/         \"num\" => null,\n   * \/\/         \"text\" => \"Plugins\",\n   * \/\/         \"code\" => \"plugins\",\n   * \/\/         \"num_children\" => 0,\n   * \/\/         \"icon\" => \"nf nf-md-puzzle\"\n   * \/\/       ],\n   * \/\/       \"items\" => null\n   * \/\/     ],\n   * \/\/     [\n   * \/\/       \"id\" => \"944190af24ef11eca47652540000cfbe\",\n   * \/\/       \"id_parent\" => \"9439491824ef11eca47652540000cfbe\",\n   * \/\/       \"id_alias\" => null,\n   * \/\/       \"num\" => null,\n   * \/\/       \"text\" => \"Sources\",\n   * \/\/       \"code\" => \"sources\",\n   * \/\/       \"value\" => null,\n   * \/\/       \"num_children\" => 0,\n   * \/\/       \"items\" => null\n   * \/\/     ]\n   * \/\/   ];\n   * ```\n   *\n   * @param $code\n   * @return array|null\n   * @throws Exception\n   * @todo Check if this->get is needed, but why in items ?\n   *\/"
        },
        "order": {
            "name": "order",
            "summary": "Changes the position of the given option among its sortable list.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function order(string $id_option, int $index, bool $upd = false)\n  {\n    \/\/ What matters are the info from the parent\n    $id_parent = $this->opt->getIdParent($id_option);\n    \/\/ Only usable on sortable options\n    if (($id_parent !== false) && $this->opt->isSortable($id_parent)) {\n      \/\/ List of options IDs with personalized order\n      $items = $this->items($id_parent);\n      \/\/ Creating a new array of arrays with ID and NUM indexes\n      $res     = [];\n      $o_index = false;\n      foreach ($items as $i => $it) {\n        $res[] = [\n            $this->fields['id'] => $it,\n            $this->fields['num'] => $i + 1\n        ];\n        \/\/ If user has preference on that option, NUM will be set to the user's value\n        if ($cfg = $this->get($it)) {\n          $res[$i] = X::mergeArrays($res[$i], $cfg);\n        }\n        \/\/ This is the index of the given option\n        if ($it === $id_option) {\n          $o_index = $i;\n        }\n      }\n\n      if ($o_index === false) {\n        throw new Exception(X::_('Impossible to find this option'));\n      }\n      \/\/ Changing the position of all the affected options\n      if ($o_index > $index) {\n        for ($i = $index; $i < $o_index; $i++) {\n          $res[$i][$this->fields['num']]++;\n        }\n      }\n      elseif ($o_index < $index) {\n        for ($i = $o_index + 1; $i <= $index; $i++) {\n          $res[$i][$this->fields['num']]--;\n        }\n      }\n      \/\/ Changing the given option's NUM\n      $res[$o_index][$this->fields['num']] = $index + 1;\n      foreach ($res as $i => $r) {\n        if ($upd) {\n          $this->updateByOption($r[$this->fields['id']], $r);\n        }\n        else {\n          $this->add($r[$this->fields['id']], $r);\n        }\n      }\n\n      X::sortBy($res, $this->fields['num']);\n      return $res;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1137,
            "endLine": 1191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "order",
            "returns": [],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option The option to modify"
                },
                {
                    "name": "index",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new position"
                },
                {
                    "name": "upd",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the position of the given option among its sortable list.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option The option to modify"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$index",
                        "description": "The new position"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$upd"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Changes the position of the given option among its sortable list.\n   *\n   * @param string $id_option The option to modify\n   * @param int $index The new position\n   * @param bool $upd\n   * @return array|void\n   * @throws Exception\n   *\/"
        },
        "setByOption": {
            "name": "setByOption",
            "summary": "Sets the preference row for the current user by the option's ID",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": ""
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setByOption(string $id_option, array $cfg): int\n  {\n    if ($id = $this->retrieveUserIds($id_option, $this->id_user)) {\n      return $this->set($id[0], $cfg);\n    }\n\n    return $this->_insert($id_option, $cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1205,
            "endLine": 1212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setByOption",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the preference row for the current user by the option's ID\n\n```\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Sets the preference row for the current user by the option's ID\n   *\n   * ```\n   * ```\n   *\n   * @param string $id_option\n   * @param array $cfg\n   * @return int\n   * @throws Exception\n   *\/"
        },
        "set": {
            "name": "set",
            "summary": "Sets the preference config for the current user by the preference's ID and returns the number of rows change.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->set('042b29722c2f11eca47652540000cfbe', []);\n\n\/\/ (int) = 1;"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function set(string $id, array $cfg = null): int\n  {\n    return $this->db->update(\n        $this->class_cfg['table'],\n        [\n        $this->fields['cfg'] => $cfg ? json_encode($this->getCfg(false, $cfg)) : null\n        ],\n        [\n        $this->fields['id'] => $id\n        ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1228,
            "endLine": 1239,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "set",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the preference config for the current user by the preference's ID and returns the number of rows change.\n\n```\n$pref->set('042b29722c2f11eca47652540000cfbe', []);\n\n\/\/ (int) = 1;\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the preference config for the current user by the preference's ID and returns the number of rows change.\n   *\n   * ```\n   * $pref->set('042b29722c2f11eca47652540000cfbe', []);\n   *\n   * \/\/ (int) = 1;\n   * ```\n   *\n   * @param string $id\n   * @param array|null $cfg\n   * @return int\n   *\/"
        },
        "update": {
            "name": "update",
            "summary": "Sets the preference row for the current user by the preference's ID and returns the number of rows change.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "pref->update('106fc38f2b7f11eca47652540000cfbe', [\n \"num\" => null,\n \"id_user\" => \"5d02d5ee269d11eca47652540000cfbe\",\n \"id_alias\" => null,\n \"id_link\" => null,\n \"text\" => \"Nextcloud\"\n]);\n\n\/\/ (int) = 1;"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function update(string $id, array $cfg): int\n  {\n      return $this->db->update(\n          $this->class_cfg['table'],\n          [\n          $this->fields['text'] => $cfg[$this->fields['text']] ?? null,\n          $this->fields['num'] => $cfg[$this->fields['num']] ?? null,\n          $this->fields['id_link'] => $cfg[$this->fields['id_link']] ?? null,\n          $this->fields['id_alias'] => $cfg[$this->fields['id_alias']] ?? null,\n          $this->fields['id_user'] => $this->id_user,\n          $this->fields['cfg'] => ($tmp = $this->getCfg(false, $cfg)) ? json_encode($tmp) : null\n          ],\n          [\n              $this->fields['id'] => $id\n          ]\n      );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1261,
            "endLine": 1277,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "update",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the preference row for the current user by the preference's ID and returns the number of rows change.\n\n```\npref->update('106fc38f2b7f11eca47652540000cfbe', [\n \"num\" => null,\n \"id_user\" => \"5d02d5ee269d11eca47652540000cfbe\",\n \"id_alias\" => null,\n \"id_link\" => null,\n \"text\" => \"Nextcloud\"\n]);\n\n\/\/ (int) = 1;\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the preference row for the current user by the preference's ID and returns the number of rows change.\n   *\n   * ```\n   * pref->update('106fc38f2b7f11eca47652540000cfbe', [\n   *  \"num\" => null,\n   *  \"id_user\" => \"5d02d5ee269d11eca47652540000cfbe\",\n   *  \"id_alias\" => null,\n   *  \"id_link\" => null,\n   *  \"text\" => \"Nextcloud\"\n   * ]);\n   *\n   * \/\/ (int) = 1;\n   * ```\n   *\n   * @param string $id\n   * @param array  $cfg\n   * @return int\n   *\/"
        },
        "updateByOption": {
            "name": "updateByOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateByOption(string $id_option, array $cfg): int\n  {\n    if ($id = $this->retrieveUserIds($id_option, $this->id_user)) {\n      return $this->update($id[0], $cfg);\n    }\n\n    return $this->_insert($id_option, $cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1285,
            "endLine": 1292,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "updateByOption",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $id_option\n   * @param array $cfg\n   * @return int\n   * @throws Exception\n   *\/"
        },
        "add": {
            "name": "add",
            "summary": "Adds a new preference for the given option for the current user and returns the new preference ID.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->add('9439491824ef11eca47652540000cfbe', [\n \"num\" => null,\n \"id_user\" => \"5d02d5ee269d11eca47652540000cfbe\",\n \"id_group\" => null,\n \"id_alias\" => null,\n \"public\" => 0,\n \"id_link\" => null,\n \"text\" => \"Test\"\n]);\n\n\/\/ (String) = \"3ad7768e30c311eca47652540000cfbe\";"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function add(string $id_option = null, array $cfg): ?string\n  {\n    if (\n        ($id_option = $this->_getIdOption($id_option))\n        && !$this->retrieveUserIds($id_option)\n        && $this->_insert($id_option, $cfg)\n    ) {\n      return $this->db->lastId();\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1317,
            "endLine": 1327,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "add",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a new preference for the given option for the current user and returns the new preference ID.\n\n```\n$pref->add('9439491824ef11eca47652540000cfbe', [\n \"num\" => null,\n \"id_user\" => \"5d02d5ee269d11eca47652540000cfbe\",\n \"id_group\" => null,\n \"id_alias\" => null,\n \"public\" => 0,\n \"id_link\" => null,\n \"text\" => \"Test\"\n]);\n\n\/\/ (String) = \"3ad7768e30c311eca47652540000cfbe\";\n\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Adds a new preference for the given option for the current user and returns the new preference ID.\n   *\n   * ```\n   * $pref->add('9439491824ef11eca47652540000cfbe', [\n   *  \"num\" => null,\n   *  \"id_user\" => \"5d02d5ee269d11eca47652540000cfbe\",\n   *  \"id_group\" => null,\n   *  \"id_alias\" => null,\n   *  \"public\" => 0,\n   *  \"id_link\" => null,\n   *  \"text\" => \"Test\"\n   * ]);\n   *\n   * \/\/ (String) = \"3ad7768e30c311eca47652540000cfbe\";\n   *\n   * ```\n   * @param null|string $id_option\n   * @param array $cfg\n   * @return null|string\n   * @throws Exception\n   *\/"
        },
        "addToGroup": {
            "name": "addToGroup",
            "summary": "Adds a new preference for the given option for the current user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToGroup(string $id_option = null, array $cfg): ?string\n  {\n    if (\n        ($id_option = $this->_getIdOption($id_option))\n        && $this->_insert($id_option, $cfg)\n    ) {\n      return $this->db->lastId();\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1338,
            "endLine": 1348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addToGroup",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a new preference for the given option for the current user.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Adds a new preference for the given option for the current user.\n   *\n   * @param null|string $id_option\n   * @param array $cfg\n   * @return null|string\n   * @throws Exception\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the given preference.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$pref->delete('3ad7768e30c311eca47652540000cfbe');\n\n\/\/ (int) = 1;"
                }
            ],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete($id): ?int\n  {\n    return $this->db->delete(\n        [\n        'table' => $this->class_cfg['table'],\n        'where' => [\n        'logic' => 'AND',\n        'conditions' => [\n          [\n            'field' => $this->fields['id'],\n            'value' => $id\n          ],\n          [\n            'logic' => 'OR',\n            'conditions' => [\n              [\n                'field' => $this->fields['id_user'],\n                'value' => $this->id_user\n              ], [\n                'field' => $this->fields['id_group'],\n                'value' => $this->id_group\n              ], [\n                'field' => $this->fields['public'],\n                'value' => 1\n              ]\n            ]\n          ]\n        ]\n        ]\n        ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1363,
            "endLine": 1394,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given preference.\n\n```\n$pref->delete('3ad7768e30c311eca47652540000cfbe');\n\n\/\/ (int) = 1;\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given preference.\n   *\n   * ```\n   * $pref->delete('3ad7768e30c311eca47652540000cfbe');\n   *\n   * \/\/ (int) = 1;\n   * ```\n   *\n   * @param $id\n   * @return int|null\n   *\/"
        },
        "deleteUserOption": {
            "name": "deleteUserOption",
            "summary": "Deletes all the given or current user's preferences for the given option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteUserOption(string $id_option, string $id_user = null): ?int\n  {\n    if ($id_option = $this->_getIdOption($id_option)) {\n      return $this->db->delete(\n          $this->class_cfg['table'],\n          [\n          $this->fields['id_option'] => $id_option,\n          $this->fields['id_user'] => $id_user ?: $this->id_user\n          ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1405,
            "endLine": 1418,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteUserOption",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                }
            ],
            "doc": {
                "description": "Deletes all the given or current user's preferences for the given option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "user"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Deletes all the given or current user's preferences for the given option\n   *\n   * @param null|string $id_option\n   * @param null|string $id_user\n   * @return null|int\n   * @throws Exception\n   *\/"
        },
        "deleteGroupOption": {
            "name": "deleteGroupOption",
            "summary": "Deletes all the given group's preferences for the given option",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteGroupOption(string $id_option, string $id_group): ?int\n  {\n    if ($id_option = $this->_getIdOption($id_option)) {\n      return $this->db->delete(\n          $this->class_cfg['table'],\n          [\n          $this->fields['id_option'] => $id_option,\n          $this->fields['id_group'] => $id_group\n          ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1429,
            "endLine": 1442,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "deleteGroupOption",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_group",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "group"
                }
            ],
            "doc": {
                "description": "Deletes all the given group's preferences for the given option\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "group"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Deletes all the given group's preferences for the given option\n   *\n   * @param null|string $id_option\n   * @param string $id_group\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "setCfg": {
            "name": "setCfg",
            "summary": "Sets (or unsets) the cfg field of a given preference based on its ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCfg(string $id = null, array $cfg = null): int\n  {\n    if (null !== $cfg) {\n      $cfg    = $this->getCfg(null, $cfg);\n      $config = json_encode($cfg);\n    }\n    else {\n      $config = null;\n    }\n\n    return $this->db->update(\n        $this->class_cfg['table'],\n        [\n        $this->fields['cfg'] => $config\n        ],\n        [\n        $this->fields['id'] => $id\n        ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1452,
            "endLine": 1471,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "setCfg",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets (or unsets) the cfg field of a given preference based on its ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "null|array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets (or unsets) the cfg field of a given preference based on its ID\n   *\n   * @param string|null $id\n   * @param null|array $cfg\n   * @return int\n   *\/"
        },
        "setText": {
            "name": "setText",
            "summary": "Sets (or unsets) the text field of the given preference and returns the result of the executed query",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setText(string $id, string $text = null): ?int\n  {\n    return $this->db->update(\n        $this->class_cfg['table'],\n        [\n        $this->fields['text'] => $text\n        ],\n        [\n        $this->fields['id'] => $id\n        ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1481,
            "endLine": 1492,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setText",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "text",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets (or unsets) the text field of the given preference and returns the result of the executed query\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$text"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets (or unsets) the text field of the given preference and returns the result of the executed query\n   *\n   * @param string      $id\n   * @param null|string $text\n   * @return null|int\n   *\/"
        },
        "setLink": {
            "name": "setLink",
            "summary": "Sets (or unsets) the id_link field of the given preference and returns the result of the executed query",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setLink(string $id, string $id_link = null): ?int\n  {\n    return $this->db->update(\n        $this->class_cfg['table'],\n        [\n        $this->fields['id_link'] => $id_link\n        ],\n        [\n        $this->fields['id'] => $id\n        ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1502,
            "endLine": 1513,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setLink",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_link",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "link"
                }
            ],
            "doc": {
                "description": "Sets (or unsets) the id_link field of the given preference and returns the result of the executed query\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "link"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets (or unsets) the id_link field of the given preference and returns the result of the executed query\n   *\n   * @param string $id\n   * @param string|null $id_link\n   * @return null|int\n   *\/"
        },
        "addLink": {
            "name": "addLink",
            "summary": "Sets (or unsets) the id_link field of the given preference and returns the result of the executed query",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addLink(string $id_option, string $id_link): ?string\n  {\n    $id = $this->db->selectOne(\n        $this->class_cfg['table'],\n        $this->fields['id'],\n        [\n        $this->fields['id_user'] => $this->id_user,\n        $this->fields['id_option'] => $id_option\n        ]\n    );\n    if ($id) {\n      if (\n          $this->db->update(\n              $this->class_cfg['table'],\n              [\n              $this->fields['id_link'] => $id_link\n              ],\n              ['id' => $id]\n          )\n      ) {\n        return $id;\n      }\n    }\n    elseif (\n        $this->db->insert(\n            $this->class_cfg['table'],\n            [\n            $this->fields['id_user'] => $this->id_user,\n            $this->fields['id_option'] => $id_option,\n            $this->fields['id_link'] => $id_link\n            ]\n        )\n    ) {\n      return $this->db->lastId();\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1523,
            "endLine": 1560,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addLink",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_link",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "link"
                }
            ],
            "doc": {
                "description": "Sets (or unsets) the id_link field of the given preference and returns the result of the executed query\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "link"
                    }
                ],
                "return": "The inserted or updated preference's ID"
            },
            "comments": "  \/**\n   * Sets (or unsets) the id_link field of the given preference and returns the result of the executed query\n   *\n   * @param string $id_option\n   * @param string $id_link\n   * @return null|string The inserted or updated preference's ID\n   *\/"
        },
        "getShared": {
            "name": "getShared",
            "summary": "Returns an array",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getShared(string $id): ?array\n  {\n    if (Str::isUid($id)) {\n      return $this->db->rselectAll(\n          $this->class_table,\n          [\n          $this->fields['id'],\n          $this->fields['id_user'],\n          $this->fields['id_group']\n          ],\n          [\n          $this->fields['id_alias'] => $id\n          ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1569,
            "endLine": 1586,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getShared",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array\n   *\n   * @param string $id\n   * @return array|null\n   *\/"
        },
        "makePublic": {
            "name": "makePublic",
            "summary": "Makes (or unmakes) the given preference public.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function makePublic(string $id, bool $cancel = false): ?int\n  {\n    if ($cfg = $this->get($id)) {\n      return $this->db->update(\n          $this->class_table,\n          ['public' => $cancel ? 0 : 1],\n          [\n          $this->fields['id'] => $id\n          ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1597,
            "endLine": 1610,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "makePublic",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cancel",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Makes (or unmakes) the given preference public.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$cancel"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Makes (or unmakes) the given preference public.\n   *\n   * @param string $id\n   * @param bool $cancel\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "shareWithGroup": {
            "name": "shareWithGroup",
            "summary": "Shares (or unshares) the given preference to the given group.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function shareWithGroup(string $id, string $id_group, bool $cancel = false): ?int\n  {\n    if ($cfg = $this->get($id)) {\n      $id_share = $this->db->selectOne(\n          $this->class_table,\n          $this->fields['id'],\n          [\n          'id_alias' => $id,\n          'id_group' => $id_group\n          ]\n      );\n      if ($cancel && $id_share) {\n        return $this->db->delete($this->class_table, [$this->fields['id'] => $id_share]);\n      }\n      elseif (!$cancel && !$id_share) {\n        return $this->db->insert(\n            $this->class_table,\n            [\n            'id_option' => $cfg['id_option'],\n            'id_alias' => $id,\n            'id_group' => $id_group\n            ]\n        );\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1622,
            "endLine": 1651,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "shareWithGroup",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_group",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "group"
                },
                {
                    "name": "cancel",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Shares (or unshares) the given preference to the given group.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "group"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$cancel"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Shares (or unshares) the given preference to the given group.\n   *\n   * @param string $id\n   * @param string $id_group\n   * @param bool $cancel\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "shareWithUser": {
            "name": "shareWithUser",
            "summary": "Shares (or unshares) the given preference to the given user",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function shareWithUser(string $id, string $id_user, bool $cancel = false): ?int\n  {\n    if ($cfg = $this->get($id)) {\n      $id_share = $this->db->selectOne(\n          $this->class_table,\n          $this->fields['id'],\n          [\n          'id_alias' => $id,\n          'id_user' => $id_user\n          ]\n      );\n      if ($cancel && $id_share) {\n        return $this->db->delete($this->class_table, [$this->fields['id'] => $id_share]);\n      }\n      elseif (!$cancel && !$id_share) {\n        return $this->db->insert(\n            $this->class_table,\n            [\n            'id_option' => $cfg['id_option'],\n            'id_alias' => $id,\n            'id_user' => $id_user\n            ]\n        );\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1663,
            "endLine": 1692,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "shareWithUser",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "cancel",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Shares (or unshares) the given preference to the given user\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$cancel"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Shares (or unshares) the given preference to the given user\n   *\n   * @param string $id\n   * @param string $id_user\n   * @param bool $cancel\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "addBit": {
            "name": "addBit",
            "summary": "Adds a bit to a preference",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addBit(string $id_user_option, array $cfg): ?string\n  {\n    if (\n        ($id_user_option = $this->_getIdOption($id_user_option))\n        && $this->isAuthorized($id_user_option)\n        && ($c = $this->class_cfg['arch']['user_options_bits'])\n    ) {\n      $to_cfg = $this->getBitCfg(null, $cfg);\n      if (isset($to_cfg['items'])) {\n        unset($to_cfg['items']);\n      }\n\n      if (!empty($to_cfg)) {\n        if (!empty($cfg[$c['cfg']])) {\n          if (Str::isJson($cfg[$c['cfg']])) {\n            $cfg[$c['cfg']] = json_decode($cfg[$c['cfg']], true);\n          }\n\n          if (\\is_array($cfg[$c['cfg']])) {\n            $cfg[$c['cfg']] = array_merge($cfg[$c['cfg']], $to_cfg);\n          }\n          else {\n            $cfg[$c['cfg']] = $to_cfg;\n          }\n        }\n        else {\n          $cfg[$c['cfg']] = $to_cfg;\n        }\n\n        $cfg[$c['cfg']] = json_encode($cfg[$c['cfg']]);\n      }\n\n      if (\n          $this->db->insert(\n              $this->class_cfg['tables']['user_options_bits'],\n              [\n              $c['id_user_option'] => $id_user_option,\n              $c['id_parent'] => $cfg[$c['id_parent']] ?? null,\n              $c['id_option'] => $cfg[$c['id_option']] ?? null,\n              $c['num'] => $cfg[$c['num']] ?? null,\n              $c['text'] => $cfg[$c['text']] ?? '',\n              $c['cfg'] => $cfg[$c['cfg']] ?? null,\n              ]\n          )\n      ) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1703,
            "endLine": 1753,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addBit",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user_option The preference's ID"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's values"
                }
            ],
            "doc": {
                "description": "Adds a bit to a preference\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user_option The preference's ID"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The bit's values"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Adds a bit to a preference\n   *\n   * @param string $id_user_option The preference's ID\n   * @param array $cfg The bit's values\n   * @return string|null\n   * @throws Exception\n   *\/"
        },
        "deleteBit": {
            "name": "deleteBit",
            "summary": "Deletes a preference's bit",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteBit(string $id): ?int\n  {\n    if (Str::isUid($id)) {\n      return $this->db->deleteIgnore(\n          $this->class_cfg['tables']['user_options_bits'],\n          [$this->class_cfg['arch']['user_options_bits']['id'] => $id]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1762,
            "endLine": 1772,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteBit",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's ID"
                }
            ],
            "doc": {
                "description": "Deletes a preference's bit\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "The bit's ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a preference's bit\n   *\n   * @param string The bit's ID\n   * @return int|null\n   *\/"
        },
        "deleteSubBits": {
            "name": "deleteSubBits",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function deleteSubBits(array $bits, string $id_user_option): int\n  {\n    if (Str::isUid($id_user_option) && $this->isAuthorized($id_user_option)) {\n      $i = 0;\n      foreach ($bits as $b) {\n        if ($b['items']) {\n          $i += $this->deleteSubBits($b['items'], $id_user_option);\n        }\n\n        $i += (int)$this->deleteBit($b['id']);\n      }\n      return $i;\n    }\n\n    throw new Exception(X::_(\"Impossible to get the user optin\"));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1775,
            "endLine": 1790,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "deleteSubBits",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "bits",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_user_option",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteBits": {
            "name": "deleteBits",
            "summary": "Deletes all bits from a preference",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteBits(string $id_user_option): ?int\n  {\n    if (Str::isUid($id_user_option) && $this->isAuthorized($id_user_option)) {\n      $tree = $this->getTree($id_user_option);\n      $i = 0;\n      if ($tree && !empty($tree['items'])) {\n        $this->deleteSubBits($tree['items'], $id_user_option);\n        $i += (int)$this->deleteBit($tree['id']);\n      }\n\n      return $i;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1800,
            "endLine": 1814,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteBits",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_user_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's ID"
                }
            ],
            "doc": {
                "description": "Deletes all bits from a preference\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "The bit's ID"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Deletes all bits from a preference\n   *\n   * @param string The bit's ID\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "updateBit": {
            "name": "updateBit",
            "summary": "Updates a preference's bit",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateBit(string $id, array $cfg, bool $merge_config = true): ?int\n  {\n    if (Str::isUid($id)) {\n      $c = $this->class_cfg['arch']['user_options_bits'];\n      if (\\array_key_exists($c['id'], $cfg)) {\n        unset($cfg[$c['id']]);\n      }\n\n      if (!empty($cfg[$c['cfg']]) && Str::isJson($cfg[$c['cfg']])) {\n        $cfg[$c['cfg']] = json_decode($cfg[$c['cfg']], true);\n      }\n\n      $to_cfg = $this->getBitCfg(null, $cfg[$c['cfg']] ?? $cfg);\n      if (isset($to_cfg['items'])) {\n        unset($to_cfg['items']);\n      }\n\n      $update   = [];\n      $from_cfg = $this->getBitCfg($id);\n      if (!empty($to_cfg)) {\n        if ($merge_config && !empty($from_cfg)) {\n          $update['cfg'] = json_encode(array_merge($from_cfg, $to_cfg));\n        }\n        else {\n          $update['cfg'] = json_encode($to_cfg);\n        }\n      }\n      elseif (!$merge_config) {\n        $update['cfg'] = null;\n      }\n\n      if (isset($cfg[$c['id_parent']])) {\n        $update[$c['id_parent']] = $cfg[$c['id_parent']];\n      }\n      if (isset($cfg[$c['id_option']])) {\n        $update[$c['id_option']] = $cfg[$c['id_option']];\n      }\n      if (isset($cfg[$c['num']])) {\n        $update[$c['num']] = $cfg[$c['num']];\n      }\n      if (isset($cfg[$c['text']])) {\n        $update[$c['text']] = $cfg[$c['text']];\n      }\n\n      return count($update) ? $this->db->update(\n          $this->class_cfg['tables']['user_options_bits'],\n          $update,\n          [$c['id'] => $id]\n      ) : 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1825,
            "endLine": 1877,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "updateBit",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's ID"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's values"
                },
                {
                    "name": "merge_config",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config"
                }
            ],
            "doc": {
                "description": "Updates a preference's bit\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The bit's ID"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "description": "The bit's values"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$merge",
                        "description": "config"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a preference's bit\n   *\n   * @param string $id The bit's ID\n   * @param array The bit's values\n   * @param bool $merge_config\n   * @return int|null\n   *\/"
        },
        "getBit": {
            "name": "getBit",
            "summary": "Returns a single preference's bit",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getBit(string $id, bool $with_config = true): array\n  {\n    if (\n        Str::isUid($id)\n        && ($bit = $this->db->rselect(\n            $this->class_cfg['tables']['user_options_bits'],\n            [],\n            [\n            $this->class_cfg['arch']['user_options_bits']['id'] => $id\n            ]\n        ))\n    ) {\n      if ($this->isAuthorized($bit['id_user_option'])) {\n        if ($with_config) {\n          return $this->explodeBitCfg($bit);\n        }\n\n        return $bit;\n      }\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1888,
            "endLine": 1910,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getBit",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's ID"
                },
                {
                    "name": "with_config",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config"
                }
            ],
            "doc": {
                "description": "Returns a single preference's bit\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The bit's ID"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a single preference's bit\n   *\n   * @param string $id The bit's ID\n   * @param bool $with_config\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "getBits": {
            "name": "getBits",
            "summary": "Returns the bits list of a preference",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getBits(string $id_user_option, $id_parent = false, bool $with_config = true): array\n  {\n    if ($this->isAuthorized($id_user_option)) {\n      $c     = $this->class_cfg['arch']['user_options_bits'];\n      $t     = $this;\n      $where = [[\n        'field' => $c['id_user_option'],\n        'value' => $id_user_option\n      ]];\n      if (\\is_null($id_parent) || Str::isUid($id_parent)) {\n        $where[] = [\n          'field' => $c['id_parent'],\n          empty($id_parent) ? 'operator' : 'value' => $id_parent ?: 'isnull'\n        ];\n      }\n\n      if (\n          Str::isUid($id_user_option)\n          && ($bits = $this->db->rselectAll(\n              [\n              'table' => $this->class_cfg['tables']['user_options_bits'],\n              'fields' => [],\n              'where' => [\n              'conditions' => $where\n              ],\n              'order' => [[\n              'field' => $c['num'],\n              'dir' => 'ASC'\n              ]]\n              ]\n          ))\n      ) {\n        if (!empty($with_config)) {\n          return array_map(\n              function ($b) use ($t) {\n                return $t->explodeBitCfg($b);\n              },\n              $bits\n          );\n        }\n\n        return $bits;\n      }\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1922,
            "endLine": 1968,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getBits",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_user_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user_option"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "parent The bits'parent ID"
                },
                {
                    "name": "with_config",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config"
                }
            ],
            "doc": {
                "description": "Returns the bits list of a preference\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user_option"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$id",
                        "description": "parent The bits'parent ID"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the bits list of a preference\n   *\n   * @param string $id_user_option\n   * @param bool $id_parent The bits'parent ID\n   * @param bool $with_config\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "getBitsByIdOption": {
            "name": "getBitsByIdOption",
            "summary": "Returns the bits list of an option's id",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getBitsByIdOption(string $id_opt, $id_parent = false, bool $with_config = true): ?array\n  {\n    $c     = $this->class_cfg['arch']['user_options_bits'];\n    $where = [[\n      'field' => $c['id_user_option'],\n      'value' => $id_opt\n    ]];\n    if (\\is_null($id_parent) || Str::isUid($id_parent)) {\n      $where[] = [\n        'field' => $c['id_parent'],\n        empty($id_parent) ? 'operator' : 'value' => $id_parent ?: 'isnull'\n      ];\n    }\n\n    if (\n        Str::isUid($id_opt)\n        && ($bits = $this->db->rselectAll(\n            [\n            'table' => $this->class_cfg['tables']['user_options_bits'],\n            'fields' => [],\n            'where' => $where,\n            'order' => [[\n            'field' => $c['num'],\n            'dir' => 'ASC'\n            ]]\n            ]\n        ))\n    ) {\n      $res = [];\n      foreach ($bits as $bit) {\n        if ($this->isAuthorized($bit['id_user_option'])) {\n          $res[] = $with_config ? $this->explodeBitCfg($bit) : $bit;\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1980,
            "endLine": 2019,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getBitsByIdOption",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_opt",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "opt"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "parent The bits'parent ID"
                },
                {
                    "name": "with_config",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config"
                }
            ],
            "doc": {
                "description": "Returns the bits list of an option's id\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "opt"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$id",
                        "description": "parent The bits'parent ID"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the bits list of an option's id\n   *\n   * @param string $id_opt\n   * @param bool $id_parent The bits'parent ID\n   * @param bool $with_config\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "getFullBits": {
            "name": "getFullBits",
            "summary": "Returns the hierarchical bits list of a preference",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFullBits(string $id_user_option, string $id_parent = null, bool $with_config = true): array\n  {\n    if ($this->isAuthorized($id_user_option)) {\n      $c = $this->class_cfg['arch']['user_options_bits'];\n      $t = $this;\n      return array_map(\n          function ($b) use ($t, $c, $id_user_option, $with_config) {\n            if (!empty($with_config)) {\n              $b = $t->explodeBitCfg($b);\n            }\n\n            $b['items'] = $t->getFullBits($id_user_option, $b[$c['id']], $with_config);\n            return $b;\n          },\n          $this->db->rselectAll(\n              [\n              'table' => $this->class_cfg['tables']['user_options_bits'],\n              'fields' => [],\n              'where' => [\n              'conditions' => [[\n              'field' => $c['id_user_option'],\n              'value' => $id_user_option\n              ], [\n              'field' => $c['id_parent'],\n              empty($id_parent) ? 'operator' : 'value' => $id_parent ?: 'isnull'\n              ]]\n              ],\n              'order' => [$c['num'] => 'ASC']\n              ]\n          )\n      );\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2031,
            "endLine": 2065,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getFullBits",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id_user_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user_option The preference's ID"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "parent The parent's ID of a bit. Default: null"
                },
                {
                    "name": "with_config",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config Set it to false if you don't want the preference's cfg field values on the results."
                }
            ],
            "doc": {
                "description": "Returns the hierarchical bits list of a preference\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user_option The preference's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "parent The parent's ID of a bit. Default: null"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config Set it to false if you don't want the preference's cfg field values on the results."
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the hierarchical bits list of a preference\n   *\n   * @param string $id_user_option The preference's ID\n   * @param string|null $id_parent The parent's ID of a bit. Default: null\n   * @param bool $with_config Set it to false if you don't want the preference's cfg field values on the results.\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "getBitsOrder": {
            "name": "getBitsOrder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getBitsOrder(string $id_user_option): ?array\n  {\n    if ($this->isAuthorized($id_user_option)) {\n      $tab1 = $this->class_cfg['tables']['user_options'];\n      $tab2 = $this->class_cfg['tables']['user_options_bits'];\n      $cfg  = $this->class_cfg['arch']['user_options'];\n      $cfg2 = $this->class_cfg['arch']['user_options_bits'];\n      if ($this->db->selectOne($tab1, $cfg['id_user'], ['id' => $id_user_option]) === $this->id_user) {\n        return $this->db->getColumnValues($tab2, $cfg2['id_option'], [$cfg2['id_user_option'] => $id_user_option], [$cfg2['num'] => 'ASC']);\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2073,
            "endLine": 2086,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getBitsOrder",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_user_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user_option"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user_option"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $id_user_option\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "getTree": {
            "name": "getTree",
            "summary": "Returns a preference and its hierarchical bits list",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTree(string $id, bool $with_config = true): array\n  {\n    if (\n        Str::isUid($id)\n        && ($p = $this->get($id, $with_config))\n    ) {\n      $p['items'] = $this->getFullBits($id, null, $with_config);\n      return $p;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2096,
            "endLine": 2107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getTree",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The preference's ID"
                },
                {
                    "name": "with_config",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "config Set it to false if you don't want the preference's cfg field values on the results."
                }
            ],
            "doc": {
                "description": "Returns a preference and its hierarchical bits list\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The preference's ID"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "config Set it to false if you don't want the preference's cfg field values on the results."
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a preference and its hierarchical bits list\n   *\n   * @param string $id The preference's ID\n   * @param bool $with_config Set it to false if you don't want the preference's cfg field values on the results.\n   * @throws Exception\n   *\/"
        },
        "explodeBitCfg": {
            "name": "explodeBitCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function explodeBitCfg($bit): array\n  {\n    $c = $this->class_cfg['arch']['user_options_bits'];\n    if (\n        !empty($bit[$c['cfg']])\n        && ($cfg = json_decode($bit[$c['cfg']], true))\n    ) {\n      foreach ($cfg as $i => $v) {\n        if (!array_key_exists($i, $bit)) {\n          $bit[$i] = $v;\n        }\n      }\n    }\n\n    unset($bit[$c['cfg']]);\n    return $bit;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2114,
            "endLine": 2130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "explodeBitCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "bit",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$bit"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $bit\n   * @return array\n   *\/"
        },
        "nextBitNum": {
            "name": "nextBitNum",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function nextBitNum(string $id): ?int\n  {\n    if (\n        Str::isUid($id)\n        && ($max = $this->db->selectOne(\n            $this->class_cfg['tables']['user_options_bits'],\n            'MAX(num)',\n            [$this->class_cfg['arch']['user_options_bits']['id_user_option'] => $id]\n        ))\n    ) {\n      return $max + 1;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2137,
            "endLine": 2151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "nextBitNum",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return int|null\n   *\/"
        },
        "getBitCfg": {
            "name": "getBitCfg",
            "summary": "Gets the bit's cfg array, normalized either from the DB or from the $cfg argument",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getBitCfg(string $id = null, array $cfg = null): ?array\n  {\n    if (\n        (null !== $cfg)\n        || ($cfg = $this->db->selectOne(\n            $this->class_cfg['tables']['user_options_bits'],\n            $this->class_cfg['arch']['user_options_bits']['cfg'],\n            [$this->class_cfg['arch']['user_options_bits']['id'] => $id ]\n        ))\n    ) {\n      $fields = array_values($this->class_cfg['arch']['user_options_bits']);\n      if (Str::isJson($cfg)) {\n        $cfg = json_decode($cfg, 1);\n      }\n\n      if (\\is_array($cfg)) {\n        $new = [];\n        foreach ($cfg as $k => $v) {\n          if (!\\in_array($k, $fields, true)) {\n            $new[$k] = $v;\n          }\n        }\n\n        return $new;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2161,
            "endLine": 2189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getBitCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the bit's cfg array, normalized either from the DB or from the $cfg argument\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "null|array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the bit's cfg array, normalized either from the DB or from the $cfg argument\n   *\n   * @param string|null $id\n   * @param null|array $cfg\n   * @return null|array\n   *\/"
        },
        "orderBit": {
            "name": "orderBit",
            "summary": "Orders a bit.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function orderBit(string $id, int $pos): ?bool\n  {\n    if (\n        Str::isUid($id)\n        && ($cf = $this->getClassCfg())\n        && ($cfg = $cf['arch']['user_options_bits'])\n        && ($bit = $this->getBit($id))\n        && ($old = (int)$bit[$cfg['num']])\n        && !empty($pos)\n        && ($old !== $pos)\n        && ($bits = $this->getBits($bit[$cfg['id_user_option']], $bit[$cfg['id_parent']]))\n    ) {\n      $past_new = false;\n      $past_old = false;\n      $p        = 1;\n      $changed  = 0;\n      foreach ($bits as $ele) {\n        $upd = [];\n        if ($past_old && !$past_new) {\n          $upd[$cfg['num']] = $p - 1;\n        }\n        elseif (!$past_old && $past_new) {\n          $upd[$cfg['num']] = $p + 1;\n        }\n\n        if ($id === $ele['id']) {\n          $upd[$cfg['num']] = $pos;\n          $past_old         = 1;\n        }\n        elseif ($p === $pos) {\n          $upd[$cfg['num']] = $p + ($pos > $old ? -1 : 1);\n          $past_new         = 1;\n        }\n\n        if (!empty($upd)) {\n          $changed += $this->db->update($cf['tables']['user_options_bits'], $upd, [$cfg['id'] => $ele['id']]);\n        }\n\n        if ($past_new && $past_old) {\n          break;\n        }\n\n        $p++;\n      }\n\n      return (bool)$changed;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2200,
            "endLine": 2249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "orderBit",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's ID"
                },
                {
                    "name": "pos",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new position"
                }
            ],
            "doc": {
                "description": "Orders a bit.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The bit's ID"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$pos",
                        "description": "The new position"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Orders a bit.\n   *\n   * @param string $id The bit's ID\n   * @param int $pos The new position\n   * @return bool|null\n   * @throws Exception\n   *\/"
        },
        "fixBitsOrder": {
            "name": "fixBitsOrder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fixBitsOrder(string $id_user_option, string $id_parent = null, $deep = false): ?int\n  {\n    if (\n        Str::isUid($id_user_option)\n        && (Str::isUid($id_parent) || \\is_null($id_parent))\n    ) {\n      $cfg   = $this->class_cfg['arch']['user_options_bits'];\n      $fixed = 0;\n      foreach ($this->getBits($id_user_option, $id_parent, false) as $i => $b) {\n        if ($deep) {\n          $fixed += $this->fixBitsOrder($id_user_option, $b[$cfg['id']], $deep);\n        }\n\n        if ($b[$cfg['num']] !== ($i + 1)) {\n          $fixed += $this->db->update($this->class_cfg['tables']['user_options_bits'], [$cfg['num'] => $i + 1], [$cfg['id'] => $b[$cfg['id']]]);\n        }\n      }\n\n      return $fixed;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2259,
            "endLine": 2281,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "fixBitsOrder",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_user_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user_option"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "parent"
                },
                {
                    "name": "deep",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user_option"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "parent"
                    },
                    {
                        "tag": "param",
                        "type": "false",
                        "name": "$deep"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $id_user_option\n   * @param string|null $id_parent\n   * @param false $deep\n   * @return int|null\n   * @throws Exception\n   *\/"
        },
        "moveBit": {
            "name": "moveBit",
            "summary": "Moves a bit.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function moveBit(string $id, string $id_parent = null): ?bool\n  {\n    if (\n        Str::isUid($id)\n        && ((Str::isUid($id_parent) && $this->getBit($id_parent))\n        || \\is_null($id_parent)        )\n        && ($bit = $this->getBit($id))\n        && ($cf = $this->getClassCfg())\n        && ($cfg = $cf['arch']['user_options_bits'])\n    ) {\n      $upd = [\n        $cfg['id_parent'] => $id_parent,\n        $cfg['num'] => $this->getMaxBitNum($bit[$cfg['id_user_option']], $id_parent, true)\n      ];\n      return (bool)$this->db->update($cf['tables']['user_options_bits'], $upd, [$cfg['id'] => $id]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2292,
            "endLine": 2310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "moveBit",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's ID"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new parent's ID"
                }
            ],
            "doc": {
                "description": "Moves a bit.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The bit's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "description": "The new parent's ID"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Moves a bit.\n   *\n   * @param string $id The bit's ID\n   * @param string|null The new parent's ID\n   * @return bool|null\n   * @throws Exception\n   *\/"
        },
        "getMaxBitNum": {
            "name": "getMaxBitNum",
            "summary": "Gets the maximum num value of the user option's bits.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMaxBitNum(string $id_user_option, string $id_parent = null, bool $incr = false): int\n  {\n    if (\n        Str::isUid($id_user_option)\n        && (Str::isUid($id_parent) || is_null($id_parent))\n        && ($cf = $this->getClassCfg())\n        && ($cfg = $cf['arch']['user_options_bits'])\n    ) {\n      if (\n          $max = $this->db->selectOne(\n              [\n              'table' => $cf['tables']['user_options_bits'],\n              'fields' => [\"MAX($cfg[num])\"],\n              'where' => [\n              'conditions' => [[\n              'field' => $cfg['id_user_option'],\n              'value' => $id_user_option\n              ], [\n              'field' => $cfg['id_parent'],\n              empty($id_parent) ? 'operator' : 'value' => $id_parent ?: 'isnull'\n              ]]\n              ]\n              ]\n          )\n      ) {\n          $max = (int)$max;\n          return $incr ? $max + 1 : $max;\n      }\n      return 0;\n    }\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2321,
            "endLine": 2352,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getMaxBitNum",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_user_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "user_option The user option's ID"
                },
                {
                    "name": "id_parent",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "parent      The parent's ID"
                },
                {
                    "name": "incr",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Set it to true if you want the result increased by 1"
                }
            ],
            "doc": {
                "description": "Gets the maximum num value of the user option's bits.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user_option The user option's ID"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "parent      The parent's ID"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$incr",
                        "description": "Set it to true if you want the result increased by 1"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the maximum num value of the user option's bits.\n   *\n   * @param string      $id_user_option The user option's ID\n   * @param string|null $id_parent      The parent's ID\n   * @param bool        $incr           Set it to true if you want the result increased by 1\n   * @return int\n   *\/"
        },
        "getByBit": {
            "name": "getByBit",
            "summary": "Gets a preference row from a bit ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getByBit(string $id): ?array\n  {\n    $t =& $this;\n    if (Str::isUid($id)) {\n      return $this->db->rselect(\n          [\n          'table' => $this->class_cfg['table'],\n          'fields' => array_map(\n              function ($v) use ($t) {\n                return $t->db->cfn($v, $t->class_cfg['table']);\n              },\n              array_values($this->class_cfg['arch']['user_options'])\n          ),\n          'join' => [[\n          'table' => $this->class_cfg['tables']['user_options_bits'],\n          'on' => [\n            'conditions' => [[\n              'field' => $this->class_cfg['arch']['user_options_bits']['id_user_option'],\n              'exp' => $this->class_cfg['table'] . '.' . $this->fields['id']\n            ]]\n          ]\n          ]],\n          'where' => [\n          $this->class_cfg['tables']['user_options_bits'] . '.' . $this->class_cfg['arch']['user_options_bits']['id'] => $id\n          ]\n          ]\n      );\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2361,
            "endLine": 2390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getByBit",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's ID"
                }
            ],
            "doc": {
                "description": " Gets a preference row from a bit ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The bit's ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   *  Gets a preference row from a bit ID\n   *\n   * @param string $id The bit's ID\n   * @return array\n   *\/"
        },
        "getIdByBit": {
            "name": "getIdByBit",
            "summary": "Gets the preference's ID from a bit ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdByBit(string $id): ?string\n  {\n    if (Str::isUid($id) && ($p = $this->getByBit($id))) {\n      return $this->db->selectOne(\n          [\n          'table' => $this->class_cfg['table'],\n          'field' => $this->class_cfg['table'] . '.' . $this->fields['id'],\n          'join' => [[\n          'table' => $this->class_cfg['tables']['user_options_bits'],\n          'on' => [\n            'conditions' => [[\n              'field' => $this->class_cfg['arch']['user_options_bits']['id_user_option'],\n              'exp' => $this->class_cfg['table'] . '.' . $this->fields['id']\n            ]]\n          ]\n          ]],\n          'where' => [\n          $this->class_cfg['tables']['user_options_bits'] . '.' . $this->class_cfg['arch']['user_options_bits']['id'] => $id\n          ]\n          ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2399,
            "endLine": 2423,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIdByBit",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bit's ID"
                }
            ],
            "doc": {
                "description": "Gets the preference's ID from a bit ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The bit's ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the preference's ID from a bit ID\n   *\n   * @param string $id The bit's ID\n   * @return string\n   *\/"
        },
        "textValue": {
            "name": "textValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function textValue(string $id_option, $id_user = null, $id_group = null): ?array\n  {\n    if (Str::isUid($id_option)) {\n      $res = [];\n      if ($ids = $this->_retrieveIds($id_option, $id_user, $id_group)) {\n        foreach ($ids as $id) {\n          $res[] = $this->db->rselect(\n              $this->class_cfg['table'],\n              [\n              'value' => $this->fields['id'],\n              'text' => $this->fields['text']\n              ],\n              ['id' => $id]\n          );\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2433,
            "endLine": 2454,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "textValue",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "id_group",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "group"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$id",
                        "description": "user"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$id",
                        "description": "group"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $id_option\n   * @param null $id_user\n   * @param null $id_group\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "getDb": {
            "name": "getDb",
            "summary": "Returns the bbn\\Db instance",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDb(): Db\n  {\n    return $this->db;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2461,
            "endLine": 2464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDb",
            "returns": [
                "bbn\\Db"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the bbn\\Db instance\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the bbn\\Db instance\n   * @return bbn\\DB\n   *\/"
        },
        "_initUser": {
            "name": "_initUser",
            "summary": "Sets the user variables using a user object",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _initUser(User $user): preferences\n  {\n    $this->user     = $user;\n    $this->id_user  = $this->user->getId();\n    $this->id_group = $this->user->getGroup();\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2473,
            "endLine": 2479,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_initUser",
            "returns": [
                "bbn\\User\\preferences"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "bbn\\User",
                    "type_arr": [
                        "bbn\\User"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the user variables using a user object\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bbn\\User",
                        "name": "$user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the user variables using a user object\n   *\n   * @param bbn\\User $user\n   * @return preferences\n   *\/"
        },
        "_getIdOption": {
            "name": "_getIdOption",
            "summary": "Retrieves or confirm the ID of an option based on the same parameters as Option::from_path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getIdOption(string $id_option = null): ?string\n  {\n    if (!$id_option && !($id_option = $this->getCurrent())) {\n      return null;\n    }\n\n    if ($id_option && !Str::isUid($id_option)) {\n      $id_option = $this->opt->fromPath(...\\func_get_args());\n    }\n\n    if ($id_option && Str::isUid($id_option)) {\n      return $id_option;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2489,
            "endLine": 2504,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_getIdOption",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "Retrieves or confirm the ID of an option based on the same parameters as Option::from_path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Retrieves or confirm the ID of an option based on the same parameters as Option::from_path\n   *\n   * @param string|null $id_option\n   * @return null|string\n   * @throws Exception\n   *\/"
        },
        "_insert": {
            "name": "_insert",
            "summary": "Actually inserts a row into the preferences table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _insert(string $id_option, array $cfg): int\n  {\n    $json = ($tmp = $this->getCfg(false, $cfg)) ? json_encode($tmp) : null;\n    return $this->db->insert(\n        $this->class_cfg['table'],\n        [\n        $this->fields['id_option'] => $id_option,\n        $this->fields['num'] => $cfg[$this->fields['num']] ?? null,\n        $this->fields['text'] => $cfg[$this->fields['text']] ?? null,\n        $this->fields['id_link'] => $cfg[$this->fields['id_link']] ?? null,\n        $this->fields['id_alias'] => $cfg[$this->fields['id_alias']] ?? null,\n        $this->fields['id_user'] => $this->id_user,\n        $this->fields['cfg'] => $json\n        ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2514,
            "endLine": 2529,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_insert",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Actually inserts a row into the preferences table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Actually inserts a row into the preferences table\n   *\n   * @param string $id_option\n   * @param array  $cfg\n   * @return int\n   *\/"
        },
        "_retrieveIds": {
            "name": "_retrieveIds",
            "summary": "Returns preferences' IDs from the option's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _retrieveIds(string $id_option, string $id_user = null, string $id_group = null): ?array\n  {\n    if (!$id_user && !$id_group && isset($this->id_user, $this->id_group)) {\n      $id_user  = $this->id_user;\n      $id_group = $this->id_group;\n    }\n\n    if (($id_user || $id_group) && ($id_option = $this->_getIdOption($id_option))) {\n      $cond = [\n        'logic' => 'OR',\n        'conditions' => []\n      ];\n      if (null !== $id_user) {\n        $cond['conditions'][] = [\n          'field' => $this->fields['id_user'],\n          'value' => $id_user\n        ];\n      }\n\n      if (null !== $id_group) {\n        $cond['conditions'][] = [\n          'field' => $this->fields['id_group'],\n          'value' => $id_group\n        ];\n      }\n\n      \/\/ Not specific to just a group or a user, so adding the public i.e. all to which the user has right\n      if ($id_user && $id_group) {\n        $cond['conditions'][] = [\n          'field' => $this->fields['public'],\n          'value' => 1\n        ];\n      }\n\n      $where = [\n        'logic' => 'AND',\n        'conditions' => [[\n          'field' => $this->fields['id_option'],\n          'value' => $id_option\n        ]]\n      ];\n      if (count($cond['conditions'])) {\n        $where['conditions'][] = $cond;\n      }\n\n      return $this->db->getColumnValues(\n          [\n          'table' => $this->class_cfg['table'],\n          'fields' => [$this->fields['id']],\n          'where' => $where,\n          'order' => [\n          ['field' => $this->fields['num'], 'dir' => 'ASC'],\n          ['field' => $this->fields['text'], 'dir' => 'ASC']\n          ]\n          ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2541,
            "endLine": 2600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_retrieveIds",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "id_group",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "group"
                }
            ],
            "doc": {
                "description": "Returns preferences' IDs from the option's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "user"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$id",
                        "description": "group"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns preferences' IDs from the option's ID\n   *\n   * @param string $id_option\n   * @param null|string $id_user\n   * @param null|string $id_group\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "_getLinks": {
            "name": "_getLinks",
            "summary": "Gets the preferences which have the option's $id as id_link",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Preferences.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getLinks(string $id_link, string $id_user = null, string $id_group = null): ?array\n  {\n    if ($id_link = $this->_getIdOption($id_link)) {\n      $where = [\n        'logic' => 'AND',\n        'conditions' => [\n          [\n            'field' => $this->fields['id_link'],\n            'operator' => '=',\n            'value' => $id_link\n          ]\n        ]\n      ];\n      if (null !== $id_user) {\n        $cond[$this->fields['id_user']] = $id_user;\n      }\n\n      if (null !== $id_group) {\n        $cond[$this->fields['id_group']] = $id_group;\n      }\n\n      \/\/ Not specific\n      if ((null === $id_user) && (null === $id_group)) {\n        $cond[$this->fields['public']] = 1;\n      }\n\n      $where['conditions'][] = [\n        'logic' => 'OR',\n        'conditions' => $cond\n      ];\n      return $this->db->rselectAll(\n        [\n          'tables' => [$this->class_cfg['table']],\n          'fields' => [$this->fields['id'], $this->fields['id_option']],\n          'where' => $where,\n          'order' => [$this->fields['text']]\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2612,
            "endLine": 2653,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_getLinks",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_link",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "link"
                },
                {
                    "name": "id_user",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "id_group",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "group"
                }
            ],
            "doc": {
                "description": "Gets the preferences which have the option's $id as id_link\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "link"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "user"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "group"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Gets the preferences which have the option's $id as id_link\n   *\n   * @param string $id_link\n   * @param string|null $id_user\n   * @param string|null $id_group\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "retrieverInit": {
            "name": "retrieverInit",
            "summary": "Initialize the retriever by putting its own instance as static property.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function retrieverInit(self $instance): void\n  {\n    self::$retriever_exists = true;\n    if (!self::$retriever_instance) {\n      self::$retriever_instance = $instance;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 31,
            "endLine": 37,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieverInit",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "instance",
                    "position": 0,
                    "type": "self",
                    "type_arr": [
                        "self"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The instance object."
                }
            ],
            "doc": {
                "description": "Initialize the retriever by putting its own instance as static property.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "self",
                        "name": "$instance",
                        "description": "The instance object."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the retriever by putting its own instance as static property.\n   *\n   * @param self $instance The instance object.\n   * @return void\n   *\/"
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getInstance(): ?self\n  {\n    return self::$retriever_instance;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 44,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getInstance",
            "returns": [
                null,
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the instance of the singleton or null.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the instance of the singleton or null.\n   * \n   * @return self\n   *\/"
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function retrieverExists(): bool\n  {\n    return self::$retriever_exists;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 54,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "retrieverExists",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if an instance as been initiated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if an instance as been initiated.\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(' . $this->db->csn($col, true);\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n      \n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array $cfg = null)\n  {\n$arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n    foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 117,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 39,
            "endLine": 92,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 94,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 150,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 162,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 203,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 224,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 265,
            "endLine": 301,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 315,
            "endLine": 378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        },
        "optionalInit": {
            "name": "optionalInit",
            "summary": "Returns the option's root ID for the current class based on {@link $option_root_code}",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function optionalInit(array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      $opt = Option::getInstance();\n      if (!$opt) {\n        throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n      }\n\n      $justDefined = false;\n      if (!\\defined(\"BBN_APPUI\")) {\n        $justDefined = true;\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          throw new Exception('Impossible to find the option appui for ' . __CLASS__ . ($justDefined ? '' : 'not') . ' defined ' . ($opt->fromCode('appui', 'plugins') ?: '') . ($opt->fromCode('appui') ?: '') . ' ' . $opt->getRoot() . ' ' . $opt->getDefault() . X::getDump($opt->option($opt->getRoot())));\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = strtolower(end($tmp));\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n      if (!self::$option_root_id) {\n        if (!$cls) {\n          throw new Exception(\"Impossible to find the option \".json_encode($path).\" !!! for \".__CLASS__);\n        }\n        throw new Exception(\"Impossible to find the option $cls for \".__CLASS__);\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 41,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "optionalInit",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the option's root ID for the current class based on {@link $option_root_code}\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the option's root ID for the current class based on {@link $option_root_code}\n   *\n   * @return false|int\n   *\/"
        },
        "initOptionalGlobal": {
            "name": "initOptionalGlobal",
            "summary": "Sets only once all the constants used by the class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function initOptionalGlobal(Option $opt, array $path = null)\n  {\n    if (!self::$optional_is_init) {\n      if (!\\defined(\"BBN_APPUI\")) {\n        \\define('BBN_APPUI', $opt->fromCode('appui', 'plugins'));\n      }\n\n      if (!$path) {\n        if (!BBN_APPUI) {\n          X::log('Impossible to find the option appui for '.__CLASS__, 'errors');\n          return;\n        }\n\n        $tmp                   = explode('\\\\', __CLASS__);\n        $cls                   = end($tmp);\n        $path                  = [$cls, 'appui'];\n      }\n\n      self::$option_root_id = $opt->fromCode(...$path);\n            if (!self::$option_root_id) {\n        X::log(\"Impossible to find the option $cls for \".__CLASS__, 'errors');\n        return;\n      }\n\n      self::$optional_is_init = true;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 85,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "initOptionalGlobal",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "bbn\\Appui\\Option",
                    "type_arr": [
                        "bbn\\Appui\\Option"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets only once all the constants used by the class.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Option",
                        "name": "$opt"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets only once all the constants used by the class.\n   *\n   * @param Option $opt\n   * @param array             $path\n   * @return void\n   *\/"
        },
        "initOptional": {
            "name": "initOptional",
            "summary": "Defines the options prop and launches the static init method.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initOptional(array $path = null)\n  {\n    $this->options = Option::getInstance();\n    if (!$this->options) {\n      throw new Exception(X::_(\"There is no options object as needed by\").' '.__CLASS__);\n    }\n\n    self::initOptionalGlobal($this->options, $path);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 120,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initOptional",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Defines the options prop and launches the static init method.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Defines the options prop and launches the static init method.\n   *\n   * @param array $path\n   * @return void\n   *\/"
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionRoot()\n  {\n    self::optionalInit();\n    return self::$option_root_id;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionRoot",
            "returns": [],
            "arguments": []
        },
        "getOptionsObject": {
            "name": "getOptionsObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsObject(): Option\n  {\n    $o = Option::getInstance();\n    if (!$o) {\n      throw new Exception(X::_(\"Impossible to get the options object from class\").' '.__CLASS__);\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 138,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsObject",
            "returns": [
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "getOptionId": {
            "name": "getOptionId",
            "summary": "Returns The option's ID of a category, i.e. direct children of option's root",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionId()\n  {\n    return self::getOptionsObject()->fromCode(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns The option's ID of a category, i.e. direct children of option's root\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns The option's ID of a category, i.e. direct children of option's root\n   *\n   * @param string $code\n   * @return int|false\n   *\/"
        },
        "getOptionsIds": {
            "name": "getOptionsIds",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsIds(): array\n  {\n    return array_flip(\n      array_filter(\n        self::getOptionsObject()->getCodes(...self::_treat_args(func_get_args())),\n        function ($a) {\n          return $a !== null;\n        }\n      )\n    );\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 167,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsIds",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check it, it doesn't seem ok"
                }
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @todo Check it, it doesn't seem ok\n   * @return array\n   *\/"
        },
        "getOptionsTree": {
            "name": "getOptionsTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTree()\n  {\n    return ($tree = self::getOptionsObject()->fullTree(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTree",
            "returns": [],
            "arguments": []
        },
        "getOptionsTreeRef": {
            "name": "getOptionsTreeRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTreeRef()\n  {\n    return ($tree = self::getOptionsObject()->fullTreeRef(...self::_treat_args(func_get_args()))) ? $tree['items'] : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTreeRef",
            "returns": [],
            "arguments": []
        },
        "getOptions": {
            "name": "getOptions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptions()\n  {\n    return self::getOptionsObject()->fullOptions(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 192,
            "endLine": 195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptions",
            "returns": [],
            "arguments": []
        },
        "getOptionsRef": {
            "name": "getOptionsRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsRef()\n  {\n    return self::getOptionsObject()->fullOptionsRef(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 198,
            "endLine": 201,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsRef",
            "returns": [],
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOption()\n  {\n    return self::getOptionsObject()->option(...self::_treat_args(func_get_args()));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 204,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOption",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValue": {
            "name": "getOptionsTextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValue()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptions($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValue",
            "returns": [],
            "arguments": []
        },
        "getOptionsTextValueRef": {
            "name": "getOptionsTextValueRef",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getOptionsTextValueRef()\n  {\n    return ($id = self::getOptionId(...func_get_args())) ? self::getOptionsObject()->textValueOptionsRef($id) : [];\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 216,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOptionsTextValueRef",
            "returns": [],
            "arguments": []
        },
        "_treat_args": {
            "name": "_treat_args",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Optional.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function _treat_args(array $args, $appui = false): array\n  {\n    $hasUid = Str::isUid(end($args));\n    if (count($args) && !$hasUid) {\n      self::optionalInit();\n      if (!in_array($args[0], ['permissions', 'options', 'plugins'])) {\n        $args[] = 'options';\n      }\n    }\n\n    if (!$hasUid) {\n      $args[] = self::$option_root_id;\n    }\n\n    return $args;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Optional",
            "startLine": 223,
            "endLine": 238,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_treat_args",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "appui",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "_set_current": {
            "name": "_set_current",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Current.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _set_current(string $current): void\n  {\n    self::$current = $current;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Current",
            "startLine": 21,
            "endLine": 24,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_current",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "current",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$current"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $current\n   *\/"
        },
        "setCurrent": {
            "name": "setCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Current.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCurrent(string $id_option): void\n  {\n    self::_set_current($id_option);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Current",
            "startLine": 29,
            "endLine": 32,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setCurrent",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "id_option",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "option"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "option"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_option\n   *\/"
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Preferences",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Current.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrent(): ?string\n  {\n    return self::$current;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Current",
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrent",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|string\n   *\/"
        }
    },
    "properties": {
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\User\\Preferences",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": {
                "table": "bbn_users_options",
                "tables": {
                    "user_options": "bbn_users_options",
                    "user_options_bits": "bbn_users_options_bits"
                },
                "arch": {
                    "user_options": {
                        "id": "id",
                        "id_option": "id_option",
                        "num": "num",
                        "id_user": "id_user",
                        "id_group": "id_group",
                        "id_alias": "id_alias",
                        "public": "public",
                        "id_link": "id_link",
                        "text": "text",
                        "cfg": "cfg"
                    },
                    "user_options_bits": {
                        "id": "id",
                        "id_user_option": "id_user_option",
                        "id_parent": "id_parent",
                        "id_option": "id_option",
                        "num": "num",
                        "text": "text",
                        "cfg": "cfg"
                    }
                }
            }
        },
        "opt": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\User\\Preferences",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Option",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\User\\Preferences",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var User",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "id_user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\User\\Preferences",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "id_group": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\User\\Preferences",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "retriever_instance": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "self",
                        "description": "An instance of the current class."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "retriever_exists": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Will be true from the moment an instance exists."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "optional_is_init": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Set as true from the moment a first instance has been initiated and has defined the constants."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "option_root_id": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The ID of the root option"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "options": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Optional",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Option",
                        "description": "The Option object"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "current": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Preferences"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Current",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string The current ID",
                "tags": []
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_users_options",
            "tables": {
                "user_options": "bbn_users_options",
                "user_options_bits": "bbn_users_options_bits"
            },
            "arch": {
                "user_options": {
                    "id": "id",
                    "id_option": "id_option",
                    "num": "num",
                    "id_user": "id_user",
                    "id_group": "id_group",
                    "id_alias": "id_alias",
                    "public": "public",
                    "id_link": "id_link",
                    "text": "text",
                    "cfg": "cfg"
                },
                "user_options_bits": {
                    "id": "id",
                    "id_user_option": "id_user_option",
                    "id_parent": "id_parent",
                    "id_option": "id_option",
                    "num": "num",
                    "text": "text",
                    "cfg": "cfg"
                }
            }
        },
        "retriever_instance": {},
        "retriever_exists": true,
        "optional_is_init": false,
        "option_root_id": null,
        "current": null
    },
    "constants": null,
    "uses": {
        "bbn\\Db": "Db",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "Exception": "Exception",
        "bbn\\User": "User",
        "bbn\\Appui\\Option": "Option",
        "bbn\\Models\\Tts\\Retriever": "Retriever",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Tts\\Optional": "Optional",
        "bbn\\Models\\Tts\\Current": "Current",
        "bbn\\Models\\Cls\\Db": "DbCls"
    },
    "dummyComments": [
        "\/**\n *\n * @package user\n *\/",
        "\/**\n * A user's preference system linked to options and user classes\n *\n * A preference consists in a row with an ID_OPTION and a ID_USER, ID_GROUP, or PUBLIC.\n * The class needs a user object on which each query will be based.\n * This class must be able to:\n * - read options with the same arguments as the option class (filtered based on preference existence)\n * - retrieve preference(s) for an option\n * - write preference by adding to an existing set or setting a unique\n *\n *\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Oct 28, 2015, 10:23:55 +0000\n * @category  Authentication\n * @license   http:\/\/opensource.org\/licenses\/MIT MIT\n * @version 0.1\n * @todo Groups and hotlinks features\n *\/"
    ],
    "summary": "A user's preference system linked to options and user classes",
    "description": "A preference consists in a row with an ID_OPTION and a ID_USER, ID_GROUP, or PUBLIC.\nThe class needs a user object on which each query will be based.\nThis class must be able to:\n- read options with the same arguments as the option class (filtered based on preference existence)\n- retrieve preference(s) for an option\n- write preference by adding to an existing set or setting a unique",
    "description_parts": [
        {
            "type": "text",
            "content": "A preference consists in a row with an ID_OPTION and a ID_USER, ID_GROUP, or PUBLIC.\nThe class needs a user object on which each query will be based.\nThis class must be able to:\n- read options with the same arguments as the option class (filtered based on preference existence)\n- retrieve preference(s) for an option\n- write preference by adding to an existing set or setting a unique"
        }
    ]
}