{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\User\\Session",
    "namespace": true,
    "realName": "Session",
    "realNamespace": "bbn\\User",
    "traits": [
        "bbn\\Models\\Tts\\Singleton"
    ],
    "interfaces": [],
    "fileName": "\/User\/Session.php",
    "startLine": 30,
    "endLine": 373,
    "numMethods": 24,
    "numProperties": 7,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "name": "apst-app",
        "singleton_instance": null,
        "singleton_exists": false,
        "was_opened": false,
        "once_opened": false,
        "data": null,
        "id": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\User",
    "shortName": "Session",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(array|null $defaults = null)\n  {\n    if (self::singletonExists()) {\n      throw new Exception(\"Impossible to create a new session, one already exists\");\n    }\n    self::singletonInit($this);\n\n    if ($id = session_id()) {\n      $this->was_opened = true;\n      $this->once_opened = true;\n    }\n    else {\n      $this->open();\n      $id = session_id();\n    }\n\n    if (!$id) {\n      $save_path = session_save_path();\n      if (!is_dir($save_path)) {\n        throw new Exception(X::_(\"The session path %s doesn't exist\", $save_path));\n      }\n      elseif (!is_writable($save_path)) {\n        throw new Exception(X::_(\"The session path %s is not writable\", $save_path));\n      }\n      else {\n        throw new Exception(X::_(\"Impossible to retrieve the session's ID in %s\", $save_path));\n      }\n    }\n\n    $this->id = $id;\n    if (!isset($_SESSION[self::$name])) {\n      $_SESSION[self::$name] = \\is_array($defaults) ? $defaults : [];\n    }\n\n    $this->data = $_SESSION[self::$name];\n    $this->close();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 46,
            "endLine": 82,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "defaults",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "destroyInstance": {
            "name": "destroyInstance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function destroyInstance()\n  {\n    if (self::singletonExists()) {\n      self::$singleton_instance = null;\n      self::$singleton_exists   = false;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 84,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "destroyInstance",
            "returns": [],
            "arguments": []
        },
        "isOpened": {
            "name": "isOpened",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isOpened(): bool\n  {\n    return session_status() !== PHP_SESSION_NONE;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isOpened",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get()\n  {\n    if ($this->id) {\n      return $this->_get_value(\\func_get_args());\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 98,
            "endLine": 103,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "get",
            "returns": [],
            "arguments": []
        },
        "fetch": {
            "name": "fetch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetch($arg=null)\n  {\n    if ($this->id) {\n      $this->open();\n      $this->data = $_SESSION[self::$name];\n      $this->close();\n      if (\\is_null($arg)) {\n        return $this->data;\n      }\n\n      return $this->_get_value(\\func_get_args());\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 106,
            "endLine": 118,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "fetch",
            "returns": [],
            "arguments": [
                {
                    "name": "arg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "has": {
            "name": "has",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function has()\n  {\n    return !\\is_null($this->_get_value(\\func_get_args()));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 121,
            "endLine": 124,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "has",
            "returns": [],
            "arguments": []
        },
        "set": {
            "name": "set",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function set($val)\n  {\n    if ($this->id) {\n      $this->_set_value(\\func_get_args());\n      $this->open();\n      $_SESSION[self::$name] = $this->data;\n      $this->close();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 127,
            "endLine": 137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "set",
            "returns": [],
            "arguments": [
                {
                    "name": "val",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "uset": {
            "name": "uset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function uset($val)\n  {\n    if ($this->id) {\n      $args = \\func_get_args();\n      array_unshift($args, null);\n      $this->_set_value($args);\n      $this->open();\n      $_SESSION[self::$name] = $this->data;\n      $this->close();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 140,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "uset",
            "returns": [],
            "arguments": [
                {
                    "name": "val",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "transform": {
            "name": "transform",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function transform(callable $fn)\n  {\n    if ($this->id) {\n      $args = \\func_get_args();\n      array_shift($args);\n      $transformed = \\call_user_func($fn, $this->_get_value($args));\n      array_unshift($args, $transformed);\n      $this->_set_value($args);\n      $this->open();\n      $_SESSION[self::$name] = $this->data;\n      $this->close();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 155,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "transform",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "work": {
            "name": "work",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function work(callable $fn)\n  {\n    return $this->transform(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "work",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "push": {
            "name": "push",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function push($value)\n  {\n    if ($this->id) {\n      $args = \\func_get_args();\n      array_shift($args);\n      $var = $this->get(...$args);\n      if (!\\is_array($var)) {\n        $var = [];\n      }\n\n      if (!\\in_array($value, $var)) {\n        array_push($var, $value);\n        array_unshift($args, $var);\n        $this->set(...$args);\n      }\n\n      return $this;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 178,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "push",
            "returns": [],
            "arguments": [
                {
                    "name": "value",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "destroy": {
            "name": "destroy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function destroy()\n  {\n    if ($this->id) {\n      $this->open();\n      $args = \\func_get_args();\n      $var  =& $_SESSION[self::$name];\n      $var2 =& $var;\n      foreach ($args as $i => $a){\n        if (!\\is_array($var)) {\n          $var = [];\n        }\n\n        if (!isset($var[$a])) {\n          if (\\count($args) >= $i) {\n            $var[$a] = [];\n          }\n          else{\n            break;\n          }\n        }\n\n        unset($var2);\n        $var2 =& $var[$a];\n        unset($var);\n        $var =& $var2;\n      }\n\n      $var        = null;\n      $this->data = isset($_SESSION[self::$name]) ? $_SESSION[self::$name] : [];\n      $this->close();\n      return $this;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 199,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "destroy",
            "returns": [],
            "arguments": []
        },
        "getId": {
            "name": "getId",
            "summary": "Executes a function on the session or a part of the session",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getId()\n  {\n    return $this->id;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 239,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Executes a function on the session or a part of the session\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "function",
                        "name": "$func"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Executes a function on the session or a part of the session\n   * @param function $func\n   * @return session\n   *\/"
        },
        "setDataState": {
            "name": "setDataState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDataState($name, $data)\n  {\n    if ($this->id) {\n      $this->set(md5(serialize($data)), $name, 'bbn-data-state');\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 245,
            "endLine": 250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setDataState",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDataState": {
            "name": "getDataState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDataState( $name)\n  {\n    if ($this->id) {\n      $this->get($name, 'bbn-data-state');\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 253,
            "endLine": 258,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDataState",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasDataState": {
            "name": "hasDataState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasDataState($name)\n  {\n    if ($this->id) {\n      return $this->get($name, 'bbn-data-state') ? true : false;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 261,
            "endLine": 268,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasDataState",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDataState": {
            "name": "isDataState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDataState($name, $data)\n  {\n    if ($this->id) {\n      return $this->get($name, 'bbn-data-state') === md5(serialize($data));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 271,
            "endLine": 278,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "isDataState",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "open": {
            "name": "open",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function open()\n  {\n    if (!$this->was_opened && !$this->isOpened()) {\n      if (!$this->once_opened) {\n        $this->once_opened = true;\n\n        if (defined('BBN_SESS_LIFETIME')) {\n          ini_set('session.gc_maxlifetime', BBN_SESS_LIFETIME);\n        }\n      }\n\n      session_start();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 281,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "open",
            "returns": [],
            "arguments": []
        },
        "close": {
            "name": "close",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function close()\n  {\n    if (!$this->was_opened && session_id()) {\n      session_write_close();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 299,
            "endLine": 306,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "close",
            "returns": [],
            "arguments": []
        },
        "_get_value": {
            "name": "_get_value",
            "summary": "Gets a reference to the part of the data corresponding to an array of indexes",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$this->_get_value(['index1', 'index2'])\n\/\/ Will return the content of $this->data['index1']['index2']"
                }
            ],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_value($args)\n  {\n    if ($this->id) {\n      $var =& $this->data;\n      foreach ($args as $a){\n        if (!isset($var[$a])) {\n          return null;\n        }\n\n        $var =& $var[$a];\n      }\n\n      return $var;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 319,
            "endLine": 333,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_value",
            "returns": [],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a reference to the part of the data corresponding to an array of indexes\n\n```php\n$this->_get_value(['index1', 'index2'])\n\/\/ Will return the content of $this->data['index1']['index2']\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$args"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a reference to the part of the data corresponding to an array of indexes\n   *\n   * ```php\n   * $this->_get_value(['index1', 'index2'])\n   * \/\/ Will return the content of $this->data['index1']['index2']\n   * ```\n   * @param $args\n   * @return null\n   *\/"
        },
        "_set_value": {
            "name": "_set_value",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Session.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _set_value($args)\n  {\n    if ($this->id) {\n      \/\/ The value is the first argument\n      $value = array_shift($args);\n      \/\/ Except if it's an array and there is only one argument\n      if (!count($args) && \\is_array($value)) {\n        \/\/ If the array is empty then the intention is to delete session data.\n        if (empty($value)) {\n          $this->data = [];\n\n        } elseif (bbn\\X::isAssoc($value)) {\n          $this->data = bbn\\X::mergeArrays($this->data, $value);\n        }\n      }\n      else{\n        $var =& $this->data;\n        foreach ($args as $i => $a){\n          if ($i === (\\count($args) - 1)) {\n            if (\\is_null($value)) {\n              unset($var[$a]);\n            }\n            else{\n              $var[$a] = $value;\n            }\n          }\n          else{\n            $var =& $var[$a];\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 336,
            "endLine": 370,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_value",
            "returns": [],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "singletonInit": {
            "name": "singletonInit",
            "summary": "Initialize the singleton by putting its own instance as static property.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Singleton.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function singletonInit(self $instance)\n  {\n    if (self::singletonExists()) {\n      throw new \\Exception(X::_(\"Impossible to create a new instance of\").' '.\\get_class($instance));\n    }\n\n    self::$singleton_exists = 1;\n    self::$singleton_instance = $instance;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Singleton",
            "startLine": 35,
            "endLine": 43,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "singletonInit",
            "returns": [],
            "arguments": [
                {
                    "name": "instance",
                    "position": 0,
                    "type": "self",
                    "type_arr": [
                        "self"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The instance object."
                }
            ],
            "doc": {
                "description": "Initialize the singleton by putting its own instance as static property.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "self",
                        "name": "$instance",
                        "description": "The instance object."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the singleton by putting its own instance as static property.\n   *\n   * @param self $instance The instance object.\n   * @return void\n   *\/"
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Singleton.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getInstance(): ?self\n  {\n    return self::singletonExists() ? self::$singleton_instance : null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Singleton",
            "startLine": 50,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getInstance",
            "returns": [
                null,
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the instance of the singleton or null.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the instance of the singleton or null.\n   * \n   * @return self\n   *\/"
        },
        "singletonExists": {
            "name": "singletonExists",
            "summary": "Returns true if the instance as been initiated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User\\Session",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Singleton.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function singletonExists(): bool\n  {\n    return self::$singleton_exists ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Singleton",
            "startLine": 60,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "singletonExists",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if the instance as been initiated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the instance as been initiated.\n   *\n   * @return bool\n   *\/"
        }
    },
    "properties": {
        "name": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Session"
            },
            "declaring_trait": "bbn\\User\\Session",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": "apst-app"
        },
        "was_opened": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Session"
            },
            "declaring_trait": "bbn\\User\\Session",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": false
        },
        "once_opened": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Session"
            },
            "declaring_trait": "bbn\\User\\Session",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": false
        },
        "data": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Session"
            },
            "declaring_trait": "bbn\\User\\Session",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "id": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Session"
            },
            "declaring_trait": "bbn\\User\\Session",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "singleton_instance": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Session"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Singleton",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "self",
                        "description": "An instance of the current class."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "singleton_exists": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User\\Session"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Singleton",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Will be true from the moment the instance exists."
                    }
                ]
            },
            "parent": false,
            "value": false
        }
    },
    "staticProperties": {
        "name": "apst-app",
        "singleton_instance": {},
        "singleton_exists": 1
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "bbn\\X": "X",
        "bbn\\Models\\Tts\\Singleton": "Singleton"
    },
    "dummyComments": [
        "\/**\n * @package user\n *\/",
        "\/**\n * A session management object for asynchronous PHP tasks\n *\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Apr 4, 2011, 23:23:55 +0000\n * @category  Authentication\n * @license   http:\/\/opensource.org\/licenses\/MIT MIT\n * @version 0.2r89\n * @todo Groups and hotlinks features\n * @todo Implement Cache for session requests' results?\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}