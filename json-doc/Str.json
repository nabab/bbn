{
    "doc": {
        "description": "Class text\nstring manipulation class\n\nThis class only uses static methods and has lots of alias for the escaping methods\n",
        "tags": {
            "package": "bbn",
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Strings",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.2r89\n"
        }
    },
    "name": "bbn\\Str",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
    "startLine": 21,
    "endLine": 1801,
    "contentConstructor": null,
    "methods": {
        "cast": {
            "name": "cast",
            "summary": "Converts any type of variable to a string.",
            "description": "```php\n$st = 122\nX::dump(\\bbn\\Str::cast($st));\n\/\/ (string) \"122\"\nX::dump(\\bbn\\Str::cast(1));\n\/\/ (string) \"1\"\nX::dump(\\bbn\\Str::cast(['foo' => 'bar'])\n\/\/ (string) \"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$st = 122\nX::dump(\\bbn\\Str::cast($st));\n\/\/ (string) \"122\"\nX::dump(\\bbn\\Str::cast(1));\n\/\/ (string) \"1\"\nX::dump(\\bbn\\Str::cast(['foo' => 'bar'])\n\/\/ (string) \"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if (\\is_array($st) || \\is_object($st)) {\n      return '';\n    }\n\n    return (string)$st;\n  }",
            "startLine": 48,
            "endLine": 55,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item to cast."
                }
            ]
        },
        "changeCase": {
            "name": "changeCase",
            "summary": "Converts the case of a string.",
            "description": "```php\n$st = 'TEST CASE';\nX::dump(\\bbn\\Str::changeCase($st, 'lower'));\n\/\/ (string) \"test case\"\nX::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n\/\/ (string) \"TEST CASE\"\nX::dump(\\bbn\\Str::changeCase('test case'));\n\/\/ (string) \"Test Case\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$st = 'TEST CASE';\nX::dump(\\bbn\\Str::changeCase($st, 'lower'));\n\/\/ (string) \"test case\"\nX::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n\/\/ (string) \"TEST CASE\"\nX::dump(\\bbn\\Str::changeCase('test case'));\n\/\/ (string) \"Test Case\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $case = 'x')\n  {\n    $st   = self::cast($st);\n    $case = substr(strtolower((string)$case), 0, 1);\n    switch ($case){\n      case \"l\":\n        $case = MB_CASE_LOWER;\n        break;\n      case \"u\":\n        $case = MB_CASE_UPPER;\n        break;\n      default:\n        $case = MB_CASE_TITLE;\n    }\n\n    if (!empty($st)) {\n      $st = mb_convert_case($st, $case);\n    }\n\n    return $st;\n  }",
            "startLine": 75,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item to convert."
                },
                {
                    "name": "case",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "x",
                    "default_name": "",
                    "description": "The case to convert to (\"lower\" or \"upper\"), default being the title case."
                }
            ]
        },
        "escapeAllQuotes": {
            "name": "escapeAllQuotes",
            "summary": "Escapes all quotes (single and double) from a given string.",
            "description": "```php\nX::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n\/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n\/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return addcslashes(self::cast($st), \"'\\\"\\\\\\r\\n\\t\");\n  }",
            "startLine": 109,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "escapeDquotes": {
            "name": "escapeDquotes",
            "summary": "Escapes the string in double quotes.",
            "description": "```php\nX::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return addcslashes(self::cast($st), \"\\\"\\\\\\r\\n\\t\");\n  }",
            "startLine": 126,
            "endLine": 129,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "escapeDquote": {
            "name": "escapeDquote",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "```php\nX::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
            "startLine": 143,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "escapeQuote": {
            "name": "escapeQuote",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "```php\nX::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
            "startLine": 160,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "escapeQuotes": {
            "name": "escapeQuotes",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "```php\nX::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeDquotes($st);\n  }",
            "startLine": 177,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "escapeSquotes": {
            "name": "escapeSquotes",
            "summary": "Escapes the string in quotes.",
            "description": "```php\nX::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return addcslashes(self::cast($st), \"'\\\\\\r\\n\\t\");\n  }",
            "startLine": 194,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "unescapeSquotes": {
            "name": "unescapeSquotes",
            "summary": "Unescapes the string in quotes.",
            "description": "```php\nX::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return stripcslashes(self::cast($st));\n  }",
            "startLine": 211,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "unescapeSquote": {
            "name": "unescapeSquote",
            "summary": "Unescapes the string in quotes.",
            "description": "```php\nX::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::unescapeSquotes($st);\n  }",
            "startLine": 228,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "```php\nX::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
            "startLine": 245,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "escapeApo": {
            "name": "escapeApo",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "```php\nX::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
            "startLine": 262,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "escapeSquote": {
            "name": "escapeSquote",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "```php\nX::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return self::escapeSquotes($st);\n  }",
            "startLine": 279,
            "endLine": 282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "cleanSpaces": {
            "name": "cleanSpaces",
            "summary": "Trims, and removes extra spaces (all more than one)",
            "description": "```php\nX::dump(Str::cleanSpaces(\" Hello     World\\n\\n\\n  (bool)!    \"));\n\/\/ (string)  \"Hello World (bool)!\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(Str::cleanSpaces(\" Hello     World\\n\\n\\n  (bool)!    \"));\n\/\/ (string)  \"Hello World (bool)!\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st)\n  {\n    return trim(preg_replace('\/\\s+\/', ' ', $st));\n  }",
            "startLine": 296,
            "endLine": 299,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ]
        },
        "cut": {
            "name": "cut",
            "summary": "Cuts a string (HTML and PHP tags stripped) to maximum length inserted.",
            "description": "```php\nX::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n\/\/ (string) \"Example...\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n\/\/ (string) \"Example...\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st, int $max = 15)\n  {\n    $st = self::cast($st);\n    $st = mb_ereg_replace('&nbsp;', ' ', $st);\n    $st = mb_ereg_replace('\\n', ' ', $st);\n    $st = strip_tags($st);\n    $st = html_entity_decode($st, ENT_QUOTES, 'UTF-8');\n    $st = self::cleanSpaces($st);\n    if (mb_strlen($st) >= $max) {\n      \/\/ Chars forbidden to finish with a string\n      $chars = [' ', '.'];\n      \/\/ Final chars\n      $ends = [];\n      \/\/ The string gets cut at $max\n      $st = mb_substr($st, 0, $max);\n      while (\\in_array(substr($st, -1), $chars)){\n        $st = substr($st, 0, -1);\n      }\n\n      $st .= '...';\n    }\n\n    return $st;\n  }",
            "startLine": 314,
            "endLine": 337,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to be cut."
                },
                {
                    "name": "max",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 15,
                    "default_name": "",
                    "description": "The maximum string length."
                }
            ]
        },
        "sanitize": {
            "name": "sanitize",
            "summary": "Strip special characters except the below:",
            "description": "- ~ , ; [ ] ( ) .\nAnd removes more that two trailing periods",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<ul>\n<li>~ , ; [ ] ( ) .\nAnd removes more that two trailing periods<\/li>\n<\/ul>"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st)\n  {\n    $file = mb_ereg_replace(\"([^\\w\\s\\d\\-_~,;\\[\\]\\(\\).])\", '', $st);\n    \/\/ Removes any run of periods (thanks falstro!)\n    $file = mb_ereg_replace(\"([\\.]{2,})\", '', $file);\n    return $file;\n  }",
            "startLine": 348,
            "endLine": 354,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "encodeFilename": {
            "name": "encodeFilename",
            "summary": "Returns a cross-platform filename for the file.",
            "description": "```php\nX::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n\/\/ (string) \"test_file_1.txt\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n\/\/ (string) \"test_file_1.txt\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $maxlength = 50, $extension = NULL, $is_path = false)\n  {\n    $st      = self::removeAccents(self::cast($st));\n    $allowed = '~\\-_.\\(\\[\\)\\]';\n\n    \/\/ Arguments order doesn't matter\n    $args = \\func_get_args();\n    foreach ($args as $i => $a){\n      if ($i > 0) {\n        if (\\is_string($a)) {\n          $extension = $a;\n        }\n        elseif (\\is_int($a)) {\n          $maxlength = $a;\n        }\n        elseif (\\is_bool($a)) {\n          $is_path = $a;\n        }\n      }\n    }\n\n    if (!\\is_int($maxlength)) {\n      $maxlength = mb_strlen($st);\n    }\n\n    if ($is_path) {\n      $allowed .= '\/';\n    }\n\n    if ($extension\n        && (self::fileExt($st) === self::changeCase($extension, 'lower'))\n    ) {\n      $st = substr($st, 0, -(\\strlen($extension) + 1));\n    }\n    elseif ($extension = self::fileExt($st)) {\n      $st = substr($st, 0, -(\\strlen($extension) + 1));\n    }\n\n    \/\/ Replace non allowed character with single space\n    $st = mb_ereg_replace(\"([^\\w\\d\".$allowed.\".])\", ' ', $st);\n\n    \/\/ Replace two or more spaces to one space\n    $st = mb_ereg_replace(\"\\s{2,}\", ' ', $st);\n\n    \/\/ Replace single spaces to under score\n    $st = mb_ereg_replace(\"\\s\", '_', $st);\n\n    \/\/ Remove the . character\n    $st = mb_ereg_replace(\"\\.\", '', $st);\n    ;\n    $res = mb_substr($st, 0, $maxlength);\n    if ($extension) {\n      $res .= '.' . $extension;\n    }\n\n    return $res;\n  }",
            "startLine": 371,
            "endLine": 427,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name as string."
                },
                {
                    "name": "maxlength",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": "",
                    "description": "The maximum filename length (without extension), default: \"50\"."
                },
                {
                    "name": "extension",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The extension of the file."
                },
                {
                    "name": "is_path",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "path   Tells if the slashes (\/) are authorized in the string"
                }
            ]
        },
        "encodeDbname": {
            "name": "encodeDbname",
            "summary": "Returns a corrected string for database naming.",
            "description": "```php\nX::dump(\\bbn\\Str::encodeDbname('my.database_name ? test  :,; !plus'));\n\/\/ (string) \"my_database_name_test_plus\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::encodeDbname('my.database_name ? test  :,; !plus'));\n\/\/ (string) \"my_database_name_test_plus\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st, $maxlength = 50)\n  {\n    $st  = self::removeAccents(self::cast($st));\n    $res = '';\n\n    if (!\\is_int($maxlength)) {\n      $maxlength = mb_strlen($st);\n    }\n\n    for ($i = 0; $i < $maxlength; $i++){\n      if (mb_ereg_match('[A-z0-9]', $substr = mb_substr($st, $i, 1))) {\n        $res .= $substr;\n      }\n      elseif ((mb_strlen($res) > 0)\n          && (mb_substr($res, -1) != '_')\n          && ($i < ( mb_strlen($st) - 1 ))\n      ) {\n        $res .= '_';\n      }\n    }\n\n    if (substr($res, -1) === '_') {\n      $res = substr($res, 0, -1);\n    }\n\n    return $res;\n  }",
            "startLine": 442,
            "endLine": 468,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name as string."
                },
                {
                    "name": "maxlength",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": "",
                    "description": "The maximum length, default: \"50\"."
                }
            ]
        },
        "fileExt": {
            "name": "fileExt",
            "summary": "Returns the file extension.",
            "description": "```php\n\/\/ (string) \"txt\"\nX::dump(Str::fileExt(\"\/test\/test.txt\"));\n\n\/\/ (array) [ \"test\", \"txt\", ]\nX::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt', true));\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\/\/ (string) \"txt\"\nX::dump(Str::fileExt(\"\/test\/test.txt\"));\n\n\/\/ (array) [ \"test\", \"txt\", ]\nX::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt', true));"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $file, bool $ar = false)\n  {\n    $file = self::cast($file);\n    if (mb_strrpos($file, '\/') !== false) {\n      $file = substr($file, mb_strrpos($file, '\/') + 1);\n    }\n\n    if (mb_strpos($file, '.') !== false) {\n      $p   = mb_strrpos($file, '.');\n      $f   = mb_substr($file, 0, $p);\n      $ext = mb_convert_case(mb_substr($file, $p + 1), MB_CASE_LOWER);\n      return $ar ? [$f, $ext] : $ext;\n    }\n\n    return $ar ? [$file, ''] : '';\n  }",
            "startLine": 486,
            "endLine": 501,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file path."
                },
                {
                    "name": "ar",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If \"true\" also returns the file path, default: \"false\"."
                }
            ]
        },
        "genpwd": {
            "name": "genpwd",
            "summary": "Returns a random password.",
            "description": "```php\nX::dump(\\bbn\\Str::genpwd());\n\/\/ (string) \"khc9P871w\"\nX::dump(\\bbn\\Str::genpwd(6, 4));\n\/\/ (string) \"dDEtxY\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::genpwd());\n\/\/ (string) \"khc9P871w\"\nX::dump(\\bbn\\Str::genpwd(6, 4));\n\/\/ (string) \"dDEtxY\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(int $int_max = NULL, int $int_min = NULL)\n  {\n    if (is_null($int_max) && is_null($int_min)) {\n      $int_max = 12;\n      $int_min = 8;\n    }\n    elseif (is_null($int_min)) {\n      $int_min = $int_max;\n    }\n    elseif (is_null($int_max)) {\n      $int_max = $int_min;\n    }\n\n    mt_srand();\n    $len = ($int_min > 0) && ($int_min < $int_max) ? random_int($int_min, $int_max) : $int_max;\n    $mdp = '';\n    for($i = 0; $i < $len; $i++){\n      \/\/ First character is a letter\n      $type = $i === 0 ? random_int(2, 3) : random_int(1, 3);\n      switch ($type){\n        case 1:\n          $mdp .= random_int(0,9);\n          break;\n        case 2:\n          $mdp .= \\chr(random_int(65,90));\n          break;\n        case 3:\n          $mdp .= \\chr(random_int(97,122));\n          break;\n      }\n    }\n\n    return $mdp;\n  }",
            "startLine": 518,
            "endLine": 551,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "int_max",
                    "position": 0,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "max Maximum password characters, default: \"12\"."
                },
                {
                    "name": "int_min",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "min Minimum password characters, default: \"6\"."
                }
            ]
        },
        "isJson": {
            "name": "isJson",
            "summary": "Checks if the string is a json string.",
            "description": "```php\nX::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n\/\/ (bool) true\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n\/\/ (bool) true"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if (\\is_string($st) && !empty($st)\n        && ( (substr($st, 0, 1) === '{') || (substr($st, 0, 1) === '[') )\n    ) {\n      json_decode($st);\n      return (json_last_error() == JSON_ERROR_NONE);\n    }\n\n    return false;\n  }",
            "startLine": 565,
            "endLine": 575,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string."
                }
            ]
        },
        "isNumber": {
            "name": "isNumber",
            "summary": "Checks if the item is a number.",
            "description": "Can take as many arguments and will return false if one of them is not a number.\n\n```php\nX::dump(\\bbn\\Str::isNumber([1, 2]));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isNumber(150);\n\/\/ (bool) 1\nX::dump(\\bbn\\Str::isNumber('150'));\n\/\/ (bool)  1\nX::dump(\\bbn\\Str::isNumber(1.5);\n\/\/ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Can take as many arguments and will return false if one of them is not a number.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isNumber([1, 2]));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isNumber(150);\n\/\/ (bool) 1\nX::dump(\\bbn\\Str::isNumber('150'));\n\/\/ (bool)  1\nX::dump(\\bbn\\Str::isNumber(1.5);\n\/\/ (bool) 1"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (empty($args = \\func_get_args())) {\n      return false;\n    }\n\n    foreach ($args as $a){\n      if (\\is_string($a)) {\n        if (!preg_match('\/^-?(?:\\d+|\\d*\\.\\d+)$\/', $a)) {\n          return false;\n        }\n      }\n      elseif (!\\is_int($a) && !\\is_float($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 596,
            "endLine": 614,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "isInteger": {
            "name": "isInteger",
            "summary": "Checks if the item is a integer.",
            "description": "Can take as many arguments and will return false if one of them is not an integer or the string of an integer.\n\n```php\nX::dump(\\bbn\\Str::isInteger(13.2));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isInteger(14));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isInteger('14'));\n\/\/ (bool) true\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Can take as many arguments and will return false if one of them is not an integer or the string of an integer.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isInteger(13.2));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isInteger(14));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isInteger('14'));\n\/\/ (bool) true"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if (!is_string($a) && !is_int($a) && !is_float($a)) {\n        return false;\n      }\n\n      if (is_string($a)) {\n        if (!preg_match('\/^-?(\\d+)$\/', (string)$a)) {\n          return false;\n        }\n      }\n      elseif (!\\is_int($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 633,
            "endLine": 652,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "isCleanPath": {
            "name": "isCleanPath",
            "summary": "Checks if \".. \\\\\" or \"..\/\" is contained in the parameter and it will return false if true.",
            "description": "```php\nX::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if (\\is_string($a)) {\n        if ((strpos($a, '..\/') !== false) || (strpos($a, '..\\\\') !== false)) {\n          return false;\n        }\n      }\n      else {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 670,
            "endLine": 685,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "isDecimal": {
            "name": "isDecimal",
            "summary": "Checks if the item is a decimal.",
            "description": "Can take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).\n\n```php\nX::dump(\\bbn\\Str::isDecimal(13.2));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDecimal('13.2'));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDecimal(14));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Can take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isDecimal(13.2));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDecimal('13.2'));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDecimal(14));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if (\\is_string($a)) {\n        if (!preg_match('\/^-?(\\d*\\.\\d+)$\/', $a)) {\n          return false;\n        }\n      }\n      elseif (!\\is_float($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 704,
            "endLine": 719,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "isUid": {
            "name": "isUid",
            "summary": "Checks if the string is a valid UID string.",
            "description": "```php\nStr::isUid('22e4f42122e4f42122e4f42122e4f421');\n\/\/ (bool) true\n$this->assertFalse(Str::isUid('22e4f42122e4f4212'));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "Str::isUid('22e4f42122e4f42122e4f42122e4f421');\n\/\/ (bool) true\n$this->assertFalse(Str::isUid('22e4f42122e4f4212'));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return \\is_string($st) && (\\strlen($st) === 32) && ctype_xdigit($st);\/\/ && !mb_detect_encoding($st);\n  }",
            "startLine": 735,
            "endLine": 738,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isBuid": {
            "name": "isBuid",
            "summary": "Checks if the string is a valid binary UID string.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if (\\is_string($st) && (\\strlen($st) === 16) && !ctype_print($st) && !ctype_space($st)) {\n      $enc = mb_detect_encoding($st, ['8bit', 'UTF-8']);\n      if (!$enc || ($enc === '8bit')) {\n        return preg_match('~[^\\x20-\\x7E\\t\\r\\n]~', $st) > 0;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 747,
            "endLine": 757,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isEmail": {
            "name": "isEmail",
            "summary": "Checks if the string is the correct type of e-mail address.",
            "description": "```php\nX::dump(\\bbn\\Str::isEmail('test@email.com'));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isEmail('test@email'));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isEmail('test@.com'));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isEmail('testemail.com'));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isEmail('test@email.com'));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isEmail('test@email'));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isEmail('test@.com'));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isEmail('testemail.com'));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($email)\n  {\n    if (function_exists('filter_var')) {\n      return filter_var($email,FILTER_VALIDATE_EMAIL) ? true : false;\n    }\n    else\n    {\n      $isValid = true;\n      $atIndex = mb_strrpos($email, \"@\");\n      if (\\is_bool($atIndex) && !$atIndex) {\n        $isValid = false;\n      }\n      else\n      {\n        $domain    = mb_substr($email, $atIndex + 1);\n        $local     = mb_substr($email, 0, $atIndex);\n        $localLen  = mb_strlen($local);\n        $domainLen = mb_strlen($domain);\n        \/\/  local part length exceeded\n        if ($localLen < 1 || $localLen > 64) {\n          $isValid = false;\n        }\n        \/\/  domain part length exceeded\n        elseif ($domainLen < 1 || $domainLen > 255) {\n          $isValid = false;\n        }\n        \/\/ local part starts or ends with '.'\n        elseif ($local[0] == '.' || $local[$localLen - 1] == '.') {\n          $isValid = false;\n        }\n        \/\/ local part has two consecutive dots\n        elseif (mb_ereg_match('\\\\.\\\\.', $local)) {\n          $isValid = false;\n        }\n        \/\/ character not valid in domain part\n        elseif (!mb_ereg_match('^[A-Za-z0-9\\\\-\\\\.]+$', $domain)) {\n          $isValid = false;\n        }\n        \/\/  domain part has two consecutive dots\n        elseif (mb_ereg_match('\\\\.\\\\.', $domain)) {\n          $isValid = false;\n        }\n        \/\/  character not valid in local part unless\n        elseif (!mb_ereg_match(\n          '^(\\\\\\\\.|[A-Za-z0-9!#%&`_=\\\\\/$\\'*+?^{}|~.-])+$'\n          ,str_replace(\"\\\\\\\\\",\"\",$local)\n        )\n        ) {\n          \/\/ local part is quoted\n          if (!mb_ereg_match('^\"(\\\\\\\\\"|[^\"])+\"$',str_replace(\"\\\\\\\\\",\"\",$local))) {\n            $isValid = false;\n          }\n        }\n      }\n\n      return $isValid;\n    }\n  }",
            "startLine": 777,
            "endLine": 834,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "email",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "E-mail address."
                }
            ]
        },
        "isUrl": {
            "name": "isUrl",
            "summary": "Checks if the argument is a valid URL string.",
            "description": "```php\nX::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n\/\/ (string) \"https:\/\/bbn.so\"\n\nX::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n\/\/ (string) \"https:\/\/bbn.so\"\n\nX::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return (bool)filter_var($st, FILTER_VALIDATE_URL);\n  }",
            "startLine": 851,
            "endLine": 854,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to perform"
                }
            ]
        },
        "isDomain": {
            "name": "isDomain",
            "summary": "Checks if the argument is a valid domain name.",
            "description": "```php\nX::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n\/\/ (string) false\n\nX::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n\/\/ (bool) true\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n\/\/ (string) false\n\nX::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n\/\/ (bool) true"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return (preg_match(\"\/^([a-z\\d](-*[a-z\\d])*)(\\.([a-z\\d](-*[a-z\\d])*))*$\/i\", $st) \/\/valid chars check\n      && preg_match(\"\/^.{1,253}$\/\", $st) \/\/overall length check\n      && preg_match(\"\/^[^\\.]{1,63}(\\.[^\\.]{1,63})*$\/\", $st)   ); \/\/length of each label\n  }",
            "startLine": 871,
            "endLine": 876,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to perform"
                }
            ]
        },
        "isIp": {
            "name": "isIp",
            "summary": "Checks if the argument is a valid ip address.",
            "description": "```php\nX::dump(\\bbn\\Str::isIp('198.162.0.1'));\n\/\/ (bool) true\n\nX::dump(\\bbn\\Str::isIp('29e4:4068:a401:f273:dcec:af8f:c8b3:c01c'));\n\/\/ (bool) true\n\nX::dump(\\bbn\\Str::isIp('198.162'));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isIp('198.162.0.1'));\n\/\/ (bool) true\n\nX::dump(\\bbn\\Str::isIp('29e4:4068:a401:f273:dcec:af8f:c8b3:c01c'));\n\/\/ (bool) true\n\nX::dump(\\bbn\\Str::isIp('198.162'));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return (bool)filter_var($st, FILTER_VALIDATE_IP);\n  }",
            "startLine": 896,
            "endLine": 899,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDateSql": {
            "name": "isDateSql",
            "summary": "Checks if the argument is in a valid SQL date format.",
            "description": "```php\nX::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    foreach (func_get_args() as $a) {\n      if (!Date::validateSQL($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 917,
            "endLine": 926,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "correctTypes": {
            "name": "correctTypes",
            "summary": "If it looks like an int or float type, the string variable is converted into the correct type.",
            "description": "```php\nX::dump(\\bbn\\Str::correctTypes(1230));\n\/\/ (int) 1230\nX::dump(\\bbn\\Str::correctTypes(12.30));\n\/\/ (float) 12.3\nX::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n\/\/ (float) 12.3\nX::dump(\\bbn\\Str::correctTypes([1230]));\n\/\/ (int) [1230]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::correctTypes(1230));\n\/\/ (int) 1230\nX::dump(\\bbn\\Str::correctTypes(12.30));\n\/\/ (float) 12.3\nX::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n\/\/ (float) 12.3\nX::dump(\\bbn\\Str::correctTypes([1230]));\n\/\/ (int) [1230]"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if (\\is_string($st)) {\n      if (self::isBuid($st)) {\n        $st = bin2hex($st);\n      }\n      else{\n        if (self::isJson($st)) {\n          if (strpos($st, '\": ') && ($json = json_decode($st))) {\n            return json_encode($json);\n          }\n\n          return $st;\n        }\n\n        $st = trim(trim($st, \" \"), \"\\t\");\n        if (self::isInteger($st)\n            && ((substr((string)$st, 0, 1) !== '0') || ($st === '0'))\n        ) {\n          $tmp = (int)$st;\n          if (($tmp < PHP_INT_MAX) && ($tmp > -PHP_INT_MAX)) {\n            return $tmp;\n          }\n        }\n        \/\/ If it is a decimal, not starting or ending with a zero\n        elseif (self::isDecimal($st)) {\n          return (float)$st;\n        }\n      }\n    }\n    elseif (\\is_array($st)) {\n      foreach ($st as $k => $v) {\n        $st[$k] = self::correctTypes($v);\n      }\n    }\n    elseif (\\is_object($st)) {\n      $vs = get_object_vars($st);\n      foreach ($vs as $k => $v) {\n        $st->$k = self::correctTypes($v);\n      }\n    }\n\n    return $st;\n  }",
            "startLine": 946,
            "endLine": 989,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "parseUrl": {
            "name": "parseUrl",
            "summary": "Returns an array containing any of the various components of the URL that are present.",
            "description": "```php\nX::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n\/* (array)\n[\n    'scheme' => 'http',\n    'host' => 'localhost',\n    'path' => '\/phpmyadmin\/',\n    'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n    'url' => 'http:\/\/localhost\/phpmyadmin\/',\n    'params' => [\n        'db' => 'test',\n        'table' => 'users',\n        'server' => '1',\n        'target' => '',\n        'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n    ],\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n\/* (array)\n[\n    'scheme' => 'http',\n    'host' => 'localhost',\n    'path' => '\/phpmyadmin\/',\n    'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n    'url' => 'http:\/\/localhost\/phpmyadmin\/',\n    'params' => [\n        'db' => 'test',\n        'table' => 'users',\n        'server' => '1',\n        'target' => '',\n        'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n    ],\n]"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    $url = self::cast($url);\n    $r   = X::mergeArrays(parse_url($url), ['url' => $url,'query' => '','params' => []]);\n    if (strpos($url,'?') > 0) {\n      $p          = explode('?',$url);\n      $r['url']   = $p[0];\n      $r['query'] = $p[1];\n      $ps         = explode('&',$r['query']);\n      foreach ($ps as $p){\n        $px                  = explode('=',$p);\n        $r['params'][$px[0]] = $px[1];\n      }\n    }\n\n    return $r;\n  }",
            "startLine": 1017,
            "endLine": 1033,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The url."
                }
            ]
        },
        "parsePath": {
            "name": "parsePath",
            "summary": "Replaces backslash with slash in a path string. Forbids the use of ..\/",
            "description": "```php\nX::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n\/\/ (string) \"\/home\/user\/Desktop\"\n\n X::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop'));\n\/\/ (string) \"\"\n\nX::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop', true));\n\/\/ (string) \"home\/user\/Desktop\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n\/\/ (string) \"\/home\/user\/Desktop\"\n\n X::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop'));\n\/\/ (string) \"\"\n\nX::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop', true));\n\/\/ (string) \"home\/user\/Desktop\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, $allow_parent = false)\n  {\n    $path = str_replace('\\\\', '\/', \\strval($path));\n    $path = str_replace('\/.\/', '\/', \\strval($path));\n    while (strpos($path, '\/\/') !== false){\n      $path = str_replace('\/\/', '\/', $path);\n    }\n\n    if (strpos($path, '..\/') !== false) {\n      if (!$allow_parent) {\n        return '';\n      }\n\n      $bits       = array_reverse(explode('\/', $path));\n      $path       = '';\n      $num_parent = 0;\n      foreach ($bits as $i => $b){\n        if ($b === '..') {\n          $num_parent++;\n        }\n        elseif ($b !== '.') {\n          if ($num_parent) {\n            $num_parent--;\n          }\n          else{\n            $path = empty($path) ? $b : $b.'\/'.$path;\n          }\n        }\n      }\n    }\n\n    return $path;\n  }",
            "startLine": 1054,
            "endLine": 1086,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path."
                },
                {
                    "name": "allow_parent",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "parent If true ..\/ is allowed in the path (and will become normalized)."
                }
            ]
        },
        "removeAccents": {
            "name": "removeAccents",
            "summary": "Replaces accented characters with their character without the accent.",
            "description": "```php\nX::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3 \u00c3\u00b9\u00e8\"));\n\/\/ (string) TA\u00a8st FA\u00aclA\u00a8 A\u00b2A\u00a8A A\u00b9e\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3 \u00c3\u00b9\u00e8\"));\n\/\/ (string) TA\u00a8st FA\u00aclA\u00a8 A\u00b2A\u00a8A A\u00b9e\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $st      = trim(\\mb_ereg_replace('&(.)(tilde|circ|grave|acute|uml|ring|oelig);', '\\\\1', self::cast($st)));\n    $search  = explode(\",\",\"\u00e7,\u00e6,\u0153,\u00e1,\u00e9,\u00ed,\u00f3,\u00fa,\u00e0,\u00e8,\u00ec,\u00f2,\u00f9,\u00e4,\u00eb,\u00ef,\u00f6,\u00fc,\u00ff,\u00e2,\u00ea,\u00ee,\u00f4,\u00fb,\u00e5,e,i,\u00f8,u,\u0105,\u0144,\u0142,\u017a,\u0119,\u00c0,\u00c1,\u00c2,\u00c3,\u00c4,\u00c7,\u00c8,\u00c9,\u00ca,\u00cb,\u00cc,\u00cd,\u00ce,\u00cf,\u00d1,\u00d2,\u00d3,\u00d4,\u00d5,\u00d6,\u00d9,\u00da,\u00db,\u00dc,\u00dd,\u0141,\u015a\");\n    $replace = explode(\",\",\"c,ae,oe,a,e,i,o,u,a,e,i,o,u,a,e,i,o,u,y,a,e,i,o,u,a,e,i,o,u,a,n,l,z,e,A,A,A,A,A,C,E,E,E,E,I,I,I,I,N,O,O,O,O,O,U,U,U,U,Y,L,S\");\n    foreach ($search as $i => $s) {\n      $st = \\mb_ereg_replace($s, $replace[$i], $st);\n    }\n\n    return $st;\n  }",
            "startLine": 1100,
            "endLine": 1110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string."
                }
            ]
        },
        "checkName": {
            "name": "checkName",
            "summary": "Checks if a string complies with SQL naming convention.",
            "description": "```php\nX::dump(\\bbn\\Str::checkName(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkName(\"Pa ul\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::checkName(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkName(\"Pa ul\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    \/\/ Each argument must be a string made of letters, numbers and underscores\n    foreach ($args as $a) {\n      if (\\is_array($a)) {\n        foreach ($a as $b) {\n          if (!self::checkName($b)) {\n            return false;\n          }\n        }\n      }\n\n      if (!\\is_string($a)) {\n        return false;\n      }\n\n      return \\preg_match('\/^[A-z0-9_]*$\/', $a);\n    }\n\n    return true;\n  }",
            "startLine": 1125,
            "endLine": 1146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "checkFilename": {
            "name": "checkFilename",
            "summary": "Checks if a string doesn't contain a filesystem path.",
            "description": "```php\nX::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if (($a === '..' || $a === '.') || !\\is_string($a) || (strpos($a, '\/') !== false) || (strpos($a, '\\\\') !== false)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "startLine": 1161,
            "endLine": 1171,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "checkPath": {
            "name": "checkPath",
            "summary": "Checks if every bit of a string doesn't contain a filesystem path.",
            "description": "```php\nX::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($args = \\func_get_args()) {\n      foreach ($args as $a){\n        if (!is_string($a) || strpos($a, '\/', -1) !== false || strpos($a, '\\\\', -1) !== false ) {\n          return false;\n        }\n\n        $bits = X::split($a, DIRECTORY_SEPARATOR);\n        foreach ($bits as $b){\n          if (!self::checkFilename($b)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 1186,
            "endLine": 1206,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "hasSlash": {
            "name": "hasSlash",
            "summary": "Returns \"true\" if slash or backslash are present.",
            "description": "```php\nX::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n\/\/ (bool) 1\nX::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n\/\/ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n\/\/ (bool) 1\nX::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n\/\/ (bool) 1"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if ((strpos($a, '\/') !== false) || (strpos($a, '\\\\') !== false)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1223,
            "endLine": 1233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "getNumbers": {
            "name": "getNumbers",
            "summary": "Extracts all digits from a string.",
            "description": "```php\nX::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n\/\/ (string) \"1324\"\n\nX::dump(\\bbn\\Str::getNumbers(\"test example\"));\n\/\/ (string) \"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n\/\/ (string) \"1324\"\n\nX::dump(\\bbn\\Str::getNumbers(\"test example\"));\n\/\/ (string) \"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return preg_replace(\"\/[^0-9]\/\", '', self::cast($st));\n  }",
            "startLine": 1250,
            "endLine": 1253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string."
                }
            ]
        },
        "makeReadable": {
            "name": "makeReadable",
            "summary": "Returns the argumented value, replacing not standard objects (not stdClass) by their class name.",
            "description": "```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n\n$user = \\bbn\\User::getInstance();\n\n$myArray = [\n 'user' => $user,\n 'obj' => $myObj,\n 'val' => 23,\n 'text' => \"Hello!\"\n];\n\nX::hdump(\\bbn\\Str::makeReadable($user));\n\/\/ (string) \"appui\/user\"\n\nX::hdump(\\bbn\\Str::makeReadable($myArray));\n\/* (array)\n[\n  \"user\" => \"appui\\\\user\",\n  \"obj\" => [\n            \"myProp1\" => 23,\n            \"myProp2\" => \"world\",\n            \"myProp3\" => [1, 5, 6,],\n      ],\n  \"val\" => 23,\n  \"text\" => \"Hello!\",\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n\n$user = \\bbn\\User::getInstance();\n\n$myArray = [\n 'user' => $user,\n 'obj' => $myObj,\n 'val' => 23,\n 'text' => \"Hello!\"\n];\n\nX::hdump(\\bbn\\Str::makeReadable($user));\n\/\/ (string) \"appui\/user\"\n\nX::hdump(\\bbn\\Str::makeReadable($myArray));\n\/* (array)\n[\n  \"user\" => \"appui\\\\user\",\n  \"obj\" => [\n            \"myProp1\" => 23,\n            \"myProp2\" => \"world\",\n            \"myProp3\" => [1, 5, 6,],\n      ],\n  \"val\" => 23,\n  \"text\" => \"Hello!\",\n]"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($o)\n  {\n    $is_array = false;\n    if (\\is_object($o)) {\n      $class = \\get_class($o);\n      if ($class === 'stdClass') {\n        $is_array = 1;\n      }\n      else{\n        return $class;\n      }\n    }\n\n    if (\\is_array($o) || $is_array) {\n      $r = [];\n      foreach ($o as $k => $v){\n        $r[$k] = self::makeReadable($v);\n      }\n\n      return $r;\n    }\n\n    return $o;\n  }",
            "startLine": 1294,
            "endLine": 1317,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "o",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item."
                }
            ]
        },
        "export": {
            "name": "export",
            "summary": "Returns a variable in a mode that is directly usable by PHP.",
            "description": "```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n$myObj->myProp4 =\"\";\n\nX::hdump(\\bbn\\Str::export($myObj,true));\n\/*(string)\n\"{\n     \"myProp1\"  =>  23,\n     \"myProp2\"  =>  \"world\",\n     \"myProp3\"  =>  [ 1, 5, 6, ],\n}\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n$myObj->myProp4 =\"\";\n\nX::hdump(\\bbn\\Str::export($myObj,true));\n\/*(string)\n\"{\n     \"myProp1\"  =>  23,\n     \"myProp2\"  =>  \"world\",\n     \"myProp3\"  =>  [ 1, 5, 6, ],\n}\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($o, $remove_empty = false, $lev = 1)\n  {\n    $st    = '';\n    $space = '    ';\n    if (\\is_object($o) && ($cls = \\get_class($o)) && (strpos($cls, 'stdClass') === false)) {\n      $st .= \"Object \".$cls;\n      \/*\n      $o = array_filter((array)$o, function($k) use ($cls){\n        if ( strpos($k, '*') === 0 ){\n          return false;\n        }\n        if ( strpos($k, $cls) === 0 ){\n          return false;\n        }\n        return true;\n      }, ARRAY_FILTER_USE_KEY);\n      *\/\n    }\n    elseif (\\is_object($o) || \\is_array($o)) {\n      $is_object = \\is_object($o);\n      $is_array  = !$is_object && \\is_array($o);\n      $is_assoc  = $is_object || ($is_array && X::isAssoc($o));\n      $st       .= $is_assoc ? '{' : '[';\n      $st       .= PHP_EOL;\n      foreach ($o as $k => $v){\n        if ($remove_empty && ( ( \\is_string($v) && empty($v) ) || ( \\is_array($v) && \\count($v) === 0 ) )) {\n          continue;\n        }\n\n        $st .= str_repeat($space, $lev);\n        if ($is_assoc) {\n          $st .= ( \\is_string($k) ? '\"'.self::escapeDquote($k).'\"' : $k ). ': ';\n        }\n\n        if (\\is_array($v)) {\n          $st .= self::export($v, $remove_empty, $lev + 1);\n        }\n        elseif ($v === 0) {\n          $st .= '0';\n        }\n        elseif (null === $v) {\n          $st .= 'null';\n        }\n        elseif (\\is_bool($v)) {\n          $st .= $v === false ? 'false' : 'true';\n        }\n        elseif (\\is_int($v) || \\is_float($v)) {\n          $st .= $v;\n        }\n        elseif (is_string($v)) {\n          if (self::isBuid($v)) {\n            $st .= '0x'.bin2hex($v);\n          }\n          elseif (!$remove_empty || !empty($v)) {\n            $st .= '\"'.self::escapeDquote($v).'\"';\n          }\n        }\n        else {\n          try{\n            $cls = get_class($v);\n          }\n          catch (\\Exception $e){\n            $st .= '\"Unknown\"';\n          }\n\n          if ($cls) {\n            if ($cls === 'stdClass') {\n              $st .= self::export($v, $remove_empty, $lev + 1);\n            }\n            else{\n              $st .= 'Object '.$cls;\n            }\n          }\n        }\n\n        $st .= ','.PHP_EOL;\n      }\n\n      $st .= str_repeat($space, $lev - 1);\n      $st .= $is_assoc ? '}' : ']';\n    }\n\n    return $st;\n  }",
            "startLine": 1344,
            "endLine": 1427,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "o",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item to be."
                },
                {
                    "name": "remove_empty",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "empty Default: \"false\"."
                },
                {
                    "name": "lev",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": "",
                    "description": "Default: \"1\"."
                }
            ]
        },
        "replaceOnce": {
            "name": "replaceOnce",
            "summary": "Replaces part of a string. If the part is not found, the method returns the string without change.",
            "description": "```php\nX::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is hot\"\nX::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is cold\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is hot\"\nX::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is cold\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($search, $replace, $subject)\n  {\n    $pos = strpos($subject, $search);\n    if ($pos !== false) {\n      return substr_replace($subject, $replace, $pos, \\strlen($search));\n    }\n\n    return $subject;\n  }",
            "startLine": 1445,
            "endLine": 1453,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to search"
                },
                {
                    "name": "replace",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to replace"
                },
                {
                    "name": "subject",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string into search"
                }
            ]
        },
        "removeComments": {
            "name": "removeComments",
            "summary": "Removes the comments.",
            "description": "```php\n var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n \/\/ (string) \"\"\n\nvar_dump(\\bbn\\Str::removeComments(\"\/\/ this is a comment\"));\n \/\/ (string) \"\"\n\nvar_dump(\\bbn\\Str::removeComments(\"\/** this is a comment *\\\/\"));\n \/\/ (string) \"\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n \/\/ (string) \"\"\n\nvar_dump(\\bbn\\Str::removeComments(\"\/\/ this is a comment\"));\n \/\/ (string) \"\"\n\nvar_dump(\\bbn\\Str::removeComments(\"\/** this is a comment *\\\/\"));\n \/\/ (string) \"\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st)\n  {\n    $pattern = '\/<!--.*?-->|(?:(?:\\\/\\*(?:[^*]|(?:\\*+[^*\\\/]))*\\*+\\\/)|(?:(?<!\\:|\\\\\\|\\')\\\/\\\/.*))\/';\n    return trim(preg_replace($pattern, '', $st));\n  }",
            "startLine": 1473,
            "endLine": 1477,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "saySize": {
            "name": "saySize",
            "summary": "Converts the bytes to another unit form.",
            "description": "```php\n var_dump(\\bbn\\Str::saySize(50000000000, 'G'));\n \/\/ (string) \"46.57 G\"\n\nvar_dump(\\bbn\\Str::saySize(1048576, 'M', 0));\n \/\/ (string) \"1 M\"\n\nvar_dump(\\bbn\\Str::saySize(1048576, 'T', 6));\n \/\/ (string) \"0.000001 T\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::saySize(50000000000, 'G'));\n \/\/ (string) \"46.57 G\"\n\nvar_dump(\\bbn\\Str::saySize(1048576, 'M', 0));\n \/\/ (string) \"1 M\"\n\nvar_dump(\\bbn\\Str::saySize(1048576, 'T', 6));\n \/\/ (string) \"0.000001 T\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($bytes, $unit = 'B', $percision = 2)\n  {\n    \/\/ pretty printer for byte values\n    $i     = 0;\n    $units = ['B', 'K', 'M', 'G', 'T'];\n\n    if (!in_array(($unit = strtoupper($unit)), $units, true)) {\n      throw new \\Exception(X::_('Invalid provided unit'));\n    }\n\n    while (isset($units[$i]) && $unit !== $units[$i]){\n      $i++;\n      $bytes \/= 1024;\n    }\n\n    $st = $unit === 'B' ? \"%d %s\" : \"%0.{$percision}f %s\";\n\n    return sprintf($st, $bytes, $units[$i]);\n  }",
            "startLine": 1500,
            "endLine": 1518,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "bytes",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bytes"
                },
                {
                    "name": "unit",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "B",
                    "default_name": ""
                },
                {
                    "name": "percision",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 2,
                    "default_name": ""
                }
            ]
        },
        "convertSize": {
            "name": "convertSize",
            "summary": "Converts size from one unit to another.",
            "description": "```php\n var_dump(\\bbn\\Str::convertSize(1, 'GB', 'B'));\n \/\/ (string) \"1073741824B\"\n\nvar_dump(\\bbn\\Str::convertSize(1, 'TB', 'GB'));\n \/\/ (string) \"1024GB\"\n\nvar_dump(\\bbn\\Str::convertSize(500000, 'MB', 'TB', 6));\n \/\/ (string) \"0.47684TB\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::convertSize(1, 'GB', 'B'));\n \/\/ (string) \"1073741824B\"\n\nvar_dump(\\bbn\\Str::convertSize(1, 'TB', 'GB'));\n \/\/ (string) \"1024GB\"\n\nvar_dump(\\bbn\\Str::convertSize(500000, 'MB', 'TB', 6));\n \/\/ (string) \"0.47684TB\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($size, $unit_orig = 'B', $unit_dest = 'MB', $percision = 0)\n  {\n    $unit_orig = strtoupper($unit_orig);\n    $unit_dest = strtoupper($unit_dest);\n\n    if (strlen($unit_orig) <= 1 && $unit_orig !== 'B') {\n      $unit_orig .= 'B';\n    }\n\n    if (strlen($unit_dest) <= 1 && $unit_dest !== 'B') {\n      $unit_dest .= 'B';\n    }\n\n    $units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n    if (!in_array($unit_orig, $units)) {\n      throw new \\Exception(X::_(\"Invalid original unit\"));\n    }\n\n    if (!in_array($unit_dest, $units)) {\n      throw new \\Exception(X::_(\"Invalid destination unit\"));\n    }\n\n    $bytes      = $size;\n    $orig_index = array_search($unit_orig, $units);\n    $dest_index = array_search($unit_dest, $units);\n\n    \/\/ If destination unit is smaller than the original then reverse the units array\n    if ($dest_index < $orig_index) {\n      $units      = array_reverse($units);\n      $orig_index = array_search($unit_orig, $units);\n      $dest_index = array_search($unit_dest, $units);\n      $reversed   = true;\n    }\n\n    for ($i = $orig_index + 1; $i <= $dest_index; $i++) {\n      if (isset($reversed)) {\n        $bytes *= 1024;\n      } else {\n        $bytes \/= 1024;\n      }\n    }\n\n    return round($bytes, $percision) . $unit_dest;\n  }",
            "startLine": 1542,
            "endLine": 1586,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "size",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unit_orig",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "B",
                    "default_name": "",
                    "description": "orig"
                },
                {
                    "name": "unit_dest",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "MB",
                    "default_name": "",
                    "description": "dest"
                },
                {
                    "name": "percision",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "checkJson": {
            "name": "checkJson",
            "summary": "Checks whether a JSON string is valid or not. If $return_error is set to true, the error will be returned.",
            "description": "```php\n var_dump(\\bbn\\Str::checkJson(\"{\"foo\":\"bar\"}\"));\n \/\/ (bool) true\n\nvar_dump(\\bbn\\Str::checkJson(\"foo\"));\n \/\/ (bool) false\n\nvar_dump(\\bbn\\Str::checkJson(\"foo\", true));\n \/\/ (string) \"Syntax error, malformed JSON\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::checkJson(\"{\"foo\":\"bar\"}\"));\n \/\/ (bool) true\n\nvar_dump(\\bbn\\Str::checkJson(\"foo\"));\n \/\/ (bool) false\n\nvar_dump(\\bbn\\Str::checkJson(\"foo\", true));\n \/\/ (string) \"Syntax error, malformed JSON\""
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $json, bool $return_error = false)\n  {\n    json_decode($json);\n    $error = json_last_error();\n    if ($error === JSON_ERROR_NONE) {\n      return true;\n    }\n\n    if (!$return_error) {\n      return false;\n    }\n\n    switch ($error) {\n      case JSON_ERROR_DEPTH:\n        return X::_('Maximum stack depth exceeded');\n      case JSON_ERROR_STATE_MISMATCH:\n        return X::_('State mismatch (invalid or malformed JSON)');\n      case JSON_ERROR_CTRL_CHAR:\n        return X::_('Unexpected control character found');\n      case JSON_ERROR_SYNTAX:\n        return X::_('Syntax error, malformed JSON');\n      case JSON_ERROR_UTF8:\n        return X::_('Malformed UTF-8 characters, possibly incorrectly encoded');\n      default:\n        return X::_('Unknown error');\n    }\n  }",
            "startLine": 1607,
            "endLine": 1633,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "json",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "return_error",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "error"
                }
            ]
        },
        "asVar": {
            "name": "asVar",
            "summary": "Places quotes around a string",
            "description": "``php\n var_dump(\\bbn\\Str::asVar('foo'));\n \/\/ (string) '\"foo\"'\n\n var_dump(\\bbn\\Str::asVar(\"foo\", \"'\"));\n \/\/ (string) \"'foo'\"\n\nvar_dump(\\bbn\\Str::asVar(\"foo'bar\"));\n \/\/ (string) '\"foo\\'bar\"'\n\nvar_dump(\\bbn\\Str::asVar(\"foo'bar\", \"'\"));\n \/\/ (string) \"'foo\\'bar'\"\n\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>``php\nvar_dump(\\bbn\\Str::asVar('foo'));\n\/\/ (string) '&quot;foo&quot;'<\/p>\n<p>var_dump(\\bbn\\Str::asVar(&quot;foo&quot;, &quot;'&quot;));\n\/\/ (string) &quot;'foo'&quot;<\/p>\n<p>var_dump(\\bbn\\Str::asVar(&quot;foo'bar&quot;));\n\/\/ (string) '&quot;foo\\'bar&quot;'<\/p>\n<p>var_dump(\\bbn\\Str::asVar(&quot;foo'bar&quot;, &quot;'&quot;));\n\/\/ (string) &quot;'foo\\'bar'&quot;<\/p>\n<pre><code><\/code><\/pre>"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $var, $quote = '\"')\n  {\n    if (($quote !== \"'\") && ($quote !== '\"')) {\n      $quote = '\"';\n    }\n\n    $st = $quote === \"'\" ? self::escapeSquotes($var) : self::escapeDquotes($var);\n    return $quote.$st.$quote;\n  }",
            "startLine": 1658,
            "endLine": 1666,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "var",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "quote",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "\"",
                    "default_name": ""
                }
            ]
        },
        "markdown2html": {
            "name": "markdown2html",
            "summary": "Transforms a markdown string into HTML.",
            "description": "```php\n var_dump(\\bbn\\Str::markdown2html(\"# foo\"));\n \/\/ (string) '<h1>foo<\/h1>'\n\nvar_dump(\\bbn\\Str::markdown2html(\"**foo**\"));\n \/\/ (string) '<p><strong>foo<\/strong><\/p>'\n\nvar_dump(\\bbn\\Str::markdown2html(\"**foo**\", true));\n \/\/ (string) '<strong>foo<\/strong>'\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::markdown2html(\"# foo\"));\n \/\/ (string) '<h1>foo<\/h1>'\n\nvar_dump(\\bbn\\Str::markdown2html(\"**foo**\"));\n \/\/ (string) '<p><strong>foo<\/strong><\/p>'\n\nvar_dump(\\bbn\\Str::markdown2html(\"**foo**\", true));\n \/\/ (string) '<strong>foo<\/strong>'"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st, bool $single_line = false)\n  {\n    if (!self::$_markdownParser) {\n      self::$_markdownParser = new \\Parsedown();\n    }\n\n    return $single_line ? self::$_markdownParser->line($st) : self::$_markdownParser->text($st);\n  }",
            "startLine": 1687,
            "endLine": 1694,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The markdown string"
                },
                {
                    "name": "single_line",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "line If true the result will not contain paragraph or block element"
                }
            ]
        },
        "toCamel": {
            "name": "toCamel",
            "summary": "Converts the given string to camel case.",
            "description": "```php\n var_dump(\\bbn\\Str::toCamel(\"foo bar\"));\n \/\/ (string) 'fooBar'\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::toCamel(\"foo bar\"));\n \/\/ (string) 'fooBar'"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st, string $sep = '_', bool $first = false)\n  {\n    $st = strtolower($st);\n\n    $res = str_replace(' ', '', ucwords(str_replace($sep, ' ', $st)));\n    if (!$first) {\n        $res[0] = strtolower($res[0]);\n    }\n\n    return $res;\n  }",
            "startLine": 1710,
            "endLine": 1720,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "sep",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "_",
                    "default_name": "",
                    "description": "A separator"
                },
                {
                    "name": "first",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Capitalize first character if true"
                }
            ]
        },
        "html2text": {
            "name": "html2text",
            "summary": "Converts HTML to text replacing paragraphs and brs with new lines.",
            "description": "```php\n var_dump(\\bbn\\Str::html2text(\"<h1>foo bar<\/h1><br>baz\"));\n \/\/ (string) 'foo bar\nbaz'\n\nvar_dump(\\bbn\\Str::html2text('<h1>foo bar<\/h1><br>', false));\n \/\/ (string) 'foo bar'\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::html2text(\"<h1>foo bar<\/h1><br>baz\"));\n \/\/ (string) 'foo bar\nbaz'\n\nvar_dump(\\bbn\\Str::html2text('<h1>foo bar<\/h1><br>', false));\n \/\/ (string) 'foo bar'"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st, bool $nl = true)\n  {\n    $st = trim($st);\n    if (empty($st)) {\n      return '';\n    }\n\n    $filter = $nl ? ['p', 'br'] : [];\n    $tmp    = strip_tags($st, $filter);\n    if (empty($tmp)) {\n      $config = array(\n        'clean' => 'yes',\n        'output-html' => 'yes',\n      );\n      $tidy   = tidy_parse_string($st, $config, 'utf8');\n      $tidy->cleanRepair();\n      $st = strip_tags((string)$tidy, $filter);\n    }\n    else {\n      $st = $tmp;\n    }\n\n    if (empty($st)) {\n      return '';\n    }\n\n    if (!$nl) {\n      return $st;\n    }\n\n    $st = preg_replace(\"\/<p[^>]*?>\/i\", \"\", $st);\n    $st = str_ireplace(\"<\/p>\", PHP_EOL.PHP_EOL, $st);\n    $p  = '\/<br[^>]*>\/i';\n    $r  = PHP_EOL;\n    return trim(html_entity_decode(preg_replace($p, $r, $st)));\n  }",
            "startLine": 1738,
            "endLine": 1773,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The HTML string"
                },
                {
                    "name": "nl",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "text2html": {
            "name": "text2html",
            "summary": "Converts text to HTML replacing new lines with brs.",
            "description": "```php\n var_dump(\\bbn\\Str::text2html(\"foo\\n bar\"));\n \/\/ (string) '<p>foo<br> bar<\/p>'\n\nvar_dump(\\bbn\\Str::text2html(\"foo\\n bar\", false));\n \/\/ (string) 'foo<br> bar'\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::text2html(\"foo\\n bar\"));\n \/\/ (string) '<p>foo<br> bar<\/p>'\n\nvar_dump(\\bbn\\Str::text2html(\"foo\\n bar\", false));\n \/\/ (string) 'foo<br> bar'"
                }
            ],
            "file": "bbn\\Str",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $st, bool $paragraph = true)\n  {\n    if ($paragraph) {\n      $bits = X::split($st, PHP_EOL.PHP_EOL);\n      $st   = '<p>'.X::join($bits, '<\/p><p>').'<\/p>';\n    }\n\n    return str_replace(PHP_EOL, '<br>', $st);\n  }",
            "startLine": 1790,
            "endLine": 1798,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The text string"
                },
                {
                    "name": "paragraph",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "_markdownParser": {}
    },
    "constants": null,
    "numMethods": 53,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_markdownParser": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "Str",
    "summary": "Class text",
    "description": "string manipulation class\n\nThis class only uses static methods and has lots of alias for the escaping methods",
    "description_parts": [
        {
            "type": "text",
            "content": "<p>string manipulation class<\/p>\n<p>This class only uses static methods and has lots of alias for the escaping methods<\/p>"
        }
    ]
}