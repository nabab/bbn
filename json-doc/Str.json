{
    "doc": {
        "description": "Class text\nstring manipulation class\n\nThis class only uses static methods and has lots of alias for the escaping methods\n",
        "tags": {
            "package": "bbn",
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Strings",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.2r89\n"
        }
    },
    "name": "bbn\\Str",
    "namespace": true,
    "realName": "Str",
    "realNamespace": "bbn",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Str.php",
    "startLine": 25,
    "endLine": 1941,
    "numMethods": 58,
    "numProperties": 2,
    "numConstants": 0,
    "numStaticProperties": 2,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_markdownParser": null,
        "_htmlSanitizer": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "Str",
    "contentConstructor": null,
    "methods": {
        "cast": {
            "name": "cast",
            "summary": "Converts any type of variable to a string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$st = 122\nX::dump(\\bbn\\Str::cast($st));\n\/\/ (string) \"122\"\nX::dump(\\bbn\\Str::cast(1));\n\/\/ (string) \"1\"\nX::dump(\\bbn\\Str::cast(['foo' => 'bar'])\n\/\/ (string) \"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function cast($st)\n  {\n    if (is_array($st) || is_object($st)) {\n      return '';\n    }\n\n    if (is_string($st)) {\n      return normalizer_normalize($st);\n    }\n\n    return (string)$st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 60,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cast",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item to cast."
                }
            ],
            "doc": {
                "description": "Converts any type of variable to a string.\n\n```php\n$st = 122\nX::dump(\\bbn\\Str::cast($st));\n\/\/ (string) \"122\"\nX::dump(\\bbn\\Str::cast(1));\n\/\/ (string) \"1\"\nX::dump(\\bbn\\Str::cast(['foo' => 'bar'])\n\/\/ (string) \"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st",
                        "description": "The item to cast."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Converts any type of variable to a string.\n   *\n   * ```php\n   * $st = 122\n   * X::dump(\\bbn\\Str::cast($st));\n   * \/\/ (string) \"122\"\n   * X::dump(\\bbn\\Str::cast(1));\n   * \/\/ (string) \"1\"\n   * X::dump(\\bbn\\Str::cast(['foo' => 'bar'])\n   * \/\/ (string) \"\"\n   * ```\n   *\n   * @param mixed $st The item to cast.\n   * @return string\n   *\/"
        },
        "changeCase": {
            "name": "changeCase",
            "summary": "Converts the case of a string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$st = 'TEST CASE';\nX::dump(\\bbn\\Str::changeCase($st, 'lower'));\n\/\/ (string) \"test case\"\nX::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n\/\/ (string) \"TEST CASE\"\nX::dump(\\bbn\\Str::changeCase('test case'));\n\/\/ (string) \"Test Case\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function changeCase($st, $case = 'x'): string\n  {\n    $st   = self::cast($st);\n    $case = substr(strtolower((string)$case), 0, 1);\n    switch ($case){\n      case \"l\":\n        $case = MB_CASE_LOWER;\n        break;\n      case \"u\":\n        $case = MB_CASE_UPPER;\n        break;\n      default:\n        $case = MB_CASE_TITLE;\n    }\n\n    if (!empty($st)) {\n      $st = mb_convert_case($st, $case);\n    }\n\n    return $st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 91,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "changeCase",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item to convert."
                },
                {
                    "name": "case",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "x",
                    "default_name": "",
                    "description": "The case to convert to (\"lower\" or \"upper\"), default being the title case."
                }
            ],
            "doc": {
                "description": "Converts the case of a string.\n\n```php\n$st = 'TEST CASE';\nX::dump(\\bbn\\Str::changeCase($st, 'lower'));\n\/\/ (string) \"test case\"\nX::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n\/\/ (string) \"TEST CASE\"\nX::dump(\\bbn\\Str::changeCase('test case'));\n\/\/ (string) \"Test Case\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st",
                        "description": "The item to convert."
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$case",
                        "description": "The case to convert to (\"lower\" or \"upper\"), default being the title case."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Converts the case of a string.\n   *\n   * ```php\n   * $st = 'TEST CASE';\n   * X::dump(\\bbn\\Str::changeCase($st, 'lower'));\n   * \/\/ (string) \"test case\"\n   * X::dump(\\bbn\\Str::changeCase('TEsT Case', 'upper'));\n   * \/\/ (string) \"TEST CASE\"\n   * X::dump(\\bbn\\Str::changeCase('test case'));\n   * \/\/ (string) \"Test Case\"\n   * ```\n   *\n   * @param mixed $st   The item to convert.\n   * @param mixed $case The case to convert to (\"lower\" or \"upper\"), default being the title case.\n   * @return string\n   *\/"
        },
        "escapeAllQuotes": {
            "name": "escapeAllQuotes",
            "summary": "Escapes all quotes (single and double) from a given string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n\/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escapeAllQuotes($st, $as_html = false): string\n  {\n    return self::escapeDquotes(self::escapeSquotes($st, $as_html), $as_html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 125,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeAllQuotes",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Escapes all quotes (single and double) from a given string.\n\n```php\nX::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n\/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Escapes all quotes (single and double) from a given string.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeDquotes('the \"Gay Pride\" is is Putin\\'s favorite'));\n   * \/\/ (string) \"the \\\"Gay Pride\\\" is is Putin\\'s favorite\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "escapeDquotes": {
            "name": "escapeDquotes",
            "summary": "Escapes the string in double quotes.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escapeDquotes($st, $as_html = false): string\n  {\n    if ($as_html) {\n      return str_replace('\"', '&#34;', $st);\n    }\n\n    return addcslashes(self::cast($st), \"\\\"\\\\\\r\\n\\t\");\n  }",
            "parent": false,
            "trait": false,
            "startLine": 142,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeDquotes",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Escapes the string in double quotes.\n\n```php\nX::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Escapes the string in double quotes.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeDquotes('this is the house \"Mary\"'));\n   * \/\/ (string) \"this is the house \\\"Mary\\\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "escapeDquote": {
            "name": "escapeDquote",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escapeDquote($st, $as_html = false): string\n  {\n    return self::escapeDquotes($st, $as_html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 163,
            "endLine": 166,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeDquote",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Synonym of \"escape_dquotes\".\n\n```php\nX::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Synonym of \"escape_dquotes\".\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeDquote('this is the house \"Mary\"'));\n   * \/\/ (string) \"this is the house \\\"Mary\\\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "escapeQuote": {
            "name": "escapeQuote",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escapeQuote($st, $as_html = false): string\n  {\n    return self::escapeAllQuotes($st, $as_html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeQuote",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Synonym of \"escape_dquotes\".\n\n```php\nX::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Synonym of \"escape_dquotes\".\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeQuote('this is the house \"Mary\"'));\n   * \/\/ (string) \"this is the house \\\"Mary\\\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "escapeQuotes": {
            "name": "escapeQuotes",
            "summary": "Synonym of \"escape_dquotes\".",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escapeQuotes($st, $as_html = false): string\n  {\n    return self::escapeAllQuotes($st, $as_html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 197,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeQuotes",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Synonym of \"escape_dquotes\".\n\n```php\nX::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n\/\/ (string) \"this is the house \\\"Mary\\\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Synonym of \"escape_dquotes\".\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeQuotes('this is the house \"Mary\"'));\n   * \/\/ (string) \"this is the house \\\"Mary\\\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "escapeSquotes": {
            "name": "escapeSquotes",
            "summary": "Escapes the string in quotes.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escapeSquotes($st, $as_html = false): string\n  {\n    if ($as_html) {\n      return str_replace(\"'\", '&#39;', $st);\n    }\n\n    return addcslashes(self::cast($st), \"'\\\\\\r\\n\\t\");\n  }",
            "parent": false,
            "trait": false,
            "startLine": 214,
            "endLine": 221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeSquotes",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Escapes the string in quotes.\n\n```php\nX::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Escapes the string in quotes.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n   * \/\/ (string)  \"Today\\'s \"newspaper\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "unescapeSquotes": {
            "name": "unescapeSquotes",
            "summary": "Unescapes the string in quotes.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function unescapeSquotes($st, $as_html = false): string \n  {\n    if ($as_html) {\n      return str_replace('&#39;', \"'\", $st);\n    }\n\n    return stripcslashes(self::cast($st));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 235,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "unescapeSquotes",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Unescapes the string in quotes.\n\n```php\nX::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Unescapes the string in quotes.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n   * \/\/ (string)  \"Today\\'s \"newspaper\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "unescapeSquote": {
            "name": "unescapeSquote",
            "summary": "Unescapes the string in quotes.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function unescapeSquote($st, $as_html = false): string\n  {\n    return self::unescapeSquotes($st, $as_html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 256,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "unescapeSquote",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Unescapes the string in quotes.\n\n```php\nX::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Unescapes the string in quotes.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeSquotes(\"Today's \\\"newspaper\\\"\"));\n   * \/\/ (string)  \"Today\\'s \"newspaper\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "escape": {
            "name": "escape",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escape($st, $as_html = false): string\n  {\n    return self::escapeAllQuotes($st, $as_html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 273,
            "endLine": 276,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escape",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Synonym of \"escape_squotes\".\n\n```php\nX::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Synonym of \"escape_squotes\".\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escape(\"Today's \\\"newspaper\\\"\"));\n   * \/\/ (string)  \"Today\\'s \"newspaper\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "escapeApo": {
            "name": "escapeApo",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escapeApo($st, $as_html = false): string\n  {\n    return self::escapeSquotes($st, $as_html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 290,
            "endLine": 293,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeApo",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Synonym of \"escape_squotes\".\n\n```php\nX::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Synonym of \"escape_squotes\".\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeApo(\"Today's \\\"newspaper\\\"\"));\n   * \/\/ (string)  \"Today\\'s \"newspaper\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "escapeSquote": {
            "name": "escapeSquote",
            "summary": "Synonym of \"escape_squotes\".",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function escapeSquote($st, $as_html = false): string\n  {\n    return self::escapeSquotes($st, $as_html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 307,
            "endLine": 310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "escapeSquote",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                },
                {
                    "name": "as_html",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Synonym of \"escape_squotes\".\n\n```php\nX::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n\/\/ (string)  \"Today\\'s \"newspaper\"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Synonym of \"escape_squotes\".\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::escapeSquote(\"Today's \\\"newspaper\\\"\"));\n   * \/\/ (string)  \"Today\\'s \"newspaper\"\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "cleanSpaces": {
            "name": "cleanSpaces",
            "summary": "Trims, and removes extra spaces (all more than one)",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(Str::cleanSpaces(\" Hello     World\\n\\n\\n  (bool)!    \"));\n\/\/ (string)  \"Hello World (bool)!\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function cleanSpaces(string $st): string\n  {\n    return trim(preg_replace('\/\\s+\/', ' ', $st));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 324,
            "endLine": 327,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cleanSpaces",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to escape."
                }
            ],
            "doc": {
                "description": "Trims, and removes extra spaces (all more than one)\n\n```php\nX::dump(Str::cleanSpaces(\" Hello     World\\n\\n\\n  (bool)!    \"));\n\/\/ (string)  \"Hello World (bool)!\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to escape."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Trims, and removes extra spaces (all more than one)\n   *\n   * ```php\n   * X::dump(Str::cleanSpaces(\" Hello     World\\n\\n\\n  (bool)!    \"));\n   * \/\/ (string)  \"Hello World (bool)!\"\n   * ```\n   *\n   * @param string $st The string to escape.\n   * @return string\n   *\/"
        },
        "cut": {
            "name": "cut",
            "summary": "Cuts a string (HTML and PHP tags stripped) to maximum length inserted.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n\/\/ (string) \"Example...\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function cut(string $st, int $max = 15): string\n  {\n    $st = self::cast($st);\n    $st = self::html2text($st);\n    $st = mb_ereg_replace('\\n', ' ', $st);\n    $st = self::cleanSpaces($st);\n    if (mb_strlen($st) >= $max) {\n      \/\/ Chars forbidden to finish with a string\n      $chars = [' ', '.'];\n      \/\/ The string gets cut at $max\n      $st = mb_substr($st, 0, $max);\n      while (\\in_array(substr($st, -1), $chars)){\n        $st = substr($st, 0, -1);\n      }\n\n      $st .= '...';\n    }\n\n    return $st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 342,
            "endLine": 361,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cut",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to be cut."
                },
                {
                    "name": "max",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 15,
                    "default_name": "",
                    "description": "The maximum string length."
                }
            ],
            "doc": {
                "description": "Cuts a string (HTML and PHP tags stripped) to maximum length inserted.\n\n```php\nX::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n\/\/ (string) \"Example...\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to be cut."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$max",
                        "description": "The maximum string length."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Cuts a string (HTML and PHP tags stripped) to maximum length inserted.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::cut(\"<!-- HTML Document --> Example text\", 7));\n   * \/\/ (string) \"Example...\"\n   * ```\n   *\n   * @param string $st  The string to be cut.\n   * @param int    $max The maximum string length.\n   * @return string\n   *\/"
        },
        "sanitize": {
            "name": "sanitize",
            "summary": "Strip special characters except the below:",
            "description": "- ~ , ; [ ] ( ) .\nAnd removes more that two trailing periods",
            "description_parts": [
                {
                    "type": "text",
                    "content": "- ~ , ; [ ] ( ) .\nAnd removes more that two trailing periods"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function sanitize(string $st): string\n  {\n    $file = mb_ereg_replace(\"([^\\w\\s\\d\\-_~,;\\[\\]\\(\\).])\", '', $st);\n    \/\/ Removes any run of periods (thanks falstro!)\n    $file = mb_ereg_replace(\"([\\.]{2,})\", '', $file);\n    return $file;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 372,
            "endLine": 378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "sanitize",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Strip special characters except the below:\n- ~ , ; [ ] ( ) .\nAnd removes more that two trailing periods\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Strip special characters except the below:\n   * - ~ , ; [ ] ( ) .\n   * And removes more that two trailing periods\n   *\n   * @param string $st\n   * @return string\n   *\/"
        },
        "encodeFilename": {
            "name": "encodeFilename",
            "summary": "Returns a cross-platform filename for the file.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n\/\/ (string) \"test_file_1.txt\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function encodeFilename($st, $maxlength = 50, $extension = null, $is_path = false): string\n  {\n    $st      = self::removeAccents(self::cast($st));\n    $allowed = '~\\-_.\\(\\[\\)\\]';\n\n    \/\/ Arguments order doesn't matter\n    $args = \\func_get_args();\n    foreach ($args as $i => $a){\n      if ($i > 0) {\n        if (\\is_string($a)) {\n          $extension = $a;\n        }\n        elseif (\\is_int($a)) {\n          $maxlength = $a;\n        }\n        elseif (\\is_bool($a)) {\n          $is_path = $a;\n        }\n      }\n    }\n\n    if (!\\is_int($maxlength)) {\n      $maxlength = mb_strlen($st);\n    }\n\n    if ($is_path) {\n      $allowed .= '\/';\n    }\n\n    if ($extension\n        && (self::fileExt($st) === self::changeCase($extension, 'lower'))\n    ) {\n      $st = substr($st, 0, -(\\strlen($extension) + 1));\n    }\n    elseif ($extension = self::fileExt($st)) {\n      $st = substr($st, 0, -(\\strlen($extension) + 1));\n    }\n\n    \/\/ Replace non allowed character with single space\n    $st = mb_ereg_replace(\"([^\\w\\d\".$allowed.\".])\", ' ', $st);\n\n    \/\/ Replace two or more spaces to one space\n    $st = mb_ereg_replace(\"\\s{2,}\", ' ', $st);\n\n    \/\/ Replace single spaces to under score\n    $st = mb_ereg_replace(\"\\s\", '_', $st);\n\n    \/\/ Remove the . character\n    $st = mb_ereg_replace(\"\\.\", '', $st);\n    ;\n    $res = mb_substr($st, 0, $maxlength);\n    if ($extension) {\n      $res .= '.' . $extension;\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 395,
            "endLine": 451,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "encodeFilename",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name as string."
                },
                {
                    "name": "maxlength",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": "",
                    "description": "The maximum filename length (without extension), default: \"50\"."
                },
                {
                    "name": "extension",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The extension of the file."
                },
                {
                    "name": "is_path",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "path   Tells if the slashes (\/) are authorized in the string"
                }
            ],
            "doc": {
                "description": "Returns a cross-platform filename for the file.\n\n```php\nX::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n\/\/ (string) \"test_file_1.txt\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The name as string."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$maxlength",
                        "description": "The maximum filename length (without extension), default: \"50\"."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$extension",
                        "description": "The extension of the file."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$is",
                        "description": "path   Tells if the slashes (\/) are authorized in the string"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a cross-platform filename for the file.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::encodeFilename('test file\/,1', 15, 'txt'));\n   * \/\/ (string) \"test_file_1.txt\"\n   * ```\n   *\n   * @param string $st        The name as string.\n   * @param int    $maxlength The maximum filename length (without extension), default: \"50\".\n   * @param string $extension The extension of the file.\n   * @param bool   $is_path   Tells if the slashes (\/) are authorized in the string\n   * @return string\n   *\/"
        },
        "encodeDbname": {
            "name": "encodeDbname",
            "summary": "Returns a corrected string for database naming.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::encodeDbname('my.database_name ? test  :,; !plus'));\n\/\/ (string) \"my_database_name_test_plus\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function encodeDbname($st, $maxlength = 50): string\n  {\n    $st  = self::removeAccents(self::cast($st));\n    $res = '';\n\n    if (!\\is_int($maxlength)) {\n      $maxlength = mb_strlen($st);\n    }\n\n    for ($i = 0; $i < $maxlength; $i++){\n      if (mb_ereg_match('[A-z0-9]', $substr = mb_substr($st, $i, 1))) {\n        $res .= $substr;\n      }\n      elseif ((mb_strlen($res) > 0)\n          && (mb_substr($res, -1) != '_')\n          && ($i < ( mb_strlen($st) - 1 ))\n      ) {\n        $res .= '_';\n      }\n    }\n\n    if (substr($res, -1) === '_') {\n      $res = substr($res, 0, -1);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 466,
            "endLine": 492,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "encodeDbname",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name as string."
                },
                {
                    "name": "maxlength",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 50,
                    "default_name": "",
                    "description": "The maximum length, default: \"50\"."
                }
            ],
            "doc": {
                "description": "Returns a corrected string for database naming.\n\n```php\nX::dump(\\bbn\\Str::encodeDbname('my.database_name ? test  :,; !plus'));\n\/\/ (string) \"my_database_name_test_plus\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The name as string."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$maxlength",
                        "description": "The maximum length, default: \"50\"."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a corrected string for database naming.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::encodeDbname('my.database_name ? test  :,; !plus'));\n   * \/\/ (string) \"my_database_name_test_plus\"\n   * ```\n   *\n   * @param string $st        The name as string.\n   * @param int    $maxlength The maximum length, default: \"50\".\n   * @return string\n   *\/"
        },
        "fileExt": {
            "name": "fileExt",
            "summary": "Returns the file extension.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\/\/ (string) \"txt\"\nX::dump(Str::fileExt(\"\/test\/test.txt\"));\n\n\/\/ (array) [ \"test\", \"txt\", ]\nX::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt', true));"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function fileExt(string $file, bool $ar = false, bool $keepCase = false)\n  {\n    $file = self::cast($file);\n    if (mb_strrpos($file, '\/') !== false) {\n      $file = substr($file, mb_strrpos($file, '\/') + 1);\n    }\n\n    if (mb_strpos($file, '.') !== false) {\n      $p   = mb_strrpos($file, '.');\n      $ext = mb_substr($file, $p + 1);\n      if (!$keepCase) {\n        $ext = mb_convert_case($ext, MB_CASE_LOWER);\n      }\n\n      if (!$ar) {\n        return $ext;\n      }\n \n      return [mb_substr($file, 0, $p), $ext];\n    }\n\n    return $ar ? [$file, ''] : '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 510,
            "endLine": 532,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "fileExt",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file path."
                },
                {
                    "name": "ar",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If \"true\" also returns the file path, default: \"false\"."
                },
                {
                    "name": "keepCase",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the file extension.\n\n```php\n\/\/ (string) \"txt\"\nX::dump(Str::fileExt(\"\/test\/test.txt\"));\n\n\/\/ (array) [ \"test\", \"txt\", ]\nX::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt', true));\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "The file path."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$ar",
                        "description": "If \"true\" also returns the file path, default: \"false\"."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the file extension.\n   *\n   * ```php\n   * \/\/ (string) \"txt\"\n   * X::dump(Str::fileExt(\"\/test\/test.txt\"));\n   *\n   * \/\/ (array) [ \"test\", \"txt\", ]\n   * X::dump(\\bbn\\Str::fileExt('\/home\/user\/Desktop\/test.txt', true));\n   * ```\n   *\n   * @param string $file The file path.\n   * @param bool   $ar   If \"true\" also returns the file path, default: \"false\".\n   * @return string|array\n   *\/"
        },
        "genpwd": {
            "name": "genpwd",
            "summary": "Returns a random password.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::genpwd());\n\/\/ (string) \"khc9P871w\"\nX::dump(\\bbn\\Str::genpwd(6, 4));\n\/\/ (string) \"dDEtxY\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function genpwd(?int $int_max = null, ?int $int_min = null): string\n  {\n    if (is_null($int_max) && is_null($int_min)) {\n      $int_max = 12;\n      $int_min = 8;\n    }\n    elseif (is_null($int_min)) {\n      $int_min = $int_max;\n    }\n    elseif (is_null($int_max)) {\n      $int_max = $int_min;\n    }\n\n    mt_srand();\n    $len = ($int_min > 0) && ($int_min < $int_max) ? random_int($int_min, $int_max) : $int_max;\n    $mdp = '';\n    for($i = 0; $i < $len; $i++){\n      \/\/ First character is a letter\n      $type = $i === 0 ? random_int(2, 3) : random_int(1, 3);\n      switch ($type){\n        case 1:\n          $mdp .= random_int(0,9);\n          break;\n        case 2:\n          $mdp .= \\chr(random_int(65,90));\n          break;\n        case 3:\n          $mdp .= \\chr(random_int(97,122));\n          break;\n      }\n    }\n\n    return $mdp;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 549,
            "endLine": 582,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "genpwd",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "int_max",
                    "position": 0,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "max Maximum password characters, default: \"12\"."
                },
                {
                    "name": "int_min",
                    "position": 1,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "min Minimum password characters, default: \"6\"."
                }
            ],
            "doc": {
                "description": "Returns a random password.\n\n```php\nX::dump(\\bbn\\Str::genpwd());\n\/\/ (string) \"khc9P871w\"\nX::dump(\\bbn\\Str::genpwd(6, 4));\n\/\/ (string) \"dDEtxY\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$int",
                        "description": "max Maximum password characters, default: \"12\"."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$int",
                        "description": "min Minimum password characters, default: \"6\"."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a random password.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::genpwd());\n   * \/\/ (string) \"khc9P871w\"\n   * X::dump(\\bbn\\Str::genpwd(6, 4));\n   * \/\/ (string) \"dDEtxY\"\n   * ```\n   *\n   * @param int $int_max Maximum password characters, default: \"12\".\n   * @param int $int_min Minimum password characters, default: \"6\".\n   * @return string\n   *\/"
        },
        "isHTML": {
            "name": "isHTML",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isHTML($st)\n  {\n    if (\\is_string($st) && !empty($st)) {\n      return strip_tags($st) !== $st;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 585,
            "endLine": 592,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isHTML",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isJson": {
            "name": "isJson",
            "summary": "Checks if the string is a json string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n\/\/ (bool) true"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isJson($st)\n  {\n    if (\\is_string($st) && !empty($st)\n        && ( (substr($st, 0, 1) === '{') || (substr($st, 0, 1) === '[') )\n    ) {\n      json_decode($st);\n      return (json_last_error() == JSON_ERROR_NONE);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 606,
            "endLine": 616,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isJson",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string."
                }
            ],
            "doc": {
                "description": "Checks if the string is a json string.\n\n```php\nX::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n\/\/ (bool) true\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the string is a json string.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isJson('{\"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25}'));\n   * \/\/ (bool) true\n   * ```\n   *\n   * @param string $st The string.\n   * @return bool\n   *\/"
        },
        "isNumber": {
            "name": "isNumber",
            "summary": "Checks if the item is a number.",
            "description": "Can take as many arguments and will return false if one of them is not a number.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Can take as many arguments and will return false if one of them is not a number."
                },
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isNumber([1, 2]));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isNumber(150);\n\/\/ (bool) 1\nX::dump(\\bbn\\Str::isNumber('150'));\n\/\/ (bool)  1\nX::dump(\\bbn\\Str::isNumber(1.5);\n\/\/ (bool) 1"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isNumber(): bool\n  {\n    if (empty($args = \\func_get_args())) {\n      return false;\n    }\n\n    foreach ($args as $a){\n      if (\\is_string($a)) {\n        if (!preg_match('\/^-?(?:\\d+|\\d*\\.\\d+)$\/', $a)) {\n          return false;\n        }\n      }\n      elseif (!\\is_int($a) && !\\is_float($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 637,
            "endLine": 655,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isNumber",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the item is a number.\nCan take as many arguments and will return false if one of them is not a number.\n\n```php\nX::dump(\\bbn\\Str::isNumber([1, 2]));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isNumber(150);\n\/\/ (bool) 1\nX::dump(\\bbn\\Str::isNumber('150'));\n\/\/ (bool)  1\nX::dump(\\bbn\\Str::isNumber(1.5);\n\/\/ (bool) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st",
                        "description": "The item to be tested."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the item is a number.\n   * Can take as many arguments and will return false if one of them is not a number.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isNumber([1, 2]));\n   * \/\/ (bool) false\n   * X::dump(\\bbn\\Str::isNumber(150);\n   * \/\/ (bool) 1\n   * X::dump(\\bbn\\Str::isNumber('150'));\n   * \/\/ (bool)  1\n   * X::dump(\\bbn\\Str::isNumber(1.5);\n   * \/\/ (bool) 1\n   * ```\n   *\n   * @param mixed $st The item to be tested.\n   * @return bool\n   *\/"
        },
        "getNameFromIndex": {
            "name": "getNameFromIndex",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getNameFromIndex($num) {\n    $numeric = $num % 26;\n    $letter = chr(65 + $numeric);\n    $num2 = intval($num \/ 26);\n    if ($num2 > 0) {\n        return self::getNameFromIndex($num2 - 1) . $letter;\n    } else {\n        return $letter;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 657,
            "endLine": 666,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getNameFromIndex",
            "returns": [],
            "arguments": [
                {
                    "name": "num",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isInteger": {
            "name": "isInteger",
            "summary": "Checks if the item is a integer.",
            "description": "Can take as many arguments and will return false if one of them is not an integer or the string of an integer.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Can take as many arguments and will return false if one of them is not an integer or the string of an integer."
                },
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isInteger(13.2));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isInteger(14));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isInteger('14'));\n\/\/ (bool) true"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isInteger(): bool\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if (!is_string($a) && !is_int($a) && !is_float($a)) {\n        return false;\n      }\n\n      if (is_float($a)) {\n        $a = (string)$a;\n      }\n\n      if (is_string($a)) {\n        if (!preg_match('\/^-?(\\d+)$\/', (string)$a)) {\n          return false;\n        }\n      }\n      elseif (!\\is_int($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 685,
            "endLine": 708,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInteger",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the item is a integer.\nCan take as many arguments and will return false if one of them is not an integer or the string of an integer.\n\n```php\nX::dump(\\bbn\\Str::isInteger(13.2));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isInteger(14));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isInteger('14'));\n\/\/ (bool) true\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st",
                        "description": "The item to be tested."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the item is a integer.\n   * Can take as many arguments and will return false if one of them is not an integer or the string of an integer.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isInteger(13.2));\n   * \/\/ (bool) false\n   * X::dump(\\bbn\\Str::isInteger(14));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::isInteger('14'));\n   * \/\/ (bool) true\n   * ```\n   *\n   * @param mixed $st The item to be tested.\n   * @return bool\n   *\/"
        },
        "isCleanPath": {
            "name": "isCleanPath",
            "summary": "Checks if \".. \\\\\" or \"..\/\" is contained in the parameter and it will return false if true.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isCleanPath(): bool\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if (\\is_string($a)) {\n        if ((strpos($a, '..\/') !== false) || (strpos($a, '..\\\\') !== false)) {\n          return false;\n        }\n      }\n      else {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 726,
            "endLine": 741,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isCleanPath",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if \".. \\\\\" or \"..\/\" is contained in the parameter and it will return false if true.\n\n```php\nX::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n\/\/ (bool) false\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st",
                        "description": "The item to be tested."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if \".. \\\\\" or \"..\/\" is contained in the parameter and it will return false if true.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isCleanPath(\"\/home\/user\/Images\"));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::isCleanPath(\"..\/home\/user\/Images\"));\n   * \/\/ (bool) false\n   * X::dump(\\bbn\\Str::isCleanPath(\"..\\\\home\\user\\Images\"));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @param mixed $st The item to be tested.\n   * @return bool\n   *\/"
        },
        "isDecimal": {
            "name": "isDecimal",
            "summary": "Checks if the item is a decimal.",
            "description": "Can take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Can take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float)."
                },
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isDecimal(13.2));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDecimal('13.2'));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDecimal(14));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isDecimal(): bool\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if (\\is_string($a)) {\n        if (!preg_match('\/^-?(\\d*\\.\\d+)$\/', $a)) {\n          return false;\n        }\n      }\n      elseif (!\\is_float($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 760,
            "endLine": 775,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDecimal",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the item is a decimal.\nCan take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).\n\n```php\nX::dump(\\bbn\\Str::isDecimal(13.2));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDecimal('13.2'));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDecimal(14));\n\/\/ (bool) false\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st",
                        "description": "The item to be tested."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the item is a decimal.\n   * Can take many arguments and it will return false if one of them is not a decimal or the string of a decimal (float).\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isDecimal(13.2));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::isDecimal('13.2'));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::isDecimal(14));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @param mixed $st The item to be tested.\n   * @return bool\n   *\/"
        },
        "isUid": {
            "name": "isUid",
            "summary": "Checks if the string is a valid UID string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "Str::isUid('22e4f42122e4f42122e4f42122e4f421');\n\/\/ (bool) true\n$this->assertFalse(Str::isUid('22e4f42122e4f4212'));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isUid($st): bool\n  {\n    return \\is_string($st) && (\\strlen($st) === 32) && ctype_xdigit($st);\/\/ && !mb_detect_encoding($st);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 791,
            "endLine": 794,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isUid",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the string is a valid UID string.\n\n```php\nStr::isUid('22e4f42122e4f42122e4f42122e4f421');\n\/\/ (bool) true\n$this->assertFalse(Str::isUid('22e4f42122e4f4212'));\n\/\/ (bool) false\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the string is a valid UID string.\n   *\n   * ```php\n   * Str::isUid('22e4f42122e4f42122e4f42122e4f421');\n   * \/\/ (bool) true\n   * $this->assertFalse(Str::isUid('22e4f42122e4f4212'));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @param string $st\n   * @return boolean\n   *\/"
        },
        "isBuid": {
            "name": "isBuid",
            "summary": "Checks if the string is a valid binary UID string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isBuid($st): bool\n  {\n    if (\\is_string($st) && (\\strlen($st) === 16) && !ctype_print($st) && !ctype_space($st)) {\n      if (!mb_check_encoding($st, 'UTF-8')) {\n        return preg_match('~[^\\x20-\\x7E\\t\\r\\n]~', $st) > 0;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 803,
            "endLine": 812,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isBuid",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the string is a valid binary UID string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the string is a valid binary UID string.\n   *\n   * @param string $st\n   * @return boolean\n   *\/"
        },
        "isEmail": {
            "name": "isEmail",
            "summary": "Checks if the string is the correct type of e-mail address.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isEmail('test@email.com'));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isEmail('test@email'));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isEmail('test@.com'));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isEmail('testemail.com'));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isEmail($email): bool\n  {\n    if (function_exists('filter_var')) {\n      return filter_var($email,FILTER_VALIDATE_EMAIL) ? true : false;\n    }\n    else\n    {\n      $isValid = true;\n      $atIndex = mb_strrpos($email, \"@\");\n      if (\\is_bool($atIndex) && !$atIndex) {\n        $isValid = false;\n      }\n      else\n      {\n        $domain    = mb_substr($email, $atIndex + 1);\n        $local     = mb_substr($email, 0, $atIndex);\n        $localLen  = mb_strlen($local);\n        $domainLen = mb_strlen($domain);\n        \/\/  local part length exceeded\n        if ($localLen < 1 || $localLen > 64) {\n          $isValid = false;\n        }\n        \/\/  domain part length exceeded\n        elseif ($domainLen < 1 || $domainLen > 255) {\n          $isValid = false;\n        }\n        \/\/ local part starts or ends with '.'\n        elseif ($local[0] == '.' || $local[$localLen - 1] == '.') {\n          $isValid = false;\n        }\n        \/\/ local part has two consecutive dots\n        elseif (mb_ereg_match('\\\\.\\\\.', $local)) {\n          $isValid = false;\n        }\n        \/\/ character not valid in domain part\n        elseif (!mb_ereg_match('^[A-Za-z0-9\\\\-\\\\.]+$', $domain)) {\n          $isValid = false;\n        }\n        \/\/  domain part has two consecutive dots\n        elseif (mb_ereg_match('\\\\.\\\\.', $domain)) {\n          $isValid = false;\n        }\n        \/\/  character not valid in local part unless\n        elseif (!mb_ereg_match(\n          '^(\\\\\\\\.|[A-Za-z0-9!#%&`_=\\\\\/$\\'*+?^{}|~.-])+$'\n          ,str_replace(\"\\\\\\\\\",\"\",$local)\n        )\n        ) {\n          \/\/ local part is quoted\n          if (!mb_ereg_match('^\"(\\\\\\\\\"|[^\"])+\"$',str_replace(\"\\\\\\\\\",\"\",$local))) {\n            $isValid = false;\n          }\n        }\n      }\n\n      return $isValid;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 832,
            "endLine": 889,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isEmail",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "email",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "E-mail address."
                }
            ],
            "doc": {
                "description": "Checks if the string is the correct type of e-mail address.\n\n```php\nX::dump(\\bbn\\Str::isEmail('test@email.com'));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isEmail('test@email'));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isEmail('test@.com'));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::isEmail('testemail.com'));\n\/\/ (bool) false\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$email",
                        "description": "E-mail address."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the string is the correct type of e-mail address.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isEmail('test@email.com'));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::isEmail('test@email'));\n   * \/\/ (bool) false\n   * X::dump(\\bbn\\Str::isEmail('test@.com'));\n   * \/\/ (bool) false\n   * X::dump(\\bbn\\Str::isEmail('testemail.com'));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @param string $email E-mail address.\n   * @return bool\n   *\/"
        },
        "isUrl": {
            "name": "isUrl",
            "summary": "Checks if the argument is a valid URL string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n\/\/ (string) \"https:\/\/bbn.so\"\n\nX::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isUrl($st)\n  {\n    return (bool)filter_var($st, FILTER_VALIDATE_URL);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 906,
            "endLine": 909,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to perform"
                }
            ],
            "doc": {
                "description": "Checks if the argument is a valid URL string.\n\n```php\nX::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n\/\/ (string) \"https:\/\/bbn.so\"\n\nX::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n\/\/ (bool) false\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to perform"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the argument is a valid URL string.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isUrl(\"http:\/\/bbn.so\"));\n   * \/\/ (string) \"https:\/\/bbn.so\"\n   *\n   * X::dump(\\bbn\\Str::isUrl(\"bbn.so\"));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @param string $st The string to perform\n   * @return string|false\n   *\/"
        },
        "isDomain": {
            "name": "isDomain",
            "summary": "Checks if the argument is a valid domain name.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n\/\/ (string) false\n\nX::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n\/\/ (bool) true"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isDomain($st): bool\n  {\n    return (preg_match(\"\/^([a-z\\d](-*[a-z\\d])*)(\\.([a-z\\d](-*[a-z\\d])*))*$\/i\", $st) \/\/valid chars check\n      && preg_match(\"\/^.{1,253}$\/\", $st) \/\/overall length check\n      && preg_match(\"\/^[^\\.]{1,63}(\\.[^\\.]{1,63})*$\/\", $st)   ); \/\/length of each label\n  }",
            "parent": false,
            "trait": false,
            "startLine": 926,
            "endLine": 931,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isDomain",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to perform"
                }
            ],
            "doc": {
                "description": "Checks if the argument is a valid domain name.\n\n```php\nX::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n\/\/ (string) false\n\nX::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n\/\/ (bool) true\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to perform"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the argument is a valid domain name.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isDomain(\"http:\/\/bbn.so\"));\n   * \/\/ (string) false\n   *\n   * X::dump(\\bbn\\Str::isDomain(\"bbn.so\"));\n   * \/\/ (bool) true\n   * ```\n   *\n   * @param string $st The string to perform\n   * @return bool\n   *\/"
        },
        "isIp": {
            "name": "isIp",
            "summary": "Checks if the argument is a valid ip address.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isIp('198.162.0.1'));\n\/\/ (bool) true\n\nX::dump(\\bbn\\Str::isIp('29e4:4068:a401:f273:dcec:af8f:c8b3:c01c'));\n\/\/ (bool) true\n\nX::dump(\\bbn\\Str::isIp('198.162'));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isIp($st): bool\n  {\n    return (bool)filter_var($st, FILTER_VALIDATE_IP);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 951,
            "endLine": 954,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isIp",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the argument is a valid ip address.\n\n```php\nX::dump(\\bbn\\Str::isIp('198.162.0.1'));\n\/\/ (bool) true\n\nX::dump(\\bbn\\Str::isIp('29e4:4068:a401:f273:dcec:af8f:c8b3:c01c'));\n\/\/ (bool) true\n\nX::dump(\\bbn\\Str::isIp('198.162'));\n\/\/ (bool) false\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the argument is a valid ip address.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isIp('198.162.0.1'));\n   * \/\/ (bool) true\n   *\n   * X::dump(\\bbn\\Str::isIp('29e4:4068:a401:f273:dcec:af8f:c8b3:c01c'));\n   * \/\/ (bool) true\n   *\n   * X::dump(\\bbn\\Str::isIp('198.162'));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @param $st\n   * @return bool\n   *\/"
        },
        "isDateSql": {
            "name": "isDateSql",
            "summary": "Checks if the argument is in a valid SQL date format.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isDateSql($st): bool\n  {\n    foreach (func_get_args() as $a) {\n      if (!Date::validateSQL($a)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 972,
            "endLine": 981,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isDateSql",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the argument is in a valid SQL date format.\n\n```php\nX::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n\/\/ (bool) false\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the argument is in a valid SQL date format.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::isDateSql(\"1999-12-05 11:10:22\"));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::isDateSql(\"1999-12-05\"));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::isDateSql(\"19-12-1999\"));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @param string $st\n   * @return bool\n   *\/"
        },
        "correctTypes": {
            "name": "correctTypes",
            "summary": "If it looks like an int or float type, the string variable is converted into the correct type.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::correctTypes(1230));\n\/\/ (int) 1230\nX::dump(\\bbn\\Str::correctTypes(12.30));\n\/\/ (float) 12.3\nX::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n\/\/ (float) 12.3\nX::dump(\\bbn\\Str::correctTypes([1230]));\n\/\/ (int) [1230]"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function correctTypes($st)\n  {\n    if (\\is_string($st)) {\n      if (self::isBuid($st)) {\n        $st = bin2hex($st);\n      }\n      else{\n        if (self::isJson($st)) {\n          if (strpos($st, '\": ') && ($json = json_decode($st))) {\n            return json_encode($json);\n          }\n\n          return $st;\n        }\n\n        $st = trim(trim($st, \" \"), \"\\t\");\n        if (self::isInteger($st)\n            && ((substr((string)$st, 0, 1) !== '0') || ($st === '0'))\n        ) {\n          $tmp = (int)$st;\n          if (($tmp < PHP_INT_MAX) && ($tmp > -PHP_INT_MAX)) {\n            return $tmp;\n          }\n        }\n        \/\/ If it is a decimal, not starting or ending with a zero\n        elseif (self::isDecimal($st)) {\n          return (float)$st;\n        }\n\n        return normalizer_normalize($st);\n      }\n    }\n    elseif (\\is_array($st)) {\n      foreach ($st as $k => $v) {\n        $st[$k] = self::correctTypes($v);\n      }\n    }\n    elseif (\\is_object($st)) {\n      $vs = get_object_vars($st);\n      foreach ($vs as $k => $v) {\n        $st->$k = self::correctTypes($v);\n      }\n    }\n\n    return $st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1001,
            "endLine": 1046,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "correctTypes",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "If it looks like an int or float type, the string variable is converted into the correct type.\n\n```php\nX::dump(\\bbn\\Str::correctTypes(1230));\n\/\/ (int) 1230\nX::dump(\\bbn\\Str::correctTypes(12.30));\n\/\/ (float) 12.3\nX::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n\/\/ (float) 12.3\nX::dump(\\bbn\\Str::correctTypes([1230]));\n\/\/ (int) [1230]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * If it looks like an int or float type, the string variable is converted into the correct type.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::correctTypes(1230));\n   * \/\/ (int) 1230\n   * X::dump(\\bbn\\Str::correctTypes(12.30));\n   * \/\/ (float) 12.3\n   * X::dump(\\bbn\\Str::correctTypes(\"12.3\"));\n   * \/\/ (float) 12.3\n   * X::dump(\\bbn\\Str::correctTypes([1230]));\n   * \/\/ (int) [1230]\n   * ```\n   *\n   * @param mixed $st\n   * @return mixed\n   *\/"
        },
        "parseUrl": {
            "name": "parseUrl",
            "summary": "Returns an array containing any of the various components of the URL that are present.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n\/* (array)\n[\n    'scheme' => 'http',\n    'host' => 'localhost',\n    'path' => '\/phpmyadmin\/',\n    'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n    'url' => 'http:\/\/localhost\/phpmyadmin\/',\n    'params' => [\n        'db' => 'test',\n        'table' => 'users',\n        'server' => '1',\n        'target' => '',\n        'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n    ],\n]"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function parseUrl($url): array\n  {\n    $url = self::cast($url);\n    $r   = X::mergeArrays(parse_url($url), ['url' => $url,'query' => '','params' => []]);\n    if (strpos($url,'?') > 0) {\n      $p          = explode('?',$url);\n      $r['url']   = $p[0];\n      $r['query'] = $p[1];\n      $ps         = explode('&',$r['query']);\n      foreach ($ps as $p){\n        $px                  = explode('=',$p);\n        $r['params'][$px[0]] = $px[1];\n      }\n    }\n\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1074,
            "endLine": 1090,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "parseUrl",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The url."
                }
            ],
            "doc": {
                "description": "Returns an array containing any of the various components of the URL that are present.\n\n```php\nX::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n\/* (array)\n[\n    'scheme' => 'http',\n    'host' => 'localhost',\n    'path' => '\/phpmyadmin\/',\n    'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n    'url' => 'http:\/\/localhost\/phpmyadmin\/',\n    'params' => [\n        'db' => 'test',\n        'table' => 'users',\n        'server' => '1',\n        'target' => '',\n        'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n    ],\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url",
                        "description": "The url."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array containing any of the various components of the URL that are present.\n   *\n   * ```php\n   * X::hdump(\\bbn\\Str::parseUrl('http:\/\/localhost\/phpmyadmin\/?db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981');\n   * \/* (array)\n   * [\n   *     'scheme' => 'http',\n   *     'host' => 'localhost',\n   *     'path' => '\/phpmyadmin\/',\n   *     'query' => 'db=test&table=users&server=1&target=&token=e45a102c5672b2b4fe84ae75d9148981',\n   *     'url' => 'http:\/\/localhost\/phpmyadmin\/',\n   *     'params' => [\n   *         'db' => 'test',\n   *         'table' => 'users',\n   *         'server' => '1',\n   *         'target' => '',\n   *         'token' => 'e45a102c5672b2b4fe84ae75d9148981',\n   *     ],\n   * ]\n   * ```\n   *\n   * @param string $url The url.\n   * @return array\n   *\/"
        },
        "parsePath": {
            "name": "parsePath",
            "summary": "Replaces backslash with slash in a path string. Forbids the use of ..\/",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n\/\/ (string) \"\/home\/user\/Desktop\"\n\n X::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop'));\n\/\/ (string) \"\"\n\nX::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop', true));\n\/\/ (string) \"home\/user\/Desktop\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function parsePath(string $path, $allow_parent = false): string\n  {\n    $path = str_replace('\\\\', '\/', \\strval($path));\n    $path = str_replace('\/.\/', '\/', \\strval($path));\n    while (strpos($path, '\/\/') !== false){\n      $path = str_replace('\/\/', '\/', $path);\n    }\n\n    if (strpos($path, '..\/') !== false) {\n      if (!$allow_parent) {\n        return '';\n      }\n\n      $bits       = array_reverse(explode('\/', $path));\n      $path       = '';\n      $num_parent = 0;\n      foreach ($bits as $i => $b){\n        if ($b === '..') {\n          $num_parent++;\n        }\n        elseif ($b !== '.') {\n          if ($num_parent) {\n            $num_parent--;\n          }\n          else{\n            $path = empty($path) ? $b : $b.'\/'.$path;\n          }\n        }\n      }\n    }\n\n    return $path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1111,
            "endLine": 1143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "parsePath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path."
                },
                {
                    "name": "allow_parent",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "parent If true ..\/ is allowed in the path (and will become normalized)."
                }
            ],
            "doc": {
                "description": "Replaces backslash with slash in a path string. Forbids the use of ..\/\n\n```php\nX::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n\/\/ (string) \"\/home\/user\/Desktop\"\n\n X::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop'));\n\/\/ (string) \"\"\n\nX::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop', true));\n\/\/ (string) \"home\/user\/Desktop\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path."
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$allow",
                        "description": "parent If true ..\/ is allowed in the path (and will become normalized)."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Replaces backslash with slash in a path string. Forbids the use of ..\/\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::parsePath('\\home\\user\\Desktop'));\n   * \/\/ (string) \"\/home\/user\/Desktop\"\n   *\n   *  X::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop'));\n   * \/\/ (string) \"\"\n   *\n   * X::dump(\\bbn\\Str::parsePath('..\\home\\user\\Desktop', true));\n   * \/\/ (string) \"home\/user\/Desktop\"\n   * ```\n   *\n   * @param string  $path         The path.\n   * @param boolean $allow_parent If true ..\/ is allowed in the path (and will become normalized).\n   * @return string\n   *\/"
        },
        "removeAccents": {
            "name": "removeAccents",
            "summary": "Replaces accented characters with their character without the accent.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3 \u00c3\u00b9\u00e8\"));\n\/\/ (string) TA\u00a8st FA\u00aclA\u00a8 A\u00b2A\u00a8A A\u00b9e\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function removeAccents($st): string\n  {\n    $st      = trim(\\mb_ereg_replace('&(.)(tilde|circ|grave|acute|uml|ring|oelig);', '\\\\1', self::cast($st)));\n    $search  = explode(\",\",\"\u00e7,\u00e6,\u0153,\u00e1,\u00e9,\u00ed,\u00f3,\u00fa,\u00e0,\u00e8,\u00ec,\u00f2,\u00f9,\u00e4,\u00eb,\u00ef,\u00f6,\u00fc,\u00ff,\u00e2,\u00ea,\u00ee,\u00f4,\u00fb,\u00e5,e,i,\u00f8,u,\u0105,\u0144,\u0142,\u017a,\u0119,\u00c0,\u00c1,\u00c2,\u00c3,\u00c4,\u00c7,\u00c8,\u00c9,\u00ca,\u00cb,\u00cc,\u00cd,\u00ce,\u00cf,\u00d1,\u00d2,\u00d3,\u00d4,\u00d5,\u00d6,\u00d9,\u00da,\u00db,\u00dc,\u00dd,\u0141,\u015a\");\n    $replace = explode(\",\",\"c,ae,oe,a,e,i,o,u,a,e,i,o,u,a,e,i,o,u,y,a,e,i,o,u,a,e,i,o,u,a,n,l,z,e,A,A,A,A,A,C,E,E,E,E,I,I,I,I,N,O,O,O,O,O,U,U,U,U,Y,L,S\");\n    foreach ($search as $i => $s) {\n      $st = \\mb_ereg_replace($s, $replace[$i], $st);\n    }\n\n    return $st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1157,
            "endLine": 1167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeAccents",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string."
                }
            ],
            "doc": {
                "description": "Replaces accented characters with their character without the accent.\n\n```php\nX::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3 \u00c3\u00b9\u00e8\"));\n\/\/ (string) TA\u00a8st FA\u00aclA\u00a8 A\u00b2A\u00a8A A\u00b9e\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Replaces accented characters with their character without the accent.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::removeAccents(\"T\u00c3\u00a8st F\u00c3\u00acl\u00c3\u00a8 \u00c3\u00b2\u00c3\u00a8\u00c3 \u00c3\u00b9\u00e8\"));\n   * \/\/ (string) TA\u00a8st FA\u00aclA\u00a8 A\u00b2A\u00a8A A\u00b9e\"\n   * ```\n   *\n   * @param string $st The string.\n   * @return string\n   *\/"
        },
        "checkName": {
            "name": "checkName",
            "summary": "Checks if a string complies with SQL naming convention.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::checkName(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkName(\"Pa ul\"));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function checkName(): bool\n  {\n    $args = \\func_get_args();\n    \/\/ Each argument must be a string made of letters, numbers and underscores\n    foreach ($args as $a) {\n      if (\\is_array($a)) {\n        foreach ($a as $b) {\n          if (!self::checkName($b)) {\n            return false;\n          }\n        }\n      }\n\n      if (!\\is_string($a)) {\n        return false;\n      }\n\n      return \\preg_match('\/^[A-z0-9_]*$\/', $a);\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1182,
            "endLine": 1203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkName",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if a string complies with SQL naming convention.\n\n```php\nX::dump(\\bbn\\Str::checkName(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkName(\"Pa ul\"));\n\/\/ (bool) false\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a string complies with SQL naming convention.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::checkName(\"Paul\"));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::checkName(\"Pa ul\"));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @return bool\n   *\/"
        },
        "checkFilename": {
            "name": "checkFilename",
            "summary": "Checks if a string doesn't contain a filesystem path.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function checkFilename(): bool\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if (($a === '..' || $a === '.') || !\\is_string($a) || (strpos($a, '\/') !== false) || (strpos($a, '\\\\') !== false)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1218,
            "endLine": 1228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkFilename",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if a string doesn't contain a filesystem path.\n\n```php\nX::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a string doesn't contain a filesystem path.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @return bool\n   *\/"
        },
        "checkPath": {
            "name": "checkPath",
            "summary": "Checks if every bit of a string doesn't contain a filesystem path.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function checkPath(): bool\n  {\n    if ($args = \\func_get_args()) {\n      foreach ($args as $a){\n        if (!is_string($a) || strpos($a, '\/', -1) !== false || strpos($a, '\\\\', -1) !== false ) {\n          return false;\n        }\n\n        $bits = X::split($a, DIRECTORY_SEPARATOR);\n        foreach ($bits as $b){\n          if (!self::checkFilename($b)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1243,
            "endLine": 1263,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkPath",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if every bit of a string doesn't contain a filesystem path.\n\n```php\nX::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n\/\/ (bool) true\nX::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n\/\/ (bool) false\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if every bit of a string doesn't contain a filesystem path.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::checkFilename(\"Paul\"));\n   * \/\/ (bool) true\n   * X::dump(\\bbn\\Str::checkFilename(\"Paul\/\"));\n   * \/\/ (bool) false\n   * ```\n   *\n   * @return bool\n   *\/"
        },
        "hasSlash": {
            "name": "hasSlash",
            "summary": "Returns \"true\" if slash or backslash are present.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n\/\/ (bool) 1\nX::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n\/\/ (bool) 1"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function hasSlash(): bool\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      if ((strpos($a, '\/') !== false) || (strpos($a, '\\\\') !== false)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1280,
            "endLine": 1290,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "hasSlash",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns \"true\" if slash or backslash are present.\n\n```php\nX::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n\/\/ (bool) false\nX::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n\/\/ (bool) 1\nX::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n\/\/ (bool) 1\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns \"true\" if slash or backslash are present.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::hasSlash(\"Paul\"));\n   * \/\/ (bool) false\n   * X::dump(\\bbn\\Str::hasSlash(\"Paul\/\");\n   * \/\/ (bool) 1\n   * X::dump(\\bbn\\Str::hasSlash(\"Paul\\\\\");\n   * \/\/ (bool) 1\n   * ```\n   *\n   * @return bool\n   *\/"
        },
        "getNumbers": {
            "name": "getNumbers",
            "summary": "Extracts all digits from a string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n\/\/ (string) \"1324\"\n\nX::dump(\\bbn\\Str::getNumbers(\"test example\"));\n\/\/ (string) \"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getNumbers($st): string\n  {\n    return preg_replace(\"\/[^0-9]\/\", '', self::cast($st));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1307,
            "endLine": 1310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getNumbers",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string."
                }
            ],
            "doc": {
                "description": "Extracts all digits from a string.\n\n```php\nX::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n\/\/ (string) \"1324\"\n\nX::dump(\\bbn\\Str::getNumbers(\"test example\"));\n\/\/ (string) \"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Extracts all digits from a string.\n   *\n   * ```php\n   * X::dump(\\bbn\\Str::getNumbers(\"test 13 example 24\"));\n   * \/\/ (string) \"1324\"\n   *\n   * X::dump(\\bbn\\Str::getNumbers(\"test example\"));\n   * \/\/ (string) \"\"\n   * ```\n   *\n   * @param string $st The string.\n   * @return string\n   *\/"
        },
        "makeReadable": {
            "name": "makeReadable",
            "summary": "Returns the argumented value, replacing not standard objects (not stdClass) by their class name.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n\n$user = \\bbn\\User::getInstance();\n\n$myArray = [\n 'user' => $user,\n 'obj' => $myObj,\n 'val' => 23,\n 'text' => \"Hello!\"\n];\n\nX::hdump(\\bbn\\Str::makeReadable($user));\n\/\/ (string) \"appui\/user\"\n\nX::hdump(\\bbn\\Str::makeReadable($myArray));\n\/* (array)\n[\n  \"user\" => \"appui\\\\user\",\n  \"obj\" => [\n            \"myProp1\" => 23,\n            \"myProp2\" => \"world\",\n            \"myProp3\" => [1, 5, 6,],\n      ],\n  \"val\" => 23,\n  \"text\" => \"Hello!\",\n]"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function makeReadable($o)\n  {\n    $is_array = false;\n    if (\\is_object($o)) {\n      $class = \\get_class($o);\n      if ($class === 'stdClass') {\n        $is_array = 1;\n      }\n      else{\n        return $class;\n      }\n    }\n\n    if (\\is_array($o) || $is_array) {\n      $r = [];\n      foreach ($o as $k => $v){\n        $r[$k] = self::makeReadable($v);\n      }\n\n      return $r;\n    }\n\n    return $o;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1351,
            "endLine": 1374,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "makeReadable",
            "returns": [],
            "arguments": [
                {
                    "name": "o",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item."
                }
            ],
            "doc": {
                "description": "Returns the argumented value, replacing not standard objects (not stdClass) by their class name.\n\n```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n\n$user = \\bbn\\User::getInstance();\n\n$myArray = [\n 'user' => $user,\n 'obj' => $myObj,\n 'val' => 23,\n 'text' => \"Hello!\"\n];\n\nX::hdump(\\bbn\\Str::makeReadable($user));\n\/\/ (string) \"appui\/user\"\n\nX::hdump(\\bbn\\Str::makeReadable($myArray));\n\/* (array)\n[\n  \"user\" => \"appui\\\\user\",\n  \"obj\" => [\n            \"myProp1\" => 23,\n            \"myProp2\" => \"world\",\n            \"myProp3\" => [1, 5, 6,],\n      ],\n  \"val\" => 23,\n  \"text\" => \"Hello!\",\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$o",
                        "description": "The item."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the argumented value, replacing not standard objects (not stdClass) by their class name.\n   *\n   * ```php\n   * $myObj = new stdClass();\n   * $myObj->myProp1 = 23;\n   * $myObj->myProp2 = \"world\";\n   * $myObj->myProp3 = [1, 5, 6];\n   *\n   * $user = \\bbn\\User::getInstance();\n   *\n   * $myArray = [\n   *  'user' => $user,\n   *  'obj' => $myObj,\n   *  'val' => 23,\n   *  'text' => \"Hello!\"\n   * ];\n   *\n   * X::hdump(\\bbn\\Str::makeReadable($user));\n   * \/\/ (string) \"appui\/user\"\n   *\n   * X::hdump(\\bbn\\Str::makeReadable($myArray));\n   * \/* (array)\n   * [\n   *   \"user\" => \"appui\\\\user\",\n   *   \"obj\" => [\n   *             \"myProp1\" => 23,\n   *             \"myProp2\" => \"world\",\n   *             \"myProp3\" => [1, 5, 6,],\n   *       ],\n   *   \"val\" => 23,\n   *   \"text\" => \"Hello!\",\n   * ]\n   * ```\n   *\n   * @param mixed $o The item.\n   * @return array|string\n   *\/"
        },
        "export": {
            "name": "export",
            "summary": "Returns a variable in a mode that is directly usable by PHP.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n$myObj->myProp4 =\"\";\n\nX::hdump(\\bbn\\Str::export($myObj,true));\n\/*(string)\n\"{\n     \"myProp1\"  =>  23,\n     \"myProp2\"  =>  \"world\",\n     \"myProp3\"  =>  [ 1, 5, 6, ],\n}\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function export($o, bool $remove_empty = false, int $maxDepth = 0, int $maxLength = 0, int $level = 1): string\n  {\n    $st    = '';\n    $space = '    ';\n    if (\\is_object($o) && ($cls = \\get_class($o)) && (strpos($cls, 'stdClass') === false)) {\n      $st .= \"Object \".$cls;\n      \/*\n      $o = array_filter((array)$o, function($k) use ($cls){\n        if ( strpos($k, '*') === 0 ){\n          return false;\n        }\n        if ( strpos($k, $cls) === 0 ){\n          return false;\n        }\n        return true;\n      }, ARRAY_FILTER_USE_KEY);\n      *\/\n    }\n    elseif (\\is_object($o) || \\is_array($o)) {\n      $is_object = \\is_object($o);\n      $is_array  = !$is_object && \\is_array($o);\n      $is_assoc  = $is_object || ($is_array && X::isAssoc($o));\n      $st       .= $is_assoc ? '{' : '[';\n      $st       .= PHP_EOL;\n      $num      = 0;\n      foreach ($o as $k => $v){\n        if ($maxLength && ($num >= $maxLength)) {\n          $st .= str_repeat($space, $level);\n          $st .= '...' . PHP_EOL;\n          break;\n        }\n        if ($remove_empty && ( ( \\is_string($v) && empty($v) ) || ( \\is_array($v) && \\count($v) === 0 ) )) {\n          continue;\n        }\n\n        $st .= str_repeat($space, $level);\n        if ($is_assoc) {\n          $st .= ( \\is_string($k) ? '\"'.self::escapeDquote($k).'\"' : $k ). ': ';\n        }\n\n        if (\\is_array($v)) {\n          if ($maxDepth && ($level >= $maxDepth)) {\n            $st .= '[...]';\n          }\n          else{\n            $st .= self::export($v, $remove_empty, $maxDepth, $maxLength, $level + 1);\n          }\n        }\n        elseif ($v === 0) {\n          $st .= '0';\n        }\n        elseif (null === $v) {\n          $st .= 'null';\n        }\n        elseif (\\is_bool($v)) {\n          $st .= $v === false ? 'false' : 'true';\n        }\n        elseif (\\is_int($v) || \\is_float($v)) {\n          $st .= $v;\n        }\n        elseif (is_string($v)) {\n          if (self::isBuid($v)) {\n            $st .= '0x'.bin2hex($v);\n          }\n          elseif (!$remove_empty || !empty($v)) {\n            $st .= '\"' . self::escapeDquote($v) . '\"';\n          }\n        }\n        else {\n          try{\n            $cls = get_class($v);\n          }\n          catch (\\Exception $e){\n            $st .= '\"Unknown\"';\n          }\n\n          if ($cls) {\n            if ($cls === 'stdClass') {\n              $st .= self::export($v, $remove_empty, $maxDepth, $maxLength, $level + 1);\n            }\n            else{\n              $st .= 'Object '.$cls;\n            }\n          }\n        }\n\n        $st .= ','.PHP_EOL;\n        $num++;\n      }\n\n      $st .= str_repeat($space, $level - 1);\n      $st .= $is_assoc ? '}' : ']';\n    }\n\n    return $st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1402,
            "endLine": 1497,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "export",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "o",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item to be."
                },
                {
                    "name": "remove_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "empty Default: \"false\"."
                },
                {
                    "name": "maxDepth",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "Default: \"1\"."
                },
                {
                    "name": "maxLength",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "epth          Default: \"0\"."
                },
                {
                    "name": "level",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a variable in a mode that is directly usable by PHP.\n\n```php\n$myObj = new stdClass();\n$myObj->myProp1 = 23;\n$myObj->myProp2 = \"world\";\n$myObj->myProp3 = [1, 5, 6];\n$myObj->myProp4 =\"\";\n\nX::hdump(\\bbn\\Str::export($myObj,true));\n\/*(string)\n\"{\n     \"myProp1\"  =>  23,\n     \"myProp2\"  =>  \"world\",\n     \"myProp3\"  =>  [ 1, 5, 6, ],\n}\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$o",
                        "description": "The item to be."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$remove",
                        "description": "empty Default: \"false\"."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$level",
                        "description": "Default: \"1\"."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$max",
                        "description": "epth          Default: \"0\"."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a variable in a mode that is directly usable by PHP.\n   *\n   * ```php\n   * $myObj = new stdClass();\n   * $myObj->myProp1 = 23;\n   * $myObj->myProp2 = \"world\";\n   * $myObj->myProp3 = [1, 5, 6];\n   * $myObj->myProp4 =\"\";\n   *\n   * X::hdump(\\bbn\\Str::export($myObj,true));\n   * \/*(string)\n   * \"{\n   *      \"myProp1\"  =>  23,\n   *      \"myProp2\"  =>  \"world\",\n   *      \"myProp3\"  =>  [ 1, 5, 6, ],\n   * }\"\n   * ```\n   *\n   * @param mixed $o            The item to be.\n   * @param bool  $remove_empty Default: \"false\".\n   * @param int   $level          Default: \"1\".\n   * @param int   $maxDepth          Default: \"0\".\n   * @return string\n   *\/"
        },
        "replaceOnce": {
            "name": "replaceOnce",
            "summary": "Replaces part of a string. If the part is not found, the method returns the string without change.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is hot\"\nX::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is cold\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function replaceOnce($search, $replace, $subject): string\n  {\n    $pos = strpos($subject, $search);\n    if ($pos !== false) {\n      return substr_replace($subject, $replace, $pos, \\strlen($search));\n    }\n\n    return $subject;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1515,
            "endLine": 1523,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "replaceOnce",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to search"
                },
                {
                    "name": "replace",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to replace"
                },
                {
                    "name": "subject",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string into search"
                }
            ],
            "doc": {
                "description": "Replaces part of a string. If the part is not found, the method returns the string without change.\n\n```php\nX::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is hot\"\nX::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n\/\/ (string)  \"Today there is cold\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$search",
                        "description": "The string to search"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$replace",
                        "description": "The string to replace"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subject",
                        "description": "The string into search"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Replaces part of a string. If the part is not found, the method returns the string without change.\n   *\n   * ```php\n   * X::hdump(\\bbn\\Str::replaceOnce(\"cold\",\"hot\", \"Today there is cold\"));\n   * \/\/ (string)  \"Today there is hot\"\n   * X::hdump(\\bbn\\Str::replaceOnce(\"rain\",\"hot\", \"Today there is cold\"));\n   * \/\/ (string)  \"Today there is cold\"\n   * ```\n   *\n   * @param string $search  The string to search\n   * @param string $replace The string to replace\n   * @param string $subject The string into search\n   * @return string\n   *\/"
        },
        "removeComments": {
            "name": "removeComments",
            "summary": "Removes the comments.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n \/\/ (string) \"\"\n\nvar_dump(\\bbn\\Str::removeComments(\"\/\/ this is a comment\"));\n \/\/ (string) \"\"\n\nvar_dump(\\bbn\\Str::removeComments(\"\/** this is a comment *\\\/\"));\n \/\/ (string) \"\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function removeComments(string $st): string\n  {\n    $pattern = '\/(?=<!--)([\\s\\S]*?)-->|(?:(?:\\\/\\*(?:[^*]|(?:\\*+[^*\\\/]))*\\*+\\\/)|(?:(?<!\\:|\\\\\\|\\')\\\/\\\/.*))\/';\n    return trim(preg_replace($pattern, '', $st));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1543,
            "endLine": 1547,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeComments",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Removes the comments.\n\n```php\n var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n \/\/ (string) \"\"\n\nvar_dump(\\bbn\\Str::removeComments(\"\/\/ this is a comment\"));\n \/\/ (string) \"\"\n\nvar_dump(\\bbn\\Str::removeComments(\"\/** this is a comment *\\\/\"));\n \/\/ (string) \"\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Removes the comments.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::removeComments(\"<!--this is a comment-->\"));\n   *  \/\/ (string) \"\"\n   *\n   * var_dump(\\bbn\\Str::removeComments(\"\/\/ this is a comment\"));\n   *  \/\/ (string) \"\"\n   *\n   * var_dump(\\bbn\\Str::removeComments(\"\/** this is a comment *\\\/\"));\n   *  \/\/ (string) \"\"\n   * ```\n   *\n   * @param string $st\n   * @return string\n   *\/"
        },
        "saySize": {
            "name": "saySize",
            "summary": "Converts the bytes to another unit form.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::saySize(50000000000, 'G'));\n \/\/ (string) \"46.57 G\"\n\nvar_dump(\\bbn\\Str::saySize(1048576, 'M', 0));\n \/\/ (string) \"1 M\"\n\nvar_dump(\\bbn\\Str::saySize(1048576, 'T', 6));\n \/\/ (string) \"0.000001 T\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function saySize($bytes, $unit = 'B', $percision = 2): string\n  {\n    \/\/ pretty printer for byte values\n    $i     = 0;\n    $units = ['B', 'K', 'M', 'G', 'T'];\n\n    if (!in_array(($unit = strtoupper($unit)), $units, true)) {\n      throw new \\Exception(X::_('Invalid provided unit'));\n    }\n\n    while (isset($units[$i]) && $unit !== $units[$i]){\n      $i++;\n      $bytes \/= 1024;\n    }\n\n    $st = $unit === 'B' ? \"%d %s\" : \"%0.{$percision}f %s\";\n\n    return sprintf($st, $bytes, $units[$i]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1570,
            "endLine": 1588,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "saySize",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "bytes",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The bytes"
                },
                {
                    "name": "unit",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "B",
                    "default_name": ""
                },
                {
                    "name": "percision",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 2,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Converts the bytes to another unit form.\n\n```php\n var_dump(\\bbn\\Str::saySize(50000000000, 'G'));\n \/\/ (string) \"46.57 G\"\n\nvar_dump(\\bbn\\Str::saySize(1048576, 'M', 0));\n \/\/ (string) \"1 M\"\n\nvar_dump(\\bbn\\Str::saySize(1048576, 'T', 6));\n \/\/ (string) \"0.000001 T\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$bytes",
                        "description": "The bytes"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$unit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$percision"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * Converts the bytes to another unit form.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::saySize(50000000000, 'G'));\n   *  \/\/ (string) \"46.57 G\"\n   *\n   * var_dump(\\bbn\\Str::saySize(1048576, 'M', 0));\n   *  \/\/ (string) \"1 M\"\n   *\n   * var_dump(\\bbn\\Str::saySize(1048576, 'T', 6));\n   *  \/\/ (string) \"0.000001 T\"\n   * ```\n   *\n   * @param int    $bytes     The bytes\n   * @param string $unit\n   * @param int    $percision\n   * @return string\n   * @throws \\Exception\n   *\/"
        },
        "convertSize": {
            "name": "convertSize",
            "summary": "Converts size from one unit to another.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::convertSize(1, 'GB', 'B'));\n \/\/ (string) \"1073741824B\"\n\nvar_dump(\\bbn\\Str::convertSize(1, 'TB', 'GB'));\n \/\/ (string) \"1024GB\"\n\nvar_dump(\\bbn\\Str::convertSize(500000, 'MB', 'TB', 6));\n \/\/ (string) \"0.47684TB\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function convertSize($size, $unit_orig = 'B', $unit_dest = 'MB', $percision = 0)\n  {\n    $unit_orig = strtoupper($unit_orig);\n    $unit_dest = strtoupper($unit_dest);\n\n    if (strlen($unit_orig) <= 1 && $unit_orig !== 'B') {\n      $unit_orig .= 'B';\n    }\n\n    if (strlen($unit_dest) <= 1 && $unit_dest !== 'B') {\n      $unit_dest .= 'B';\n    }\n\n    $units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n    if (!in_array($unit_orig, $units)) {\n      throw new \\Exception(X::_(\"Invalid original unit\"));\n    }\n\n    if (!in_array($unit_dest, $units)) {\n      throw new \\Exception(X::_(\"Invalid destination unit\"));\n    }\n\n    $bytes      = $size;\n    $orig_index = array_search($unit_orig, $units);\n    $dest_index = array_search($unit_dest, $units);\n\n    \/\/ If destination unit is smaller than the original then reverse the units array\n    if ($dest_index < $orig_index) {\n      $units      = array_reverse($units);\n      $orig_index = array_search($unit_orig, $units);\n      $dest_index = array_search($unit_dest, $units);\n      $reversed   = true;\n    }\n\n    for ($i = $orig_index + 1; $i <= $dest_index; $i++) {\n      if (isset($reversed)) {\n        $bytes *= 1024;\n      } else {\n        $bytes \/= 1024;\n      }\n    }\n\n    return round($bytes, $percision) . $unit_dest;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1612,
            "endLine": 1656,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "convertSize",
            "returns": [],
            "arguments": [
                {
                    "name": "size",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unit_orig",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "B",
                    "default_name": "",
                    "description": "orig"
                },
                {
                    "name": "unit_dest",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "MB",
                    "default_name": "",
                    "description": "dest"
                },
                {
                    "name": "percision",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Converts size from one unit to another.\n\n```php\n var_dump(\\bbn\\Str::convertSize(1, 'GB', 'B'));\n \/\/ (string) \"1073741824B\"\n\nvar_dump(\\bbn\\Str::convertSize(1, 'TB', 'GB'));\n \/\/ (string) \"1024GB\"\n\nvar_dump(\\bbn\\Str::convertSize(500000, 'MB', 'TB', 6));\n \/\/ (string) \"0.47684TB\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$size"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$unit",
                        "description": "orig"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$unit",
                        "description": "dest"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$percision"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * Converts size from one unit to another.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::convertSize(1, 'GB', 'B'));\n   *  \/\/ (string) \"1073741824B\"\n   *\n   * var_dump(\\bbn\\Str::convertSize(1, 'TB', 'GB'));\n   *  \/\/ (string) \"1024GB\"\n   *\n   * var_dump(\\bbn\\Str::convertSize(500000, 'MB', 'TB', 6));\n   *  \/\/ (string) \"0.47684TB\"\n   * ```\n   *\n   * @param int $size\n   * @param string $unit_orig\n   * @param string $unit_dest\n   * @param int    $percision\n   * @return string\n   * @throws \\Exception\n   *\/"
        },
        "checkJson": {
            "name": "checkJson",
            "summary": "Checks whether a JSON string is valid or not. If $return_error is set to true, the error will be returned.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::checkJson(\"{\"foo\":\"bar\"}\"));\n \/\/ (bool) true\n\nvar_dump(\\bbn\\Str::checkJson(\"foo\"));\n \/\/ (bool) false\n\nvar_dump(\\bbn\\Str::checkJson(\"foo\", true));\n \/\/ (string) \"Syntax error, malformed JSON\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function checkJson(string $json, bool $return_error = false)\n  {\n    json_decode($json);\n    $error = json_last_error();\n    if ($error === JSON_ERROR_NONE) {\n      return true;\n    }\n\n    if (!$return_error) {\n      return false;\n    }\n\n    switch ($error) {\n      case JSON_ERROR_DEPTH:\n        return X::_('Maximum stack depth exceeded');\n      case JSON_ERROR_STATE_MISMATCH:\n        return X::_('State mismatch (invalid or malformed JSON)');\n      case JSON_ERROR_CTRL_CHAR:\n        return X::_('Unexpected control character found');\n      case JSON_ERROR_SYNTAX:\n        return X::_('Syntax error, malformed JSON');\n      case JSON_ERROR_UTF8:\n        return X::_('Malformed UTF-8 characters, possibly incorrectly encoded');\n      default:\n        return X::_('Unknown error');\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1677,
            "endLine": 1703,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "checkJson",
            "returns": [],
            "arguments": [
                {
                    "name": "json",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "return_error",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "error"
                }
            ],
            "doc": {
                "description": "Checks whether a JSON string is valid or not. If $return_error is set to true, the error will be returned.\n\n```php\n var_dump(\\bbn\\Str::checkJson(\"{\"foo\":\"bar\"}\"));\n \/\/ (bool) true\n\nvar_dump(\\bbn\\Str::checkJson(\"foo\"));\n \/\/ (bool) false\n\nvar_dump(\\bbn\\Str::checkJson(\"foo\", true));\n \/\/ (string) \"Syntax error, malformed JSON\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$json"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$return",
                        "description": "error"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether a JSON string is valid or not. If $return_error is set to true, the error will be returned.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::checkJson(\"{\"foo\":\"bar\"}\"));\n   *  \/\/ (bool) true\n   *\n   * var_dump(\\bbn\\Str::checkJson(\"foo\"));\n   *  \/\/ (bool) false\n   *\n   * var_dump(\\bbn\\Str::checkJson(\"foo\", true));\n   *  \/\/ (string) \"Syntax error, malformed JSON\"\n   * ```\n   *\n   * @param string $json\n   * @param bool   $return_error\n   * @return bool|string\n   *\/"
        },
        "asVar": {
            "name": "asVar",
            "summary": "Places quotes around a string",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::asVar('foo'));\n \/\/ (string) '\"foo\"'\n\n var_dump(\\bbn\\Str::asVar(\"foo\", \"'\"));\n \/\/ (string) \"'foo'\"\n\nvar_dump(\\bbn\\Str::asVar(\"foo'bar\"));\n \/\/ (string) '\"foo\\'bar\"'\n\nvar_dump(\\bbn\\Str::asVar(\"foo'bar\", \"'\"));\n \/\/ (string) \"'foo\\'bar'\""
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function asVar(string $var, $quote = '\"')\n  {\n    if (($quote !== \"'\") && ($quote !== '\"')) {\n      $quote = '\"';\n    }\n\n    $st = $quote === \"'\" ? self::escapeSquotes($var) : self::escapeDquotes($var);\n    return $quote.$st.$quote;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1728,
            "endLine": 1736,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "asVar",
            "returns": [],
            "arguments": [
                {
                    "name": "var",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "quote",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "\"",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Places quotes around a string\n\n```php\n var_dump(\\bbn\\Str::asVar('foo'));\n \/\/ (string) '\"foo\"'\n\n var_dump(\\bbn\\Str::asVar(\"foo\", \"'\"));\n \/\/ (string) \"'foo'\"\n\nvar_dump(\\bbn\\Str::asVar(\"foo'bar\"));\n \/\/ (string) '\"foo\\'bar\"'\n\nvar_dump(\\bbn\\Str::asVar(\"foo'bar\", \"'\"));\n \/\/ (string) \"'foo\\'bar'\"\n\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$var"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$quote"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Places quotes around a string\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::asVar('foo'));\n   *  \/\/ (string) '\"foo\"'\n   *\n   *  var_dump(\\bbn\\Str::asVar(\"foo\", \"'\"));\n   *  \/\/ (string) \"'foo'\"\n   *\n   * var_dump(\\bbn\\Str::asVar(\"foo'bar\"));\n   *  \/\/ (string) '\"foo\\'bar\"'\n   *\n   * var_dump(\\bbn\\Str::asVar(\"foo'bar\", \"'\"));\n   *  \/\/ (string) \"'foo\\'bar'\"\n   *\n   * ```\n   *\n   * @param string $var\n   * @param string $quote\n   * @return string\n   *\/"
        },
        "markdown2html": {
            "name": "markdown2html",
            "summary": "Transforms a markdown string into HTML.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::markdown2html(\"# foo\"));\n \/\/ (string) '<h1>foo<\/h1>'\n\nvar_dump(\\bbn\\Str::markdown2html(\"**foo**\"));\n \/\/ (string) '<p><strong>foo<\/strong><\/p>'\n\nvar_dump(\\bbn\\Str::markdown2html(\"**foo**\", true));\n \/\/ (string) '<strong>foo<\/strong>'"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function markdown2html(string $st, bool $single_line = false): string\n  {\n    if (!self::$_markdownParser) {\n      self::$_markdownParser = new Markdown();\n    }\n\n\n    return self::$_markdownParser->compile($st);\n    \/\/return $single_line ? self::$_markdownParser->line($st) : self::$_markdownParser->text($st);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1757,
            "endLine": 1766,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "markdown2html",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The markdown string"
                },
                {
                    "name": "single_line",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "line If true the result will not contain paragraph or block element"
                }
            ],
            "doc": {
                "description": "Transforms a markdown string into HTML.\n\n```php\n var_dump(\\bbn\\Str::markdown2html(\"# foo\"));\n \/\/ (string) '<h1>foo<\/h1>'\n\nvar_dump(\\bbn\\Str::markdown2html(\"**foo**\"));\n \/\/ (string) '<p><strong>foo<\/strong><\/p>'\n\nvar_dump(\\bbn\\Str::markdown2html(\"**foo**\", true));\n \/\/ (string) '<strong>foo<\/strong>'\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The markdown string"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$single",
                        "description": "line If true the result will not contain paragraph or block element"
                    }
                ],
                "return": "The HTML string"
            },
            "comments": "  \/**\n   * Transforms a markdown string into HTML.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::markdown2html(\"# foo\"));\n   *  \/\/ (string) '<h1>foo<\/h1>'\n   *\n   * var_dump(\\bbn\\Str::markdown2html(\"**foo**\"));\n   *  \/\/ (string) '<p><strong>foo<\/strong><\/p>'\n   *\n   * var_dump(\\bbn\\Str::markdown2html(\"**foo**\", true));\n   *  \/\/ (string) '<strong>foo<\/strong>'\n   * ```\n   *\n   * @param string  $st          The markdown string\n   * @param boolean $single_line If true the result will not contain paragraph or block element\n   * @return string The HTML string\n   *\/"
        },
        "toCamel": {
            "name": "toCamel",
            "summary": "Converts the given string to camel case.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::toCamel(\"foo bar\"));\n \/\/ (string) 'fooBar'"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function toCamel(string $st, string $sep = '_', bool $first = false): string\n  {\n    $st = strtolower($st);\n\n    $res = str_replace(' ', '', ucwords(str_replace($sep, ' ', $st)));\n    if (!$first) {\n        $res[0] = strtolower($res[0]);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1782,
            "endLine": 1792,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "toCamel",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "sep",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "_",
                    "default_name": "",
                    "description": "A separator"
                },
                {
                    "name": "first",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "Capitalize first character if true"
                }
            ],
            "doc": {
                "description": "Converts the given string to camel case.\n\n```php\n var_dump(\\bbn\\Str::toCamel(\"foo bar\"));\n \/\/ (string) 'fooBar'\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$sep",
                        "description": "A separator"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$first",
                        "description": "Capitalize first character if true"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Converts the given string to camel case.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::toCamel(\"foo bar\"));\n   *  \/\/ (string) 'fooBar'\n   * ```\n   *\n   * @param string $st\n   * @param string $sep   A separator\n   * @param bool   $first Capitalize first character if true\n   * @return string\n   *\/"
        },
        "fromCamel": {
            "name": "fromCamel",
            "summary": "Converts the given camel case string to a lower case separated string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::fromCamel(\"fooBar\"));\n \/\/ (string) 'foo bar'"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function fromCamel(string $input, string $separator = '_'): string\n  {\n    return ltrim(strtolower(preg_replace('\/[A-Z]\/', '_$0', $input)), $separator);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1808,
            "endLine": 1811,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fromCamel",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "input",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "separator",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "_",
                    "default_name": "",
                    "description": "A separator"
                }
            ],
            "doc": {
                "description": "Converts the given camel case string to a lower case separated string.\n\n```php\n var_dump(\\bbn\\Str::fromCamel(\"fooBar\"));\n \/\/ (string) 'foo bar'\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$sep",
                        "description": "A separator"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$first",
                        "description": "Capitalize first character if true"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Converts the given camel case string to a lower case separated string.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::fromCamel(\"fooBar\"));\n   *  \/\/ (string) 'foo bar'\n   * ```\n   *\n   * @param string $st\n   * @param string $sep   A separator\n   * @param bool   $first Capitalize first character if true\n   * @return string\n   *\/"
        },
        "html2text": {
            "name": "html2text",
            "summary": "Converts HTML to text replacing paragraphs and brs with new lines.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::html2text(\"<h1>foo bar<\/h1><br>baz\"));\n \/\/ (string) 'foo bar\nbaz'\n\nvar_dump(\\bbn\\Str::html2text('<h1>foo bar<\/h1><br>', false));\n \/\/ (string) 'foo bar'"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function html2text(string $st, bool $nl = true): string\n  {\n    $st = trim(self::sanitizeHtml($st));\n    if (empty($st)) {\n      return '';\n    }\n\n    $filter = $nl ? ['p', 'br'] : [];\n    $tmp    = strip_tags($st, $filter);\n    if (empty($tmp)) {\n      $config = array(\n        'clean' => 'yes',\n        'output-html' => 'yes',\n      );\n      $tidy   = tidy_parse_string($st, $config, 'utf8');\n      $tidy->cleanRepair();\n      $st = strip_tags((string)$tidy, $filter);\n    }\n    else {\n      $st = $tmp;\n    }\n\n    if (empty($st)) {\n      return '';\n    }\n\n    if (!$nl) {\n      return $st;\n    }\n\n    $st = preg_replace(\"\/<p[^>]*?>\/i\", \"\", $st);\n    $st = str_ireplace(\"<\/p>\", PHP_EOL.PHP_EOL, $st);\n    $p  = '\/<br[^>]*>\/i';\n    $r  = PHP_EOL;\n    return trim(html_entity_decode(preg_replace($p, $r, $st)));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1829,
            "endLine": 1864,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "html2text",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The HTML string"
                },
                {
                    "name": "nl",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Converts HTML to text replacing paragraphs and brs with new lines.\n\n```php\n var_dump(\\bbn\\Str::html2text(\"<h1>foo bar<\/h1><br>baz\"));\n \/\/ (string) 'foo bar\nbaz'\n\nvar_dump(\\bbn\\Str::html2text('<h1>foo bar<\/h1><br>', false));\n \/\/ (string) 'foo bar'\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The HTML string"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Converts HTML to text replacing paragraphs and brs with new lines.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::html2text(\"<h1>foo bar<\/h1><br>baz\"));\n   *  \/\/ (string) 'foo bar\n   * baz'\n   *\n   * var_dump(\\bbn\\Str::html2text('<h1>foo bar<\/h1><br>', false));\n   *  \/\/ (string) 'foo bar'\n   * ```\n   *\n   * @param string $st The HTML string\n   * @return string\n   *\/"
        },
        "text2html": {
            "name": "text2html",
            "summary": "Converts text to HTML replacing new lines with brs.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "var_dump(\\bbn\\Str::text2html(\"foo\\n bar\"));\n \/\/ (string) '<p>foo<br> bar<\/p>'\n\nvar_dump(\\bbn\\Str::text2html(\"foo\\n bar\", false));\n \/\/ (string) 'foo<br> bar'"
                }
            ],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function text2html(string $st, bool $paragraph = true): string\n  {\n    if ($paragraph) {\n      $bits = X::split($st, PHP_EOL.PHP_EOL);\n      $st   = '<p>'.X::join($bits, '<\/p><p>').'<\/p>';\n    }\n\n    return str_replace(PHP_EOL, '<br>', $st);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1881,
            "endLine": 1889,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "text2html",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The text string"
                },
                {
                    "name": "paragraph",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Converts text to HTML replacing new lines with brs.\n\n```php\n var_dump(\\bbn\\Str::text2html(\"foo\\n bar\"));\n \/\/ (string) '<p>foo<br> bar<\/p>'\n\nvar_dump(\\bbn\\Str::text2html(\"foo\\n bar\", false));\n \/\/ (string) 'foo<br> bar'\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The text string"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Converts text to HTML replacing new lines with brs.\n   *\n   * ```php\n   *  var_dump(\\bbn\\Str::text2html(\"foo\\n bar\"));\n   *  \/\/ (string) '<p>foo<br> bar<\/p>'\n   *\n   * var_dump(\\bbn\\Str::text2html(\"foo\\n bar\", false));\n   *  \/\/ (string) 'foo<br> bar'\n   * ```\n   *\n   * @param string $st The text string\n   * @return string\n   *\/"
        },
        "sanitizeHtml": {
            "name": "sanitizeHtml",
            "summary": "Remove malicious code and makes HTML standard compliant.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function sanitizeHtml(string $html, array $allowed_tags = [], array $allowed_attr = []): string\n  {\n    if (!self::$_htmlSanitizer) {\n      $config = HTMLPurifier_Config::createDefault();\n      $config->set('Core.Encoding', 'UTF-8');\n      \/\/$config->set('HTML', 'Doctype', 'HTML 4.01 Transitional');\n      if (defined('PURIFIER_CACHE')) {\n        $config->set('Cache.SerializerPath', constant('PURIFIER_CACHE'));\n      }\n      else {\n        # Disable the cache entirely\n        $config->set('Cache.DefinitionImpl', null);\n      }\n\n      self::$_htmlSanitizer = new HTMLPurifier($config);\n    }\n\n    return self::$_htmlSanitizer->purify($html);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1901,
            "endLine": 1919,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "sanitizeHtml",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "html",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "allowed_tags",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "tags"
                },
                {
                    "name": "allowed_attr",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "attr"
                }
            ],
            "doc": {
                "description": "Remove malicious code and makes HTML standard compliant.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$html"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$allowed",
                        "description": "tags"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$allowed",
                        "description": "attr"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "There is something to do about the constant here..."
                }
            },
            "comments": "  \/**\n   * Remove malicious code and makes HTML standard compliant.\n   *\n   * @param string $html\n   * @param array $allowed_tags\n   * @param array $allowed_attr\n   * @todo There is something to do about the constant here...\n   * @return string\n   *\/"
        },
        "toUtf8": {
            "name": "toUtf8",
            "summary": "From https:\/\/github.com\/symfony\/polyfill-php72\/blob\/v1.26.0\/Php72.php#L24-L38",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Str",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Str.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function toUtf8(string $s): string {\n    if (mb_check_encoding($s, 'UTF-8')) {\n      return $s;\n    }\n\n    if (mb_check_encoding($s, 'ISO-8859-1')) {\n      return mb_convert_encoding($s, 'UTF-8', 'ISO-8859-1');\n    }\n\n    return mb_convert_encoding($s, 'UTF-8', mb_list_encodings());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1928,
            "endLine": 1938,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "toUtf8",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "s",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "From https:\/\/github.com\/symfony\/polyfill-php72\/blob\/v1.26.0\/Php72.php#L24-L38\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$s"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * From https:\/\/github.com\/symfony\/polyfill-php72\/blob\/v1.26.0\/Php72.php#L24-L38\n   *\n   * @param string $s\n   * @return string\n   *\/"
        }
    },
    "properties": {
        "_markdownParser": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Str"
            },
            "declaring_trait": "bbn\\Str",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "Markdown parser if needed only one instance is created.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Markdown"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_htmlSanitizer": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Str"
            },
            "declaring_trait": "bbn\\Str",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "HTML purifier if needed only one instance is created.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "?HTMLPurifier"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "_markdownParser": null,
        "_htmlSanitizer": null
    },
    "constants": null,
    "uses": {
        "bbn\\Compilers\\Markdown": "Markdown",
        "HTMLPurifier": "HTMLPurifier",
        "HTMLPurifier_Config": "HTMLPurifier_Config"
    },
    "dummyComments": [
        "\/**\n * Class text\n * string manipulation class\n *\n * This class only uses static methods and has lots of alias for the escaping methods\n *\n * @package bbn\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Apr 4, 2011, 23:23:55 +0000\n * @category  Strings\n * @license   http:\/\/www.opensource.org\/licenses\/mit-license.php MIT\n * @version 0.2r89\n *\n *\/"
    ],
    "summary": "Class text",
    "description": "string manipulation class\n\nThis class only uses static methods and has lots of alias for the escaping methods",
    "description_parts": [
        {
            "type": "text",
            "content": "string manipulation class\n\nThis class only uses static methods and has lots of alias for the escaping methods"
        }
    ]
}