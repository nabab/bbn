{
    "doc": {
        "description": "Class cron\n",
        "tags": {
            "package": "bbn\\Appui"
        }
    },
    "name": "bbn\\Cron\\Manager",
    "namespace": true,
    "realName": "Manager",
    "realNamespace": "bbn\\Cron",
    "traits": [
        "bbn\\Cron\\Common"
    ],
    "interfaces": [],
    "fileName": "\/Cron\/Manager.php",
    "startLine": 18,
    "endLine": 634,
    "numMethods": 47,
    "numProperties": 19,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "cron_timeout": 300,
        "poll_timeout": 600,
        "user_timeout": 480,
        "cron_check_timeout": 60,
        "table": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "prefix": "bbn_",
        "path": null,
        "db": null,
        "ctrl": null,
        "mail": null,
        "data": null,
        "enabled": true,
        "timeout": 50
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Cron",
    "shortName": "Manager",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Manager constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(bbn\\Db $db, array $cfg = [])\n  {\n    if (bbn\\Mvc::getDataPath() && $db->check()) {\n      \/\/ It must be called from a plugin (appui-cron actually)\n      \/\/$this->path = BBN_DATA_PATH.'plugins\/appui-cron\/';\n      $this->path  = bbn\\Mvc::getDataPath('appui-cron');\n      $this->db    = $db;\n      $this->table = $this->prefix.'cron';\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 31,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Manager constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bbn\\Db",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Manager constructor.\n   *\n   * @param bbn\\Db $db\n   * @param array $cfg\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check(): bool\n  {\n    return (bool)($this->db && $this->db->check());\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 46,
            "endLine": 49,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return bool\n   *\/"
        },
        "getCron": {
            "name": "getCron",
            "summary": "Returns the full row as an indexed array for the given CRON ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCron(string $id): ?array\n  {\n    if ($this->check() && ($data = $this->db->rselect($this->table, [], ['id' => $id]))) {\n      $data['cfg'] = json_decode($data['cfg'], 1);\n      return $data;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 58,
            "endLine": 66,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCron",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the full row as an indexed array for the given CRON ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full row as an indexed array for the given CRON ID.\n   *\n   * @param string $id\n   * @return null|array\n   *\/"
        },
        "isTimeout": {
            "name": "isTimeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isTimeout($id_cron): bool\n  {\n    if ($this->check()\n        && ($cron = $this->getCron($id_cron))\n        && ($path = $this->getLogPath($cron))\n        && is_file($path)\n    ) {\n      [$pid, $time] = X::split(file_get_contents($path), '|');\n      return (($time + $cron['cfg']['timeout']) < time());\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 73,
            "endLine": 85,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isTimeout",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_cron"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $id_cron\n   * @return bool\n   *\/"
        },
        "start": {
            "name": "start",
            "summary": "Writes in the given CRON row the next start time, the current as previous, and the new running status.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function start(string $id_cron): bool\n  {\n    $res = false;\n    if ($this->check()\n        && ($cron = $this->getCron($id_cron))\n    ) {\n      $enable = false;\n      if ($this->db->isTriggerEnabled()) {\n        $this->db->disableTrigger();\n        $enable = true;\n      }\n\n      if ($this->db->update(\n        $this->table, [\n        'prev' => date('Y-m-d H:i:s'),\n        'pid' => getmypid()\n        ], [\n        'id' => $id_cron,\n        'pid' => null,\n        'active' => 1\n        ]\n      )\n      ) {\n        $res = true;\n      }\n\n      if ($enable) {\n        $this->db->enableTrigger();\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 94,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "start",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "cron"
                }
            ],
            "doc": {
                "description": "Writes in the given CRON row the next start time, the current as previous, and the new running status.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "cron"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Writes in the given CRON row the next start time, the current as previous, and the new running status.\n   *\n   * @param string $id_cron\n   * @return bool\n   *\/"
        },
        "finish": {
            "name": "finish",
            "summary": "Writes in the given CRON row the duration and the new finished status.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function finish(string $id_cron, $res = '')\n  {\n    $res = false;\n    if ($cron = $this->getCron($id_cron)) {\n      if (!empty($cron['cfg']['frequency'])) {\n        $time  = time();\n        $start = date('Y-m-d H:i:s', $time);\n        $next  = $this->getNextDate($cron['cfg']['frequency'], strtotime($cron['next'] ?: $start));\n      }\n\n      $enable   = false;\n      $err_mode = $this->db->getErrorMode();\n      $this->db->setErrorMode(Errors::E_CONTINUE);\n      if ($this->db->isTriggerEnabled()) {\n        $this->db->disableTrigger();\n        $enable = true;\n      }\n\n      if ($this->db->update(\n        $this->table, [\n        'next' => $next ?? null,\n        'pid' => null,\n        'active' => isset($next) ? 1 : 0\n        ], [\n        'id' => $id_cron,\n        'pid' => getmypid()\n        ]\n      )\n      ) {\n        $res = true;\n      }\n\n      if ($err_mode !== Errors::E_CONTINUE) {\n        $this->db->setErrorMode($err_mode);\n      }\n\n      if ($enable) {\n        $this->db->enableTrigger();\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 136,
            "endLine": 178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "finish",
            "returns": [],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "cron"
                },
                {
                    "name": "res",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Writes in the given CRON row the duration and the new finished status.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "cron"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$res"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Writes in the given CRON row the duration and the new finished status.\n   *\n   * @param string $id_cron\n   * @param string $res\n   * @return bool\n   *\/"
        },
        "getNextDate": {
            "name": "getNextDate",
            "summary": "Returns a SQL date for the next event given a frequency and a time to count from (now if 0).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNextDate(string $frequency, int $from_time = 0): ?string\n  {\n    if ((\\strlen($frequency) >= 2)) {\n      $letter  = bbn\\Str::changeCase(substr($frequency, 0, 1), 'lower');\n      $number  = (int)substr($frequency, 1);\n      $letters = ['y', 'm', 'w', 'd', 'h', 'i', 's'];\n      if (in_array($letter, $letters, true) && ($number > 0)) {\n        $time = time();\n        if (!$from_time) {\n          $from_time = $time;\n        }\n\n        $year   = intval(date('Y', $from_time));\n        $month  = intval(date('n', $from_time));\n        $day    = intval(date('j', $from_time));\n        $hour   = intval(date('G', $from_time));\n        $minute = intval(date('i', $from_time));\n        $second = intval(date('s', $from_time));\n        $adders = [];\n        foreach ($letters as $lt) {\n          $adders[$lt] = 0;\n        }\n\n        $r    = 0;\n        $step = 0;\n        if (!is_numeric($number)) {\n          X::log($number, 'next_date');\n        }\n\n        $test   = mktime(\n          $hour + ($letter === 'h' ? $number : 0),\n          $minute + ($letter === 'i' ? $number : 0),\n          $second + ($letter === 's' ? $number : 0),\n          $month + ($letter === 'm' ? $number : 0),\n          $day + ($letter === 'd' ? $number : ($letter === 'w' ? 7 * $number : 0)),\n          $year + ($letter === 'y' ? $number : 0)\n        );\n        $length = $test - $from_time;\n        if ($test < $time) {\n          $diff = $time - $test;\n          $step = floor($diff \/ $length);\n        }\n\n        while ($r <= $time) {\n          $step++;\n          if ($letter === 'w') {\n            $adders['d'] = $step * 7 * $number;\n          }\n          else {\n            $adders[$letter] = $step * $number;\n          }\n\n          $r = mktime(\n            $hour + $adders['h'],\n            $minute + $adders['i'],\n            $second + $adders['s'],\n            $month + $adders['m'],\n            $day + $adders['d'],\n            $year + $adders['y']\n          );\n        }\n\n        if ($r) {\n          return date('Y-m-d H:i:s', $r);\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 188,
            "endLine": 257,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getNextDate",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "frequency",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A string made of 1 letter (i, h, d, w, m, or y) and a number."
                },
                {
                    "name": "from_time",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "time A SQL formatted date which will be the base of the operation."
                }
            ],
            "doc": {
                "description": "Returns a SQL date for the next event given a frequency and a time to count from (now if 0).\n",
                "params": [
                    {
                        "tag": "param",
                        "name": "$frequency",
                        "description": "A string made of 1 letter (i, h, d, w, m, or y) and a number."
                    },
                    {
                        "tag": "param",
                        "name": "$from",
                        "description": "time A SQL formatted date which will be the base of the operation."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a SQL date for the next event given a frequency and a time to count from (now if 0).\n   *\n   * @param  string $frequency A string made of 1 letter (i, h, d, w, m, or y) and a number.\n   * @param  int    $from_time A SQL formatted date which will be the base of the operation.\n   * @return null|string\n   *\/"
        },
        "getNext": {
            "name": "getNext",
            "summary": "Returns the whole row for the next CRON to be executed from now if there is any.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNext($id_cron = null): ?array\n  {\n    $conditions = [[\n      'field' => 'next',\n      'operator' => '<',\n      'exp' => 'NOW()'\n    ], [\n      'field' => 'next',\n      'operator' => 'isnotnull'\n    ], [\n      'field' => 'active',\n      'value' => 1\n    ]];\n    if (bbn\\Str::isUid($id_cron)) {\n      $conditions[] = [\n        'field' => 'id',\n        'value' => $id_cron\n      ];\n    }\n\n    if ($this->check()\n        && ($data = $this->db->rselect(\n          [\n          'table' => $this->table,\n          'fields' => [],\n          'where' => [\n          'conditions' => $conditions\n          ],\n          'order' => [[\n          'field' => 'priority',\n          'dir' => 'ASC'\n          ], [\n          'field' => 'next',\n          'dir' => 'ASC'\n          ]]\n          ]\n        ))\n    ) {\n      \/\/ Dans cfg: timeout, et soit: latency, minute, hour, day of month, day of week, Date\n      $data['cfg'] = json_decode($data['cfg'], 1);\n      return $data;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 266,
            "endLine": 310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getNext",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "cron"
                }
            ],
            "doc": {
                "description": "Returns the whole row for the next CRON to be executed from now if there is any.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$id",
                        "description": "cron"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the whole row for the next CRON to be executed from now if there is any.\n   *\n   * @param null $id_cron\n   * @return null|array\n   *\/"
        },
        "getRunningRows": {
            "name": "getRunningRows",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRunningRows(): ?array\n  {\n    if ($this->check()) {\n      return array_map(\n        function ($a) {\n          $cfg = $a['cfg'] ? json_decode($a['cfg'], true) : [];\n          unset($a['cfg']);\n          return X::mergeArrays($a, $cfg);\n        }, $this->db->rselectAll(\n          [\n          'table' => $this->table,\n          'fields' => [],\n          'where' => [\n          'conditions' => [[\n            'field' => 'active',\n            'value' => 1\n          ], [\n            'field' => 'pid',\n            'operator' => 'isnotnull'\n          ]]\n          ],\n          'order' => [[\n          'field' => 'prev',\n          'dir' => 'ASC'\n          ]]\n          ]\n        )\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRunningRows",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * @return array|null\n   * @throws \\Exception\n   *\/"
        },
        "getNextRows": {
            "name": "getNextRows",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNextRows(int $limit = 10, int $sec = 0): ?array\n  {\n    if ($limit === 0) {\n      $limit = 1000;\n    }\n\n    if ($this->check()) {\n      return array_map(\n        function ($a) {\n          $cfg = $a['cfg'] ? json_decode($a['cfg'], true) : [];\n          unset($a['cfg']);\n          return X::mergeArrays($a, $cfg);\n        }, $this->db->rselectAll(\n          [\n          'table' => $this->table,\n          'fields' => [],\n          'where' => [\n          'conditions' => [[\n            'field' => 'active',\n            'value' => 1\n          ], [\n            'field' => 'pid',\n            'operator' => 'isnull'\n          ], [\n            'field' => 'next',\n            'operator' => 'isnotnull'\n          ], [\n            'field' => 'next',\n            'operator' => '<',\n            'exp' => $sec ? \"DATE_ADD(NOW(), INTERVAL $sec SECOND)\" : 'NOW()'\n          ]]\n          ],\n          'order' => [[\n          'field' => 'priority',\n          'dir' => 'ASC'\n          ], [\n          'field' => 'next',\n          'dir' => 'ASC'\n          ]],\n          'limit' => $limit\n          ]\n        )\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 357,
            "endLine": 403,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getNextRows",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "limit",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                },
                {
                    "name": "sec",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$sec"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * @param int $limit\n   * @param int $sec\n   * @return array|null\n   * @throws \\Exception\n   *\/"
        },
        "getFailed": {
            "name": "getFailed",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFailed(): ?array\n  {\n    if ($this->check()) {\n      return array_map(\n        function ($a) {\n          $cfg = $a['cfg'] ? json_decode($a['cfg'], true) : [];\n          unset($a['cfg']);\n          return X::mergeArrays($a, $cfg);\n        }, $this->db->rselectAll(\n          [\n          'table' => $this->table,\n          'fields' => [],\n          'where' => [\n          'conditions' => [[\n            'field' => 'active',\n            'value' => 1\n          ], [\n            'field' => 'pid',\n            'operator' => 'isnotnull'\n          ], [\n            'field' => 'next',\n            'operator' => 'isnotnull'\n          ], [\n            'field' => 'NOW()',\n            'operator' => '>',\n            'exp' => \"DATE_ADD(prev, INTERVAL JSON_EXTRACT(cfg, '$.timeout') SECOND)\"\n          ]]\n          ],\n          'order' => [[\n          'field' => 'priority',\n          'dir' => 'ASC'\n          ], [\n          'field' => 'next',\n          'dir' => 'ASC'\n          ]]\n          ]\n        )\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 410,
            "endLine": 451,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFailed",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * @return array|null\n   * @throws \\Exception\n   *\/"
        },
        "notifyFailed": {
            "name": "notifyFailed",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function notifyFailed(?Notification $notification = null)\n  {\n    $notifications = $notification ?? new Notification($this->db);\n    if ($failed = $this->getFailed()) {\n      foreach ($failed as $f) {\n        $content = X::_('The task').\" $f[file] \".X::_('failed.');\n        if (empty($f['notification'])\n            && $notifications->insertByOption(X::_('CRON task failed'), $content, 'cron\/task_failed', true)\n        ) {\n          $this->db->update($this->table, ['notification' => X::microtime()], ['id' => $f['id']]);\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 458,
            "endLine": 471,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "notifyFailed",
            "returns": [],
            "arguments": [
                {
                    "name": "notification",
                    "position": 0,
                    "type": "null|bbn\\Appui\\Notification",
                    "type_arr": [
                        "null",
                        "bbn\\Appui\\Notification"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "Notification|null",
                        "name": "$notification"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * @param Notification|null $notification\n   * @throws \\Exception\n   *\/"
        },
        "isRunning": {
            "name": "isRunning",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isRunning(string $id_cron)\n  {\n    return (bool)( $this->check() && $this->db->count(\n      $this->table, [\n      ['id' => $id_cron],\n      ['pid', 'isnotnull']\n      ]\n    ));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 478,
            "endLine": 486,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isRunning",
            "returns": [],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "cron"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "cron"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_cron\n   * @return bool\n   *\/"
        },
        "activate": {
            "name": "activate",
            "summary": "Sets the active column to 1 for the given CRON ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function activate($id_cron)\n  {\n    return $this->db->update($this->table, ['active' => 1], ['id' => $id_cron]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 495,
            "endLine": 498,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "activate",
            "returns": [],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the active column to 1 for the given CRON ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_cron"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the active column to 1 for the given CRON ID.\n   *\n   * @param $id_cron\n   * @return int|null\n   *\/"
        },
        "deactivate": {
            "name": "deactivate",
            "summary": "Sets the active column to 0 for the given CRON ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deactivate($id_cron)\n  {\n    return $this->db->update($this->table, ['active' => 0], ['id' => $id_cron]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 507,
            "endLine": 510,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deactivate",
            "returns": [],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the active column to 0 for the given CRON ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_cron"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the active column to 0 for the given CRON ID.\n   *\n   * @param $id_cron\n   * @return int|null\n   *\/"
        },
        "setPid": {
            "name": "setPid",
            "summary": "Sets the pid' column to the given value for the given CRON ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setPid($id_cron, $pid)\n  {\n    return $this->db->update($this->table, ['pid' => $pid], ['id' => $id_cron]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 519,
            "endLine": 522,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setPid",
            "returns": [],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the pid' column to the given value for the given CRON ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_cron"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the pid' column to the given value for the given CRON ID.\n   *\n   * @param $id_cron\n   * @return int|null\n   *\/"
        },
        "unsetPid": {
            "name": "unsetPid",
            "summary": "Sets the pid and notification columns to null for the given CRON ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetPid($id_cron)\n  {\n    return $this->db->update(\n      $this->table, [\n      'pid' => null,\n      'notification' => null\n      ], ['id' => $id_cron]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 531,
            "endLine": 539,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetPid",
            "returns": [],
            "arguments": [
                {
                    "name": "id_cron",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the pid and notification columns to null for the given CRON ID.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$id_cron"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the pid and notification columns to null for the given CRON ID.\n   *\n   * @param $id_cron\n   * @return int|null\n   *\/"
        },
        "add": {
            "name": "add",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function add($cfg): ?array\n  {\n    if ($this->check()\n        && X::hasProps($cfg, ['file', 'priority', 'frequency', 'timeout'], true)\n    ) {\n      $d = [\n        'file' => $cfg['file'],\n        'description' => $cfg['description'] ?? '',\n        'next' => $cfg['next'] ?? date('Y-m-d H:i:s'),\n        'priority' => $cfg['priority'],\n        'cfg' => json_encode(\n          [\n          'frequency' => $cfg['frequency'],\n          'timeout' => $cfg['timeout']\n          ]\n        ),\n        'active' => 1\n      ];\n      if ($this->db->insert($this->table, $d)) {\n        $d['id'] = $this->db->lastId();\n        return $d;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 546,
            "endLine": 571,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "add",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $cfg\n   * @return array|null\n   *\/"
        },
        "addSingle": {
            "name": "addSingle",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addSingle(string $file, string $variant, int $priority = 5, int $timeout = 360)\n  {\n    if ($this->check()) {\n      $d = [\n        'file' => $file,\n        'description' => X::_('One shot action'),\n        'next' => date('Y-m-d H:i:s'),\n        'priority' => $priority,\n        'cfg' => json_encode(\n          [\n            'frequency' => null,\n            'timeout' => $timeout\n          ]\n        ),\n        'project' => BBN_PROJECT,\n        'active' => 1\n      ];\n      if ($this->db->insertUpdate($this->table, $d)) {\n        $d['id'] = $this->db->lastId();\n        return $d;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 574,
            "endLine": 598,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "addSingle",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "variant",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "priority",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 5,
                    "default_name": ""
                },
                {
                    "name": "timeout",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 360,
                    "default_name": ""
                }
            ]
        },
        "edit": {
            "name": "edit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Manager.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function edit(string $id, array $cfg): ?array\n  {\n    if ($this->check()\n        && ($cron = $this->getCron($id))\n    ) {\n      $d = [\n        'file' => $cfg['file'] ?? $cron['file'],\n        'description' => $cfg['description'] ?? $cron['description'],\n        'next' => $cfg['next'] ?? $cron['next'],\n        'priority' => $cfg['priority'] ?? $cron['priority'],\n        'cfg' => json_encode(\n          [\n          'frequency' => $cfg['frequency'] ?? $cron['frequency'],\n          'timeout' => $cfg['timeout'] ?? $cron['timeout']\n          ]\n        ),\n        'active' => 1\n      ];\n      if ($this->db->update($this->table, $d, ['id' => $id])) {\n        $d['id'] = $id;\n        return $d;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 606,
            "endLine": 631,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "edit",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param array $cfg\n   * @return array|null\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "getCronTimeout": {
            "name": "getCronTimeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getCronTimeout(): int\n  {\n    return self::$cron_timeout;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 59,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCronTimeout",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return int\n   *\/"
        },
        "setCronTimeout": {
            "name": "setCronTimeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setCronTimeout(int $cron_timeout): void\n  {\n    self::$cron_timeout = $cron_timeout;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 67,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setCronTimeout",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cron_timeout",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "timeout"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$cron",
                        "description": "timeout"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param int $cron_timeout\n   *\/"
        },
        "getPollTimeout": {
            "name": "getPollTimeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getPollTimeout(): int\n  {\n    return self::$poll_timeout;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 75,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPollTimeout",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return int\n   *\/"
        },
        "setPollTimeout": {
            "name": "setPollTimeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setPollTimeout(int $poll_timeout): void\n  {\n    self::$poll_timeout = $poll_timeout;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 83,
            "endLine": 86,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setPollTimeout",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "poll_timeout",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "timeout"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$poll",
                        "description": "timeout"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param int $poll_timeout\n   *\/"
        },
        "getUserTimeout": {
            "name": "getUserTimeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getUserTimeout(): int\n  {\n    return self::$user_timeout;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 91,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserTimeout",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return int\n   *\/"
        },
        "setUserTimeout": {
            "name": "setUserTimeout",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setUserTimeout(int $user_timeout): void\n  {\n    self::$user_timeout = $user_timeout;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 99,
            "endLine": 102,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setUserTimeout",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "user_timeout",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "timeout"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$user",
                        "description": "timeout"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param int $user_timeout\n   *\/"
        },
        "init": {
            "name": "init",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function init(array $cfg = [])\n  {\n    $this->path = $cfg['data_path'] ?? bbn\\Mvc::getDataPath('appui-cron');\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 108,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "init",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $cfg\n   *\/"
        },
        "getPath": {
            "name": "getPath",
            "summary": "Returns the $path property.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPath(): ?string\n  {\n    return $this->path;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 118,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the $path property.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the $path property.\n   *\n   * @return array|null\n   *\/"
        },
        "getStatusPath": {
            "name": "getStatusPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getStatusPath($type): ?string\n  {\n    return $this->path && $type ? $this->path.'status\/.'.$type : null;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 127,
            "endLine": 130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getStatusPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $type\n   * @return string|null\n   *\/"
        },
        "getPidPath": {
            "name": "getPidPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPidPath(array $cfg): ?string\n  {\n    if ($this->path && (isset($cfg['type']) || isset($cfg['id']))) {\n      return $this->path.'pid\/.'.($cfg['id'] ?? $cfg['type']);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 136,
            "endLine": 142,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPidPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $cfg\n   * @return string|null\n   *\/"
        },
        "getLogPath": {
            "name": "getLogPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLogPath(array $cfg, bool $error = false, bool $no_path = false): ?string\n  {\n    $path = null;\n    if ($this->path && (isset($cfg['type']) || isset($cfg['id']))) {\n      if ( $error ){\n        $path = $this->path.'error\/'.(isset($cfg['id']) ? 'tasks\/'.$cfg['id'] : $cfg['type']);\n      }\n      else {\n        $path = $this->path.'log\/'.(isset($cfg['id']) ? 'tasks\/'.$cfg['id'] : $cfg['type']);\n      }\n      if ($error || $no_path) {\n        $path .= '\/';\n      }\n      else {\n        $path = \\bbn\\X::makeStoragePath($path);\n      }\n    }\n\n    return $path;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 150,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getLogPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "no_path",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "path"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$error"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$no",
                        "description": "path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $cfg\n   * @param bool $error\n   * @param bool $no_path\n   * @return string|null\n   *\/"
        },
        "getLogTree": {
            "name": "getLogTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLogTree(array $cfg, bool $error = false)\n  {\n    $fs = new bbn\\File\\System();\n    $fpath = !empty($cfg['fpath']) ? $cfg['fpath'] . '\/' : '';\n    if (($path = $this->getLogPath($cfg, $error, true)) && $fs->isDir($path.$fpath)) {\n      $fs->cd($path.$fpath);\n      $dirs = array_reverse($fs->getFiles('.\/', true, true, null, 'cts'));\n      foreach ( $dirs as &$t ){\n        $t['numChildren'] = $t['num'] ?? 0;\n        $t['fpath'] = $fpath . $t['name'];\n        if ( isset($t['num']) ){\n          unset($t['num']);\n        }\n      }\n      return $dirs;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 171,
            "endLine": 187,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getLogTree",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getDayLogs": {
            "name": "getDayLogs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDayLogs(array $cfg): ?array\n  {\n    if ( bbn\\Str::isUid($cfg['id']) && bbn\\Str::isDateSql($cfg['day']) ){\n      $p = \\explode('-', $cfg['day']);\n      \\array_pop($p);\n      $p = \\implode('\/', $p).'\/';\n      if (\n        ($task = $this->getManager()->getCron($cfg['id'])) &&\n        !empty($task['file']) &&\n        ($path = $this->getLogPath($cfg, false, true)) &&\n        ($file = $path.$p.$cfg['day'].'.json') &&\n        \\is_file($file) &&\n        ($file = \\json_decode(\\file_get_contents($file), true))\n      ){\n        return array_reverse(array_filter($file, function($f) use($task){\n          return isset($f['file']) && ($f['file'] === $task['file']);\n        }));\n      }\n      return [];\n    }\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 189,
            "endLine": 210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDayLogs",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get_log_prev_next": {
            "name": "get_log_prev_next",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function  get_log_prev_next(array $cfg): ?string\n  {\n    $fs = new bbn\\File\\System();\n    $fpath = $cfg['fpath'] ?: '';\n    if ( ($path = $this->getLogPath($cfg, false, true)) && $fs->isDir($path.$fpath) ){\n      $fs->cd($path.$fpath);\n      $files = array_reverse($fs->getFiles('.\/', true, true, null, 'cts'));\n      foreach ( $files as $i => $f ){\n        if ( $f['name'] === $cfg['filename'] ){\n          $tf = $files[$i + ($cfg['action'] === 'prev' ? 1 : -1)];\n          return $path . $fpath . (!empty($tf) ? $tf['name'] : $f['name']);\n        }\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 212,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "get_log_prev_next",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLastLogs": {
            "name": "getLastLogs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastLogs(array $cfg, bool $error = false, $start = 0, $num = 10): ?array\n  {\n    $fs = new \\bbn\\File\\System();\n    if (($path = $this->getLogPath($cfg, $error, true)) && $fs->isDir($path)) {\n      $res = [];\n      $fs->cd($path);\n      $years = array_reverse($fs->getDirs($path));\n      foreach ($years as $y) {\n        $months = array_reverse($fs->getDirs($y));\n        foreach ($months as $m) {\n          $days = array_reverse($fs->getDirs($m));\n          foreach ($days as $d) {\n            $nums = array_reverse($fs->getDirs($d));\n            foreach ($nums as $num) {\n              foreach (array_reverse($fs->getFiles($num)) as $f) {\n                if ($start) {\n                  $start--;\n                }\n                if (!$start) {\n                  $res[] = $f;\n                  if (count($res) >= $num) {\n                    return $res;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      return $res;\n    }\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 229,
            "endLine": 261,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getLastLogs",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                }
            ]
        },
        "getLastLog": {
            "name": "getLastLog",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastLog(array $cfg, bool $error = false): ?string\n  {\n    if ($tmp = $this->getLastLogs($cfg, $error, 0, 1)) {\n      return $tmp[0];\n    }\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 263,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getLastLog",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "error",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "isActive": {
            "name": "isActive",
            "summary": "Returns true if the file data_folder\/.active exists, false otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isActive(): bool\n  {\n    if ( $this->check() ){\n      return file_exists($this->getStatusPath('active'));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 286,
            "endLine": 293,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isActive",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if the file data_folder\/.active exists, false otherwise.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the file data_folder\/.active exists, false otherwise.\n   *\n   * @return bool\n   *\/"
        },
        "isCronActive": {
            "name": "isCronActive",
            "summary": "Returns true if the file data_folder\/.cron exists, false otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isCronActive(): bool\n  {\n    if ( $this->check() ){\n      return file_exists($this->getStatusPath('cron'));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 300,
            "endLine": 307,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isCronActive",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if the file data_folder\/.cron exists, false otherwise.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the file data_folder\/.cron exists, false otherwise.\n   *\n   * @return bool\n   *\/"
        },
        "isPollActive": {
            "name": "isPollActive",
            "summary": "Returns true if the file data_folder\/.poll exists, false otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Cron\\Manager",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Cron\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isPollActive(): bool\n  {\n    if ( $this->check() ){\n      return file_exists($this->getStatusPath('poll'));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Cron\\Common",
            "startLine": 314,
            "endLine": 321,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isPollActive",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if the file data_folder\/.poll exists, false otherwise.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the file data_folder\/.poll exists, false otherwise.\n   *\n   * @return bool\n   *\/"
        }
    },
    "properties": {
        "table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Manager",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The tables' prefix (the tables will be called ?cron and ?journal)"
                    }
                ]
            },
            "parent": false,
            "value": "bbn_"
        },
        "path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The full path to the plugin data folder where the actions and log files are\/will be located"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bbn\\Db",
                        "description": "The DB connection"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "ctrl": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bbn\\Mvc\\Controller",
                        "description": "The controller"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "mail": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "todo",
                        "text": "The class shouldn't send emails directly"
                    },
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "data": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "name": "$ctrl"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "enabled": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": true
        },
        "timeout": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": false,
            "value": 50
        },
        "cron_timeout": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": 300
        },
        "poll_timeout": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": 600
        },
        "user_timeout": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": 480
        },
        "cron_check_timeout": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Cron\\Manager"
            },
            "declaring_trait": "bbn\\Cron\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": 60
        }
    },
    "staticProperties": {
        "cron_timeout": 300,
        "poll_timeout": 600,
        "user_timeout": 480,
        "cron_check_timeout": 60
    },
    "constants": null,
    "uses": {
        "bbn": "bbn",
        "bbn\\Appui\\Notification": "Notification",
        "bbn\\Db\\Enums\\Errors": "Errors",
        "bbn\\X": "X"
    },
    "dummyComments": [
        "\/**\n * Class cron\n * @package bbn\\Appui\n *\/"
    ],
    "summary": "Class cron",
    "description": "",
    "description_parts": []
}