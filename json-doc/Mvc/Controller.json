{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Mvc\\Controller",
    "namespace": true,
    "realName": "Controller",
    "realNamespace": "bbn\\Mvc",
    "traits": [
        "bbn\\Mvc\\Common"
    ],
    "interfaces": {
        "bbn\\Mvc\\Api": {
            "name": "bbn\\Mvc\\Api"
        }
    },
    "fileName": "\/Mvc\/Controller.php",
    "startLine": 13,
    "endLine": 2099,
    "numMethods": 120,
    "numProperties": 24,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [
        "bbn\\Mvc\\Api"
    ],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_mvc": null,
        "_reroutes": [],
        "_is_controlled": null,
        "_is_rerouted": false,
        "_path": null,
        "_request": null,
        "_dir": null,
        "_file": null,
        "_root": null,
        "_checkers": [],
        "_plugin": null,
        "_plugin_name": null,
        "_stream": false,
        "data": [],
        "params": [],
        "arguments": [],
        "post": [],
        "get": [],
        "files": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Mvc",
    "shortName": "Controller",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "This will call the initial build a new instance.",
            "description": "It should be called only once from within the script.\nAll subsequent calls to controllers should be done through $this->add($path).",
            "description_parts": [
                {
                    "type": "text",
                    "content": "It should be called only once from within the script.\nAll subsequent calls to controllers should be done through $this->add($path)."
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Mvc $mvc, array $route, $data = false)\n  {\n    $this->_mvc = $mvc;\n    $this->reset($route, $data);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 155,
            "endLine": 159,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "mvc",
                    "position": 0,
                    "type": "bbn\\Mvc",
                    "type_arr": [
                        "bbn\\Mvc"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "route",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will call the initial build a new instance.\nIt should be called only once from within the script.\nAll subsequent calls to controllers should be done through $this->add($path).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Mvc",
                        "name": "$mvc"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$route"
                    },
                    {
                        "tag": "param",
                        "type": "array|boolean",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will call the initial build a new instance.\n   * It should be called only once from within the script.\n   * All subsequent calls to controllers should be done through $this->add($path).\n   *\n   * @param Mvc       $mvc\n   * @param array         $route\n   * @param array|boolean $data\n   *\/"
        },
        "setStream": {
            "name": "setStream",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setStream($type = ''): self\n  {\n    $content = ob_get_contents();\n    if ($this->_stream || $content) {\n      throw new Exception(\"Impossible to stream a controller that has already been streamed\");\n    }\n\n    while (ob_get_level()) {\n      ob_end_clean();\n    }\n\n    $this->_stream = true;\n    set_time_limit(0);\n    ini_set('output_buffering', 'Off');\n    ini_set('zlib.output_compression', false);\n    if (function_exists('apache_setenv')) {\n      apache_setenv('no-gzip', '1');\n      apache_setenv('dont-vary', '1');\n    }\n\n    header('X-Accel-Buffering: no');\n    header(\"Content-Encoding: none\");\n    header(\"Transfer-Encoding: chunked\"); \/\/ Or \"Content-Length: ... \" if chunking is not used\n    header('Content-Type: plain\/text; charset=UTF-8');\n    \/\/header('Content-Type: application\/json; charset=UTF-8');\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 161,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "setStream",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isStream": {
            "name": "isStream",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isStream(): bool\n  {\n    return $this->_stream;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 190,
            "endLine": 193,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isStream",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "stream": {
            "name": "stream",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function stream($data): void\n  {\n    if ($this->_stream) {\n      if (!$data) {\n        return;\n      }\n\n      while (ob_get_level()) {\n        ob_flush();\n      }\n      \n      $st = json_encode(\n        is_string($data) ? \n          ['content' => $data]\n          : (is_array($data) ? $data : ['success' => false])\n      ) . PHP_EOL;\n      $len = strlen($st);\n      if ($len < 8192) {\n        $st .= str_repeat(' ', 8192 - $len);\n      }\n\n      echo $st;\n      flush();\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 196,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "stream",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "reset": {
            "name": "reset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function reset(array $info, $data = false)\n  {\n    if (!isset($info['mode'], $info['path'], $info['file'], $info['request'], $info['root'])) {\n      X::log($info, 'error_control_reset');\n      throw new Exception(\"Impossible to reset the controller without the necessary information\");\n    }\n\n    $this->_path        = $info['path'];\n    $this->_plugin      = $info['plugin'];\n    $this->_request     = $this->getRequest();\n    $this->_file        = $info['file'];\n    $this->_root        = $info['root'];\n    $this->arguments    = $info['args'];\n    $this->_checkers    = $info['checkers'];\n    $this->_plugin      = $info['plugin'];\n    $this->_plugin_name = $info['plugin_name'];\n    $this->mode         = $info['mode'];\n    $this->data         = \\is_array($data) ? $data : [];\n    \/\/ When using CLI a first parameter can be used as route,\n    \/\/ a second JSON encoded can be used as $this->post\n    \/** @var Db db *\/\n    if ($db = $this->_mvc->getDb()) {\n      $this->db = $db;\n    }\n\n    $this->inc    = &$this->_mvc->inc;\n    $this->post   = $this->_mvc->getPost();\n    $this->get    = $this->_mvc->getGet();\n    $this->files  = $this->_mvc->getFiles();\n    $this->params = $this->_mvc->getParams();\n    $this->url    = $this->getUrl();\n    $this->obj    = new stdClass();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 227,
            "endLine": 259,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "reset",
            "returns": [],
            "arguments": [
                {
                    "name": "info",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$info"
                    },
                    {
                        "tag": "param",
                        "type": "false",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $info\n   * @param false $data\n   *\/"
        },
        "addAuthorizedRoute": {
            "name": "addAuthorizedRoute",
            "summary": "Add a route to authorized routes list if not already exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addAuthorizedRoute(): int\n  {\n    return $this->_mvc->addAuthorizedRoute(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addAuthorizedRoute",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "Add a route to authorized routes list if not already exists.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Add a route to authorized routes list if not already exists.\n   *\n   * @return int\n   *\/"
        },
        "isAuthorizedRoute": {
            "name": "isAuthorizedRoute",
            "summary": "Checks if a route is authorized.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAuthorizedRoute($url): bool\n  {\n    return $this->_mvc->isAuthorizedRoute($url);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 279,
            "endLine": 282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isAuthorizedRoute",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if a route is authorized.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a route is authorized.\n   *\n   * @param $url\n   * @return bool\n   *\/"
        },
        "getRoot": {
            "name": "getRoot",
            "summary": "Returns the root of the application in the URL (base href).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoot()\n  {\n    return $this->_mvc->getRoot();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 290,
            "endLine": 293,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRoot",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the root of the application in the URL (base href).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the root of the application in the URL (base href).\n   *\n   * @return string\n   *\/"
        },
        "setRoot": {
            "name": "setRoot",
            "summary": "Sets the root of the application in the URL (base href).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setRoot($root)\n  {\n    $this->_mvc->setRoot($root);\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 302,
            "endLine": 306,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setRoot",
            "returns": [],
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the root of the application in the URL (base href).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$root"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the root of the application in the URL (base href).\n   *\n   * @param string $root\n   * @return $this\n   *\/"
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "Get the request url.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrl()\n  {\n    return $this->_mvc->getUrl();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 314,
            "endLine": 317,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUrl",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Get the request url.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Get the request url.\n   *\n   * @return string|null\n   *\/"
        },
        "getPath": {
            "name": "getPath",
            "summary": "Returns the internal path to the controller.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPath()\n  {\n    return $this->_path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 325,
            "endLine": 328,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the internal path to the controller.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the internal path to the controller.\n   *\n   * @return string|null\n   *\/"
        },
        "getRequest": {
            "name": "getRequest",
            "summary": "Returns the current controller's route, i.e as demanded by the client.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRequest()\n  {\n    return $this->_mvc->getRequest();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 336,
            "endLine": 339,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRequest",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the current controller's route, i.e as demanded by the client.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current controller's route, i.e as demanded by the client.\n   *\n   * @return string\n   *\/"
        },
        "exists": {
            "name": "exists",
            "summary": "Checks if the internal path to the controller exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function exists()\n  {\n    return !empty($this->_path);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 347,
            "endLine": 350,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "exists",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks if the internal path to the controller exists.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the internal path to the controller exists.\n   *\n   * @return bool\n   *\/"
        },
        "getAll": {
            "name": "getAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAll()\n  {\n    return [\n      'controller' => $this->getController(),\n      'dir' => $this->getCurrentDir(),\n      'local_path' => $this->getLocalPath(),\n      'local_route' => $this->getLocalRoute(),\n      'path' => $this->getPath(),\n      'root' => $this->getRoot(),\n      'request' => $this->getRequest(),\n      'checkers' => $this->_checkers\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 353,
            "endLine": 365,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAll",
            "returns": [],
            "arguments": []
        },
        "sayRoot": {
            "name": "sayRoot",
            "summary": "Returns the current controller's root directory.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function sayRoot()\n  {\n    return $this->_root;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 373,
            "endLine": 376,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "sayRoot",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the current controller's root directory.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current controller's root directory.\n   *\n   * @return string\n   *\/"
        },
        "getController": {
            "name": "getController",
            "summary": "Returns the current controller's file's name.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getController()\n  {\n    return $this->_file;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 384,
            "endLine": 387,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getController",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the current controller's file's name.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current controller's file's name.\n   *\n   * @return string\n   *\/"
        },
        "getLocalPath": {
            "name": "getLocalPath",
            "summary": "Returns the current controller's path.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLocalPath()\n  {\n    if (($pp = $this->getPrepath()) && (strpos($this->_path, $pp) === 0)) {\n      return substr($this->_path, \\strlen($pp));\n    }\n\n    return $this->_path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 395,
            "endLine": 402,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLocalPath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the current controller's path.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current controller's path.\n   *\n   * @return string\n   *\/"
        },
        "getLocalRoute": {
            "name": "getLocalRoute",
            "summary": "Returns the current controller's route.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLocalRoute()\n  {\n    if (($pp = $this->getPrepath()) && (strpos($this->_request, $pp) === 0)) {\n      return substr($this->_request, \\strlen($pp));\n    }\n\n    return $this->_request;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 410,
            "endLine": 417,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLocalRoute",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the current controller's route.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current controller's route.\n   *\n   * @return string\n   *\/"
        },
        "getCurrentDir": {
            "name": "getCurrentDir",
            "summary": "Returns the current controller's directory name.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrentDir(): ?string\n  {\n    if ($this->_path) {\n      $p = X::dirname($this->_path);\n      if ($p === '.') {\n        return '';\n      }\n\n      if (\n          ($prepath = $this->getPrepath())\n          && (strpos($p, $prepath) === 0)\n      ) {\n        return substr($p, \\strlen($prepath));\n      }\n\n      return $p;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 425,
            "endLine": 444,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrentDir",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the current controller's directory name.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current controller's directory name.\n   *\n   * @return string\n   *\/"
        },
        "getPlugin": {
            "name": "getPlugin",
            "summary": "If the controller is inside a plugin it will its name and null otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPlugin()\n  {\n    return $this->_plugin;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 452,
            "endLine": 455,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPlugin",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "If the controller is inside a plugin it will its name and null otherwise.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * If the controller is inside a plugin it will its name and null otherwise.\n   *\n   * @return null|string\n   *\/"
        },
        "render": {
            "name": "render",
            "summary": "This directly renders content with arbitrary values using the existing Mustache engine.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function render(string $view, array|null $model = null): string\n  {\n    if (empty($model) && !empty($this->data)) {\n      $model = $this->data;\n    }\n\n    return \\is_array($model) ? Tpl::render($view, $model) : $view;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 465,
            "endLine": 472,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "render",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "view",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The view to be rendered"
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The data model to fill the view with"
                }
            ],
            "doc": {
                "description": "This directly renders content with arbitrary values using the existing Mustache engine.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$view",
                        "description": "The view to be rendered"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$model",
                        "description": "The data model to fill the view with"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This directly renders content with arbitrary values using the existing Mustache engine.\n   *\n   * @param string $view The view to be rendered\n   * @param array|null $model The data model to fill the view with\n   * @return string\n   *\/"
        },
        "isCli": {
            "name": "isCli",
            "summary": "Returns true if called from CLI\/Cron, false otherwise",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isCli()\n  {\n    return $this->_mvc->isCli();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 480,
            "endLine": 483,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isCli",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns true if called from CLI\/Cron, false otherwise\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if called from CLI\/Cron, false otherwise\n   *\n   * @return boolean\n   *\/"
        },
        "reroute": {
            "name": "reroute",
            "summary": "This will reroute a controller to another one seamlessly.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function reroute($path = '', $post = false, $arguments = false)\n  {\n    if (!\\in_array($path, $this->_reroutes) && ($this->_path !== $path)) {\n      $this->_reroutes[] = $path;\n      $this->_mvc->reroute($path, $post, $arguments);\n      $this->_is_rerouted = 1;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 492,
            "endLine": 499,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "reroute",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>"
                },
                {
                    "name": "post",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will reroute a controller to another one seamlessly.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will reroute a controller to another one seamlessly.\n   *\n   * @param string $path The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>\n   * @return void\n   *\/"
        },
        "incl": {
            "name": "incl",
            "summary": "This will include a file from within the controller's path. Chainable",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function incl($file_name)\n  {\n    if ($this->exists()) {\n      $d = X::dirname($this->_file) . '\/';\n      if (substr($file_name, -4) !== '.php') {\n        $file_name .= '.php';\n      }\n\n      if ((strpos($file_name, '..') === false) && file_exists($d . $file_name)) {\n        $bbn_path = $d . $file_name;\n        unset($d, $file_name);\n        include $bbn_path;\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 508,
            "endLine": 524,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "incl",
            "returns": [],
            "arguments": [
                {
                    "name": "file_name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name If .php is omitted it will be added"
                }
            ],
            "doc": {
                "description": "This will include a file from within the controller's path. Chainable\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "name If .php is omitted it will be added"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will include a file from within the controller's path. Chainable\n   *\n   * @param string $file_name If .php is omitted it will be added\n   * @return $this\n   *\/"
        },
        "addScript": {
            "name": "addScript",
            "summary": "This will add the given string to the script property, and create it if needed. Chainable",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addScript($script)\n  {\n    if (\\is_object($this->obj)) {\n      if (!isset($this->obj->script)) {\n        $this->obj->script = '';\n      }\n\n      $this->obj->script .= $script;\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 533,
            "endLine": 544,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "addScript",
            "returns": [],
            "arguments": [
                {
                    "name": "script",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The javascript chain to add"
                }
            ],
            "doc": {
                "description": "This will add the given string to the script property, and create it if needed. Chainable\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$script",
                        "description": "The javascript chain to add"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will add the given string to the script property, and create it if needed. Chainable\n   *\n   * @param string $script The javascript chain to add\n   * @return $this\n   *\/"
        },
        "registerPluginClasses": {
            "name": "registerPluginClasses",
            "summary": "Register a plugin class using spl_autoload.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function registerPluginClasses($plugin_path): self\n  {\n    spl_autoload_register(\n        function ($class_name) use ($plugin_path) {\n          if (\n              (strpos($class_name, '\/') === false)\n              && (strpos($class_name, '.') === false)\n          ) {\n            $cls  = explode('\\\\', $class_name);\n            $path = implode('\/', $cls);\n            if (file_exists($plugin_path . 'lib\/' . $path . '.php')) {\n              include_once $plugin_path . 'lib\/' . $path . '.php';\n            }\n          }\n        }\n    );\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 553,
            "endLine": 570,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "registerPluginClasses",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "plugin_path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Register a plugin class using spl_autoload.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$plugin_path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Register a plugin class using spl_autoload.\n   *\n   * @param $plugin_path\n   * @return $this\n   *\/"
        },
        "control": {
            "name": "control",
            "summary": "This will enclose the controller's inclusion",
            "description": "It can be publicly launched through check()",
            "description_parts": [
                {
                    "type": "text",
                    "content": "It can be publicly launched through check()"
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function control()\n  {\n    if ($this->_file && !isset($this->_is_controlled)) {\n      $ok = 1;\n      if ($this->_plugin) {\n        $this->registerPluginClasses($this->pluginPath());\n      }\n\n      if (defined('BBN_ROOT_CHECKER')) {\n        if (!defined('BBN_ROOT_CHECKER_OK')) {\n          define('BBN_ROOT_CHECKER_OK', true);\n          array_unshift($this->_checkers, constant('BBN_ROOT_CHECKER'));\n        }\n      }\n\n      ob_start();\n      foreach ($this->_checkers as $appui_checker_file) {\n        \/\/ If a checker file returns false, the controller is not processed\n        \/\/ The checker file can define data and inc that can be used in the subsequent controller\n        if (self::includeController($appui_checker_file, $this, true) === false) {\n          $ok = false;\n          break;\n        }\n      }\n\n      if (($log = ob_get_contents()) && \\is_string($log)) {\n        $this->obj->content = $log;\n      }\n\n      if (ob_get_level()) {\n        ob_end_clean();\n      }\n\n      \/\/ If rerouted during the checkers\n      if ($this->_is_rerouted) {\n        $this->_is_rerouted = false;\n        return $this->control();\n      }\n\n      if (!$ok) {\n        return false;\n      }\n\n      $output = self::includeController($this->_file, $this);\n      \/\/ If rerouted during the controller\n      if ($this->_is_rerouted) {\n        $this->_is_rerouted = false;\n        return $this->control();\n      }\n\n      if (\\is_object($this->obj) && !isset($this->obj->content) && !empty($output)) {\n        $this->obj->content = $output;\n      }\n\n      $this->_is_controlled = 1;\n    }\n\n    return $this->_is_controlled ? true : false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 579,
            "endLine": 637,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "control",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will enclose the controller's inclusion\nIt can be publicly launched through check()\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * This will enclose the controller's inclusion\n   * It can be publicly launched through check()\n   *\n   * @return boolean\n   *\/"
        },
        "process": {
            "name": "process",
            "summary": "This will launch the controller in a new function.",
            "description": "It is publicly launched through check().",
            "description_parts": [
                {
                    "type": "text",
                    "content": "It is publicly launched through check()."
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function process()\n  {\n    if (\\is_null($this->_is_controlled)) {\n      if ($this->_plugin_name) {\n        $router = Router::getInstance();\n        if ($textDomain = $router->getLocaleDomain($this->_plugin_name)) {\n          $oldTextDomain = textdomain(null);\n          if ($textDomain !== $oldTextDomain) {\n            textdomain($textDomain);\n          }\n          else {\n            unset($oldTextDomain);\n          }\n        }\n      }\n\n      $this->control();\n      if (!empty($oldTextDomain)) {\n        textdomain($oldTextDomain);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 646,
            "endLine": 669,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "process",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will launch the controller in a new function.\nIt is publicly launched through check().\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * This will launch the controller in a new function.\n   * It is publicly launched through check().\n   *\n   * @return $this\n   *\/"
        },
        "hasBeenRerouted": {
            "name": "hasBeenRerouted",
            "summary": "Checks if the controller has been rerouted",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasBeenRerouted()\n  {\n    return (bool)$this->_is_rerouted;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 677,
            "endLine": 680,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "hasBeenRerouted",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks if the controller has been rerouted\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the controller has been rerouted\n   *\n   * @return bool\n   *\/"
        },
        "getJs": {
            "name": "getJs",
            "summary": "This will get a javascript view encapsulated in an anonymous function for embedding in HTML",
            "description": "from a path.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "from a path."
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getJs($path = '', array|null $data = null, $encapsulated = true)\n  {\n    $params = func_get_args();\n    \/\/ The model can be set as first argument if the path is default\n    if (\\is_array($path)) {\n      \/\/ In which case the second argument, if defined, is $encapsulated\n      if (array_key_exists(1, $params)) {\n        $encapsulated = $data;\n      }\n\n      $data = $path;\n      $path = '';\n    }\n\n    if ($r = $this->getView($path, 'js', $data)) {\n      return '<script>' .\n        ( $encapsulated ? '(function(){' . PHP_EOL : '' ) .\n        ( empty($data) ? '' : 'let data = ' . X::jsObject($data) . ';' ) .\n        $r .\n        \/\/( $encapsulated ? '})(jQuery);' : '' ).\n        ($encapsulated ? PHP_EOL . '})();' : '') .\n        '<\/script>';\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 690,
            "endLine": 715,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getJs",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "encapsulated",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a javascript view encapsulated in an anonymous function for embedding in HTML\nfrom a path.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a javascript view encapsulated in an anonymous function for embedding in HTML\n   * from a path.\n   *\n   * @param string $path\n   * @return string|false\n   *\/"
        },
        "getJsGroup": {
            "name": "getJsGroup",
            "summary": "This will get a javascript view encapsulated in an anonymous function for embedding in HTML",
            "description": "from a dir or an array of files.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "from a dir or an array of files."
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getJsGroup($files = '', array|null $data = null, $encapsulated = true)\n  {\n    if ($js = $this->getViewGroup($files, $data, 'js')) {\n      return '<script>' .\n      ( $encapsulated ? '(function($){' . PHP_EOL : '' ) .\n      ( empty($data) ? '' : 'let data = ' . X::jsObject($data) . ';' ) .\n      $js .\n      \/\/( $encapsulated ? '})(jQuery);' : '' ).\n      ( $encapsulated ? PHP_EOL . '})();' : '' ) .\n      '<\/script>';\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 727,
            "endLine": 740,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getJsGroup",
            "returns": [],
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "encapsulated",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a javascript view encapsulated in an anonymous function for embedding in HTML\nfrom a dir or an array of files.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$files"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$encapsulated"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a javascript view encapsulated in an anonymous function for embedding in HTML\n   * from a dir or an array of files.\n   *\n   * @param array|string $files\n   * @param array        $data\n   * @param boolean      $encapsulated\n   * @return string|false\n   *\/"
        },
        "getViewGroup": {
            "name": "getViewGroup",
            "summary": "This will get a view for embedding in HTML.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getViewGroup($files = '', array|null $data = null, $mode = 'html')\n  {\n    if (!\\is_array($files)) {\n      if (!($tmp = $this->_mvc->fetchDir($files, $mode))) {\n        $this->error(\"Impossible to get files from directory $files\");\n        return false;\n      }\n\n      $files = $tmp;\n    }\n\n    if (\\is_array($files) && \\count($files)) {\n      $st = '';\n      foreach ($files as $f) {\n        if ($tmp = $this->getView($f, $mode, $data)) {\n          $st .= $tmp;\n        }\n      }\n\n      return $st;\n    }\n\n    $this->error('Impossible to get files from get_view_group files argument empty');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 751,
            "endLine": 774,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getViewGroup",
            "returns": [],
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a view for embedding in HTML.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$files"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a view for embedding in HTML.\n   *\n   * @param array|string $files\n   * @param array        $data\n   * @param string       $mode\n   * @return string|false\n   *\/"
        },
        "getCss": {
            "name": "getCss",
            "summary": "This will get a CSS view encapsulated in a scoped style tag.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCss($path = '')\n  {\n    if ($r = $this->getView($path, 'css')) {\n      return \\CssMin::minify($r);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 783,
            "endLine": 790,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getCss",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a CSS view encapsulated in a scoped style tag.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a CSS view encapsulated in a scoped style tag.\n   *\n   * @param string $path\n   * @return string|false\n   *\/"
        },
        "getLess": {
            "name": "getLess",
            "summary": "This will get and compile a LESS view encapsulated in a scoped style tag.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLess($path = '')\n  {\n    return $this->getView($path, 'css', false);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 799,
            "endLine": 802,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getLess",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get and compile a LESS view encapsulated in a scoped style tag.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get and compile a LESS view encapsulated in a scoped style tag.\n   *\n   * @param string $path\n   * @return string|false\n   *\/"
        },
        "addCss": {
            "name": "addCss",
            "summary": "This will get a CSS view encapsulated in a scoped style tag and add it to the output object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addCss($path = '')\n  {\n    if ($css = $this->getCss($path)) {\n      if (!isset($this->obj->css)) {\n        $this->obj->css = '';\n      }\n\n      $this->obj->css .= $css;\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 811,
            "endLine": 822,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "addCss",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a CSS view encapsulated in a scoped style tag and add it to the output object.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a CSS view encapsulated in a scoped style tag and add it to the output object.\n   *\n   * @param string $path\n   * @return self\n   *\/"
        },
        "addLess": {
            "name": "addLess",
            "summary": "This will get and compile a LESS view encapsulated in a scoped style tag and add it to the output object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addLess($path = '')\n  {\n    if ($css = $this->getLess($path)) {\n      if (!isset($this->obj->css)) {\n        $this->obj->css = '';\n      }\n\n      $this->obj->css .= $css;\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 831,
            "endLine": 842,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "addLess",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get and compile a LESS view encapsulated in a scoped style tag and add it to the output object.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get and compile a LESS view encapsulated in a scoped style tag and add it to the output object.\n   *\n   * @param string $path\n   * @return self\n   *\/"
        },
        "addJs": {
            "name": "addJs",
            "summary": "This will add a javascript view from a file path to $this->obj->script",
            "description": "Chainable",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Chainable"
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addJs()\n  {\n    $args     = \\func_get_args();\n    $has_path = false;\n    foreach ($args as $i => $a) {\n      if ($new_data = $this->retrieveVar($a)) {\n        $this->jsData($new_data);\n      }\n      elseif (\\is_string($a)) {\n        $has_path = 1;\n      }\n      elseif (\\is_array($a)) {\n        $this->jsData($a);\n      }\n      elseif ($a === true) {\n        $this->jsData($this->data);\n      }\n    }\n\n    if (!$has_path) {\n      array_unshift($args, $this->_path);\n    }\n\n    $args[] = 'js';\n    if ($r = $this->getView(...$args)) {\n      $this->addScript($r);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 851,
            "endLine": 880,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addJs",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will add a javascript view from a file path to $this->obj->script\nChainable\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * This will add a javascript view from a file path to $this->obj->script\n   * Chainable\n   *\n   * @return self\n   *\/"
        },
        "addJsGroup": {
            "name": "addJsGroup",
            "summary": "This will add a javascript view from a directory path or an array of files to $this->obj->script",
            "description": "Chainable",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Chainable"
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addJsGroup($files = '', array $data = [])\n  {\n    if ($js = $this->getViewGroup($files, $data, 'js')) {\n      $this->jsData($data)->addScript($js);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 891,
            "endLine": 898,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "addJsGroup",
            "returns": [],
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will add a javascript view from a directory path or an array of files to $this->obj->script\nChainable\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$files"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will add a javascript view from a directory path or an array of files to $this->obj->script\n   * Chainable\n   *\n   * @param mixed $files\n   * @param array $data\n   * @return self\n   *\/"
        },
        "setObj": {
            "name": "setObj",
            "summary": "Adds to the output object from an array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setObj(array $arr)\n  {\n    foreach ($arr as $k => $a) {\n      $this->obj->{$k} = $a;\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 907,
            "endLine": 914,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setObj",
            "returns": [],
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds to the output object from an array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$arr"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds to the output object from an array.\n   *\n   * @param array $arr\n   * @return $this\n   *\/"
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "Sets the url on the output object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setUrl(string $url)\n  {\n    $this->obj->url = $url;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 923,
            "endLine": 927,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the url on the output object.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the url on the output object.\n   *\n   * @param string $url\n   * @return $this\n   *\/"
        },
        "setTitle": {
            "name": "setTitle",
            "summary": "Sets the title on the output object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTitle($title)\n  {\n    $this->obj->title = $title;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 936,
            "endLine": 940,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setTitle",
            "returns": [],
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the title on the output object.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$title"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the title on the output object.\n   *\n   * @param $title\n   * @return $this\n   *\/"
        },
        "setIcon": {
            "name": "setIcon",
            "summary": "Sets the icon on the output object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setIcon(string $icon)\n  {\n    $this->obj->icon = $icon;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 949,
            "endLine": 953,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setIcon",
            "returns": [],
            "arguments": [
                {
                    "name": "icon",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the icon on the output object.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$icon"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the icon on the output object.\n   *\n   * @param string $icon\n   * @return $this\n   *\/"
        },
        "setColor": {
            "name": "setColor",
            "summary": "Sets background and font colors on the output object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setColor(string|null $bg = null, string|null $txt = null)\n  {\n    if ($bg) {\n      $this->obj->bcolor = $bg;\n    }\n\n    if ($txt) {\n      $this->obj->fcolor = $txt;\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 963,
            "endLine": 974,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "setColor",
            "returns": [],
            "arguments": [
                {
                    "name": "bg",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "txt",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets background and font colors on the output object.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$bg"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$txt"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets background and font colors on the output object.\n   *\n   * @param string|null $bg\n   * @param string|null $txt\n   * @return $this\n   *\/"
        },
        "getPluginFromComponent": {
            "name": "getPluginFromComponent",
            "summary": "Retrieves the plugin's name from the component's name if any",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPluginFromComponent(string $name)\n  {\n    return $this->_mvc->getPluginFromComponent($name);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 980,
            "endLine": 983,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPluginFromComponent",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves the plugin's name from the component's name if any",
                "tags": []
            },
            "comments": "  \/**\n   * Retrieves the plugin's name from the component's name if any\n   *\/"
        },
        "routeComponent": {
            "name": "routeComponent",
            "summary": "Returns a component from the given name if exists and null otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function routeComponent(string $name)\n  {\n    return $this->_mvc->routeComponent($name);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 992,
            "endLine": 995,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "routeComponent",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a component from the given name if exists and null otherwise.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a component from the given name if exists and null otherwise.\n   *\n   * @param string $name\n   * @return array|null\n   *\/"
        },
        "getComponent": {
            "name": "getComponent",
            "summary": "Returns a component with it's content from the given name if exists and null otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getComponent(string $name, array $data = []): ?array\n  {\n    if ($tmp = $this->routeComponent($name)) {\n      if (!empty($tmp['js'])) {\n        $locale = constant('BBN_LOCALE') ?? 'en';\n        $plugin = $tmp['js']['plugin_name'] ?? null;\n        $v   = new View($tmp['js']);\n        $fs = new System();\n        $path = $fs->createPath($this->dataPath($plugin));\n        $file = \"$path\/component-registry-$locale.json\";\n        if (!$fs->exists($file)) {\n          $fs->putContents($file, '[]');\n        }\n\n        $registry = $fs->decodeContents($file, 'json', true);\n        $res = [\n          'plugin' => $plugin,\n          'name' => $name,\n          'script' => $v->get($data),\n        ];\n        if (!empty($tmp['css'])) {\n          $v          = new View($tmp['css']);\n          $res['css'] = $v->get();\n        }\n\n        if (!empty($tmp['html'])) {\n          $v = new View($tmp['html']);\n          if (!$data) {\n            $data = [];\n          }\n\n          $data['componentName'] = $name;\n          $res['content']        = $v->get($data);\n        }\n\n        $hash = md5(json_encode($res));\n        $write = false;\n        if (!isset($registry[$name])) {\n          $registry[$name] = [\n            'name' => $name,\n            'plugin' => $plugin,\n            'hash' => $hash,\n            'version' => 1\n          ];\n          $write = true;\n        }\n        elseif ($hash !== $registry[$name]['hash']) {\n          $registry[$name]['version']++;\n          $registry[$name]['hash'] = $hash;\n          $write = true;\n        }\n\n        if ($write || true) {\n          $fs->putContents($file, json_encode($registry, JSON_PRETTY_PRINT));\n        }\n\n        $res['version'] = $registry[$name]['version'];\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1005,
            "endLine": 1067,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getComponent",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a component with it's content from the given name if exists and null otherwise.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a component with it's content from the given name if exists and null otherwise.\n   *\n   * @param string $name\n   * @param array $data\n   * @return array|null\n   *\/"
        },
        "jsData": {
            "name": "jsData",
            "summary": "Sets or add to the output object data property from an array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function jsData($data)\n  {\n    if (is_array($data) && X::isAssoc($data)) {\n      if (!isset($this->obj->data)) {\n        $this->obj->data = $data;\n      }\n      elseif (X::isAssoc($this->obj->data)) {\n        $this->obj->data = X::mergeArrays($this->obj->data, $data);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1076,
            "endLine": 1088,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "jsData",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets or add to the output object data property from an array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets or add to the output object data property from an array.\n   *\n   * @param array $data\n   * @return $this\n   *\/"
        },
        "getArguments": {
            "name": "getArguments",
            "summary": "Parses arguments from an array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getArguments(array $args)\n  {\n    $r = [];\n    foreach ($args as $a) {\n      if ($new_data = $this->retrieveVar($a)) {\n        $r['data'] = $new_data;\n      }\n      elseif (\\is_string($a) && !isset($r['path'])) {\n        $r['path'] = $a;\n      }\n      elseif (\\is_string($a) && Router::isMode($a) && !isset($r['mode'])) {\n        $r['mode'] = $a;\n      }\n      elseif (\\is_array($a) && !isset($r['data'])) {\n        $r['data'] = $a;\n      }\n      elseif (\\is_bool($a) && !isset($r['die'])) {\n        $r['die'] = $a;\n      }\n    }\n\n    if (!isset($r['mode']) && isset($r['path']) && Router::isMode($r['path'])) {\n      $r['mode'] = $r['path'];\n      unset($r['path']);\n    }\n\n    if (empty($r['path'])) {\n      $r['path'] = $this->_path;\n      if (\n          ($this->getMode() === 'dom')\n          && (!defined('BBN_DEFAULT_MODE') || (BBN_DEFAULT_MODE !== 'dom'))\n      ) {\n        $r['path'] .= '\/index';\n      }\n    }\n    elseif (strpos($r['path'], '.\/') === 0) {\n      $r['path'] = $this->getCurrentDir() . substr($r['path'], 1);\n    }\n\n    if (!isset($r['data'])) {\n      $r['data'] = $this->data;\n    }\n\n    if (!isset($r['die'])) {\n      $r['die'] = true;\n    }\n\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1097,
            "endLine": 1145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getArguments",
            "returns": [],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Parses arguments from an array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Parses arguments from an array.\n   *\n   * @param array $args\n   * @return array\n   *\/"
        },
        "getView": {
            "name": "getView",
            "summary": "This will get a view.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getView()\n  {\n    $args = $this->getArguments(\\func_get_args());\n    \/*if ( !isset($args['mode']) ){\n      $v = $this->_mvc->getView($args['path'], 'html', $args['data']);\n      if ( !$v ){\n        $v = $this->_mvc->getView($args['path'], 'php', $args['data']);\n      }\n    }\n    else{\n      $v = $this->_mvc->getView($args['path'], $args['mode'], $args['data']);\n    }*\/\n    if (empty($args['mode'])) {\n      $args['mode'] = 'html';\n    }\n\n    $v = $this->_mvc->getView($args['path'], $args['mode'], $args['data']);\n    \/*\n    if ( !$v && $args['die'] ){\n      die(\"Impossible to find the $args[mode] view $args[path] from $args[file]\");\n    }\n    *\/\n    return $v;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1155,
            "endLine": 1178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getView",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will get a view.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a view.\n   *\n   * @param string $path\n   * @param string $mode\n   * @return string|false\n   *\/"
        },
        "getExternalView": {
            "name": "getExternalView",
            "summary": "This will get a view from a different root.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getExternalView(string $full_path, string $mode = 'html', ?array $data = null)\n  {\n    return $this->_mvc->getExternalView($full_path, $mode, $data);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1191,
            "endLine": 1194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getExternalView",
            "returns": [],
            "arguments": [
                {
                    "name": "full_path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a view from a different root.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$full",
                        "description": "path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * This will get a view from a different root.\n   *\n   * @param string $full_path\n   * @param string $mode\n   * @param array|null $data\n   *\n   * @return false|string\n   * @throws Exception\n   *\/"
        },
        "customPluginView": {
            "name": "customPluginView",
            "summary": "Retrieves a view of a custom plugin.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function customPluginView(string $path, string $mode = 'html', array $data = [], string|null $plugin = null): ?string\n  {\n    if (!$plugin) {\n      $plugin = $this->getPlugin();\n    }\n\n    if ($plugin) {\n      return $this->_mvc->customPluginView($path, $mode, $data, $plugin);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1207,
            "endLine": 1218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "customPluginView",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a view of a custom plugin.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a view of a custom plugin.\n   *\n   * @param string $path\n   * @param string $mode\n   * @param array $data\n   * @param string|null $plugin\n   *\n   * @return string|null\n   *\/"
        },
        "customPluginModel": {
            "name": "customPluginModel",
            "summary": "Retrieves a view of a custom plugin.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function customPluginModel(string $path, array $data = [], string|null $plugin = null): ?string\n  {\n    if (!$plugin) {\n      $plugin = $this->getPlugin();\n    }\n\n    if ($plugin) {\n      return $this->_mvc->customPluginModel($path, $data, $this, $plugin);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1230,
            "endLine": 1241,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "customPluginModel",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a view of a custom plugin.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a view of a custom plugin.\n   *\n   * @param string $path\n   * @param array $data\n   * @param string|null $plugin\n   *\n   * @return string|null\n   *\/"
        },
        "hasCustomPluginModel": {
            "name": "hasCustomPluginModel",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasCustomPluginModel(string $path, string $plugin): bool\n  {\n    return $this->_mvc->hasCustomPluginModel($path, $plugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1243,
            "endLine": 1246,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "hasCustomPluginModel",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPluginView": {
            "name": "getPluginView",
            "summary": "This will get a view.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPluginView(string $path, string $type = 'html', array $data = [])\n  {\n    return $this->_mvc->getPluginView($path, $type, $data, $this->getPlugin());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1260,
            "endLine": 1263,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getPluginView",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a view.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a view.\n   *\n   * @param string $path\n   * @param string $type\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "getPluginViews": {
            "name": "getPluginViews",
            "summary": "Gets views for html, css and js.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPluginViews(string $path, array $data = [], array|null $data2 = null)\n  {\n    return [\n      'html' => $this->_mvc->getPluginView($path, 'html', $data, $this->getPlugin()),\n      'css' => $this->_mvc->getPluginView($path, 'css', [], $this->getPlugin()),\n      'js' => $this->_mvc->getPluginView($path, 'js', $data2 ?: $data, $this->getPlugin()),\n    ];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1275,
            "endLine": 1282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getPluginViews",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "data2",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets views for html, css and js.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets views for html, css and js.\n   *\n   * @param string $path\n   * @param array $data\n   * @param array|null $data2\n   *\n   * @return array\n   *\/"
        },
        "getPluginModel": {
            "name": "getPluginModel",
            "summary": "Retrieves a model of a the plugin.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPluginModel(string $path, array $data = [], string|null $plugin = null, int $ttl = 0)\n  {\n    return $this->_mvc->getPluginModel($path, $data, $this, $plugin ?: $this->getPlugin(), $ttl);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1295,
            "endLine": 1298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getPluginModel",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a model of a the plugin.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a model of a the plugin.\n   *\n   * @param $path\n   * @param array $data\n   * @param string|null $plugin\n   * @param int $ttl\n   *\n   * @return array|null\n   *\/"
        },
        "getSubpluginModel": {
            "name": "getSubpluginModel",
            "summary": "Get a sub plugin model (a plugin inside the plugin directory of another plugin).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSubpluginModel(string $path, array $data, string|null $plugin, string $subplugin, int $ttl = 0): ?array\n  {\n    return $this->_mvc->getSubpluginModel($path, $data, $this, $plugin ?: $this->getPlugin(), $subplugin, $ttl);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1312,
            "endLine": 1315,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "getSubpluginModel",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subplugin",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Get a sub plugin model (a plugin inside the plugin directory of another plugin).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get a sub plugin model (a plugin inside the plugin directory of another plugin).\n   *\n   * @param $path\n   * @param array $data\n   * @param string|null $plugin\n   * @param string $subplugin\n   * @param int $ttl\n   *\n   * @return array|null\n   *\/"
        },
        "hasSubpluginModel": {
            "name": "hasSubpluginModel",
            "summary": "Returns true if the subplugin model exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSubpluginModel(string $path, string $plugin, string $subplugin): bool\n  {\n    return $this->_mvc->hasSubpluginModel(...\\func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1327,
            "endLine": 1330,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "hasSubpluginModel",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subplugin",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the subplugin model exists.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the subplugin model exists.\n   *\n   * @param string $path\n   * @param string $plugin\n   * @param string $subplugin\n   *\n   * @return bool\n   *\/"
        },
        "retrieveVar": {
            "name": "retrieveVar",
            "summary": "Retrieves data from the data property using the key name from the provided variable name.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function retrieveVar($var)\n  {\n    if (\\is_string($var) && (strpos($var, '$') === 0) && isset($this->data[substr($var, 1)])) {\n      return $this->data[substr($var, 1)];\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1360,
            "endLine": 1367,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieveVar",
            "returns": [],
            "arguments": [
                {
                    "name": "var",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves data from the data property using the key name from the provided variable name.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$var"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves data from the data property using the key name from the provided variable name.\n   *\n   * @param $var\n   *\n   * @return false|mixed\n   *\/"
        },
        "action": {
            "name": "action",
            "summary": "Merges post data and result array with the current data",
            "description": "and gets the model then sets the output object.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "and gets the model then sets the output object."
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function action()\n  {\n    $res = [\n      'res' => [\n        'success' => false\n      ]\n    ];\n    $tmp = $this->addData($res)\n            ->addData($this->post)\n            ->getModel();\n    if (!$tmp) {\n      $tmp = $res;\n    }\n\n    $this->obj = X::toObject($tmp);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1376,
            "endLine": 1391,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "action",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Merges post data and result array with the current data\nand gets the model then sets the output object.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Merges post data and result array with the current data\n   * and gets the model then sets the output object.\n   *\n   * @return void\n   *\/"
        },
        "cachedAction": {
            "name": "cachedAction",
            "summary": "Merges post data and result array with the current data",
            "description": "and gets the model from cache then sets the output object.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "and gets the model from cache then sets the output object."
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cachedAction(int $ttl = 60)\n  {\n    $this->obj = X::toObject(\n        $this->addData(['res' => ['success' => false]])->addData($this->post)->getCachedModel('', $this->data, $ttl)\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1400,
            "endLine": 1405,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cachedAction",
            "returns": [],
            "arguments": [
                {
                    "name": "ttl",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 60,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Merges post data and result array with the current data\nand gets the model from cache then sets the output object.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Merges post data and result array with the current data\n   * and gets the model from cache then sets the output object.\n   *\n   * @param int $ttl\n   *\/"
        },
        "combo": {
            "name": "combo",
            "summary": "Compile and echoes all the views with the given data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function combo(\n      string|null $title = null,\n      $data = null,\n      int|null $ttl = null,\n      string $path = ''\n  ): self\n  {\n    if (empty($path)) {\n      $basename = X::basename($this->_file, '.php');\n      if (X::indexOf(['index', 'home'], $basename) > -1) {\n        $bits = X::split($this->_path, '\/');\n        if ((count($bits) === 1) && ($bits[0] === '.')) {\n          $path = $basename;\n        }\n        elseif (end($bits) !== $basename) {\n          $bits[] = $basename;\n          $path   = X::join($bits, '\/');\n        }\n      }\n    }\n    if ($this->getRoute($path ?: $this->_path, 'model')) {\n      $model = $ttl === null\n        ? $this->getModel($path, X::mergeArrays($this->post, $this->data))\n        : $this->getCachedModel($path, X::mergeArrays($this->post, $this->data), $ttl);\n\n      if ($model && is_array($model)) {\n        $this->addData($model);\n      }\n      else {\n        $model = [];\n      }\n    }\n    elseif ($data === true) {\n      $model = $this->data;\n    }\n\n    $this->obj->css = $this->getLess($path);\n    if ($new_title = $this->retrieveVar($title)) {\n      $this->setTitle($new_title);\n    }\n    elseif ($title) {\n      $this->setTitle($title);\n    }\n\n    if ($tmp = $this->retrieveVar($data)) {\n      $data = $tmp;\n    }\n    elseif (!\\is_array($data)) {\n      $data = $data === true ? $model : [];\n    }\n\n    if ($this->mode === 'dom') {\n      $this->data['script'] = $this->getJs($path, $data);\n    }\n    else {\n      $this->addJs($path, $data, false);\n    }\n\n    echo $this->getView($path);\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1418,
            "endLine": 1478,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "combo",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The title of the final object"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The data, if true the path' model will be used"
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The time-to-live value if cache must be used for the model"
                },
                {
                    "name": "path",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The path for the views\/model; if null the controller path will be used"
                }
            ],
            "doc": {
                "description": "Compile and echoes all the views with the given data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$title",
                        "description": "The title of the final object"
                    },
                    {
                        "tag": "param",
                        "type": "array|bool",
                        "name": "$data",
                        "description": "The data, if true the path' model will be used"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$ttl",
                        "description": "The time-to-live value if cache must be used for the model"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path for the views\/model; if null the controller path will be used"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Compile and echoes all the views with the given data\n   *\n   * @param string     $title The title of the final object\n   * @param array|bool $data  The data, if true the path' model will be used\n   * @param int        $ttl   The time-to-live value if cache must be used for the model\n   * @param string     $path  The path for the views\/model; if null the controller path will be used\n   *\n   * @return self\n   *\/"
        },
        "getContent": {
            "name": "getContent",
            "summary": "This will get a the content of a file located within the data path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getContent($file_name)\n  {\n    if (\n        $this->checkPath($file_name)\n        && is_file($this->dataPath() . $file_name)\n    ) {\n      return file_get_contents($this->dataPath() . $file_name);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1487,
            "endLine": 1497,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getContent",
            "returns": [],
            "arguments": [
                {
                    "name": "file_name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ],
            "doc": {
                "description": "This will get a the content of a file located within the data path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a the content of a file located within the data path\n   *\n   * @param string $file_name\n   * @return string|false\n   *\/"
        },
        "getDir": {
            "name": "getDir",
            "summary": "This will return the path to the directory of the current controller",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDir()\n  {\n    return $this->_dir;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1505,
            "endLine": 1508,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDir",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will return the path to the directory of the current controller\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * This will return the path to the directory of the current controller\n   *\n   * @return string\n   *\/"
        },
        "getPrepath": {
            "name": "getPrepath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrepath()\n  {\n    if ($this->exists()) {\n      return $this->_mvc->getPrepath();\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1514,
            "endLine": 1521,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPrepath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string\n   *\/"
        },
        "setPrepath": {
            "name": "setPrepath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setPrepath($path)\n  {\n    if ($this->exists() && $this->_mvc->setPrepath($path)) {\n      $this->params = $this->_mvc->getParams();\n      return $this;\n    }\n\n    throw new Exception(X::_(\"Prepath $path is not valid\"));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1529,
            "endLine": 1537,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setPrepath",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$path"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param $path\n   * @return $this\n   * @throws Exception\n   *\/"
        },
        "getModel": {
            "name": "getModel",
            "summary": "This will get the model. There is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getModel()\n  {\n    $args = \\func_get_args();\n    $die  = false;\n    foreach ($args as $a) {\n      if (\\is_string($a)) {\n        $path = $a;\n      }\n      elseif (\\is_array($a)) {\n        $data = $a;\n      }\n      elseif (\\is_bool($a)) {\n        $die = $a;\n      }\n    }\n\n    if (empty($path)) {\n      $path = $this->_path;\n      if (($this->getMode() === 'dom') && (!defined('BBN_DEFAULT_MODE') || (BBN_DEFAULT_MODE !== 'dom'))) {\n        $path .= '\/index';\n      }\n    }\n    elseif (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $m = $this->_mvc->getModel($path, $data, $this);\n    if (\\is_object($m)) {\n      $m = X::toArray($m);\n    }\n\n    if (!\\is_array($m)) {\n      if ($die) {\n        throw new Exception(X::_(\"$path is an invalid model\"));\n      }\n\n      return [];\n    }\n\n    return $m;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1548,
            "endLine": 1592,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getModel",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will get the model. There is no order for the arguments.\n",
                "params": [],
                "return": "A data model",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * This will get the model. There is no order for the arguments.\n   *\n   * @params string path to the model\n   * @params array data to send to the model\n   * @return array|null A data model\n   * @throws Exception\n   *\/"
        },
        "getModelGroup": {
            "name": "getModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getModelGroup(string $path, array|null $data = null)\n  {\n    if (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $m = $this->_mvc->getModelGroup($path, $data, $this);\n    if (\\is_object($m)) {\n      $m = X::toArray($m);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1595,
            "endLine": 1609,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getModelGroup",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCustomModelGroup": {
            "name": "getCustomModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCustomModelGroup(string $path, string $plugin, array|null $data = null): array\n  {\n    if (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $res = $this->_mvc->getCustomModelGroup($path, $plugin, $data, $this);\n    if (\\is_object($res)) {\n      $res = X::toArray($res);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1611,
            "endLine": 1627,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getCustomModelGroup",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getSubpluginModelGroup": {
            "name": "getSubpluginModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSubpluginModelGroup(string $path, string $plugin_from, string $plugin_for, array|null $data = null): array\n  {\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $res = $this->_mvc->getSubpluginModelGroup($path, $plugin_from, $plugin_for, $data, $this);\n    if (\\is_object($res)) {\n      $res = X::toArray($res);\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1630,
            "endLine": 1642,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "getSubpluginModelGroup",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin_from",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin_for",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCachedModel": {
            "name": "getCachedModel",
            "summary": "This will get the cached model. There is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCachedModel()\n  {\n    $args = \\func_get_args();\n    $die  = false;\n    $ttl  = 0;\n    foreach ($args as $a) {\n      if (\\is_string($a) && \\strlen($a)) {\n        $path = $a;\n      }\n      elseif (\\is_array($a)) {\n        $data = $a;\n      }\n      elseif (\\is_int($a)) {\n        $ttl = $a;\n      }\n      elseif (\\is_bool($a)) {\n        $die = $a;\n      }\n    }\n\n    if (!isset($path)) {\n      $path = $this->_path;\n    }\n    elseif (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $m = $this->_mvc->getCachedModel($path, $data, $this, $ttl);\n    if (\\is_object($m)) {\n      $m = X::toArray($m);\n    }\n\n    if (!\\is_array($m)) {\n      if ($die) {\n        throw new Exception(X::_(\"$path is an invalid model\"));\n      }\n\n      return [];\n    }\n\n    return $m;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1652,
            "endLine": 1697,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCachedModel",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will get the cached model. There is no order for the arguments.\n",
                "params": [],
                "return": "A data model"
            },
            "comments": "  \/**\n   * This will get the cached model. There is no order for the arguments.\n   *\n   * @params string path to the model\n   * @params array data to send to the model\n   * @return array|null A data model\n   *\/"
        },
        "deleteCachedModel": {
            "name": "deleteCachedModel",
            "summary": "This will delete the cached model. There is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteCachedModel()\n  {\n    $args = \\func_get_args();\n\n    foreach ($args as $a) {\n      if (\\is_string($a) && \\strlen($a)) {\n        $path = $a;\n      }\n      elseif (\\is_array($a)) {\n        $data = $a;\n      }\n    }\n\n    if (!isset($path)) {\n      $path = $this->_path;\n    }\n    elseif (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $this->_mvc->deleteCachedModel($path, $data, $this);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1707,
            "endLine": 1732,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "deleteCachedModel",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will delete the cached model. There is no order for the arguments.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * This will delete the cached model. There is no order for the arguments.\n   *\n   * @params string path to the model\n   * @params array data to send to the model\n   * @return void\n   *\/"
        },
        "setCachedModel": {
            "name": "setCachedModel",
            "summary": "This will set the cached model. There is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCachedModel()\n  {\n    $args = \\func_get_args();\n\n    foreach ($args as $a) {\n      if (\\is_string($a) && \\strlen($a)) {\n        $path = $a;\n      }\n      elseif (\\is_array($a)) {\n        $data = $a;\n      }\n      elseif (\\is_int($a)) {\n        $ttl = $a;\n      }\n    }\n\n    if (!isset($path)) {\n      $path = $this->_path;\n    }\n    elseif (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    if (!isset($ttl)) {\n      $ttl = 10;\n    }\n\n    $this->_mvc->setCachedModel($path, $data, $this, $ttl);\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1742,
            "endLine": 1775,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setCachedModel",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This will set the cached model. There is no order for the arguments.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * This will set the cached model. There is no order for the arguments.\n   *\n   * @params string path to the model\n   * @params array data to send to the model\n   * @return $this\n   *\/"
        },
        "getObjectModel": {
            "name": "getObjectModel",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObjectModel(): ?object\n  {\n    $args      = \\func_get_args();\n    $has_cache = false;\n    foreach ($args as $a) {\n      if (\\is_int($a)) {\n        $has_cache = true;\n        break;\n      }\n    }\n\n    if ($has_cache) {\n      $m = $this->getCachedModel(...$args);\n    }\n    else {\n      $m = $this->getModel(...$args);\n    }\n\n    if (empty($m)) {\n      return (new stdClass());\n    }\n\n    if (X::isAssoc($m)) {\n      $m = X::toObject($m);\n    }\n\n    return \\is_object($m) ? $m : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1782,
            "endLine": 1809,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObjectModel",
            "returns": [
                null,
                "object"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @return object|null\n   * @throws Exception\n   *\/"
        },
        "addInc": {
            "name": "addInc",
            "summary": "Adds a property to the MVC object inc if it has not been declared.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addInc($name, $obj)\n  {\n    $this->_mvc->addInc($name, $obj);\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1817,
            "endLine": 1821,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addInc",
            "returns": [],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a property to the MVC object inc if it has not been declared.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a property to the MVC object inc if it has not been declared.\n   *\n   * @return self\n   *\/"
        },
        "hasArguments": {
            "name": "hasArguments",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasArguments(int $num = 1)\n  {\n    $i = 0;\n    while ($i < $num) {\n      if (!array_key_exists($i, $this->arguments)) {\n        return false;\n      }\n\n      $i++;\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1828,
            "endLine": 1840,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "hasArguments",
            "returns": [],
            "arguments": [
                {
                    "name": "num",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$num"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param int $num\n   * @return bool\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "Returns the output object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get()\n  {\n    return $this->obj;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1848,
            "endLine": 1851,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "get",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the output object.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the output object.\n   *\n   * @return object|false\n   *\/"
        },
        "transform": {
            "name": "transform",
            "summary": "Transform the output object using a callback",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function transform(callable $fn): void\n  {\n    $this->obj = $fn($this->obj);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1859,
            "endLine": 1862,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "transform",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transform the output object using a callback\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Transform the output object using a callback\n   *\n   * @param callable $fn\n   *\/"
        },
        "hasData": {
            "name": "hasData",
            "summary": "Checks if data exists or if a specific index exists in the data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasData($idx = null, $check_empty = false)\n  {\n    if (!\\is_array($this->data)) {\n      return false;\n    }\n\n    if (\\is_null($idx)) {\n      return !empty($this->data);\n    }\n\n    return X::hasProps($this->data, (array)$idx, $check_empty);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1870,
            "endLine": 1881,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "hasData",
            "returns": [],
            "arguments": [
                {
                    "name": "idx",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "check_empty",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if data exists or if a specific index exists in the data\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if data exists or if a specific index exists in the data\n   *\n   * @return bool\n   *\/"
        },
        "hasContent": {
            "name": "hasContent",
            "summary": "Checks if there is any HTML content in the object",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasContent()\n  {\n    if (!\\is_object($this->obj)) {\n      return false;\n    }\n\n    return !empty($this->obj->content);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1889,
            "endLine": 1896,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "hasContent",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks if there is any HTML content in the object\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if there is any HTML content in the object\n   *\n   * @return bool\n   *\/"
        },
        "getRendered": {
            "name": "getRendered",
            "summary": "Returns the rendered result from the current mvc if successfully processed",
            "description": "process() (or check()) must have been called before.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "process() (or check()) must have been called before."
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRendered()\n  {\n    if (isset($this->obj->content)) {\n      return $this->obj->content;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1905,
            "endLine": 1912,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRendered",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the rendered result from the current mvc if successfully processed\nprocess() (or check()) must have been called before.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the rendered result from the current mvc if successfully processed\n   * process() (or check()) must have been called before.\n   *\n   * @return string|false\n   *\/"
        },
        "getMode": {
            "name": "getMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMode()\n  {\n    return $this->mode;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1915,
            "endLine": 1918,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMode",
            "returns": [],
            "arguments": []
        },
        "setMode": {
            "name": "setMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setMode($mode)\n  {\n    if ($this->_mvc->setMode($mode)) {\n      $this->mode = $mode;\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1925,
            "endLine": 1932,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setMode",
            "returns": [],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $mode\n   * @return self\n   *\/"
        },
        "getScript": {
            "name": "getScript",
            "summary": "Returns the rendered script result from the current mvc if successfully processed",
            "description": "process() (or check()) must have been called before.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "process() (or check()) must have been called before."
                }
            ],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getScript()\n  {\n    if (isset($this->obj->script)) {\n      return $this->obj->script;\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1941,
            "endLine": 1948,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getScript",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the rendered script result from the current mvc if successfully processed\nprocess() (or check()) must have been called before.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the rendered script result from the current mvc if successfully processed\n   * process() (or check()) must have been called before.\n   *\n   * @return string\n   *\/"
        },
        "setData": {
            "name": "setData",
            "summary": "Sets the data. Chainable. Should be useless as $this->data is public. Chainable.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setData(array $data)\n  {\n    $this->data = $data;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1957,
            "endLine": 1961,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setData",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the data. Chainable. Should be useless as $this->data is public. Chainable.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the data. Chainable. Should be useless as $this->data is public. Chainable.\n   *\n   * @param array $data\n   * @return $this\n   *\/"
        },
        "addData": {
            "name": "addData",
            "summary": "Merges the existing data if there is with this one. Chainable.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addData(array $data)\n  {\n    $ar = \\func_get_args();\n    foreach ($ar as $d) {\n      if (\\is_array($d)) {\n        $this->data = empty($this->data) ? $d : array_merge($this->data, $d);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1969,
            "endLine": 1979,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "addData",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Merges the existing data if there is with this one. Chainable.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Merges the existing data if there is with this one. Chainable.\n   *\n   * @return $this\n   *\/"
        },
        "add": {
            "name": "add",
            "summary": "Returns a new Controller instance with the given arguments.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function add($path, $data = [], $private = false)\n  {\n    if (substr($path, 0, 2) === '.\/') {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if ($route = $this->_mvc->getRoute($path, $private ? 'private' : 'public')) {\n      $o = new Controller($this->_mvc, $route, $data);\n      $o->process();\n      return $o;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1987,
            "endLine": 2000,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "add",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a new Controller instance with the given arguments.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a new Controller instance with the given arguments.\n   *\n   * @return Controller|false\n   *\/"
        },
        "addToObj": {
            "name": "addToObj",
            "summary": "Creates a new Controller instance and merges it's object with the existing one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToObj(string $path, $data = [], $private = false): self\n  {\n    if (substr($path, 0, 2) === '.\/') {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if ($route = $this->_mvc->getRoute($path, $private ? 'private' : 'public')) {\n      $o = new Controller($this->_mvc, $route, $data);\n      $o->process();\n      $this->obj = X::mergeObjects($this->obj ?: new stdClass(), $o->obj ?: new stdClass());\n    }\n    else {\n      throw new \\Error(X::_(\"Impossible to route the following request\") . ': ' . $path);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2011,
            "endLine": 2027,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "addToObj",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a new Controller instance and merges it's object with the existing one.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$private"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a new Controller instance and merges it's object with the existing one.\n   *\n   * @param string $path\n   * @param array $data\n   * @param bool $private\n   * @return self\n   *\/"
        },
        "getResult": {
            "name": "getResult",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getResult()\n  {\n    return $this->obj;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2030,
            "endLine": 2033,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getResult",
            "returns": [],
            "arguments": []
        },
        "viewExists": {
            "name": "viewExists",
            "summary": "Checks whether the given view exists or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function viewExists(string $path, string $mode = 'html'): bool\n  {\n    return $this->_mvc->viewExists($path, $mode);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2043,
            "endLine": 2046,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "viewExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the given view exists or not.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the given view exists or not.\n   *\n   * @param string $path\n   * @param string $mode\n   * @return boolean\n   *\/"
        },
        "modelExists": {
            "name": "modelExists",
            "summary": "Checks whether the given model exists or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function modelExists(string $path): bool\n  {\n    return $this->_mvc->modelExists($path);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2055,
            "endLine": 2058,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "modelExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the given model exists or not.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the given model exists or not.\n   *\n   * @param string $path\n   * @return boolean\n   *\/"
        },
        "controllerExists": {
            "name": "controllerExists",
            "summary": "Checks whether the given model exists or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function controllerExists(string $path, bool $private = false): bool\n  {\n    return $this->_mvc->controllerExists($path, $private);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2066,
            "endLine": 2069,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "controllerExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the given model exists or not.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the given model exists or not.\n   *\n   * @param string $path\n   * @return boolean\n   *\/"
        },
        "includeController": {
            "name": "includeController",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Controller.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function includeController(string $bbn_inc_file, Controller $ctrl, $bbn_is_super = false)\n  {\n    if ($ctrl->isCli()) {\n      return (function() use ($bbn_inc_file, $ctrl, $bbn_is_super) {\n        return include $bbn_inc_file;\n      })();\n    }\n\n    ob_start();\n    $r = (function() use ($bbn_inc_file, $ctrl, $bbn_is_super) {\n      return include $bbn_inc_file;\n    })();\n    $output = ob_get_contents();\n    if (ob_get_level()) {\n      ob_end_clean();\n    }\n\n    if ($bbn_is_super) {\n      return $r ? true : false;\n    }\n\n    return $output;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 2076,
            "endLine": 2098,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "includeController",
            "returns": [],
            "arguments": [
                {
                    "name": "bbn_inc_file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "inc_file"
                },
                {
                    "name": "ctrl",
                    "position": 1,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "bbn_is_super",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$bbn",
                        "description": "inc_file"
                    },
                    {
                        "tag": "param",
                        "type": "Controller",
                        "name": "$ctrl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n     * @param string         $bbn_inc_file\n     * @param Controller $ctrl\n     * @return string|bool|void\n     *\/"
        },
        "checkPath": {
            "name": "checkPath",
            "summary": "This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function checkPath()\n  {\n    $ar = \\func_get_args();\n    foreach ($ar as $a){\n      $b = Str::parsePath($a, true);\n      if (empty($b) && !empty($a)) {\n        $this->error(\"The path $a is not an acceptable value\");\n        return false;\n      }\n    }\n\n    return 1;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 37,
            "endLine": 49,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkPath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$p",
                        "description": "The request path <em>(e.g books\/466565 or html\/home)<\/em>"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.\n   *\n   * @param string $p The request path <em>(e.g books\/466565 or html\/home)<\/em>\n   * @return bool\n   *\/"
        },
        "error": {
            "name": "error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function error($msg)\n  {\n    $msg = \"Error from \".\\get_class($this).\": \".$msg;\n    $this->log($msg, 'mvc');\n    throw new \\Exception(X::_($msg));\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 56,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "error",
            "returns": [],
            "arguments": [
                {
                    "name": "msg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$msg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * @param $msg\n   * @throws \\Exception\n   *\/"
        },
        "log": {
            "name": "log",
            "summary": "Log to a specific log with debug info",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if (Mvc::getDebug()) {\n      $ar = \\func_get_args();\n      X::log(\\count($ar) > 1 ? $ar : $ar[0], 'mvc');\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 67,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Log to a specific log with debug info",
                "tags": []
            },
            "comments": "  \/**\n   * Log to a specific log with debug info\n   *\/"
        },
        "pluginDataPath": {
            "name": "pluginDataPath",
            "summary": "Returns the path of a plugin in the data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginDataPath(string|null $plugin = null): ?string\n  {\n    if ($this->_plugin || $plugin) {\n      return $this->dataPath() . 'plugins\/' . ($plugin ?: $this->pluginName($this->_plugin)) . '\/';\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 82,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginDataPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the path of a plugin in the data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of a plugin in the data\n   *\n   * @param string $plugin\n   * @return string|null\n   *\/"
        },
        "pluginTmpPath": {
            "name": "pluginTmpPath",
            "summary": "Returns the path of a plugin in the data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginTmpPath(string|null $plugin = null): ?string\n  {\n    if ($this->_plugin || $plugin) {\n      return $this->tmpPath().'plugins\/' . ($plugin ?: $this->pluginName($this->_plugin)) . '\/';\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 98,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginTmpPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the path of a plugin in the data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of a plugin in the data\n   *\n   * @param string $plugin\n   * @return string|null\n   *\/"
        },
        "getPlugins": {
            "name": "getPlugins",
            "summary": "Returns all the plugins available with their name, path and url",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPlugins(): ?array\n  {\n    return $this->_mvc->getPlugins();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 112,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPlugins",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns all the plugins available with their name, path and url\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns all the plugins available with their name, path and url\n   * @return array|null\n   *\/"
        },
        "hasPlugin": {
            "name": "hasPlugin",
            "summary": "Checks whether a plugin is available",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasPlugin(string $plugin): bool\n  {\n    return $this->_mvc->hasPlugin($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 124,
            "endLine": 127,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasPlugin",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin name"
                }
            ],
            "doc": {
                "description": "Checks whether a plugin is available\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether a plugin is available\n   *\n   * @param string $plugin The plugin name\n   * @return boolean\n   *\/"
        },
        "isPlugin": {
            "name": "isPlugin",
            "summary": "Checks whether a plugin exists",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isPlugin(string|null $plugin = null): bool\n  {\n    return $this->_mvc->isPlugin($plugin ?: $this->pluginName($this->_plugin));\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 136,
            "endLine": 139,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "isPlugin",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The plugin name"
                }
            ],
            "doc": {
                "description": "Checks whether a plugin exists\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin",
                        "description": "The plugin name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether a plugin exists\n   *\n   * @param string|null $plugin The plugin name\n   * @return boolean\n   *\/"
        },
        "pluginPath": {
            "name": "pluginPath",
            "summary": "Returns the path of a plugin from its root directory (app, lib...) based on its name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginPath(string|null $plugin = null, $raw = false): ?string\n  {\n    return $this->_mvc->pluginPath($plugin ?: $this->pluginName($this->_plugin), $raw);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 150,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The plugin name"
                },
                {
                    "name": "raw",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true will not include `src`"
                }
            ],
            "doc": {
                "description": "Returns the path of a plugin from its root directory (app, lib...) based on its name\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin",
                        "description": "The plugin name"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$raw",
                        "description": "If true will not include `src`"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of a plugin from its root directory (app, lib...) based on its name\n   *\n   * @param string|null $plugin The plugin name\n   * @param boolean $raw If true will not include `src`\n   * @return string|null\n   *\/"
        },
        "pluginUrl": {
            "name": "pluginUrl",
            "summary": "Returns the url of a plugin based on its name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginUrl(string|null $plugin = null): ?string\n  {\n    return $this->_mvc->pluginUrl($plugin ?: $this->pluginName($this->_plugin));\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 162,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The plugin name"
                }
            ],
            "doc": {
                "description": "Returns the url of a plugin based on its name\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin",
                        "description": "The plugin name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the url of a plugin based on its name\n   *\n   * @param string|null $plugin The plugin name\n   * @return string|null\n   *\/"
        },
        "pluginName": {
            "name": "pluginName",
            "summary": "Returns the name of a plugin based on its path",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginName($path = null): ?string\n  {\n    return $this->_mvc->pluginName($path ?: $this->_path);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 174,
            "endLine": 177,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The plugin path"
                }
            ],
            "doc": {
                "description": "Returns the name of a plugin based on its path\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$path",
                        "description": "The plugin path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the name of a plugin based on its path\n   *\n   * @param string|null $path The plugin path\n   * @return string|null\n   *\/"
        },
        "getCookie": {
            "name": "getCookie",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCookie()\n  {\n    return $this->_mvc->getCookie();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCookie",
            "returns": [],
            "arguments": []
        },
        "getDefault": {
            "name": "getDefault",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDefault()\n  {\n    return $this->_mvc->getDefault();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDefault",
            "returns": [],
            "arguments": []
        },
        "getRoutes": {
            "name": "getRoutes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoutes(): ?array\n  {\n    return $this->_mvc->getRoutes();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRoutes",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliases(): ?array\n  {\n    return $this->_mvc->getRoutes('alias');\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 197,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliases",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getRoute": {
            "name": "getRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoute(string $path, string $mode)\n  {\n    return $this->_mvc->getRoute($path, $mode);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 203,
            "endLine": 206,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getRoute",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setLocale": {
            "name": "setLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setLocale(string $locale)\n  {\n    return $this->_mvc->setLocale($locale);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 209,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "locale",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLocale": {
            "name": "getLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLocale(): ?string\n  {\n    return $this->_mvc->getLocale();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 215,
            "endLine": 218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLocale",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "appPath": {
            "name": "appPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function appPath($raw = false): string\n  {\n    return Mvc::getAppPath($raw);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 221,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "appPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "libPath": {
            "name": "libPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function libPath(): string\n  {\n    return Mvc::getLibPath();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 227,
            "endLine": 230,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "libPath",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "dataPath": {
            "name": "dataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dataPath(string|null $plugin = null): string\n  {\n    return Mvc::getDataPath().($plugin ? 'plugins\/'.$plugin.'\/' : '');\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 233,
            "endLine": 236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dataPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tmpPath": {
            "name": "tmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tmpPath(string|null $plugin = null): string\n  {\n    return Mvc::getTmpPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 239,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "tmpPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "logPath": {
            "name": "logPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function logPath(string|null $plugin = null): string\n  {\n    return Mvc::getLogPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 245,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "logPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "cachePath": {
            "name": "cachePath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cachePath(string|null $plugin = null): string\n  {\n    return Mvc::getCachePath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cachePath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "contentPath": {
            "name": "contentPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function contentPath(string|null $plugin = null): string\n  {\n    return Mvc::getContentPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "contentPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userTmpPath": {
            "name": "userTmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function userTmpPath(string|null $id_user = null, string|null $plugin = null):? string\n  {\n    return Mvc::getUserTmpPath($id_user, $plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 263,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "userTmpPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userDataPath": {
            "name": "userDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc\\Controller",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function userDataPath(string|null $id_user = null, string|null $plugin = null):? string\n  {\n    return Mvc::getUserDataPath($id_user, $plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 269,
            "endLine": 272,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "userDataPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "_mvc": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The MVC class from which the controller is called\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Mvc"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_reroutes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "When reroute is used $reroutes will be used to check we're not in an infinite reroute loop\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "_is_controlled": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "Is set to null while not controlled, then 1 if controller was found, and false otherwise.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|boolean"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_is_rerouted": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "Is set to false while not rerouted\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|boolean"
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "_path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The internal path to the controller.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_request": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The request sent to get to the controller\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_dir": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The directory of the controller.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_file": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The full path to the controller's file.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_root": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The full path to the root directory.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_checkers": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The checkers files (with full path)\nIf any they will be checked before the controller\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "_plugin": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The URL path to the plugin.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_plugin_name": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The plugin name.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_stream": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Db",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Db",
                        "description": "The db connection if accepted by the mvc class."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "mode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The mode of the controller (dom, cli...), which will determine its route"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "url": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The URL leading to this controller"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "data": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "The data model\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "params": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "All the parts of the path requested\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "arguments": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "All the parts of the path requested which are not part of the controller path\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "post": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "The data sent through POST\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "get": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "The data sent through GET\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "files": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "A numeric indexed array of the files sent through POST (different from native)\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "obj": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "stdClass",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "The output object\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|object"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "inc": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "stdClass",
            "declaring": {
                "name": "bbn\\Mvc\\Controller"
            },
            "declaring_trait": "bbn\\Mvc\\Controller",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "An external object that can be filled after the object creation and can be used as a global with the function add_inc\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "stdClass"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": [],
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "stdClass": "stdClass",
        "bbn\\Db": "Db",
        "bbn\\Mvc": "Mvc",
        "bbn\\X": "X",
        "bbn\\Tpl": "Tpl",
        "bbn\\File\\System": "System"
    },
    "dummyComments": [],
    "summary": "",
    "description": "",
    "description_parts": []
}