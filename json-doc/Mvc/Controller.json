{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Mvc\\Controller",
    "namespace": true,
    "traits": [
        "bbn\\Mvc\\Common"
    ],
    "interfaces": {
        "bbn\\Mvc\\Api": {
            "name": "bbn\\Mvc\\Api"
        }
    },
    "fileName": "\/Mvc\/Controller.php",
    "startLine": 8,
    "endLine": 1948,
    "contentConstructor": {
        "file": "bbn\\Mvc\\Controller",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "This will call the initial build a new instance.",
            "description": "It should be called only once from within the script.\nAll subsequent calls to controllers should be done through $this->add($path).",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>It should be called only once from within the script.\nAll subsequent calls to controllers should be done through $this-&gt;add($path).<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Mvc $mvc, array $files, $data = false)\n  {\n    $this->_mvc = $mvc;\n    $this->reset($files, $data);\n  }",
            "startLine": 145,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "mvc",
                    "position": 0,
                    "type": "bbn\\Mvc",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "files",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "reset": {
            "name": "reset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $info, $data = false)\n  {\n    if (isset($info['mode'], $info['path'], $info['file'], $info['request'], $info['root'])) {\n      $this->_path        = $info['path'];\n      $this->_plugin      = $info['plugin'];\n      $this->_request     = $this->getRequest();\n      $this->_file        = $info['file'];\n      $this->_root        = $info['root'];\n      $this->arguments    = $info['args'];\n      $this->_checkers    = $info['checkers'];\n      $this->_plugin      = $info['plugin'];\n      $this->_plugin_name = $info['plugin_name'];\n      $this->mode         = $info['mode'];\n      $this->data         = \\is_array($data) ? $data : [];\n      \/\/ When using CLI a first parameter can be used as route,\n      \/\/ a second JSON encoded can be used as $this->post\n      \/** @var bbn\\Db db *\/\n      $this->db     = $this->_mvc->getDb();\n      $this->inc    = &$this->_mvc->inc;\n      $this->post   = $this->_mvc->getPost();\n      $this->get    = $this->_mvc->getGet();\n      $this->files  = $this->_mvc->getFiles();\n      $this->params = $this->_mvc->getParams();\n      $this->url    = $this->getUrl();\n      $this->obj    = new \\stdClass();\n    }\n  }",
            "startLine": 156,
            "endLine": 182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "info",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addAuthorizedRoute": {
            "name": "addAuthorizedRoute",
            "summary": "Add a route to authorized routes list if not already exists.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->addAuthorizedRoute(...\\func_get_args());\n  }",
            "startLine": 190,
            "endLine": 193,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "isAuthorizedRoute": {
            "name": "isAuthorizedRoute",
            "summary": "Checks if a route is authorized.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    return $this->_mvc->isAuthorizedRoute($url);\n  }",
            "startLine": 202,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRoot": {
            "name": "getRoot",
            "summary": "Returns the root of the application in the URL (base href).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getRoot();\n  }",
            "startLine": 213,
            "endLine": 216,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setRoot": {
            "name": "setRoot",
            "summary": "Sets the root of the application in the URL (base href).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($root)\n  {\n    $this->_mvc->setRoot($root);\n    return $this;\n  }",
            "startLine": 225,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "Get the request url.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getUrl();\n  }",
            "startLine": 237,
            "endLine": 240,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getPath": {
            "name": "getPath",
            "summary": "Returns the internal path to the controller.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_path;\n  }",
            "startLine": 248,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRequest": {
            "name": "getRequest",
            "summary": "Returns the current controller's route, i.e as demanded by the client.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getRequest();\n  }",
            "startLine": 259,
            "endLine": 262,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "exists": {
            "name": "exists",
            "summary": "Checks if the internal path to the controller exists.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return !empty($this->_path);\n  }",
            "startLine": 270,
            "endLine": 273,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAll": {
            "name": "getAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return [\n      'controller' => $this->getController(),\n      'dir' => $this->getCurrentDir(),\n      'local_path' => $this->getLocalPath(),\n      'local_route' => $this->getLocalRoute(),\n      'path' => $this->getPath(),\n      'root' => $this->getRoot(),\n      'request' => $this->getRequest(),\n      'checkers' => $this->_checkers\n    ];\n  }",
            "startLine": 276,
            "endLine": 288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "sayRoot": {
            "name": "sayRoot",
            "summary": "Returns the current controller's root directory.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_root;\n  }",
            "startLine": 296,
            "endLine": 299,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getController": {
            "name": "getController",
            "summary": "Returns the current controller's file's name.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_file;\n  }",
            "startLine": 307,
            "endLine": 310,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getLocalPath": {
            "name": "getLocalPath",
            "summary": "Returns the current controller's path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (($pp = $this->getPrepath()) && (strpos($this->_path, $pp) === 0)) {\n      return substr($this->_path, \\strlen($pp));\n    }\n\n    return $this->_path;\n  }",
            "startLine": 318,
            "endLine": 325,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getLocalRoute": {
            "name": "getLocalRoute",
            "summary": "Returns the current controller's route.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (($pp = $this->getPrepath()) && (strpos($this->_request, $pp) === 0)) {\n      return substr($this->_request, \\strlen($pp));\n    }\n\n    return $this->_request;\n  }",
            "startLine": 333,
            "endLine": 340,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getCurrentDir": {
            "name": "getCurrentDir",
            "summary": "Returns the current controller's directory name.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->_path) {\n      $p = X::dirname($this->_path);\n      if ($p === '.') {\n        return '';\n      }\n\n      if (\n          ($prepath = $this->getPrepath())\n          && (strpos($p, $prepath) === 0)\n      ) {\n        return substr($p, \\strlen($prepath));\n      }\n\n      return $p;\n    }\n\n    return null;\n  }",
            "startLine": 348,
            "endLine": 367,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getPlugin": {
            "name": "getPlugin",
            "summary": "If the controller is inside a plugin it will its name and null otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_plugin;\n  }",
            "startLine": 375,
            "endLine": 378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "render": {
            "name": "render",
            "summary": "This directly renders content with arbitrary values using the existing Mustache engine.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $view, array $model = NULL)\n  {\n    if (empty($model) && !empty($this->data)) {\n      $model = $this->data;\n    }\n\n    return \\is_array($model) ? bbn\\Tpl::render($view, $model) : $view;\n  }",
            "startLine": 388,
            "endLine": 395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "view",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The view to be rendered"
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The data model to fill the view with"
                }
            ]
        },
        "isCli": {
            "name": "isCli",
            "summary": "Returns true if called from CLI\/Cron, false otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->isCli();\n  }",
            "startLine": 403,
            "endLine": 406,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "reroute": {
            "name": "reroute",
            "summary": "This will reroute a controller to another one seamlessly.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = '', $post = false, $arguments = false)\n  {\n    if (!\\in_array($path, $this->_reroutes) && ($this->_path !== $path)) {\n      $this->_reroutes[] = $path;\n      $this->_mvc->reroute($path, $post, $arguments);\n      $this->_is_rerouted = 1;\n    }\n  }",
            "startLine": 415,
            "endLine": 422,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>"
                },
                {
                    "name": "post",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "incl": {
            "name": "incl",
            "summary": "This will include a file from within the controller's path. Chainable",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file_name)\n  {\n    if ($this->exists()) {\n      $d = X::dirname($this->_file) . '\/';\n      if (substr($file_name, -4) !== '.php') {\n        $file_name .= '.php';\n      }\n\n      if ((strpos($file_name, '..') === false) && file_exists($d . $file_name)) {\n        $bbn_path = $d . $file_name;\n        unset($d, $file_name);\n        include $bbn_path;\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 431,
            "endLine": 447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file_name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name If .php is omitted it will be added"
                }
            ]
        },
        "addScript": {
            "name": "addScript",
            "summary": "This will add the given string to the script property, and create it if needed. Chainable",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($script)\n  {\n    if (\\is_object($this->obj)) {\n      if (!isset($this->obj->script)) {\n        $this->obj->script = '';\n      }\n\n      $this->obj->script .= $script;\n    }\n\n    return $this;\n  }",
            "startLine": 456,
            "endLine": 467,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "script",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The javascript chain to add"
                }
            ]
        },
        "registerPluginClasses": {
            "name": "registerPluginClasses",
            "summary": "Register a plugin class using spl_autoload.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin_path)\n  {\n    spl_autoload_register(\n        function ($class_name) use ($plugin_path) {\n          if (\n              (strpos($class_name, '\/') === false)\n              && (strpos($class_name, '.') === false)\n          ) {\n            $cls  = explode('\\\\', $class_name);\n            $path = implode('\/', $cls);\n            if (file_exists($plugin_path . 'lib\/' . $path . '.php')) {\n              include_once $plugin_path . 'lib\/' . $path . '.php';\n            }\n          }\n        }\n    );\n    return $this;\n  }",
            "startLine": 476,
            "endLine": 493,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin_path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "process": {
            "name": "process",
            "summary": "This will launch the controller in a new function.",
            "description": "It is publicly launched through check().",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>It is publicly launched through check().<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (\\is_null($this->_is_controlled)) {\n      if ($this->_plugin_name) {\n        $router = Router::getInstance();\n        if ($textDomain = $router->getLocaleDomain($this->_plugin_name)) {\n          $oldTextDomain = textdomain(null);\n          if ($textDomain !== $oldTextDomain) {\n            textdomain($textDomain);\n          }\n          else {\n            unset($oldTextDomain);\n          }\n        }\n      }\n\n      $this->control();\n      if (!empty($oldTextDomain)) {\n        textdomain($oldTextDomain);\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 566,
            "endLine": 589,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "hasBeenRerouted": {
            "name": "hasBeenRerouted",
            "summary": "Checks if the controller has been rerouted",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return (bool)$this->_is_rerouted;\n  }",
            "startLine": 597,
            "endLine": 600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getJs": {
            "name": "getJs",
            "summary": "This will get a javascript view encapsulated in an anonymous function for embedding in HTML",
            "description": "from a path.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>from a path.<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = '', array $data = NULL, $encapsulated = true)\n  {\n    $params = func_get_args();\n    \/\/ The model can be set as first argument if the path is default\n    if (\\is_array($path)) {\n      \/\/ In which case the second argument, if defined, is $encapsulated\n      if (array_key_exists(1, $params)) {\n        $encapsulated = $data;\n      }\n\n      $data = $path;\n      $path = '';\n    }\n\n    if ($r = $this->getView($path, 'js', $data)) {\n      return '<script>' .\n        ( $encapsulated ? '(function(){' . PHP_EOL : '' ) .\n        ( empty($data) ? '' : 'let data = ' . X::jsObject($data) . ';' ) .\n        $r .\n        \/\/( $encapsulated ? '})(jQuery);' : '' ).\n        ($encapsulated ? PHP_EOL . '})();' : '') .\n        '<\/script>';\n    }\n\n    return false;\n  }",
            "startLine": 610,
            "endLine": 635,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "encapsulated",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getJsGroup": {
            "name": "getJsGroup",
            "summary": "This will get a javascript view encapsulated in an anonymous function for embedding in HTML",
            "description": "from a dir or an array of files.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>from a dir or an array of files.<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($files = '', array $data = NULL, $encapsulated = true)\n  {\n    if ($js = $this->getViewGroup($files, $data, 'js')) {\n      return '<script>' .\n      ( $encapsulated ? '(function($){' . PHP_EOL : '' ) .\n      ( empty($data) ? '' : 'let data = ' . X::jsObject($data) . ';' ) .\n      $js .\n      \/\/( $encapsulated ? '})(jQuery);' : '' ).\n      ( $encapsulated ? PHP_EOL . '})();' : '' ) .\n      '<\/script>';\n    }\n\n    return false;\n  }",
            "startLine": 647,
            "endLine": 660,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "encapsulated",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getViewGroup": {
            "name": "getViewGroup",
            "summary": "This will get a view for embedding in HTML.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($files = '', array $data = NULL, $mode = 'html')\n  {\n    if (!\\is_array($files)) {\n      if (!($tmp = $this->_mvc->fetchDir($files, $mode))) {\n        $this->error(\"Impossible to get files from directory $files\");\n        return false;\n      }\n\n      $files = $tmp;\n    }\n\n    if (\\is_array($files) && \\count($files)) {\n      $st = '';\n      foreach ($files as $f) {\n        if ($tmp = $this->getView($f, $mode, $data)) {\n          $st .= $tmp;\n        }\n      }\n\n      return $st;\n    }\n\n    $this->error('Impossible to get files from get_view_group files argument empty');\n  }",
            "startLine": 671,
            "endLine": 694,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                }
            ]
        },
        "getCss": {
            "name": "getCss",
            "summary": "This will get a CSS view encapsulated in a scoped style tag.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = '')\n  {\n    if ($r = $this->getView($path, 'css')) {\n      return \\CssMin::minify($r);\n    }\n\n    return false;\n  }",
            "startLine": 703,
            "endLine": 710,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLess": {
            "name": "getLess",
            "summary": "This will get and compile a LESS view encapsulated in a scoped style tag.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = '')\n  {\n    return $this->getView($path, 'css', false);\n  }",
            "startLine": 719,
            "endLine": 722,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addCss": {
            "name": "addCss",
            "summary": "This will get a CSS view encapsulated in a scoped style tag and add it to the output object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = '')\n  {\n    if ($css = $this->getCss($path)) {\n      if (!isset($this->obj->css)) {\n        $this->obj->css = '';\n      }\n\n      $this->obj->css .= $css;\n    }\n\n    return $this;\n  }",
            "startLine": 731,
            "endLine": 742,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addLess": {
            "name": "addLess",
            "summary": "This will get and compile a LESS view encapsulated in a scoped style tag and add it to the output object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = '')\n  {\n    if ($css = $this->getLess($path)) {\n      if (!isset($this->obj->css)) {\n        $this->obj->css = '';\n      }\n\n      $this->obj->css .= $css;\n    }\n\n    return $this;\n  }",
            "startLine": 751,
            "endLine": 762,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addJs": {
            "name": "addJs",
            "summary": "This will add a javascript view from a file path to $this->obj->script",
            "description": "Chainable",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Chainable<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args     = \\func_get_args();\n    $has_path = false;\n    foreach ($args as $i => $a) {\n      if ($new_data = $this->retrieveVar($a)) {\n        $this->jsData($new_data);\n      }\n      elseif (\\is_string($a)) {\n        $has_path = 1;\n      }\n      elseif (\\is_array($a)) {\n        $this->jsData($a);\n      }\n      elseif ($a === true) {\n        $this->jsData($this->data);\n      }\n    }\n\n    if (!$has_path) {\n      array_unshift($args, $this->_path);\n    }\n\n    $args[] = 'js';\n    if ($r = $this->getView(...$args)) {\n      $this->addScript($r);\n    }\n\n    return $this;\n  }",
            "startLine": 771,
            "endLine": 800,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "addJsGroup": {
            "name": "addJsGroup",
            "summary": "This will add a javascript view from a directory path or an array of files to $this->obj->script",
            "description": "Chainable",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Chainable<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($files = '', array $data = [])\n  {\n    if ($js = $this->getViewGroup($files, $data, 'js')) {\n      $this->jsData($data)->addScript($js);\n    }\n\n    return $this;\n  }",
            "startLine": 811,
            "endLine": 818,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "setObj": {
            "name": "setObj",
            "summary": "Adds to the output object from an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $arr)\n  {\n    foreach ($arr as $k => $a) {\n      $this->obj->{$k} = $a;\n    }\n\n    return $this;\n  }",
            "startLine": 827,
            "endLine": 834,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setUrl": {
            "name": "setUrl",
            "summary": "Sets the url on the output object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $url)\n  {\n    $this->obj->url = $url;\n    return $this;\n  }",
            "startLine": 843,
            "endLine": 847,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setTitle": {
            "name": "setTitle",
            "summary": "Sets the title on the output object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($title)\n  {\n    $this->obj->title = $title;\n    return $this;\n  }",
            "startLine": 856,
            "endLine": 860,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setIcon": {
            "name": "setIcon",
            "summary": "Sets the icon on the output object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $icon)\n  {\n    $this->obj->icon = $icon;\n    return $this;\n  }",
            "startLine": 869,
            "endLine": 873,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "icon",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setColor": {
            "name": "setColor",
            "summary": "Sets background and font colors on the output object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $bg = NULL, string $txt = NULL)\n  {\n    if ($bg) {\n      $this->obj->bcolor = $bg;\n    }\n\n    if ($txt) {\n      $this->obj->fcolor = $txt;\n    }\n\n    return $this;\n  }",
            "startLine": 883,
            "endLine": 894,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "bg",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "txt",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPluginFromComponent": {
            "name": "getPluginFromComponent",
            "summary": "Retrieves the plugin's name from the component's name if any",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name)\n  {\n    return $this->_mvc->getPluginFromComponent($name);\n  }",
            "startLine": 900,
            "endLine": 903,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "routeComponent": {
            "name": "routeComponent",
            "summary": "Returns a component from the given name if exists and null otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name)\n  {\n    return $this->_mvc->routeComponent($name);\n  }",
            "startLine": 912,
            "endLine": 915,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getComponent": {
            "name": "getComponent",
            "summary": "Returns a component with it's content from the given name if exists and null otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name, array $data = [])\n  {\n    if ($tmp = $this->routeComponent($name)) {\n      if (!empty($tmp['js'])) {\n        $v   = new View($tmp['js']);\n        $res = [\n          'name' => $name,\n          'script' => $v->get($data)\n        ];\n        if (!empty($tmp['css'])) {\n          $v          = new View($tmp['css']);\n          $res['css'] = $v->get();\n        }\n\n        if (!empty($tmp['html'])) {\n          $v = new View($tmp['html']);\n          if (!$data) {\n            $data = [];\n          }\n\n          $data['componentName'] = $name;\n          $res['content']        = $v->get($data);\n        }\n\n        return $res;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 925,
            "endLine": 954,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "jsData": {
            "name": "jsData",
            "summary": "Sets or add to the output object data property from an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($data)\n  {\n    if (is_array($data) && X::isAssoc($data)) {\n      if (!isset($this->obj->data)) {\n        $this->obj->data = $data;\n      }\n      elseif (X::isAssoc($this->obj->data)) {\n        $this->obj->data = X::mergeArrays($this->obj->data, $data);\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 963,
            "endLine": 975,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getView": {
            "name": "getView",
            "summary": "This will get a view.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = $this->getArguments(\\func_get_args());\n    \/*if ( !isset($args['mode']) ){\n      $v = $this->_mvc->getView($args['path'], 'html', $args['data']);\n      if ( !$v ){\n        $v = $this->_mvc->getView($args['path'], 'php', $args['data']);\n      }\n    }\n    else{\n      $v = $this->_mvc->getView($args['path'], $args['mode'], $args['data']);\n    }*\/\n    if (empty($args['mode'])) {\n      $args['mode'] = 'html';\n    }\n\n    $v = $this->_mvc->getView($args['path'], $args['mode'], $args['data']);\n    \/*\n    if ( !$v && $args['die'] ){\n      die(\"Impossible to find the $args[mode] view $args[path] from $args[file]\");\n    }\n    *\/\n    return $v;\n  }",
            "startLine": 1042,
            "endLine": 1065,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getExternalView": {
            "name": "getExternalView",
            "summary": "This will get a view from a different root.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $full_path, string $mode = 'html', array $data = NULL)\n  {\n    return $this->_mvc->getExternalView($full_path, $mode, $data);\n  }",
            "startLine": 1078,
            "endLine": 1081,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "full_path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "customPluginView": {
            "name": "customPluginView",
            "summary": "Retrieves a view of a custom plugin.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode = 'html', array $data = [], string $plugin = NULL)\n  {\n    if (!$plugin) {\n      $plugin = $this->getPlugin();\n    }\n\n    if ($plugin) {\n      return $this->_mvc->customPluginView($path, $mode, $data, $plugin);\n    }\n\n    return null;\n  }",
            "startLine": 1094,
            "endLine": 1105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "customPluginModel": {
            "name": "customPluginModel",
            "summary": "Retrieves a view of a custom plugin.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data = [], string $plugin = NULL)\n  {\n    if (!$plugin) {\n      $plugin = $this->getPlugin();\n    }\n\n    if ($plugin) {\n      return $this->_mvc->customPluginModel($path, $data, $this, $plugin);\n    }\n\n    return null;\n  }",
            "startLine": 1117,
            "endLine": 1128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPluginView": {
            "name": "getPluginView",
            "summary": "This will get a view.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $type = 'html', array $data = [])\n  {\n    return $this->_mvc->getPluginView($path, $type, $data, $this->getPlugin());\n  }",
            "startLine": 1140,
            "endLine": 1143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getPluginViews": {
            "name": "getPluginViews",
            "summary": "Gets views for html, css and js.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data = [], array $data2 = NULL)\n  {\n    return [\n      'html' => $this->_mvc->getPluginView($path, 'html', $data, $this->getPlugin()),\n      'css' => $this->_mvc->getPluginView($path, 'css', [], $this->getPlugin()),\n      'js' => $this->_mvc->getPluginView($path, 'js', $data2 ?: $data, $this->getPlugin()),\n    ];\n  }",
            "startLine": 1155,
            "endLine": 1162,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "data2",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPluginModel": {
            "name": "getPluginModel",
            "summary": "Retrieves a model of a the plugin.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data = [], string $plugin = NULL, int $ttl = 0)\n  {\n    return $this->_mvc->getPluginModel($path, $data, $this, $plugin ?: $this->getPlugin(), $ttl);\n  }",
            "startLine": 1175,
            "endLine": 1178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSubpluginModel": {
            "name": "getSubpluginModel",
            "summary": "Get a sub plugin model (a plugin inside the plugin directory of another plugin).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data, string $plugin, string $subplugin, int $ttl = 0)\n  {\n    return $this->_mvc->getSubpluginModel($path, $data, $this, $plugin ?: $this->getPlugin(), $subplugin, $ttl);\n  }",
            "startLine": 1192,
            "endLine": 1195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subplugin",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "hasSubpluginModel": {
            "name": "hasSubpluginModel",
            "summary": "Returns true if the subplugin model exists.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $plugin, string $subplugin)\n  {\n    return $this->_mvc->hasSubpluginModel(...\\func_get_args());\n  }",
            "startLine": 1207,
            "endLine": 1210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subplugin",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "action": {
            "name": "action",
            "summary": "Merges post data and result array witt the current data",
            "description": "and gets the model then sets the output object.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>and gets the model then sets the output object.<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $res = [\n      'res' => [\n        'success' => false\n      ]\n    ];\n    $tmp = $this->addData($res)\n            ->addData($this->post)\n            ->getModel();\n    if (!$tmp) {\n      $tmp = $res;\n    }\n\n    $this->obj = X::toObject($tmp);\n  }",
            "startLine": 1256,
            "endLine": 1271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "cachedAction": {
            "name": "cachedAction",
            "summary": "Merges post data and result array witt the current data",
            "description": "and gets the model from cache then sets the output object.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>and gets the model from cache then sets the output object.<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(int $ttl = 60)\n  {\n    $this->obj = X::toObject(\n        $this->addData(['res' => ['success' => false]])->addData($this->post)->getCachedModel('', $this->data, $ttl)\n    );\n  }",
            "startLine": 1280,
            "endLine": 1285,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "ttl",
                    "position": 0,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 60,
                    "default_name": ""
                }
            ]
        },
        "combo": {
            "name": "combo",
            "summary": "Compile and echoes all the views with the given data",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $title = NULL, $data = NULL, int $ttl = NULL, string $path = '')\n  {\n      $data = null,\n      int $ttl = null,\n      string $path = ''\n  ): self\n  {\n    if (empty($path)) {\n      $basename = X::basename($this->_file, '.php');\n      if (X::indexOf(['index', 'home'], $basename) > -1) {\n        $bits = X::split($this->_path, '\/');\n        if ((count($bits) === 1) && ($bits[0] === '.')) {\n          $path = $basename;\n        }\n        elseif (end($bits) !== $basename) {\n          $bits[] = $basename;\n          $path   = X::join($bits, '\/');\n        }\n      }\n    }\n    if ($this->getRoute($path ?: $this->_path, 'model')) {\n      $model = $ttl === null\n        ? $this->getModel($path, X::mergeArrays($this->post, $this->data))\n        : $this->getCachedModel($path, X::mergeArrays($this->post, $this->data), $ttl);\n\n      if ($model && is_array($model)) {\n        $this->addData($model);\n      }\n      else {\n        $model = [];\n      }\n    }\n    elseif ($data === true) {\n      $model = $this->data;\n    }\n\n    $this->obj->css = $this->getLess($path, false);\n    if ($new_title = $this->retrieveVar($title)) {\n      $this->setTitle($new_title);\n    }\n    elseif ($title) {\n      $this->setTitle($title);\n    }\n\n    if ($tmp = $this->retrieveVar($data)) {\n      $data = $tmp;\n    }\n    elseif (!\\is_array($data)) {\n      $data = $data === true ? $model : [];\n    }\n\n    if ($this->mode === 'dom') {\n      $this->data['script'] = $this->getJs($path, $data);\n    }\n    else {\n      $this->addJs($path, $data, false);\n    }\n\n    echo $this->getView($path);\n    return $this;\n  }",
            "startLine": 1298,
            "endLine": 1358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The title of the final object"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The data, if true the path' model will be used"
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The time-to-live value if cache must be used for the model"
                },
                {
                    "name": "path",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The path for the views\/model; if null the controller path will be used"
                }
            ]
        },
        "getContent": {
            "name": "getContent",
            "summary": "This will get a the content of a file located within the data path",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file_name)\n  {\n    if (\n        $this->checkPath($file_name)\n        && \\defined('BBN_DATA_PATH')\n        && is_file(BBN_DATA_PATH . $file_name)\n    ) {\n      return file_get_contents(BBN_DATA_PATH . $file_name);\n    }\n\n    return false;\n  }",
            "startLine": 1367,
            "endLine": 1378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file_name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ]
        },
        "getDir": {
            "name": "getDir",
            "summary": "This will return the path to the directory of the current controller",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_dir;\n  }",
            "startLine": 1386,
            "endLine": 1389,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getPrepath": {
            "name": "getPrepath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->exists()) {\n      return $this->_mvc->getPrepath();\n    }\n\n    return '';\n  }",
            "startLine": 1395,
            "endLine": 1402,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setPrepath": {
            "name": "setPrepath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    if ($this->exists() && $this->_mvc->setPrepath($path)) {\n      $this->params = $this->_mvc->getParams();\n      return $this;\n    }\n\n    throw new \\Exception(X::_(\"Prepath $path is not valid\"));\n  }",
            "startLine": 1410,
            "endLine": 1418,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getModel": {
            "name": "getModel",
            "summary": "This will get the model. There is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    $die  = false;\n    foreach ($args as $a) {\n      if (\\is_string($a)) {\n        $path = $a;\n      }\n      elseif (\\is_array($a)) {\n        $data = $a;\n      }\n      elseif (\\is_bool($a)) {\n        $die = $a;\n      }\n    }\n\n    if (empty($path)) {\n      $path = $this->_path;\n      if (($this->getMode() === 'dom') && (!defined('BBN_DEFAULT_MODE') || (BBN_DEFAULT_MODE !== 'dom'))) {\n        $path .= '\/index';\n      }\n    }\n    elseif (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $m = $this->_mvc->getModel($path, $data, $this);\n    if (\\is_object($m)) {\n      $m = X::toArray($m);\n    }\n\n    if (!\\is_array($m)) {\n      if ($die) {\n        throw new \\Exception(X::_(\"$path is an invalid model\"));\n      }\n\n      return [];\n    }\n\n    return $m;\n  }",
            "startLine": 1429,
            "endLine": 1473,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getModelGroup": {
            "name": "getModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data = NULL)\n  {\n    if (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $m = $this->_mvc->getModelGroup($path, $data, $this);\n    if (\\is_object($m)) {\n      $m = X::toArray($m);\n    }\n  }",
            "startLine": 1476,
            "endLine": 1490,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCustomModelGroup": {
            "name": "getCustomModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $plugin, array $data = NULL)\n  {\n    if (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $res = $this->_mvc->getCustomModelGroup($path, $plugin, $data, $this);\n    if (\\is_object($res)) {\n      $res = X::toArray($res);\n    }\n\n    return $res;\n  }",
            "startLine": 1492,
            "endLine": 1508,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCachedModel": {
            "name": "getCachedModel",
            "summary": "This will get the cached model. There is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    $die  = false;\n    $ttl  = 0;\n    foreach ($args as $a) {\n      if (\\is_string($a) && \\strlen($a)) {\n        $path = $a;\n      }\n      elseif (\\is_array($a)) {\n        $data = $a;\n      }\n      elseif (\\is_int($a)) {\n        $ttl = $a;\n      }\n      elseif (\\is_bool($a)) {\n        $die = $a;\n      }\n    }\n\n    if (!isset($path)) {\n      $path = $this->_path;\n    }\n    elseif (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $m = $this->_mvc->getCachedModel($path, $data, $this, $ttl);\n    if (\\is_object($m)) {\n      $m = X::toArray($m);\n    }\n\n    if (!\\is_array($m)) {\n      if ($die) {\n        throw new \\Exception(X::_(\"$path is an invalid model\"));\n      }\n\n      return [];\n    }\n\n    return $m;\n  }",
            "startLine": 1518,
            "endLine": 1563,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "deleteCachedModel": {
            "name": "deleteCachedModel",
            "summary": "This will delete the cached model. There is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n\n    foreach ($args as $a) {\n      if (\\is_string($a) && \\strlen($a)) {\n        $path = $a;\n      }\n      elseif (\\is_array($a)) {\n        $data = $a;\n      }\n    }\n\n    if (!isset($path)) {\n      $path = $this->_path;\n    }\n    elseif (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    $this->_mvc->deleteCachedModel($path, $data, $this);\n  }",
            "startLine": 1573,
            "endLine": 1598,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setCachedModel": {
            "name": "setCachedModel",
            "summary": "This will set the cached model. There is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n\n    foreach ($args as $a) {\n      if (\\is_string($a) && \\strlen($a)) {\n        $path = $a;\n      }\n      elseif (\\is_array($a)) {\n        $data = $a;\n      }\n      elseif (\\is_int($a)) {\n        $ttl = $a;\n      }\n    }\n\n    if (!isset($path)) {\n      $path = $this->_path;\n    }\n    elseif (strpos($path, '.\/') === 0) {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if (!isset($data)) {\n      $data = $this->data;\n    }\n\n    if (!isset($ttl)) {\n      $ttl = 10;\n    }\n\n    $this->_mvc->setCachedModel($path, $data, $this, $ttl);\n    return $this;\n  }",
            "startLine": 1608,
            "endLine": 1641,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getObjectModel": {
            "name": "getObjectModel",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args      = \\func_get_args();\n    $has_cache = false;\n    foreach ($args as $a) {\n      if (\\is_int($a)) {\n        $has_cache = true;\n        break;\n      }\n    }\n\n    if ($has_cache) {\n      $m = $this->getCachedModel(...$args);\n    }\n    else {\n      $m = $this->getModel(...$args);\n    }\n\n    if (empty($m)) {\n      return (new \\stdClass());\n    }\n\n    if (X::isAssoc($m)) {\n      $m = X::toObject($m);\n    }\n\n    return \\is_object($m) ? $m : null;\n  }",
            "startLine": 1648,
            "endLine": 1675,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "addInc": {
            "name": "addInc",
            "summary": "Adds a property to the MVC object inc if it has not been declared.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $obj)\n  {\n    $this->_mvc->addInc($name, $obj);\n    return $this;\n  }",
            "startLine": 1683,
            "endLine": 1687,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasArguments": {
            "name": "hasArguments",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(int $num = 1)\n  {\n    $i = 0;\n    while ($i < $num) {\n      if (!array_key_exists($i, $this->arguments)) {\n        return false;\n      }\n\n      $i++;\n    }\n\n    return true;\n  }",
            "startLine": 1694,
            "endLine": 1706,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "num",
                    "position": 0,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "Returns the output object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->obj;\n  }",
            "startLine": 1714,
            "endLine": 1717,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "transform": {
            "name": "transform",
            "summary": "Transform the output object using a callback",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $fn)\n  {\n    $this->obj = $fn($this->obj);\n  }",
            "startLine": 1725,
            "endLine": 1728,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasData": {
            "name": "hasData",
            "summary": "Checks if data exists or if a specific index exists in the data",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($idx = NULL, $check_empty = false)\n  {\n    if (!\\is_array($this->data)) {\n      return false;\n    }\n\n    if (\\is_null($idx)) {\n      return !empty($this->data);\n    }\n\n    return X::hasProps($this->data, (array)$idx, $check_empty);\n  }",
            "startLine": 1736,
            "endLine": 1747,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "idx",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "check_empty",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasContent": {
            "name": "hasContent",
            "summary": "Checks if there is any HTML content in the object",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!\\is_object($this->obj)) {\n      return false;\n    }\n\n    return !empty($this->obj->content);\n  }",
            "startLine": 1755,
            "endLine": 1762,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRendered": {
            "name": "getRendered",
            "summary": "Returns the rendered result from the current mvc if successfully processed",
            "description": "process() (or check()) must have been called before.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>process() (or check()) must have been called before.<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (isset($this->obj->content)) {\n      return $this->obj->content;\n    }\n\n    return false;\n  }",
            "startLine": 1771,
            "endLine": 1778,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getMode": {
            "name": "getMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->mode;\n  }",
            "startLine": 1781,
            "endLine": 1784,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setMode": {
            "name": "setMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($mode)\n  {\n    if ($this->_mvc->setMode($mode)) {\n      $this->mode = $mode;\n    }\n\n    return $this;\n  }",
            "startLine": 1791,
            "endLine": 1798,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getScript": {
            "name": "getScript",
            "summary": "Returns the rendered script result from the current mvc if successfully processed",
            "description": "process() (or check()) must have been called before.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>process() (or check()) must have been called before.<\/p>"
                }
            ],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (isset($this->obj->script)) {\n      return $this->obj->script;\n    }\n\n    return '';\n  }",
            "startLine": 1807,
            "endLine": 1814,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setData": {
            "name": "setData",
            "summary": "Sets the data. Chainable. Should be useless as $this->data is public. Chainable.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $data)\n  {\n    $this->data = $data;\n    return $this;\n  }",
            "startLine": 1823,
            "endLine": 1827,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addData": {
            "name": "addData",
            "summary": "Merges the existing data if there is with this one. Chainable.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $data)\n  {\n    $ar = \\func_get_args();\n    foreach ($ar as $d) {\n      if (\\is_array($d)) {\n        $this->data = empty($this->data) ? $d : array_merge($this->data, $d);\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 1835,
            "endLine": 1845,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "add": {
            "name": "add",
            "summary": "Returns a new Controller instance with the given arguments.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $data = [], $internal = false)\n  {\n    if (substr($path, 0, 2) === '.\/') {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if ($route = $this->_mvc->getRoute($path, $internal ? 'private' : 'public')) {\n      $o = new Controller($this->_mvc, $route, $data);\n      $o->process();\n      return $o;\n    }\n\n    return false;\n  }",
            "startLine": 1853,
            "endLine": 1866,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "internal",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addToObj": {
            "name": "addToObj",
            "summary": "Creates a new Controller instance and merges it's object with the existing one.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, $data = [], $internal = false)\n  {\n    if (substr($path, 0, 2) === '.\/') {\n      $path = $this->getCurrentDir() . substr($path, 1);\n    }\n\n    if ($route = $this->_mvc->getRoute($path, $internal ? 'private' : 'public')) {\n      $o = new Controller($this->_mvc, $route, $data);\n      $o->process();\n      $this->obj = X::mergeObjects($this->obj, $o->obj);\n    }\n    else {\n      throw new \\Error(X::_(\"Impossible to route the following request\") . ': ' . $path);\n    }\n\n    return $this;\n  }",
            "startLine": 1877,
            "endLine": 1893,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "internal",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getResult": {
            "name": "getResult",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->obj;\n  }",
            "startLine": 1896,
            "endLine": 1899,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "viewExists": {
            "name": "viewExists",
            "summary": "Checks whether the given view exists or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode = 'html')\n  {\n    return $this->_mvc->viewExists($path, $mode);\n  }",
            "startLine": 1909,
            "endLine": 1912,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                }
            ]
        },
        "modelExists": {
            "name": "modelExists",
            "summary": "Checks whether the given model exists or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    return $this->_mvc->modelExists($path);\n  }",
            "startLine": 1921,
            "endLine": 1924,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "includeController": {
            "name": "includeController",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $bbn_inc_file, bbn\\Mvc\\Controller $ctrl, $bbn_is_super = false)\n  {\n    if ($ctrl->isCli()) {\n        return include $bbn_inc_file;\n    }\n\n    ob_start();\n    $r      = include $bbn_inc_file;\n    $output = ob_get_contents();\n    ob_end_clean();\n\n    if ($bbn_is_super) {\n        return $r ? true : false;\n    }\n\n    return $output;\n  }",
            "startLine": 1931,
            "endLine": 1947,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "bbn_inc_file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "inc_file"
                },
                {
                    "name": "ctrl",
                    "position": 1,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "bbn_is_super",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (Mvc::getDebug()) {\n      $ar = \\func_get_args();\n      X::log(\\count($ar) > 1 ? $ar : $ar[0], 'mvc');\n    }\n  }",
            "startLine": 64,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "pluginDataPath": {
            "name": "pluginDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    if (($this->_plugin || $plugin) && \\defined('BBN_DATA_PATH')) {\n      return BBN_DATA_PATH.'plugins\/'.$this->pluginName($plugin ?: $this->_plugin).'\/';\n    }\n\n    return null;\n  }",
            "startLine": 73,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPlugins": {
            "name": "getPlugins",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getPlugins();\n  }",
            "startLine": 83,
            "endLine": 86,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "hasPlugin": {
            "name": "hasPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin)\n  {\n    return $this->_mvc->hasPlugin($plugin);\n  }",
            "startLine": 89,
            "endLine": 92,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isPlugin": {
            "name": "isPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    return $this->_mvc->isPlugin($plugin ?: $this->pluginName($this->_plugin));\n  }",
            "startLine": 95,
            "endLine": 98,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "pluginPath": {
            "name": "pluginPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL, $raw = false)\n  {\n    return $this->_mvc->pluginPath($plugin ?: $this->pluginName($this->_plugin), $raw);\n  }",
            "startLine": 101,
            "endLine": 104,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "raw",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "pluginUrl": {
            "name": "pluginUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    return $this->_mvc->pluginUrl($plugin ?: $this->pluginName($this->_plugin));\n  }",
            "startLine": 107,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "pluginName": {
            "name": "pluginName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = NULL)\n  {\n    return $this->_mvc->pluginName($path ?: $this->_path);\n  }",
            "startLine": 113,
            "endLine": 116,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCookie": {
            "name": "getCookie",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getCookie();\n  }",
            "startLine": 119,
            "endLine": 122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRoutes": {
            "name": "getRoutes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getRoutes();\n  }",
            "startLine": 125,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getRoutes('alias');\n  }",
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRoute": {
            "name": "getRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, $mode, $root = NULL)\n  {\n    return $this->_mvc->getRoute($path, $mode, $root);\n  }",
            "startLine": 137,
            "endLine": 140,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "root",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setLocale": {
            "name": "setLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $locale)\n  {\n    return $this->_mvc->setLocale($locale);\n  }",
            "startLine": 143,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "locale",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLocale": {
            "name": "getLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getLocale();\n  }",
            "startLine": 149,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "appPath": {
            "name": "appPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($raw = false)\n  {\n    return Mvc::getAppPath($raw);\n  }",
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "libPath": {
            "name": "libPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return Mvc::getLibPath();\n  }",
            "startLine": 161,
            "endLine": 164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "dataPath": {
            "name": "dataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getDataPath().($plugin ? 'plugins\/'.$plugin.'\/' : '');\n  }",
            "startLine": 167,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tmpPath": {
            "name": "tmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getTmpPath($plugin);\n  }",
            "startLine": 173,
            "endLine": 176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "logPath": {
            "name": "logPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getLogPath($plugin);\n  }",
            "startLine": 179,
            "endLine": 182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "cachePath": {
            "name": "cachePath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getCachePath($plugin);\n  }",
            "startLine": 185,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "contentPath": {
            "name": "contentPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getContentPath($plugin);\n  }",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userTmpPath": {
            "name": "userTmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_user = NULL, string $plugin = NULL)\n  {\n    return Mvc::getUserTmpPath($id_user, $plugin);\n  }",
            "startLine": 197,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userDataPath": {
            "name": "userDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc\\Controller",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_user = NULL, string $plugin = NULL)\n  {\n    return Mvc::getUserDataPath($id_user, $plugin);\n  }",
            "startLine": 203,
            "endLine": 206,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "db": {
            "visibility": "public",
            "doc": {
                "description": "The db connection if accepted by the mvc class.",
                "tags": []
            }
        },
        "mode": {
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The mode of the controller (dom, cli...), which will determine its route"
                    }
                ]
            }
        },
        "data": {
            "visibility": "public",
            "doc": {
                "description": "The data model\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            }
        },
        "params": {
            "visibility": "public",
            "doc": {
                "description": "All the parts of the path requested\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            }
        },
        "arguments": {
            "visibility": "public",
            "doc": {
                "description": "All the parts of the path requested which are not part of the controller path\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            }
        },
        "post": {
            "visibility": "public",
            "doc": {
                "description": "The data sent through POST\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            }
        },
        "get": {
            "visibility": "public",
            "doc": {
                "description": "The data sent through GET\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            }
        },
        "files": {
            "visibility": "public",
            "doc": {
                "description": "A numeric indexed array of the files sent through POST (different from native)\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            }
        },
        "obj": {
            "visibility": "public",
            "doc": {
                "description": "The output object\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|object"
                    }
                ]
            }
        },
        "inc": {
            "visibility": "public",
            "doc": {
                "description": "An external object that can be filled after the object creation and can be used as a global with the function add_inc\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "stdClass"
                    }
                ]
            }
        }
    },
    "staticProperties": [],
    "constants": null,
    "numMethods": 107,
    "numProperties": 10,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [
        "bbn\\Mvc\\Api"
    ],
    "isInterface": false,
    "traitNames": [
        "bbn\\Mvc\\Common"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_mvc": null,
        "_reroutes": [],
        "_is_controlled": null,
        "_is_rerouted": false,
        "_path": null,
        "_request": null,
        "_dir": null,
        "_file": null,
        "_root": null,
        "_checkers": [],
        "_plugin": null,
        "_plugin_name": null,
        "db": null,
        "mode": null,
        "data": [],
        "params": [],
        "arguments": [],
        "post": [],
        "get": [],
        "files": [],
        "obj": null,
        "inc": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Mvc",
    "shortName": "Controller",
    "summary": "",
    "description": "",
    "description_parts": []
}