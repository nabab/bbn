{
    "doc": {
        "description": "MVC",
        "tags": []
    },
    "name": "bbn\\Mvc",
    "namespace": true,
    "realName": "Mvc",
    "realNamespace": "bbn",
    "traits": [
        "bbn\\Models\\Tts\\Singleton",
        "bbn\\Mvc\\Common"
    ],
    "interfaces": {
        "bbn\\Mvc\\Api": {
            "name": "bbn\\Mvc\\Api"
        }
    },
    "fileName": "\/Mvc.php",
    "startLine": 31,
    "endLine": 1769,
    "numMethods": 116,
    "numProperties": 33,
    "numConstants": 0,
    "numStaticProperties": 13,
    "interfaceNames": [
        "bbn\\Mvc\\Api"
    ],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_loaded_views": {
            "html": [],
            "css": [],
            "js": []
        },
        "_is_debug": false,
        "_app_name": null,
        "_app_prefix": null,
        "_app_path": null,
        "_cur_path": null,
        "_lib_path": null,
        "_data_path": null,
        "_tmp_path": null,
        "db_in_controller": false,
        "reserved": [
            "_private",
            "_common",
            "_htaccess"
        ],
        "singleton_instance": null,
        "singleton_exists": false,
        "is_routed": false,
        "default": null,
        "is_controlled": false,
        "controller": null,
        "db": null,
        "env": null,
        "router": null,
        "info": null,
        "root": "",
        "plugins": null,
        "loaded": {
            "views": {
                "html": [],
                "css": [],
                "js": []
            },
            "models": [],
            "ctrls": []
        },
        "static_routes": [],
        "authorized_routes": [],
        "forbidden_routes": [],
        "inc": null,
        "data": [],
        "o": null,
        "obj": null,
        "_mvc": null,
        "_plugin": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "Mvc",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "initPath": {
            "name": "initPath",
            "summary": "Sets all the different paths' properties.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function initPath()\n  {\n    if (!self::$_app_name) {\n      self::$_app_name = defined('BBN_APP_NAME') ? constant('BBN_APP_NAME') : 'app';\n      self::$_app_path = defined('BBN_APP_PATH') ? constant('BBN_APP_PATH') : '';\n      self::$_app_prefix = defined('BBN_APP_PREFIX') ? constant('BBN_APP_PREFIX') : '';\n      self::$_cur_path = defined('BBN_CUR_PATH') ? constant('BBN_CUR_PATH') : '';\n      self::$_lib_path = defined('BBN_LIB_PATH') ? constant('BBN_LIB_PATH') : '';\n      self::$_data_path = defined('BBN_DATA_PATH') ? constant('BBN_DATA_PATH') : '';\n      self::$_tmp_path = defined('BBN_TMP_PATH') ? constant('BBN_TMP_PATH') : '';\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 175,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "initPath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Sets all the different paths' properties.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Sets all the different paths' properties.\n   *\n   * @return void\n   *\/"
        },
        "getAppName": {
            "name": "getAppName",
            "summary": "Returns the current app's name.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getAppName(): string\n  {\n    self::initPath();\n    return self::$_app_name;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 194,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAppName",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the current app's name.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current app's name.\n   *\n   * @return string\n   *\/"
        },
        "getAppPrefix": {
            "name": "getAppPrefix",
            "summary": "Returns the current app's prefix if any.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getAppPrefix(): ?string\n  {\n    self::initPath();\n    return self::$_app_prefix;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 206,
            "endLine": 210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAppPrefix",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the current app's prefix if any.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current app's prefix if any.\n   *\n   * @return string|null\n   *\/"
        },
        "getAppPath": {
            "name": "getAppPath",
            "summary": "Returns the current app's full path (with src\/ at the end if raw if false).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getAppPath($raw = false): string\n  {\n    self::initPath();\n    return self::$_app_path . ($raw ? '' : 'src\/');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 220,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getAppPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the current app's full path (with src\/ at the end if raw if false).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$raw"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current app's full path (with src\/ at the end if raw if false).\n   *\n   * @param boolean $raw\n   *\n   * @return string\n   *\/"
        },
        "getCurPath": {
            "name": "getCurPath",
            "summary": "Returns the web public path of the app.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getCurPath(): string\n  {\n    self::initPath();\n    return self::$_cur_path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 232,
            "endLine": 236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurPath",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the web public path of the app.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the web public path of the app.\n   *\n   * @return string\n   *\/"
        },
        "getLibPath": {
            "name": "getLibPath",
            "summary": "Returns the full path of the libraries (vendor folder).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getLibPath(): string\n  {\n    self::initPath();\n    return self::$_lib_path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 244,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLibPath",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the full path of the libraries (vendor folder).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full path of the libraries (vendor folder).\n   *\n   * @return string\n   *\/"
        },
        "getDataPath": {
            "name": "getDataPath",
            "summary": "Returns the full path of the data; if plugin is provided gives the path for the plugin's data.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getDataPath(string|null $plugin = null): string\n  {\n    self::initPath();\n    return self::$_data_path . ($plugin ? 'plugins\/' . $plugin . '\/' : '');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 258,
            "endLine": 262,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getDataPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the full path of the data; if plugin is provided gives the path for the plugin's data.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full path of the data; if plugin is provided gives the path for the plugin's data.\n   *\n   * @param string $plugin\n   *\n   * @return string\n   *\/"
        },
        "getTmpPath": {
            "name": "getTmpPath",
            "summary": "Returns the full path of the temp data; if plugin is provided gives the path for the plugin's temp data.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getTmpPath(string|null $plugin = null): string\n  {\n    self::initPath();\n    return self::$_tmp_path . ($plugin ? 'plugins\/' . $plugin . '\/' : '');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 272,
            "endLine": 276,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getTmpPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the full path of the temp data; if plugin is provided gives the path for the plugin's temp data.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full path of the temp data; if plugin is provided gives the path for the plugin's temp data.\n   *\n   * @param string $plugin\n   *\n   * @return string\n   *\/"
        },
        "getLogPath": {
            "name": "getLogPath",
            "summary": "Returns the full path of the logs.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getLogPath(string|null $plugin = null): string\n  {\n    self::initPath();\n    return self::$_app_name ? self::getDataPath() . 'logs\/' . ($plugin ? $plugin . '\/' : '') : '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 288,
            "endLine": 292,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getLogPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the full path of the logs.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Not sure it makes sense to have the plugin as for now all logs are in the same directory."
                }
            },
            "comments": "  \/**\n   * Returns the full path of the logs.\n   *\n   * @todo Not sure it makes sense to have the plugin as for now all logs are in the same directory.\n   *\n   * @param string $plugin\n   *\n   * @return string\n   *\/"
        },
        "getCachePath": {
            "name": "getCachePath",
            "summary": "Returns ths full path of the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getCachePath(string|null $plugin = null): string\n  {\n    self::initPath();\n    return self::getTmpPath() . 'cache\/' . ($plugin ? $plugin . '\/' : '');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 304,
            "endLine": 308,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getCachePath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns ths full path of the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Not sure it makes sense to have the plugin as for now all logs are in the same directory."
                }
            },
            "comments": "  \/**\n   * Returns ths full path of the cache\n   *\n   * @todo Not sure it makes sense to have the plugin as for now all logs are in the same directory.\n   *\n   * @param string $plugin\n   *\n   * @return string\n   *\/"
        },
        "getContentPath": {
            "name": "getContentPath",
            "summary": "Returns the full path of the content data; if plugin is provided gives the path for the plugin's content data.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getContentPath(string|null $plugin = null): string\n  {\n    self::initPath();\n    return self::$_app_name ? self::getDataPath() . ($plugin ? 'plugins\/' . $plugin . '\/' : 'content\/') : '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 318,
            "endLine": 322,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getContentPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the full path of the content data; if plugin is provided gives the path for the plugin's content data.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full path of the content data; if plugin is provided gives the path for the plugin's content data.\n   *\n   * @param string $plugin\n   *\n   * @return string\n   *\/"
        },
        "getPluginUrl": {
            "name": "getPluginUrl",
            "summary": "Returns the URL part of the given plugin.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getPluginUrl(string $plugin_name)\n  {\n    if ($mvc = self::getInstance()) {\n      return $mvc->pluginUrl($plugin_name);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 332,
            "endLine": 339,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPluginUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "plugin_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name the plugin"
                }
            ],
            "doc": {
                "description": "Returns the URL part of the given plugin.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "name the plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the URL part of the given plugin.\n   *\n   * @param string $plugin_name the plugin\n   *\n   * @return null|string|false\n   *\/"
        },
        "getPluginPath": {
            "name": "getPluginPath",
            "summary": "Returns the path of the given plugin.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getPluginPath(string $plugin_name): ?string\n  {\n    if ($mvc = self::getInstance()) {\n      return $mvc->pluginPath($plugin_name);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 349,
            "endLine": 356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPluginPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name the plugin"
                }
            ],
            "doc": {
                "description": "Returns the path of the given plugin.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "name the plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of the given plugin.\n   *\n   * @param string $plugin_name the plugin\n   *\n   * @return null|string\n   *\/"
        },
        "getUserTmpPath": {
            "name": "getUserTmpPath",
            "summary": "Returns path for the user's temp dir",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getUserTmpPath(string|null $id_user = null, string|null $plugin = null): ?string\n  {\n\n    if (!$id_user) {\n      $usr = \\bbn\\User::getInstance();\n      if ($usr) {\n        $id_user = $usr->getId();\n      }\n    }\n\n    if ($id_user) {\n      return self::getTmpPath() . 'users\/' . $id_user . '\/tmp\/' . ($plugin ? $plugin . '\/' : '');\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 367,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserTmpPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns path for the user's temp dir\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "user"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns path for the user's temp dir\n   *\n   * @param string $id_user\n   * @param string $plugin\n   *\n   * @return string|null\n   *\/"
        },
        "getUserDataPath": {
            "name": "getUserDataPath",
            "summary": "Returns path for the user's dir",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getUserDataPath(string|null $id_user = null, string|null $plugin = null): ?string\n  {\n    if (!self::$_app_name) {\n      return null;\n    }\n\n    if (!$id_user) {\n      $usr = \\bbn\\User::getInstance();\n      if ($usr) {\n        $id_user = $usr->getId();\n      }\n    }\n\n    if ($id_user) {\n      return self::getDataPath() . 'users\/' . $id_user . '\/data\/' . ($plugin ? $plugin . '\/' : '');\n      ;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 392,
            "endLine": 411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getUserDataPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns path for the user's dir\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$id",
                        "description": "user"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns path for the user's dir\n   *\n   * @param string|null $id_user\n   * @param string|null $plugin\n   * @return string|null\n   *\/"
        },
        "includeModel": {
            "name": "includeModel",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function includeModel($bbn_inc_file, $model, $bbn_is_super = false)\n  {\n    if (is_file($bbn_inc_file)) {\n      ob_start();\n      $d = (function() use ($bbn_inc_file, $model, $bbn_is_super) {\n        return include $bbn_inc_file;\n      })();\n      if (ob_get_level()) {\n        ob_end_clean();\n      }\n  \n      \/\/ Adding support for returning serialized objects\n      if (is_string($d) && ($obj = @unserialize($d)) && is_object($obj)) {\n        return $d;\n      }\n\n      if (\\is_object($d)) {\n        $d = X::toArray($d);\n      }\n\n      if (!\\is_array($d)) {\n        return false;\n      }\n\n      return $d;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 414,
            "endLine": 442,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "includeModel",
            "returns": [],
            "arguments": [
                {
                    "name": "bbn_inc_file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "bbn_is_super",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getCookie": {
            "name": "getCookie",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCookie()\n  {\n    return empty($_COOKIE[BBN_APP_NAME]) ? false : json_decode($_COOKIE[BBN_APP_NAME], true)['value'];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 445,
            "endLine": 448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCookie",
            "returns": [],
            "arguments": []
        },
        "addStaticRoute": {
            "name": "addStaticRoute",
            "summary": "Adds a route to static routes list if not already exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addStaticRoute(): int\n  {\n    $res = 0;\n    foreach (\\func_get_args() as $a) {\n      if (!in_array($a, $this->static_routes, true)) {\n        $this->static_routes[] = $a;\n        $res++;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 456,
            "endLine": 467,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addStaticRoute",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "Adds a route to static routes list if not already exists.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a route to static routes list if not already exists.\n   *\n   * @return int\n   *\/"
        },
        "isStaticRoute": {
            "name": "isStaticRoute",
            "summary": "Checks if a route is authorized.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isStaticRoute($url): bool\n  {\n    if (in_array($url, $this->static_routes, true)) {\n      return true;\n    }\n\n    $auth_applicable = '';\n    foreach ($this->static_routes as $ar) {\n      if (\n        (substr($ar, -1) === '*')\n        && (strpos($url, substr($ar, 0, -1)) === 0)\n      ) {\n        if (strlen($ar) > strlen($auth_applicable)) {\n          $auth_applicable = substr($ar, 0, -1);\n        }\n      }\n    }\n\n    if ($auth_applicable) {\n      foreach ($this->forbidden_routes as $forbidden) {\n        if (\n          (substr($forbidden, -1) === '*')\n          && (strpos($url, substr($forbidden, 0, -1)) === 0)\n          \/\/ Should be as or more precise\n          && (strlen($auth_applicable) < strlen($forbidden))\n        ) {\n          return false;\n        } elseif ($url === $forbidden) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 476,
            "endLine": 512,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isStaticRoute",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if a route is authorized.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a route is authorized.\n   *\n   * @param $url\n   * @return bool\n   *\/"
        },
        "addAuthorizedRoute": {
            "name": "addAuthorizedRoute",
            "summary": "Add a route to authorized routes list if not already exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addAuthorizedRoute(): int\n  {\n    $res = 0;\n    foreach (\\func_get_args() as $a) {\n      if (!in_array($a, $this->authorized_routes, true)) {\n        $this->authorized_routes[] = $a;\n        $res++;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 520,
            "endLine": 531,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addAuthorizedRoute",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "Add a route to authorized routes list if not already exists.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Add a route to authorized routes list if not already exists.\n   *\n   * @return int\n   *\/"
        },
        "addForbiddenRoute": {
            "name": "addForbiddenRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addForbiddenRoute(): int\n  {\n    $res = 0;\n    foreach (\\func_get_args() as $a) {\n      if (!in_array($a, $this->forbidden_routes, true)) {\n        $this->forbidden_routes[] = $a;\n        $res++;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 534,
            "endLine": 545,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addForbiddenRoute",
            "returns": [
                "int"
            ],
            "arguments": []
        },
        "isAuthorizedRoute": {
            "name": "isAuthorizedRoute",
            "summary": "Checks if a route is authorized.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAuthorizedRoute($url): bool\n  {\n    if (in_array($url, $this->authorized_routes, true)) {\n      return true;\n    }\n\n    if ($this->isStaticRoute($url)) {\n      return true;\n    }\n\n    $has_allow_all = false;\n    $auth_applicable = '';\n    foreach ($this->authorized_routes as $ar) {\n      if ($ar === '*') {\n        $has_allow_all = true;\n        continue;\n      }\n\n      if (\n        (substr($ar, -1) === '*')\n        && (strpos($url, substr($ar, 0, -1)) === 0)\n      ) {\n        if (strlen($ar) > strlen($auth_applicable)) {\n          $auth_applicable = substr($ar, 0, -1);\n        }\n      }\n    }\n\n    if ($auth_applicable || $has_allow_all) {\n      foreach ($this->forbidden_routes as $forbidden) {\n        if (\n          (substr($forbidden, -1) === '*')\n          && (strpos($url, substr($forbidden, 0, -1)) === 0)\n          \/\/ Should be as or more precise\n          && (strlen($auth_applicable) < strlen($forbidden))\n        ) {\n          return false;\n        } elseif ($url === $forbidden) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 554,
            "endLine": 600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isAuthorizedRoute",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if a route is authorized.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$url"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a route is authorized.\n   *\n   * @param $url\n   * @return bool\n   *\/"
        },
        "setRoot": {
            "name": "setRoot",
            "summary": "Sets the root of the application in the URL (base href).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setRoot($root)\n  {\n    \/** @todo a proper verification of the path *\/\n    if (strpos($root, '\/', -1) === false) {\n      $root .= '\/';\n    }\n\n    $this->root = $root;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 609,
            "endLine": 617,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setRoot",
            "returns": [],
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the root of the application in the URL (base href).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$root"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the root of the application in the URL (base href).\n   *\n   * @param string $root\n   * @return void\n   *\/"
        },
        "getRoot": {
            "name": "getRoot",
            "summary": "Returns the root of the application in the URL (base href).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoot()\n  {\n    return $this->root;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 625,
            "endLine": 628,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRoot",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the root of the application in the URL (base href).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the root of the application in the URL (base href).\n   *\n   * @return string\n   *\/"
        },
        "setLocale": {
            "name": "setLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setLocale(string $locale)\n  {\n    $this->env->setLocale($locale);\n    $this->initLocaleDomain($this->info ? $this->info['plugin_name'] : null);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 631,
            "endLine": 635,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setLocale",
            "returns": [],
            "arguments": [
                {
                    "name": "locale",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLocale": {
            "name": "getLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLocale(): ?string\n  {\n    return $this->env->getLocale();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 638,
            "endLine": 641,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLocale",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "fetchDir": {
            "name": "fetchDir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchDir($dir, $mode)\n  {\n    return $this->router->fetchDir($dir, $mode);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 644,
            "endLine": 647,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "fetchDir",
            "returns": [],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchCustomDir": {
            "name": "fetchCustomDir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchCustomDir($dir, $mode, $plugin)\n  {\n    return $this->router->fetchCustomDir($dir, $mode, $plugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 650,
            "endLine": 653,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "fetchCustomDir",
            "returns": [],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchSubpluginDir": {
            "name": "fetchSubpluginDir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchSubpluginDir(string $path, string $mode, string $plugin_from, string $plugin_for)\n  {\n    return $this->router->fetchSubpluginDir($path, $mode, $plugin_from, $plugin_for);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 656,
            "endLine": 659,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "fetchSubpluginDir",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin_from",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin_for",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "includePhpView": {
            "name": "includePhpView",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function includePhpView($bbn_inc_file, $bbn_inc_content, array $bbn_inc_data = [])\n  {\n    $randoms = [];\n    $_random = fn($i) => $randoms[$i] ?? ($randoms[$i] = md5(Str::genpwd()));\n    ob_start();\n    (function () use ($bbn_inc_file, $bbn_inc_content, $bbn_inc_data, $_random) {\n      if ($bbn_inc_content) {\n        if (\\count($bbn_inc_data)) {\n          foreach ($bbn_inc_data as $bbn_inc_key => $bbn_inc_val) {\n            $$bbn_inc_key = $bbn_inc_val;\n          }\n\n          unset($bbn_inc_key, $bbn_inc_val);\n        }\n\n        unset($bbn_inc_data);\n\n        try {\n          eval ('use bbn\\X as xx; use bbn\\Str as st; ?>' . $bbn_inc_content);\n        } catch (\\Exception $e) {\n          error_log(\"Error for $bbn_inc_file: \". $e->getMessage());\n          X::logError($e->getCode(), $e->getMessage(), $bbn_inc_file, $e->getLine());\n        }\n      }\n\n      echo '';\n    })();\n\n    $c = ob_get_contents();\n    if (ob_get_level()) {\n      ob_end_clean();\n    }\n    return $c;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 662,
            "endLine": 695,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "includePhpView",
            "returns": [],
            "arguments": [
                {
                    "name": "bbn_inc_file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "bbn_inc_content",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "bbn_inc_data",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "addView": {
            "name": "addView",
            "summary": "This function gets the content of a view file and adds it to the loaded_views array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function addView($path, $mode, View $view)\n  {\n    if (!isset(self::$_loaded_views[$mode][$path])) {\n      self::$_loaded_views[$mode][$path] = $view;\n    }\n\n    return self::$_loaded_views[$mode][$path];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 704,
            "endLine": 711,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "addView",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The full path to the view file"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "view",
                    "position": 2,
                    "type": "bbn\\Mvc\\View",
                    "type_arr": [
                        "bbn\\Mvc\\View"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This function gets the content of a view file and adds it to the loaded_views array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$p",
                        "description": "The full path to the view file"
                    }
                ],
                "return": "The content of the view"
            },
            "comments": "  \/**\n   * This function gets the content of a view file and adds it to the loaded_views array.\n   *\n   * @param string $p The full path to the view file\n   * @return string The content of the view\n   *\/"
        },
        "setDbInController": {
            "name": "setDbInController",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setDbInController(bool $r = false)\n  {\n    self::$db_in_controller = $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 718,
            "endLine": 721,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "setDbInController",
            "returns": [],
            "arguments": [
                {
                    "name": "r",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$r"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param bool $r\n   * @return void\n   *\/"
        },
        "getDebug": {
            "name": "getDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getDebug()\n  {\n    return self::$_is_debug;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 727,
            "endLine": 730,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return bool\n   *\/"
        },
        "debug": {
            "name": "debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function debug($state = 1)\n  {\n    self::$_is_debug = (bool) $state;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 733,
            "endLine": 736,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "debug",
            "returns": [],
            "arguments": [
                {
                    "name": "state",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "route": {
            "name": "route",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function route($url = false)\n  {\n    if (\\is_null($this->info)) {\n      $this->info = $this->getRoute($this->getUrl() ?: '', $this->getMode() ?: '');\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 739,
            "endLine": 746,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "route",
            "returns": [],
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "registerPlugin": {
            "name": "registerPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function registerPlugin(array $plugin)\n  {\n    if (isset($plugin['path'], $plugin['url'], $plugin['name'])) {\n      $this->plugins[$plugin['name']] = [\n        'name' => $plugin['name'],\n        'url' => $plugin['url'],\n        'path' => $plugin['path']\n      ];\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 749,
            "endLine": 758,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "registerPlugin",
            "returns": [],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "initLocaleDomain": {
            "name": "initLocaleDomain",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function initLocaleDomain(string|null $pluginName = null)\n  {\n    if (\n      $this->router\n      && $this->getLocale()\n      && ($textdomain = $this->router->getLocaleDomain($pluginName))\n    ) {\n      textdomain($textdomain);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 761,
            "endLine": 770,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initLocaleDomain",
            "returns": [],
            "arguments": [
                {
                    "name": "pluginName",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "destructSingleton": {
            "name": "destructSingleton",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function destructSingleton()\n  {\n    self::$singleton_instance = null;\n    self::$singleton_exists = false;\n    self::$_app_name = null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 773,
            "endLine": 778,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "destructSingleton",
            "returns": [],
            "arguments": []
        },
        "__construct": {
            "name": "__construct",
            "summary": "This should be called only once from within the app",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct($db = null, $routes = [])\n  {\n    if (!\\defined(\"BBN_DEFAULT_MODE\")) {\n      define(\"BBN_DEFAULT_MODE\", 'public');\n    }\n\n    \/\/ Correspond to the path after the URL to the application's public root (set to '\/' for a domain's root)\n    if (!\\defined(\"BBN_CUR_PATH\")) {\n      define('BBN_CUR_PATH', '\/');\n    }\n\n    if (!\\defined(\"BBN_APP_NAME\")) {\n      throw new \\Exception(\"BBN_APP_NAME must be defined\");\n    }\n\n    if (!\\defined(\"BBN_APP_PATH\")) {\n      throw new \\Exception(\"BBN_APP_PATH must be defined\");\n    }\n\n    if (!\\defined(\"BBN_DATA_PATH\")) {\n      throw new \\Exception(\"BBN_DATA_PATH must be defined\");\n    }\n    self::singletonInit($this);\n    self::initPath();\n    $this->env = new Environment();\n    if (\\is_object($db) && ($class = \\get_class($db)) && ($class === 'PDO' || strpos($class, '\\Db') !== false)) {\n      $this->db = $db;\n    } else {\n      $this->db = null;\n    }\n\n    $this->inc = new \\stdClass();\n    if (\\is_array($routes)) {\n      if (isset($routes['root'])) {\n        foreach ($routes['root'] as $url => &$route) {\n          if (isset($route['root']) && defined('BBN_' . strtoupper($route['root']) . '_PATH')) {\n            $route['path'] = constant('BBN_' . strtoupper($route['root']) . '_PATH') . $route['path'];\n          }\n\n          if (!empty($route['path']) && (substr($route['path'], -1) !== '\/')) {\n            $route['path'] .= '\/';\n          }\n\n          if (isset($route['path'])) {\n            $route['url'] = $url;\n            $this->registerPlugin($route);\n          }\n        }\n      }\n\n      if (isset($routes['allowed'])) {\n        $this->authorized_routes = $routes['allowed'];\n      }\n\n      if (isset($routes['forbidden'])) {\n        $this->forbidden_routes = $routes['forbidden'];\n      }\n\n      $this->default = $routes['default'] ?? 'home';\n    }\n\n    $this->initLocaleDomain();\n    $this->router = new Router($this, $routes);\n    $this->route();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 787,
            "endLine": 851,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The database object if there is"
                },
                {
                    "name": "routes",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "An array of routes usually defined in \/_appui\/current\/cfg\/routes.json<\/em>"
                }
            ],
            "doc": {
                "description": "This should be called only once from within the app\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "object",
                        "name": "$db",
                        "description": "The database object if there is"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$routes",
                        "description": "An array of routes usually defined in \/_appui\/current\/cfg\/routes.json<\/em>"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This should be called only once from within the app\n   *\n   * @param object | string $db     The database object if there is\n   * @param array           $routes An array of routes usually defined in \/_appui\/current\/cfg\/routes.json<\/em>\n   *\/"
        },
        "__destruct": {
            "name": "__destruct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __destruct()\n  {\n    self::destructSingleton();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 854,
            "endLine": 857,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "__destruct",
            "returns": [],
            "arguments": []
        },
        "getDefault": {
            "name": "getDefault",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDefault() :string\n  {\n    return $this->default;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 859,
            "endLine": 862,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDefault",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether a corresponding file has been found or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    return $this->info ? true : false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 870,
            "endLine": 873,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether a corresponding file has been found or not.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether a corresponding file has been found or not.\n   *\n   * @return bool\n   *\/"
        },
        "getPlugins": {
            "name": "getPlugins",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPlugins()\n  {\n    return $this->plugins;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 876,
            "endLine": 879,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPlugins",
            "returns": [],
            "arguments": []
        },
        "hasPlugin": {
            "name": "hasPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasPlugin($plugin)\n  {\n    return isset($this->plugins[$plugin]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 882,
            "endLine": 885,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasPlugin",
            "returns": [],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isPlugin": {
            "name": "isPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isPlugin($plugin)\n  {\n    \/** @todo This function! *\/\n    return isset($this->plugins[$plugin]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 888,
            "endLine": 892,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isPlugin",
            "returns": [],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "pluginPath": {
            "name": "pluginPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginPath($plugin, $raw = false)\n  {\n    if ($this->hasPlugin($plugin)) {\n      return $this->plugins[$plugin]['path'] . ($raw ? '' : 'src\/');\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 895,
            "endLine": 900,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "pluginPath",
            "returns": [],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "raw",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "pluginUrl": {
            "name": "pluginUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginUrl($plugin)\n  {\n    return $this->hasPlugin($plugin) ? substr($this->plugins[$plugin]['url'], \\strlen($this->root)) : false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 903,
            "endLine": 906,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "pluginUrl",
            "returns": [],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "pluginName": {
            "name": "pluginName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginName($path)\n  {\n    foreach ($this->plugins as $name => $p) {\n      if (strpos($path, $p['url']) === 0) {\n        return $name;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 909,
            "endLine": 918,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "pluginName",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRoute": {
            "name": "getRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoute(string $path, string $mode): ?array\n  {\n    return $this->router->route($path, $mode);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 934,
            "endLine": 937,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getRoute",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$root"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param string $mode\n   * @param null   $root\n   *\n   * @return array|mixed|null\n   *\/"
        },
        "getFile": {
            "name": "getFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFile(): ?string\n  {\n    return $this->info['file'];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 940,
            "endLine": 943,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFile",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "Get the request url.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUrl(): ?string\n  {\n    return $this->env->getUrl();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 951,
            "endLine": 954,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUrl",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Get the request url.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Get the request url.\n   *\n   * @return string|null\n   *\/"
        },
        "getRequest": {
            "name": "getRequest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRequest(): ?string\n  {\n    return $this->env->getRequest();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 957,
            "endLine": 960,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRequest",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "getParams": {
            "name": "getParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getParams(): ?array\n  {\n    return $this->env->getParams();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 963,
            "endLine": 966,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getParams",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getPost": {
            "name": "getPost",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPost(): array\n  {\n    return $this->env->getPost();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 969,
            "endLine": 972,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPost",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "getGet": {
            "name": "getGet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGet(): array\n  {\n    return $this->env->getGet();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 975,
            "endLine": 978,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getGet",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "getFiles": {
            "name": "getFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFiles(): array\n  {\n    return $this->env->getFiles();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 981,
            "endLine": 984,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFiles",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "getMode": {
            "name": "getMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMode(): ?string\n  {\n    return $this->env->getMode();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 987,
            "endLine": 990,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMode",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "setMode": {
            "name": "setMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setMode($mode)\n  {\n    return $this->env->setMode($mode);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 993,
            "endLine": 996,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setMode",
            "returns": [],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isCli": {
            "name": "isCli",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isCli(): bool\n  {\n    return $this->env->isCli();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 999,
            "endLine": 1002,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isCli",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "reroute": {
            "name": "reroute",
            "summary": "This will reroute a controller to another one seemlessly. Chainable",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function reroute($path = '', $post = false, $arguments = false)\n  {\n    $this->env->simulate($path, $post, $arguments);\n    $this->is_routed = false;\n    $this->is_controlled = null;\n    $this->info = null;\n    $this->router->reset();\n    $this->route();\n    if ($arguments || !isset($this->info['args'])) {\n      $this->info['args'] = $arguments;\n    }\n\n    if ($this->controller) {\n      $this->controller->reset($this->info);\n    }\n\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1011,
            "endLine": 1029,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "reroute",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>"
                },
                {
                    "name": "post",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will reroute a controller to another one seemlessly. Chainable\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will reroute a controller to another one seemlessly. Chainable\n   *\n   * @param string $path The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>\n   * @return $this\n   *\/"
        },
        "hasView": {
            "name": "hasView",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasView(string $path = '', string $mode = 'html'): bool\n  {\n    return array_key_exists($mode, self::$_loaded_views) && isset(self::$_loaded_views[$mode][$path]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1037,
            "endLine": 1040,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "hasView",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param string $mode\n   * @return bool\n   *\/"
        },
        "addToViews": {
            "name": "addToViews",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToViews(string $path, string $mode, View $view): void\n  {\n    if (!array_key_exists($mode, self::$_loaded_views[$mode])) {\n      self::$_loaded_views[$mode] = [];\n    }\n\n    self::$_loaded_views[$mode][$path] = $view;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1049,
            "endLine": 1056,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "addToViews",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "view",
                    "position": 2,
                    "type": "bbn\\Mvc\\View",
                    "type_arr": [
                        "bbn\\Mvc\\View"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    },
                    {
                        "tag": "param",
                        "type": "View",
                        "name": "$view"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string   $path\n   * @param string   $mode\n   * @param View $view\n   * @return void\n   *\/"
        },
        "getView": {
            "name": "getView",
            "summary": "This will get a view.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getView(string $path, string $mode = 'html', ?array $data = null)\n  {\n    if (!router::isMode($mode) || !($path = Router::parse($path))) {\n      throw new \\Exception(\n        X::_(\"Incorrect mode $path $mode\")\n      );\n    }\n\n    $view = null;\n    if ($this->hasView($path, $mode)) {\n      $view = self::$_loaded_views[$mode][$path];\n    } elseif ($info = $this->router->route($path, $mode)) {\n      $view = new View($info);\n      $this->addToViews($path, $mode, $view);\n    }\n\n    if (\\is_object($view) && $view->check()) {\n      return $view->get($data);\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1068,
            "endLine": 1089,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getView",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a view.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * This will get a view.\n   *\n   * @param string     $path\n   * @param string     $mode\n   * @param array|null $data\n   * @return string\n   * @throws \\Exception\n   *\/"
        },
        "viewExists": {
            "name": "viewExists",
            "summary": "Checks whether the given view exists or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function viewExists(string $path, string $mode = 'html'): bool\n  {\n    if (!router::isMode($mode) || !($path = Router::parse($path))) {\n      return false;\n    }\n\n    if ($this->hasView($path, $mode)) {\n      return true;\n    }\n\n    if ($this->router->route($path, $mode)) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1099,
            "endLine": 1114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "viewExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the given view exists or not.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the given view exists or not.\n   *\n   * @param string $path\n   * @param string $mode\n   * @return boolean\n   *\/"
        },
        "modelExists": {
            "name": "modelExists",
            "summary": "Checks whether the given model exists or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function modelExists(string $path): bool\n  {\n    if ($this->router->route($path, 'model')) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1123,
            "endLine": 1130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "modelExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the given model exists or not.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the given model exists or not.\n   *\n   * @param string $path\n   * @return boolean\n   *\/"
        },
        "controllerExists": {
            "name": "controllerExists",
            "summary": "Checks whether the given controller exists or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function controllerExists(string $path, bool $private = false): bool\n  {\n    return (bool) $this->router->route($path, $private ? 'private' : 'public', true);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1139,
            "endLine": 1142,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "controllerExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "private",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the given controller exists or not.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the given controller exists or not.\n   *\n   * @param string $path\n   * @return boolean\n   *\/"
        },
        "getExternalView": {
            "name": "getExternalView",
            "summary": "This will get a view from a different root.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getExternalView(string $full_path, string $mode = 'html', ?array $data = null)\n  {\n    if (!router::isMode($mode) && ($full_path = Str::parsePath($full_path))) {\n      throw new \\Exception(\n        X::_(\"Incorrect mode $full_path $mode\")\n      );\n    }\n\n    if (($this->getMode() === 'dom') && (!defined('BBN_DEFAULT_MODE') || (BBN_DEFAULT_MODE !== 'dom'))) {\n      $full_path .= ($full_path === '' ? '' : '\/') . 'index';\n    }\n\n    $view = null;\n    if ($this->hasView($full_path, $mode)) {\n      $view = self::$_loaded_views[$mode][$full_path];\n    } elseif ($info = $this->router->route(X::basename($full_path), 'free-' . $mode, X::dirname($full_path))) {\n      $view = new View($info);\n      $this->addToViews($full_path, $mode, $view);\n    }\n\n    if (\\is_object($view) && $view->check()) {\n      return $view->get($data);\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1153,
            "endLine": 1178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getExternalView",
            "returns": [],
            "arguments": [
                {
                    "name": "full_path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get a view from a different root.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$full",
                        "description": "path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a view from a different root.\n   *\n   * @param string     $full_path\n   * @param string     $mode\n   * @param array|null $data\n   * @return string|false\n   *\/"
        },
        "getPluginFromComponent": {
            "name": "getPluginFromComponent",
            "summary": "Retrieves the plugin's name from the component's name if any.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPluginFromComponent(string $name): ?array\n  {\n    return $this->router->getPluginFromComponent($name);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1188,
            "endLine": 1191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPluginFromComponent",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves the plugin's name from the component's name if any.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves the plugin's name from the component's name if any.\n   *\n   * @param string $name\n   *\n   * @return array|null\n   *\/"
        },
        "routeComponent": {
            "name": "routeComponent",
            "summary": "Retrieves component's data from the given plugin name if exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function routeComponent(string $name): ?array\n  {\n    return $this->router->routeComponent($name);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1201,
            "endLine": 1204,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "routeComponent",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves component's data from the given plugin name if exists.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves component's data from the given plugin name if exists.\n   *\n   * @param string $name\n   *\n   * @return array|null\n   *\/"
        },
        "customPluginView": {
            "name": "customPluginView",
            "summary": "Retrieves a view of a custom plugin.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function customPluginView(string $path, string $mode, array $data, string $plugin): ?string\n  {\n    if ($plugin && ($route = $this->router->routeCustomPlugin(Router::parse($path), $mode, $plugin))) {\n      $view = new View($route);\n      if ($view->check()) {\n        return \\is_array($data) ? $view->get($data) : $view->get();\n      }\n\n      return '';\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1217,
            "endLine": 1229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "customPluginView",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a view of a custom plugin.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a view of a custom plugin.\n   *\n   * @param string $path\n   * @param string $mode\n   * @param array  $data\n   * @param string $plugin\n   *\n   * @return string|null\n   *\/"
        },
        "hasCustomPluginModel": {
            "name": "hasCustomPluginModel",
            "summary": "Checks if the given plugin model exists",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasCustomPluginModel(string $path, string $plugin): bool\n  {\n    return (bool) $this->router->routeCustomPlugin(router::parse($path), 'model', $plugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1239,
            "endLine": 1242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "hasCustomPluginModel",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the given plugin model exists\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the given plugin model exists\n   *\n   * @param string $path\n   * @param string $plugin\n   * @return bool\n   *\/"
        },
        "customPluginModel": {
            "name": "customPluginModel",
            "summary": "Retrieves a model of a custom plugin.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function customPluginModel(string $path, array $data, Controller $ctrl, string $plugin, int $ttl = null): ?array\n  {\n    if (\n      $plugin\n      && ($route = $this->router->routeCustomPlugin(router::parse($path), 'model', $plugin))\n    ) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      if ($ttl) {\n        return $model->getFromCache($data, '', $ttl);\n      }\n\n      return $model->get($data);\n    }\n\n    return null;\n    \/*\n    throw new \\Exception(\n      X::_(\n        \"Impossible to find the find the model %s in the plugin %s\",\n        $path,\n        $plugin\n      )\n    );\n    *\/\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1256,
            "endLine": 1280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "customPluginModel",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a model of a custom plugin.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "Controller",
                        "name": "$ctrl"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a model of a custom plugin.\n   *\n   * @param string         $path\n   * @param array          $data\n   * @param Controller $ctrl\n   * @param string         $plugin\n   * @param int            $ttl\n   *\n   * @return array|null\n   *\/"
        },
        "hasSubpluginModel": {
            "name": "hasSubpluginModel",
            "summary": "Returns true if the subplugin model exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSubpluginModel(string $path, string $plugin, string $subplugin): bool\n  {\n    return (bool) $this->router->routeSubplugin(router::parse($path), 'model', $plugin, $subplugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1292,
            "endLine": 1295,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "hasSubpluginModel",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path in the subplugin"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin"
                },
                {
                    "name": "subplugin",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The subplugin"
                }
            ],
            "doc": {
                "description": "Returns true if the subplugin model exists.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path in the subplugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin",
                        "description": "The subplugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the subplugin model exists.\n   *\n   * @param string $path      The path in the subplugin\n   * @param string $plugin    The plugin\n   * @param string $subplugin The subplugin\n   *\n   * @return bool\n   *\/"
        },
        "hasSubpluginJs": {
            "name": "hasSubpluginJs",
            "summary": "Returns true if the subplugin JS view exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSubpluginJs(string $path, string $plugin, string $subplugin): bool\n  {\n    return (bool) $this->router->routeSubplugin(router::parse($path), 'js', $plugin, $subplugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1306,
            "endLine": 1309,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "hasSubpluginJs",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path in the subplugin"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin"
                },
                {
                    "name": "subplugin",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The subplugin"
                }
            ],
            "doc": {
                "description": "Returns true if the subplugin JS view exists.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path in the subplugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin",
                        "description": "The subplugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the subplugin JS view exists.\n   *\n   * @param string $path      The path in the subplugin\n   * @param string $plugin    The plugin\n   * @param string $subplugin The subplugin\n   *\n   * @return bool\n   *\/"
        },
        "hasSubpluginHtml": {
            "name": "hasSubpluginHtml",
            "summary": "Returns true if the subplugin HTML view exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSubpluginHtml(string $path, string $plugin, string $subplugin): bool\n  {\n    return (bool) $this->router->routeSubplugin(router::parse($path), 'html', $plugin, $subplugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1321,
            "endLine": 1324,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "hasSubpluginHtml",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path in the subplugin"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin"
                },
                {
                    "name": "subplugin",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The subplugin"
                }
            ],
            "doc": {
                "description": "Returns true if the subplugin HTML view exists.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path in the subplugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin",
                        "description": "The subplugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the subplugin HTML view exists.\n   *\n   * @param string $path      The path in the subplugin\n   * @param string $plugin    The plugin\n   * @param string $subplugin The subplugin\n   *\n   * @return bool\n   *\/"
        },
        "hasSubpluginCss": {
            "name": "hasSubpluginCss",
            "summary": "Returns true if the subplugin CSS view exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSubpluginCss(string $path, string $plugin, string $subplugin): bool\n  {\n    return (bool) $this->router->routeSubplugin(router::parse($path), 'css', $plugin, $subplugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1336,
            "endLine": 1339,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "hasSubpluginCss",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path in the subplugin"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin"
                },
                {
                    "name": "subplugin",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The subplugin"
                }
            ],
            "doc": {
                "description": "Returns true if the subplugin CSS view exists.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path in the subplugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin",
                        "description": "The subplugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the subplugin CSS view exists.\n   *\n   * @param string $path      The path in the subplugin\n   * @param string $plugin    The plugin\n   * @param string $subplugin The subplugin\n   *\n   * @return bool\n   *\/"
        },
        "subpluginModel": {
            "name": "subpluginModel",
            "summary": "Get a subplugin model (a plugin inside the plugin directory of another plugin).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function subpluginModel(string $path, array $data, Controller $ctrl, string $plugin, string $subplugin, int $ttl = null): ?array\n  {\n    if (\n      $plugin\n      && $subplugin\n      && ($route = $this->router->routeSubplugin(router::parse($path), 'model', $plugin, $subplugin))\n    ) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      $res = $ttl ? $model->getFromCache($data, '', $ttl) : $model->get($data);\n      return $res;\n    }\n\n    throw new \\Exception(\n      X::_(\n        \"Impossible to find the model %s from subplugin %s in plugin %s\",\n        $path,\n        $subplugin,\n        $plugin\n      )\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1354,
            "endLine": 1374,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 5,
            "shortName": "subpluginModel",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path inside the subplugin directory"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data for the model"
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The controller"
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin name"
                },
                {
                    "name": "subplugin",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The subplugin name"
                },
                {
                    "name": "ttl",
                    "position": 5,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The cache TTL"
                }
            ],
            "doc": {
                "description": "Get a subplugin model (a plugin inside the plugin directory of another plugin).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path inside the subplugin directory"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data for the model"
                    },
                    {
                        "tag": "param",
                        "type": "Controller",
                        "name": "$ctrl",
                        "description": "The controller"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin",
                        "description": "The subplugin name"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$ttl",
                        "description": "The cache TTL"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get a subplugin model (a plugin inside the plugin directory of another plugin).\n   *\n   * @param string         $path      The path inside the subplugin directory\n   * @param array          $data      The data for the model\n   * @param Controller $ctrl      The controller\n   * @param string         $plugin    The plugin name\n   * @param string         $subplugin The subplugin name\n   * @param int            $ttl       The cache TTL\n   *\n   * @return array|null\n   *\/"
        },
        "subpluginView": {
            "name": "subpluginView",
            "summary": "Get a subplugin View (a plugin inside the plugin directory of another plugin).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function subpluginView(string $path, string $mode, array $data, string $plugin, string $subplugin): string\n  {\n    if (\n      $plugin\n      && $subplugin\n      && ($route = $this->router->routeSubplugin(router::parse($path), $mode, $plugin, $subplugin))\n    ) {\n      $view = new View($route);\n      return $view->get($data);\n    }\n\n    throw new \\Exception(\n      X::_(\n        \"Impossible to find the model %s from subplugin %s in plugin %s\",\n        $path,\n        $subplugin,\n        $plugin\n      )\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1389,
            "endLine": 1408,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 5,
            "shortName": "subpluginView",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path inside the subplugin directory"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data for the model"
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The controller"
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin name"
                },
                {
                    "name": "subplugin",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The subplugin name"
                }
            ],
            "doc": {
                "description": "Get a subplugin View (a plugin inside the plugin directory of another plugin).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path inside the subplugin directory"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data for the model"
                    },
                    {
                        "tag": "param",
                        "type": "Controller",
                        "name": "$ctrl",
                        "description": "The controller"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin",
                        "description": "The subplugin name"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$ttl",
                        "description": "The cache TTL"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get a subplugin View (a plugin inside the plugin directory of another plugin).\n   *\n   * @param string         $path      The path inside the subplugin directory\n   * @param array          $data      The data for the model\n   * @param Controller     $ctrl      The controller\n   * @param string         $plugin    The plugin name\n   * @param string         $subplugin The subplugin name\n   * @param int            $ttl       The cache TTL\n   *\n   * @return array|null\n   *\/"
        },
        "hasPluginView": {
            "name": "hasPluginView",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasPluginView(string $path, string $mode, string $plugin): bool\n  {\n    return (bool) $this->router->routeCustomPlugin(Router::parse($path), $mode, $plugin);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1411,
            "endLine": 1414,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "hasPluginView",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPluginView": {
            "name": "getPluginView",
            "summary": "This will get a view.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPluginView(string $path, string $mode, array $data, string $plugin)\n  {\n    return $this->customPluginView(router::parse($path), $mode, $data, $this->pluginName($plugin));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1427,
            "endLine": 1430,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "getPluginView",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path of the view in the plugin"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The mode of the view"
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Data for the view"
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin URL"
                }
            ],
            "doc": {
                "description": "This will get a view.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "The path of the view in the plugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of the view"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "Data for the view"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin",
                        "description": "The plugin URL"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will get a view.\n   *\n   * @param string $path   The path of the view in the plugin\n   * @param string $mode   The mode of the view\n   * @param array  $data   Data for the view\n   * @param string $plugin The plugin URL\n   *\n   * @return string|null\n   *\/"
        },
        "getModel": {
            "name": "getModel",
            "summary": "This will get the model; there is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getModel($path, array $data, Controller $ctrl)\n  {\n    if (($path = Router::parse($path)) && ($route = $this->router->route($path, 'model'))) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      return $model->get($data);\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1441,
            "endLine": 1449,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getModel",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Path to the model"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Data to send to the model"
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get the model; there is no order for the arguments.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path",
                        "description": "Path to the model"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "Data to send to the model"
                    }
                ],
                "return": "A data model"
            },
            "comments": "  \/**\n   * This will get the model; there is no order for the arguments.\n   *\n   * @param string $path Path to the model\n   * @param array  $data Data to send to the model\n   *\n   * @return array|null A data model\n   *\/"
        },
        "getModelGroup": {
            "name": "getModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getModelGroup(string $path, array $data, Controller $ctrl)\n  {\n    $res = [];\n    if (\n      ($path = Router::parse($path))\n      && ($items = $this->fetchDir($path, 'model'))\n    ) {\n      foreach ($items as $it) {\n        $res[] = $this->getModel($it, $data, $ctrl);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1452,
            "endLine": 1465,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getModelGroup",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCustomModelGroup": {
            "name": "getCustomModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCustomModelGroup(string $path, string $plugin, array $data, Controller $ctrl): array\n  {\n    $res = [];\n    if (\n      ($path = Router::parse($path))\n      && ($items = $this->fetchCustomDir($path, 'model', $plugin))\n    ) {\n      foreach ($items as $it) {\n        $res[$it] = $this->customPluginModel($it, $data, $ctrl, $plugin);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1468,
            "endLine": 1481,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "getCustomModelGroup",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 3,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSubpluginModelGroup": {
            "name": "getSubpluginModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSubpluginModelGroup(string $path, string $plugin_from, string $plugin_for, array $data, Controller $ctrl): array\n  {\n    $res = [];\n    if (\n      ($path = Router::parse($path))\n      && ($items = $this->fetchSubpluginDir($path, 'model', $plugin_from, $plugin_for))\n    ) {\n      foreach ($items as $it) {\n        $res[$it] = $this->getSubpluginModel($it, $data, $ctrl, $plugin_from, $plugin_for);\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1484,
            "endLine": 1497,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 5,
            "shortName": "getSubpluginModelGroup",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin_from",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin_for",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 4,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPluginModel": {
            "name": "getPluginModel",
            "summary": "An alias for customPluginModel()",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPluginModel(string $path, array $data, Controller $ctrl, string $plugin, int $ttl = null)\n  {\n    return $this->customPluginModel(router::parse($path), $data, $ctrl, $this->pluginName($plugin), $ttl);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1510,
            "endLine": 1513,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "getPluginModel",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "An alias for customPluginModel()\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "Controller",
                        "name": "$ctrl"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    },
                    {
                        "tag": "param",
                        "type": "int|null",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * An alias for customPluginModel()\n   *\n   * @param string         $path\n   * @param array          $data\n   * @param Controller $ctrl\n   * @param string         $plugin\n   * @param int|null       $ttl\n   * @return array|null\n   *\/"
        },
        "getSubpluginModel": {
            "name": "getSubpluginModel",
            "summary": "An alias for subpluginModel()",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSubpluginModel(string $path, array $data, Controller $ctrl, string $plugin, string $subplugin, int $ttl = null)\n  {\n    return $this->subpluginModel($path, $data, $ctrl, $plugin, $subplugin, $ttl);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1527,
            "endLine": 1530,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 5,
            "shortName": "getSubpluginModel",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subplugin",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 5,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "An alias for subpluginModel()\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "Controller",
                        "name": "$ctrl"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$subplugin"
                    },
                    {
                        "tag": "param",
                        "type": "int|null",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * An alias for subpluginModel()\n   *\n   * @param string         $path\n   * @param array          $data\n   * @param Controller $ctrl\n   * @param string         $plugin\n   * @param string         $subplugin\n   * @param int|null       $ttl\n   * @return array|null\n   *\/"
        },
        "getCachedModel": {
            "name": "getCachedModel",
            "summary": "This will get the model as it is in cache if any and otherwise will save it in cache then return it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCachedModel(string $path, array $data, Controller $ctrl, int $ttl = 10)\n  {\n    if (\\is_null($data)) {\n      $data = $this->data;\n    }\n\n    if ($route = $this->router->route(router::parse($path), 'model')) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      return $model->getFromCache($data, '', $ttl);\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1540,
            "endLine": 1552,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "getCachedModel",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path to the model"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "data to send to the model"
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will get the model as it is in cache if any and otherwise will save it in cache then return it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "path to the model"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "description": "data to send to the model"
                    }
                ],
                "return": "A data model"
            },
            "comments": "  \/**\n   * This will get the model as it is in cache if any and otherwise will save it in cache then return it\n   *\n   * @param string path to the model\n   * @param array data to send to the model\n   * @return array|null A data model\n   *\/"
        },
        "setCachedModel": {
            "name": "setCachedModel",
            "summary": "This will set the model in cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCachedModel($path, array $data, Controller $ctrl, $ttl = 10)\n  {\n    if (\\is_null($data)) {\n      $data = $this->data;\n    }\n\n    if ($route = $this->router->route(router::parse($path), 'model')) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      $model->setCache($data, '', $ttl);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1562,
            "endLine": 1572,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "setCachedModel",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path to the model"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "data to send to the model"
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will set the model in cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "path to the model"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "description": "data to send to the model"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will set the model in cache\n   *\n   * @param string path to the model\n   * @param array data to send to the model\n   * @return void\n   *\/"
        },
        "deleteCachedModel": {
            "name": "deleteCachedModel",
            "summary": "This will unset the model in cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteCachedModel($path, array $data, Controller $ctrl)\n  {\n    if (\\is_null($data)) {\n      $data = $this->data;\n    }\n\n    if ($route = $this->router->route(router::parse($path), 'model')) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      $model->deleteCache($data, '');\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1582,
            "endLine": 1592,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "deleteCachedModel",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path to the model"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "data to send to the model"
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "type_arr": [
                        "bbn\\Mvc\\Controller"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "This will unset the model in cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "path to the model"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "description": "data to send to the model"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This will unset the model in cache\n   *\n   * @param string path to the model\n   * @param array data to send to the model\n   * @return void\n   *\/"
        },
        "addInc": {
            "name": "addInc",
            "summary": "Adds a property to the MVC object inc if it has not been declared.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addInc(string $name, object $obj): void\n  {\n    if (isset($this->inc->{$name})) {\n      throw new \\Exception(X::_(\"Impossible to add twice the same property (%s) to inc\", $name));\n    }\n\n    $this->inc->{$name} = $obj;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1600,
            "endLine": 1607,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addInc",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "object",
                    "type_arr": [
                        "object"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a property to the MVC object inc if it has not been declared.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a property to the MVC object inc if it has not been declared.\n   *\n   * @return void\n   *\/"
        },
        "process": {
            "name": "process",
            "summary": "Returns the rendered result from the current mvc if successfully processed",
            "description": "process() (or check()) must have been called before.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "process() (or check()) must have been called before."
                }
            ],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function process()\n  {\n    if ($this->check()) {\n      $this->obj = new \\stdClass();\n      if (!\\is_array($this->info)) {\n        $this->log(\"No info in MVC\", $this->info);\n        throw new \\Exception(X::_(\"No info in MVC\"));\n      }\n\n      if (!$this->controller) {\n        $this->controller = new Controller($this, $this->info, $this->data);\n      }\n\n      $this->controller->process();\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1617,
            "endLine": 1632,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "process",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the rendered result from the current mvc if successfully processed\nprocess() (or check()) must have been called before.\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * Returns the rendered result from the current mvc if successfully processed\n   * process() (or check()) must have been called before.\n   *\n   * @return void\n   * @throws \\Exception\n   *\/"
        },
        "hasContent": {
            "name": "hasContent",
            "summary": "Checks if the controller has content.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasContent()\n  {\n    if ($this->check() && $this->controller) {\n      return $this->controller->hasContent();\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1640,
            "endLine": 1647,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "hasContent",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks if the controller has content.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the controller has content.\n   *\n   * @return bool\n   *\/"
        },
        "transform": {
            "name": "transform",
            "summary": "Transform the output object on Controller instance given a callback",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function transform(callable $fn)\n  {\n    if ($this->check() && $this->controller) {\n      $this->controller->transform($fn);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1655,
            "endLine": 1660,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "transform",
            "returns": [],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transform the output object on Controller instance given a callback\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Transform the output object on Controller instance given a callback\n   *\n   * @param callable $fn\n   *\/"
        },
        "output": {
            "name": "output",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function output()\n  {\n    if ($this->check() && $this->controller) {\n      if ($this->controller->isStream()) {\n        die('{\"ended\": true}');\n      }\n\n      $obj = $this->controller->get();\n      if ($this->isCli()) {\n        if (isset($obj->content)) {\n          echo $obj->content;\n        }\n\n        exit();\n      }\n\n      if (\\is_array($obj)) {\n        $obj = X::toObject($obj);\n      }\n\n      if ((\\gettype($obj) !== 'object') || (\\get_class($obj) !== 'stdClass')) {\n        throw new \\Exception(X::_(\"Unexpected output: \" . \\gettype($obj)));\n      }\n\n      if ($this->obj && X::countProperties($this->obj)) {\n        $obj = X::mergeObjects($obj, $this->obj);\n      }\n\n      $output = new Output($obj, $this->getMode());\n      $output->run();\n    } else {\n      Output::statusHeader(404);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1668,
            "endLine": 1701,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "output",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   *\n   *\n   * @throws \\Exception\n   *\/"
        },
        "getDb": {
            "name": "getDb",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDb(): ?Db\n  {\n    if (self::$db_in_controller && $this->db) {\n      return $this->db;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1710,
            "endLine": 1717,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDb",
            "returns": [
                null,
                "bbn\\Db"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return Db|null\n   *\/"
        },
        "setPrepath": {
            "name": "setPrepath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setPrepath($path)\n  {\n    if ($this->check()) {\n      if ($this->router->getPrepath(false) === $path) {\n        return 1;\n      }\n\n      if ($this->env->setPrepath($path) && $this->router->setPrepath($path)) {\n        return 1;\n      }\n    }\n\n    throw new \\Exception(\n      X::_(\"The setPrepath method cannot be used in this MVC\")\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1725,
            "endLine": 1740,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setPrepath",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * @param string $path\n   * @return int\n   * @throws \\Exception\n   *\/"
        },
        "getPrepath": {
            "name": "getPrepath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrepath()\n  {\n    if ($this->check()) {\n      return $this->router->getPrepath();\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1746,
            "endLine": 1753,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPrepath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string\n   *\/"
        },
        "getRoutes": {
            "name": "getRoutes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRoutes($type = 'root')\n  {\n    if ($this->check()) {\n      $routes = $this->router->getRoutes();\n      return $routes[$type] ?? false;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1760,
            "endLine": 1768,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getRoutes",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "root",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $type\n   * @return false|mixed\n   *\/"
        },
        "singletonInit": {
            "name": "singletonInit",
            "summary": "Initialize the singleton by putting its own instance as static property.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Singleton.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function singletonInit(self $instance)\n  {\n    if (self::singletonExists()) {\n      throw new \\Exception(X::_(\"Impossible to create a new instance of\").' '.\\get_class($instance));\n    }\n\n    self::$singleton_exists = 1;\n    self::$singleton_instance = $instance;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Singleton",
            "startLine": 35,
            "endLine": 43,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "singletonInit",
            "returns": [],
            "arguments": [
                {
                    "name": "instance",
                    "position": 0,
                    "type": "self",
                    "type_arr": [
                        "self"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The instance object."
                }
            ],
            "doc": {
                "description": "Initialize the singleton by putting its own instance as static property.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "self",
                        "name": "$instance",
                        "description": "The instance object."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the singleton by putting its own instance as static property.\n   *\n   * @param self $instance The instance object.\n   * @return void\n   *\/"
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Singleton.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getInstance(): ?self\n  {\n    return self::singletonExists() ? self::$singleton_instance : null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Singleton",
            "startLine": 50,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getInstance",
            "returns": [
                null,
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the instance of the singleton or null.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the instance of the singleton or null.\n   * \n   * @return self\n   *\/"
        },
        "singletonExists": {
            "name": "singletonExists",
            "summary": "Returns true if the instance as been initiated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Singleton.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function singletonExists(): bool\n  {\n    return self::$singleton_exists ? true : false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Singleton",
            "startLine": 60,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "singletonExists",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if the instance as been initiated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the instance as been initiated.\n   *\n   * @return bool\n   *\/"
        },
        "checkPath": {
            "name": "checkPath",
            "summary": "This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function checkPath()\n  {\n    $ar = \\func_get_args();\n    foreach ($ar as $a){\n      $b = Str::parsePath($a, true);\n      if (empty($b) && !empty($a)) {\n        $this->error(\"The path $a is not an acceptable value\");\n        return false;\n      }\n    }\n\n    return 1;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 37,
            "endLine": 49,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkPath",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$p",
                        "description": "The request path <em>(e.g books\/466565 or html\/home)<\/em>"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * This checks whether an argument used for getting controller, View or model - which are files - doesn't contain malicious content.\n   *\n   * @param string $p The request path <em>(e.g books\/466565 or html\/home)<\/em>\n   * @return bool\n   *\/"
        },
        "error": {
            "name": "error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function error($msg)\n  {\n    $msg = \"Error from \".\\get_class($this).\": \".$msg;\n    $this->log($msg, 'mvc');\n    throw new \\Exception(X::_($msg));\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 56,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "error",
            "returns": [],
            "arguments": [
                {
                    "name": "msg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$msg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * @param $msg\n   * @throws \\Exception\n   *\/"
        },
        "log": {
            "name": "log",
            "summary": "Log to a specific log with debug info",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if (Mvc::getDebug()) {\n      $ar = \\func_get_args();\n      X::log(\\count($ar) > 1 ? $ar : $ar[0], 'mvc');\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 67,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Log to a specific log with debug info",
                "tags": []
            },
            "comments": "  \/**\n   * Log to a specific log with debug info\n   *\/"
        },
        "pluginDataPath": {
            "name": "pluginDataPath",
            "summary": "Returns the path of a plugin in the data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginDataPath(string|null $plugin = null): ?string\n  {\n    if ($this->_plugin || $plugin) {\n      return $this->dataPath() . 'plugins\/' . ($plugin ?: $this->pluginName($this->_plugin)) . '\/';\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 82,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginDataPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the path of a plugin in the data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of a plugin in the data\n   *\n   * @param string $plugin\n   * @return string|null\n   *\/"
        },
        "pluginTmpPath": {
            "name": "pluginTmpPath",
            "summary": "Returns the path of a plugin in the data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function pluginTmpPath(string|null $plugin = null): ?string\n  {\n    if ($this->_plugin || $plugin) {\n      return $this->tmpPath().'plugins\/' . ($plugin ?: $this->pluginName($this->_plugin)) . '\/';\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 98,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "pluginTmpPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the path of a plugin in the data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$plugin"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the path of a plugin in the data\n   *\n   * @param string $plugin\n   * @return string|null\n   *\/"
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAliases(): ?array\n  {\n    return $this->_mvc->getRoutes('alias');\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 197,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAliases",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "appPath": {
            "name": "appPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function appPath($raw = false): string\n  {\n    return Mvc::getAppPath($raw);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 221,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "appPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "libPath": {
            "name": "libPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function libPath(): string\n  {\n    return Mvc::getLibPath();\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 227,
            "endLine": 230,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "libPath",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "dataPath": {
            "name": "dataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dataPath(string|null $plugin = null): string\n  {\n    return Mvc::getDataPath().($plugin ? 'plugins\/'.$plugin.'\/' : '');\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 233,
            "endLine": 236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dataPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tmpPath": {
            "name": "tmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tmpPath(string|null $plugin = null): string\n  {\n    return Mvc::getTmpPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 239,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "tmpPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "logPath": {
            "name": "logPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function logPath(string|null $plugin = null): string\n  {\n    return Mvc::getLogPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 245,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "logPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "cachePath": {
            "name": "cachePath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cachePath(string|null $plugin = null): string\n  {\n    return Mvc::getCachePath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 251,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "cachePath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "contentPath": {
            "name": "contentPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function contentPath(string|null $plugin = null): string\n  {\n    return Mvc::getContentPath($plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "contentPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userTmpPath": {
            "name": "userTmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function userTmpPath(string|null $id_user = null, string|null $plugin = null):? string\n  {\n    return Mvc::getUserTmpPath($id_user, $plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 263,
            "endLine": 266,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "userTmpPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userDataPath": {
            "name": "userDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Mvc",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Mvc\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function userDataPath(string|null $id_user = null, string|null $plugin = null):? string\n  {\n    return Mvc::getUserDataPath($id_user, $plugin);\n  }",
            "parent": false,
            "trait": "bbn\\Mvc\\Common",
            "startLine": 269,
            "endLine": 272,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "userDataPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "_loaded_views": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "The list of views which have been loaded"
                    }
                ]
            },
            "parent": false,
            "value": {
                "html": [],
                "css": [],
                "js": []
            }
        },
        "_is_debug": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool"
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "_app_name": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The application name"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_app_prefix": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The application prefix"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_app_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The application path"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_cur_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The path in the URL"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_lib_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The libraries path (vendor)"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_data_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The data path"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_tmp_path": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The temp path"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "db_in_controller": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": false
        },
        "is_routed": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "default": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "is_controlled": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "controller": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The current controller\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|Controller"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Db",
                        "description": "Database object"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "env": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Environment",
                        "description": "Environment object"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "router": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "Router",
                        "description": "Database object"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "info": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "The file(s)'s configuration to transmit to the m\/v\/c"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "root": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The root of the application in the URL (base href)"
                    }
                ]
            },
            "parent": false,
            "value": ""
        },
        "plugins": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "The plugins registered through the routes"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "loaded": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "The plugins registered through the routes"
                    }
                ]
            },
            "parent": false,
            "value": {
                "views": {
                    "html": [],
                    "css": [],
                    "js": []
                },
                "models": [],
                "ctrls": []
            }
        },
        "static_routes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "authorized_routes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "forbidden_routes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "inc": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "\\stdClass",
                        "description": "An external object that can be filled after the object creation and can be used as a global with the function add_inc"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "data": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "o": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": null
        },
        "obj": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "The output object\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|object"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "reserved": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": [
                "_private",
                "_common",
                "_htaccess"
            ]
        },
        "singleton_instance": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Singleton",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "self",
                        "description": "An instance of the current class."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "singleton_exists": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Singleton",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Will be true from the moment the instance exists."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "_mvc": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "The MVC class from which the controller is called\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bbn\\Mvc"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "_plugin": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Mvc"
            },
            "declaring_trait": "bbn\\Mvc\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|string",
                        "description": "If the controller is inside a plugin this property will be set to its name"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "_loaded_views": {
            "html": [],
            "css": [],
            "js": []
        },
        "_is_debug": true,
        "_app_name": "apst-app",
        "_app_prefix": "apst",
        "_app_path": "\/home\/nabab\/web\/domains\/apst-app2\/app-ui\/",
        "_cur_path": "\/",
        "_lib_path": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/",
        "_data_path": "\/home\/nabab\/web\/domains\/apst-app2\/data\/",
        "_tmp_path": "\/home\/nabab\/tmp\/apst2\/",
        "db_in_controller": true,
        "reserved": [
            "_private",
            "_common",
            "_htaccess"
        ],
        "singleton_instance": {
            "inc": {
                "options": {},
                "session": {},
                "user": {
                    "prev_time": null
                },
                "pref": {},
                "perm": {},
                "ent": {}
            },
            "data": [],
            "o": null,
            "obj": {}
        },
        "singleton_exists": 1
    },
    "constants": null,
    "uses": {
        "bbn\\Mvc\\Router": "Router",
        "bbn\\Mvc\\Controller": "Controller",
        "bbn\\Mvc\\Model": "Model",
        "bbn\\Mvc\\Environment": "Environment",
        "bbn\\Mvc\\Output": "Output",
        "bbn\\Mvc\\View": "View"
    },
    "dummyComments": [
        "\/**\n * Model View Controller Class.\n *\n * Called once per request, holds the environment's variables and routes each request to its according controller, then acts as a link between the controller and models and views it uses.\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Apr 4, 2011, 23:23:55 +0000\n * @category  MVC\n * @license   http:\/\/www.opensource.org\/licenses\/mit-license.php MIT\n * @version 0.9\n * @todo Add feature to auto-detect a different corresponding index and redirect to it through Appui\n * @todo Add $this->dom to public controllers (?)\n *\/",
        "\/**\n * MVC\n *\/"
    ],
    "summary": "MVC",
    "description": "",
    "description_parts": []
}