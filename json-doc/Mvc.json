{
    "doc": {
        "description": "MVC",
        "tags": []
    },
    "name": "bbn\\Mvc",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Singleton",
        "bbn\\Mvc\\Common"
    ],
    "interfaces": {
        "bbn\\Mvc\\Api": {
            "name": "bbn\\Mvc\\Api"
        }
    },
    "fileName": "\/Mvc.php",
    "startLine": 52,
    "endLine": 1562,
    "contentConstructor": {
        "file": "bbn\\Mvc",
        "returns": null
    },
    "methods": {
        "initPath": {
            "name": "initPath",
            "summary": "Sets all the different paths' properties.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!self::$_app_name) {\n      self::$_app_name   = BBN_APP_NAME;\n      self::$_app_path   = BBN_APP_PATH;\n      self::$_app_prefix = BBN_APP_PREFIX;\n      self::$_cur_path   = BBN_CUR_PATH;\n      self::$_lib_path   = BBN_LIB_PATH;\n      self::$_data_path  = BBN_DATA_PATH;\n    }\n  }",
            "startLine": 184,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppName": {
            "name": "getAppName",
            "summary": "Returns the current app's name.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$_app_name;\n  }",
            "startLine": 202,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppPrefix": {
            "name": "getAppPrefix",
            "summary": "Returns the current app's prefix if any.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$_app_prefix;\n  }",
            "startLine": 213,
            "endLine": 216,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAppPath": {
            "name": "getAppPath",
            "summary": "Returns the current app's full path (with src\/ at the end if raw if false).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($raw = false)\n  {\n    return self::$_app_path . ($raw ? '' : 'src\/');\n  }",
            "startLine": 226,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getCurPath": {
            "name": "getCurPath",
            "summary": "Returns the web public path of the app.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$_cur_path;\n  }",
            "startLine": 237,
            "endLine": 240,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getLibPath": {
            "name": "getLibPath",
            "summary": "Returns the full path of the libraries (vendor folder).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$_lib_path;\n  }",
            "startLine": 248,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getDataPath": {
            "name": "getDataPath",
            "summary": "Returns the full path of the data; if plugin is provided gives the path for the plugin's data.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return BBN_DATA_PATH . ($plugin ? 'plugins\/' . $plugin . '\/' : '');\n  }",
            "startLine": 261,
            "endLine": 264,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTmpPath": {
            "name": "getTmpPath",
            "summary": "Returns the full path of the temp data; if plugin is provided gives the path for the plugin's temp data.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return self::$_app_name ? self::getDataPath() . 'tmp\/' . ($plugin ? $plugin . '\/' : '') : '';\n  }",
            "startLine": 274,
            "endLine": 277,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getLogPath": {
            "name": "getLogPath",
            "summary": "Returns the full path of the logs.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return self::$_app_name ? self::getDataPath() . 'logs\/' . ($plugin ? $plugin . '\/' : '') : '';\n  }",
            "startLine": 289,
            "endLine": 292,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCachePath": {
            "name": "getCachePath",
            "summary": "Returns ths full path of the cache",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return BBN_DATA_PATH . 'cache\/' . ($plugin ? $plugin . '\/' : '');\n  }",
            "startLine": 304,
            "endLine": 307,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getContentPath": {
            "name": "getContentPath",
            "summary": "Returns the full path of the content data; if plugin is provided gives the path for the plugin's content data.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return self::$_app_name ? self::getDataPath() . ($plugin ? 'plugins\/' . $plugin . '\/' : 'content\/') : '';\n  }",
            "startLine": 317,
            "endLine": 320,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPluginUrl": {
            "name": "getPluginUrl",
            "summary": "Returns the URL part of the given plugin.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin_name)\n  {\n    if ($mvc = self::getInstance()) {\n      return $mvc->pluginUrl($plugin_name);\n    }\n\n    return null;\n  }",
            "startLine": 330,
            "endLine": 337,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin_name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name the plugin"
                }
            ]
        },
        "getPluginPath": {
            "name": "getPluginPath",
            "summary": "Returns the path of the given plugin.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin_name)\n  {\n    if ($mvc = self::getInstance()) {\n      return $mvc->pluginPath($plugin_name);\n    }\n\n    return null;\n  }",
            "startLine": 347,
            "endLine": 354,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin_name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name the plugin"
                }
            ]
        },
        "getUserTmpPath": {
            "name": "getUserTmpPath",
            "summary": "Returns path for the user's temp dir",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_user = NULL, string $plugin = NULL)\n  {\n    if (!self::$_app_name) {\n      return null;\n    }\n\n    if (!$id_user) {\n      $usr = \\bbn\\User::getInstance();\n      if ($usr) {\n        $id_user = $usr->getId();\n      }\n    }\n\n    if ($id_user) {\n      return self::getDataPath() . 'users\/' . $id_user . '\/tmp\/' . ($plugin ? $plugin . '\/' : '');\n    }\n\n    return null;\n  }",
            "startLine": 365,
            "endLine": 383,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getUserDataPath": {
            "name": "getUserDataPath",
            "summary": "Returns path for the user's dir",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_user = NULL, string $plugin = NULL)\n  {\n    if (!self::$_app_name) {\n      return null;\n    }\n\n    if (!$id_user) {\n      $usr = \\bbn\\User::getInstance();\n      if ($usr) {\n        $id_user = $usr->getId();\n      }\n    }\n\n    if ($id_user) {\n      return self::getDataPath() . 'users\/' . $id_user . '\/data\/' . ($plugin ? $plugin . '\/' : '');;\n    }\n\n    return null;\n  }",
            "startLine": 393,
            "endLine": 411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "user"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "includeModel": {
            "name": "includeModel",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($bbn_inc_file, $model)\n  {\n    if (is_file($bbn_inc_file)) {\n      ob_start();\n      $d = include $bbn_inc_file;\n      ob_end_clean();\n\n      \/\/ Adding support for returning serialized objects\n      if (is_string($d) && ($obj = @unserialize($d)) && is_object($obj)) {\n        return $d;\n      }\n\n      if (\\is_object($d)) {\n        $d = X::toArray($d);\n      }\n\n      if (!\\is_array($d)) {\n        return false;\n      }\n\n      return $d;\n    }\n\n    return false;\n  }",
            "startLine": 414,
            "endLine": 438,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "bbn_inc_file",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCookie": {
            "name": "getCookie",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return empty($_COOKIE[BBN_APP_NAME]) ? false : json_decode($_COOKIE[BBN_APP_NAME], true)['value'];\n  }",
            "startLine": 441,
            "endLine": 444,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "addAuthorizedRoute": {
            "name": "addAuthorizedRoute",
            "summary": "Add a route to authorized routes list if not already exists.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $res = 0;\n    foreach (\\func_get_args() as $a) {\n      if (!in_array($a, $this->authorized_routes, true)) {\n        $this->authorized_routes[] = $a;\n        $res++;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 452,
            "endLine": 463,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "addForbiddenRoute": {
            "name": "addForbiddenRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $res = 0;\n    foreach (\\func_get_args() as $a) {\n      if (!in_array($a, $this->forbidden_routes, true)) {\n        $this->forbidden_routes[] = $a;\n        $res++;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 466,
            "endLine": 477,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "isAuthorizedRoute": {
            "name": "isAuthorizedRoute",
            "summary": "Checks if a route is authorized.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($url)\n  {\n    if (in_array($url, $this->authorized_routes, true)) {\n      return true;\n    }\n\n    $has_allow_all   = false;\n    $auth_applicable = '';\n    foreach ($this->authorized_routes as $ar) {\n      if ($ar === '*') {\n        $has_allow_all = true;\n        continue;\n      }\n\n      if ((substr($ar, -1) === '*')\n          && (strpos($url, substr($ar, 0, -1)) === 0)\n      ) {\n        if (strlen($ar) > strlen($auth_applicable)) {\n          $auth_applicable = substr($ar, 0, -1);\n        }\n      }\n    }\n\n    if ($auth_applicable || $has_allow_all) {\n      foreach ($this->forbidden_routes as $forbidden) {\n        if ((substr($forbidden, -1) === '*')\n            && (strpos($url, substr($forbidden, 0, -1)) === 0)\n            \/\/ Should be as or more precise\n            && (strlen($auth_applicable) < strlen($forbidden))\n        ) {\n          return false;\n        }\n        elseif ($url === $forbidden) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 486,
            "endLine": 527,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "url",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setRoot": {
            "name": "setRoot",
            "summary": "Sets the root of the application in the URL (base href).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($root)\n  {\n    \/** @todo a proper verification of the path *\/\n    if (strpos($root, '\/', -1) === false) {\n      $root .= '\/';\n    }\n\n    $this->root = $root;\n  }",
            "startLine": 536,
            "endLine": 544,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "root",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRoot": {
            "name": "getRoot",
            "summary": "Returns the root of the application in the URL (base href).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->root;\n  }",
            "startLine": 552,
            "endLine": 555,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setLocale": {
            "name": "setLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $locale)\n  {\n    $this->env->setLocale($locale);\n    $this->initLocaleDomain($this->info ? $this->info['plugin_name'] : null);\n  }",
            "startLine": 558,
            "endLine": 562,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "locale",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLocale": {
            "name": "getLocale",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->getLocale();\n  }",
            "startLine": 565,
            "endLine": 568,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "fetchDir": {
            "name": "fetchDir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($dir, $mode)\n  {\n    return $this->router->fetchDir($dir, $mode);\n  }",
            "startLine": 571,
            "endLine": 574,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchCustomDir": {
            "name": "fetchCustomDir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($dir, $mode, $plugin)\n  {\n    return $this->router->fetchCustomDir($dir, $mode, $plugin);\n  }",
            "startLine": 577,
            "endLine": 580,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "includePhpView": {
            "name": "includePhpView",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($bbn_inc_file, $bbn_inc_content, array $bbn_inc_data = [])\n  {\n    $randoms = [];\n    $_random = function ($i) use (&$randoms) {\n      if (!isset($randoms[$i])) {\n        $randoms[$i] = md5(Str::genpwd());\n      }\n\n      return $randoms[$i];\n    };\n    $fn      = function () use ($bbn_inc_file, $bbn_inc_content, $bbn_inc_data, $_random) {\n      if ($bbn_inc_content) {\n        ob_start();\n        if (\\count($bbn_inc_data)) {\n          foreach ($bbn_inc_data as $bbn_inc_key => $bbn_inc_val) {\n            $$bbn_inc_key = $bbn_inc_val;\n          }\n\n          unset($bbn_inc_key, $bbn_inc_val);\n        }\n\n        unset($bbn_inc_data);\n\n        \/*\n        try {\n          eval('?>'.$bbn_inc_content);\n        }\n        catch (\\Exception $e){\n          \/\/error_log($e->getMessage());\n          X::logError($e->getCode(), , $bbn_inc_file, 1);\n        }\n        *\/\n        eval('use bbn\\X as xx; use bbn\\Str as st; ?>' . $bbn_inc_content);\n\n        $c = ob_get_contents();\n        ob_end_clean();\n        return $c;\n      }\n\n      return '';\n    };\n\n    return $fn();\n  }",
            "startLine": 583,
            "endLine": 626,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "bbn_inc_file",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "bbn_inc_content",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "bbn_inc_data",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "setDbInController": {
            "name": "setDbInController",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(bool $r = false)\n  {\n    self::$db_in_controller = $r;\n  }",
            "startLine": 649,
            "endLine": 652,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "r",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getDebug": {
            "name": "getDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$_is_debug;\n  }",
            "startLine": 658,
            "endLine": 661,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "debug": {
            "name": "debug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($state = 1)\n  {\n    self::$_is_debug = (bool)$state;\n  }",
            "startLine": 664,
            "endLine": 667,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "state",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "This should be called only once from within the app",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($db = NULL, $routes = [])\n  {\n    self::singletonInit($this);\n    self::initPath();\n    $this->env = new Environment();\n    if (\\is_object($db) && ($class = \\get_class($db)) && ($class === 'PDO' || strpos($class, '\\Db') !== false)) {\n      $this->db = $db;\n    } else {\n      $this->db = null;\n    }\n\n    $this->inc = new \\stdClass();\n    if (\\is_array($routes)) {\n      if (isset($routes['root'])) {\n        foreach ($routes['root'] as $url => &$route) {\n          if (isset($route['root']) && defined('BBN_' . strtoupper($route['root']) . '_PATH')) {\n            $route['path'] = constant('BBN_' . strtoupper($route['root']) . '_PATH') . $route['path'];\n          }\n\n          if (!empty($route['path']) && (substr($route['path'], -1) !== '\/')) {\n            $route['path'] .= '\/';\n          }\n\n          if (isset($route['path'])) {\n            $route['url'] = $url;\n            $this->registerPlugin($route);\n          }\n        }\n      }\n\n      if (isset($routes['allowed'])) {\n        $this->authorized_routes = $routes['allowed'];\n      }\n\n      if (isset($routes['forbidden'])) {\n        $this->forbidden_routes = $routes['forbidden'];\n      }\n    }\n\n    $this->initLocaleDomain();\n    $this->router = new Router($this, $routes);\n    $this->route();\n  }",
            "startLine": 718,
            "endLine": 760,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The database object if there is"
                },
                {
                    "name": "routes",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "An array of routes usually defined in \/_appui\/current\/cfg\/routes.json<\/em>"
                }
            ]
        },
        "__destruct": {
            "name": "__destruct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::destructSingleton();\n  }",
            "startLine": 763,
            "endLine": 766,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether a corresponding file has been found or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->info ? true : false;\n  }",
            "startLine": 774,
            "endLine": 777,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getPlugins": {
            "name": "getPlugins",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->plugins;\n  }",
            "startLine": 780,
            "endLine": 783,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "hasPlugin": {
            "name": "hasPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin)\n  {\n    return isset($this->plugins[$plugin]);\n  }",
            "startLine": 786,
            "endLine": 789,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isPlugin": {
            "name": "isPlugin",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin)\n  {\n    \/** @todo This function! *\/\n    return isset($this->plugins[$plugin]);\n  }",
            "startLine": 792,
            "endLine": 796,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "pluginPath": {
            "name": "pluginPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin, $raw = false)\n  {\n    if ($this->hasPlugin($plugin)) {\n      return $this->plugins[$plugin]['path'] . ($raw ? '' : 'src\/');\n    }\n  }",
            "startLine": 799,
            "endLine": 804,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "raw",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "pluginUrl": {
            "name": "pluginUrl",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin)\n  {\n    return $this->hasPlugin($plugin) ? substr($this->plugins[$plugin]['url'], \\strlen($this->root)) : false;\n  }",
            "startLine": 807,
            "endLine": 810,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "pluginName": {
            "name": "pluginName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    foreach ($this->plugins as $name => $p) {\n      if (strpos($path, $p['url']) === 0) {\n        return $name;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 813,
            "endLine": 822,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRoute": {
            "name": "getRoute",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode, $root = NULL)\n  {\n    return $this->router->route($path, $mode, $root);\n  }",
            "startLine": 838,
            "endLine": 841,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "root",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getFile": {
            "name": "getFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->info['file'];\n  }",
            "startLine": 844,
            "endLine": 847,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getUrl": {
            "name": "getUrl",
            "summary": "Get the request url.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->getUrl();\n  }",
            "startLine": 855,
            "endLine": 858,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getRequest": {
            "name": "getRequest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->getRequest();\n  }",
            "startLine": 861,
            "endLine": 864,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getParams": {
            "name": "getParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->getParams();\n  }",
            "startLine": 867,
            "endLine": 870,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getPost": {
            "name": "getPost",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->getPost();\n  }",
            "startLine": 873,
            "endLine": 876,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getGet": {
            "name": "getGet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->getGet();\n  }",
            "startLine": 879,
            "endLine": 882,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFiles": {
            "name": "getFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->getFiles();\n  }",
            "startLine": 885,
            "endLine": 888,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getMode": {
            "name": "getMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->getMode();\n  }",
            "startLine": 891,
            "endLine": 894,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "setMode": {
            "name": "setMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($mode)\n  {\n    return $this->env->setMode($mode);\n  }",
            "startLine": 897,
            "endLine": 900,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isCli": {
            "name": "isCli",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->env->isCli();\n  }",
            "startLine": 903,
            "endLine": 906,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "reroute": {
            "name": "reroute",
            "summary": "This will reroute a controller to another one seemlessly. Chainable",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path = '', $post = false, $arguments = false)\n  {\n    $this->env->simulate($path, $post, $arguments);\n    $this->is_routed     = false;\n    $this->is_controlled = null;\n    $this->info          = null;\n    $this->router->reset();\n    $this->route();\n    if ($arguments || !isset($this->info['args'])) {\n      $this->info['args'] = $arguments;\n    }\n\n    if ($this->controller) {\n      $this->controller->reset($this->info);\n    }\n\n\n    return $this;\n  }",
            "startLine": 915,
            "endLine": 933,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The request path <em>(e.g books\/466565 or xml\/books\/48465)<\/em>"
                },
                {
                    "name": "post",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "hasView": {
            "name": "hasView",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path = '', string $mode = 'html')\n  {\n    return array_key_exists($mode, self::$_loaded_views) && isset(self::$_loaded_views[$mode][$path]);\n  }",
            "startLine": 941,
            "endLine": 944,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                }
            ]
        },
        "addToViews": {
            "name": "addToViews",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode, bbn\\Mvc\\View $view)\n  {\n    if (!array_key_exists($mode, self::$_loaded_views[$mode])) {\n      self::$_loaded_views[$mode] = [];\n    }\n\n    self::$_loaded_views[$mode][$path] = $view;\n  }",
            "startLine": 953,
            "endLine": 960,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "view",
                    "position": 2,
                    "type": "bbn\\Mvc\\View",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getView": {
            "name": "getView",
            "summary": "This will get a view.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode = 'html', array $data = NULL)\n  {\n    if (!router::isMode($mode) || !($path = Router::parse($path))) {\n      throw new \\Exception(\n        X::_(\"Incorrect mode $path $mode\")\n      );\n    }\n\n    $view = null;\n    if ($this->hasView($path, $mode)) {\n      $view = self::$_loaded_views[$mode][$path];\n    } elseif ($info = $this->router->route($path, $mode)) {\n      $view = new View($info);\n      $this->addToViews($path, $mode, $view);\n    }\n\n    if (\\is_object($view) && $view->check()) {\n      return $view->get($data);\n    }\n\n    return '';\n  }",
            "startLine": 972,
            "endLine": 993,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "viewExists": {
            "name": "viewExists",
            "summary": "Checks whether the given view exists or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode = 'html')\n  {\n    if (!router::isMode($mode) || !($path = Router::parse($path))) {\n      return false;\n    }\n\n    if ($this->hasView($path, $mode)) {\n      return true;\n    }\n\n    if ($this->router->route($path, $mode)) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 1003,
            "endLine": 1018,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                }
            ]
        },
        "modelExists": {
            "name": "modelExists",
            "summary": "Checks whether the given model exists or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    if ($this->router->route($path, 'model')) {\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 1027,
            "endLine": 1034,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getExternalView": {
            "name": "getExternalView",
            "summary": "This will get a view from a different root.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $full_path, string $mode = 'html', array $data = NULL)\n  {\n    if (!router::isMode($mode) && ($full_path = Str::parsePath($full_path))) {\n      throw new \\Exception(\n        X::_(\"Incorrect mode $full_path $mode\")\n      );\n    }\n\n    if (($this->getMode() === 'dom') && (!defined('BBN_DEFAULT_MODE') || (BBN_DEFAULT_MODE !== 'dom'))) {\n      $full_path .= ($full_path === '' ? '' : '\/') . 'index';\n    }\n\n    $view = null;\n    if ($this->hasView($full_path, $mode)) {\n      $view = self::$_loaded_views[$mode][$full_path];\n    } elseif ($info = $this->router->route(X::basename($full_path), 'free-' . $mode, X::dirname($full_path))) {\n      $view = new View($info);\n      $this->addToViews($full_path, $mode, $view);\n    }\n\n    if (\\is_object($view) && $view->check()) {\n      return $view->get($data);\n    }\n\n    return '';\n  }",
            "startLine": 1045,
            "endLine": 1070,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "full_path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "path"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "html",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPluginFromComponent": {
            "name": "getPluginFromComponent",
            "summary": "Retrieves the plugin's name from the component's name if any.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name)\n  {\n    return $this->router->getPluginFromComponent($name);\n  }",
            "startLine": 1080,
            "endLine": 1083,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "routeComponent": {
            "name": "routeComponent",
            "summary": "Retrieves component's data from the given plugin name if exists.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name)\n  {\n    return $this->router->routeComponent($name);\n  }",
            "startLine": 1093,
            "endLine": 1096,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "customPluginView": {
            "name": "customPluginView",
            "summary": "Retrieves a view of a custom plugin.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode, array $data, string $plugin)\n  {\n    if ($plugin && ($route = $this->router->routeCustomPlugin(Router::parse($path), $mode, $plugin))) {\n      $view = new View($route);\n      if ($view->check()) {\n        return \\is_array($data) ? $view->get($data) : $view->get();\n      }\n\n      return '';\n    }\n\n    return null;\n  }",
            "startLine": 1109,
            "endLine": 1121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasCustomPLuginModel": {
            "name": "hasCustomPLuginModel",
            "summary": "Checks if the given plugin model exists",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $plugin)\n  {\n    return (bool)$this->router->routeCustomPlugin(router::parse($path), 'model', $plugin);\n  }",
            "startLine": 1131,
            "endLine": 1134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "customPluginModel": {
            "name": "customPluginModel",
            "summary": "Retrieves a model of a custom plugin.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data, bbn\\Mvc\\Controller $ctrl, string $plugin, int $ttl = NULL)\n  {\n    if (\n      $plugin\n      && ($route = $this->router->routeCustomPlugin(router::parse($path), 'model', $plugin))\n    ) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      if ($ttl) {\n        return $model->getFromCache($data, '', $ttl);\n      }\n\n      return $model->get($data);\n    }\n\n    return null;\n    \/*\n    throw new \\Exception(\n      X::_(\n        \"Impossible to find the find the model %s in the plugin %s\",\n        $path,\n        $plugin\n      )\n    );\n    *\/\n  }",
            "startLine": 1148,
            "endLine": 1172,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "hasSubpluginModel": {
            "name": "hasSubpluginModel",
            "summary": "Returns true if the subplugin model exists.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $plugin, string $subplugin)\n  {\n    return (bool)$this->router->routeSubplugin(router::parse($path), 'model', $plugin, $subplugin);\n  }",
            "startLine": 1184,
            "endLine": 1187,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path in the subplugin"
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin"
                },
                {
                    "name": "subplugin",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The subplugin"
                }
            ]
        },
        "subpluginModel": {
            "name": "subpluginModel",
            "summary": "Get a subplugin model (a plugin inside the plugin directory of another plugin).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data, bbn\\Mvc\\Controller $ctrl, string $plugin, string $subplugin, int $ttl = NULL)\n  {\n    if (\n      $plugin\n      && $subplugin\n      && ($route = $this->router->routeSubplugin(router::parse($path), 'model', $plugin, $subplugin))\n    ) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      $res   = $ttl ? $model->getFromCache($data, '', $ttl) : $model->get($data);\n      return $res;\n    }\n\n    throw new \\Exception(\n      X::_(\n        \"Impossible to find the model %s from subplugin %s in plugin %s\",\n        $path,\n        $subplugin,\n        $plugin\n      )\n    );\n  }",
            "startLine": 1202,
            "endLine": 1222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 5,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path inside the subplugin directory"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data for the model"
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The controller"
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin name"
                },
                {
                    "name": "subplugin",
                    "position": 4,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The subplugin name"
                },
                {
                    "name": "ttl",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The cache TTL"
                }
            ]
        },
        "hasPluginView": {
            "name": "hasPluginView",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode, string $plugin)\n  {\n    return (bool)$this->router->routeCustomPlugin(Router::parse($path), $mode, $plugin);\n  }",
            "startLine": 1225,
            "endLine": 1228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPluginView": {
            "name": "getPluginView",
            "summary": "This will get a view.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $mode, array $data, string $plugin)\n  {\n    return $this->customPluginView(router::parse($path), $mode, $data, $this->pluginName($plugin));\n  }",
            "startLine": 1241,
            "endLine": 1244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path of the view in the plugin"
                },
                {
                    "name": "mode",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The mode of the view"
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Data for the view"
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The plugin URL"
                }
            ]
        },
        "getModel": {
            "name": "getModel",
            "summary": "This will get the model; there is no order for the arguments.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl)\n  {\n    if (($path = Router::parse($path)) && ($route = $this->router->route($path, 'model'))) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      return $model->get($data);\n    }\n\n    return [];\n  }",
            "startLine": 1255,
            "endLine": 1263,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Path to the model"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Data to send to the model"
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getModelGroup": {
            "name": "getModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data, bbn\\Mvc\\Controller $ctrl)\n  {\n    $res = [];\n    if (($path = Router::parse($path))\n      && ($items = $this->fetchDir($path, 'model'))\n    ) {\n      foreach ($items as $it) {\n        $res[] = $this->getModel($it, $data, $ctrl);\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1266,
            "endLine": 1278,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCustomModelGroup": {
            "name": "getCustomModelGroup",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $plugin, array $data, bbn\\Mvc\\Controller $ctrl)\n  {\n    $res = [];\n    if (($path = Router::parse($path))\n      && ($items = $this->fetchCustomDir($path, 'model', $plugin))\n    ) {\n      foreach ($items as $it) {\n        $res[$it] = $this->customPluginModel($it, $data, $ctrl, $plugin);\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1281,
            "endLine": 1293,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 3,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPluginModel": {
            "name": "getPluginModel",
            "summary": "An alias for customPluginModel()",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data, bbn\\Mvc\\Controller $ctrl, string $plugin, int $ttl = NULL)\n  {\n    return $this->customPluginModel(router::parse($path), $data, $ctrl, $this->pluginName($plugin), $ttl);\n  }",
            "startLine": 1306,
            "endLine": 1309,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getSubpluginModel": {
            "name": "getSubpluginModel",
            "summary": "An alias for subpluginModel()",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data, bbn\\Mvc\\Controller $ctrl, string $plugin, string $subplugin, int $ttl = NULL)\n  {\n    return $this->subpluginModel($path, $data, $ctrl, $plugin, $subplugin, $ttl);\n  }",
            "startLine": 1323,
            "endLine": 1326,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 5,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subplugin",
                    "position": 4,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCachedModel": {
            "name": "getCachedModel",
            "summary": "This will get the model as it is in cache if any and otherwise will save it in cache then return it",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, array $data, bbn\\Mvc\\Controller $ctrl, int $ttl = 10)\n  {\n    if (\\is_null($data)) {\n      $data = $this->data;\n    }\n\n    if ($route = $this->router->route(router::parse($path), 'model')) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      return $model->getFromCache($data, '', $ttl);\n    }\n\n    return [];\n  }",
            "startLine": 1336,
            "endLine": 1348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                }
            ]
        },
        "setCachedModel": {
            "name": "setCachedModel",
            "summary": "This will set the model in cache",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl, $ttl = 10)\n  {\n    if (\\is_null($data)) {\n      $data = $this->data;\n    }\n\n    if ($route = $this->router->route(router::parse($path), 'model')) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      $model->setCache($data, '', $ttl);\n    }\n  }",
            "startLine": 1358,
            "endLine": 1368,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                }
            ]
        },
        "deleteCachedModel": {
            "name": "deleteCachedModel",
            "summary": "This will unset the model in cache",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, array $data, bbn\\Mvc\\Controller $ctrl)\n  {\n    if (\\is_null($data)) {\n      $data = $this->data;\n    }\n\n    if ($route = $this->router->route(router::parse($path), 'model')) {\n      $model = new Model($this->db, $route, $ctrl, $this);\n      $model->deleteCache($data, '');\n    }\n  }",
            "startLine": 1378,
            "endLine": 1388,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ctrl",
                    "position": 2,
                    "type": "bbn\\Mvc\\Controller",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addInc": {
            "name": "addInc",
            "summary": "Adds a property to the MVC object inc if it has not been declared.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name, object $obj)\n  {\n    if (isset($this->inc->{$name})) {\n      throw new \\Exception(X::_(\"Impossible to add twice the same property (%s) to inc\", $name));\n    }\n\n    $this->inc->{$name} = $obj;\n  }",
            "startLine": 1396,
            "endLine": 1403,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "obj",
                    "position": 1,
                    "type": "object",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "process": {
            "name": "process",
            "summary": "Returns the rendered result from the current mvc if successfully processed",
            "description": "process() (or check()) must have been called before.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>process() (or check()) must have been called before.<\/p>"
                }
            ],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      $this->obj = new \\stdClass();\n      if (!\\is_array($this->info)) {\n        $this->log(\"No info in MVC\", $this->info);\n        throw new \\Exception(X::_(\"No info in MVC\"));\n      }\n\n      if (!$this->controller) {\n        $this->controller = new Controller($this, $this->info, $this->data);\n      }\n\n      $this->controller->process();\n    }\n  }",
            "startLine": 1413,
            "endLine": 1428,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "hasContent": {
            "name": "hasContent",
            "summary": "Checks if the controller has content.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check() && $this->controller) {\n      return $this->controller->hasContent();\n    }\n\n    return false;\n  }",
            "startLine": 1436,
            "endLine": 1443,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "transform": {
            "name": "transform",
            "summary": "Transform the output object on Controller instance given a callback",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $fn)\n  {\n    if ($this->check() && $this->controller) {\n      $this->controller->transform($fn);\n    }\n  }",
            "startLine": 1451,
            "endLine": 1456,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "output": {
            "name": "output",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check() && $this->controller) {\n      $obj = $this->controller->get();\n      if ($this->isCli()) {\n        if (isset($obj->content)) {\n          echo $obj->content;\n        }\n\n        exit();\n      }\n\n      if (\\is_array($obj)) {\n        $obj = X::toObject($obj);\n      }\n\n      if ((\\gettype($obj) !== 'object') || (\\get_class($obj) !== 'stdClass')) {\n        throw new \\Exception(X::_(\"Unexpected output: \" . \\gettype($obj)));\n      }\n\n      if ($this->obj && X::countProperties($this->obj)) {\n        $obj = X::mergeObjects($obj, $this->obj);\n      }\n\n      $output = new Output($obj, $this->getMode());\n      $output->run();\n    } else {\n      Output::statusHeader(404);\n    }\n  }",
            "startLine": 1464,
            "endLine": 1493,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getDb": {
            "name": "getDb",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (self::$db_in_controller && $this->db) {\n      return $this->db;\n    }\n\n    return null;\n  }",
            "startLine": 1502,
            "endLine": 1509,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "setPrepath": {
            "name": "setPrepath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    if ($this->check()) {\n      if ($this->router->getPrepath(false) === $path) {\n        return 1;\n      }\n\n      if ($this->env->setPrepath($path) && $this->router->setPrepath($path)) {\n        $this->params = $this->getParams();\n        return 1;\n      }\n    }\n\n    throw new \\Exception(\n      X::_(\"The setPrepath method cannot be used in this MVC\")\n    );\n  }",
            "startLine": 1517,
            "endLine": 1533,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPrepath": {
            "name": "getPrepath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      return $this->router->getPrepath();\n    }\n\n    return '';\n  }",
            "startLine": 1539,
            "endLine": 1546,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getRoutes": {
            "name": "getRoutes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($type = 'root')\n  {\n    if ($this->check()) {\n      $routes = $this->router->getRoutes();\n      return $routes[$type] ?? false;\n    }\n\n    return false;\n  }",
            "startLine": 1553,
            "endLine": 1561,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "root",
                    "default_name": ""
                }
            ]
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::singletonExists() ? self::$singleton_instance : null;\n  }",
            "startLine": 50,
            "endLine": 53,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "singletonExists": {
            "name": "singletonExists",
            "summary": "Returns true if the instance as been initiated.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$singleton_exists ? true : false;\n  }",
            "startLine": 60,
            "endLine": 63,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (Mvc::getDebug()) {\n      $ar = \\func_get_args();\n      X::log(\\count($ar) > 1 ? $ar : $ar[0], 'mvc');\n    }\n  }",
            "startLine": 64,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "pluginDataPath": {
            "name": "pluginDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($plugin = NULL)\n  {\n    if (($this->_plugin || $plugin) && \\defined('BBN_DATA_PATH')) {\n      return BBN_DATA_PATH.'plugins\/'.$this->pluginName($plugin ?: $this->_plugin).'\/';\n    }\n\n    return null;\n  }",
            "startLine": 73,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getAliases": {
            "name": "getAliases",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_mvc->getRoutes('alias');\n  }",
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "appPath": {
            "name": "appPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($raw = false)\n  {\n    return Mvc::getAppPath($raw);\n  }",
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "libPath": {
            "name": "libPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return Mvc::getLibPath();\n  }",
            "startLine": 161,
            "endLine": 164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "dataPath": {
            "name": "dataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getDataPath().($plugin ? 'plugins\/'.$plugin.'\/' : '');\n  }",
            "startLine": 167,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tmpPath": {
            "name": "tmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getTmpPath($plugin);\n  }",
            "startLine": 173,
            "endLine": 176,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "logPath": {
            "name": "logPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getLogPath($plugin);\n  }",
            "startLine": 179,
            "endLine": 182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "cachePath": {
            "name": "cachePath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getCachePath($plugin);\n  }",
            "startLine": 185,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "contentPath": {
            "name": "contentPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $plugin = NULL)\n  {\n    return Mvc::getContentPath($plugin);\n  }",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userTmpPath": {
            "name": "userTmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_user = NULL, string $plugin = NULL)\n  {\n    return Mvc::getUserTmpPath($id_user, $plugin);\n  }",
            "startLine": 197,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "userDataPath": {
            "name": "userDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Mvc",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id_user = NULL, string $plugin = NULL)\n  {\n    return Mvc::getUserDataPath($id_user, $plugin);\n  }",
            "startLine": 203,
            "endLine": 206,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id_user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "plugin",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "inc": {
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "\\stdClass",
                        "description": "An external object that can be filled after the object creation and can be used as a global with the function add_inc"
                    }
                ]
            }
        },
        "data": {
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            }
        },
        "o": {
            "visibility": "public"
        },
        "obj": {
            "visibility": "public",
            "doc": {
                "description": "The output object\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "null|object"
                    }
                ]
            }
        },
        "reserved": {
            "static": true,
            "visibility": "public",
            "value": [
                "_private",
                "_common",
                "_htaccess"
            ]
        }
    },
    "staticProperties": {
        "_loaded_views": {
            "html": [],
            "css": [],
            "js": []
        },
        "_is_debug": true,
        "_app_name": "apst-app",
        "_app_prefix": "apst",
        "_app_path": "\/home\/nabab\/web\/domains\/apst-app\/app-ui\/",
        "_cur_path": "\/",
        "_lib_path": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/",
        "_data_path": "\/home\/nabab\/web\/domains\/apst-app\/data\/",
        "db_in_controller": true,
        "reserved": [
            "_private",
            "_common",
            "_htaccess"
        ],
        "singleton_instance": {
            "inc": {
                "options": {},
                "session": {},
                "user": {
                    "prev_time": null
                },
                "pref": {},
                "perm": {},
                "outils": {}
            },
            "data": [],
            "o": null,
            "obj": {}
        },
        "singleton_exists": 1
    },
    "constants": null,
    "numMethods": 97,
    "numProperties": 5,
    "numConstants": 0,
    "numStaticProperties": 12,
    "interfaceNames": [
        "bbn\\Mvc\\Api"
    ],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Singleton",
        "bbn\\Mvc\\Common"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "_loaded_views": {
            "html": [],
            "css": [],
            "js": []
        },
        "_is_debug": false,
        "_app_name": null,
        "_app_prefix": null,
        "_app_path": null,
        "_cur_path": null,
        "_lib_path": null,
        "_data_path": null,
        "db_in_controller": false,
        "reserved": [
            "_private",
            "_common",
            "_htaccess"
        ],
        "singleton_instance": null,
        "singleton_exists": false,
        "controller": null,
        "db": null,
        "env": null,
        "router": null,
        "info": null,
        "root": "",
        "plugins": null,
        "loaded": {
            "views": {
                "html": [],
                "css": [],
                "js": []
            },
            "models": [],
            "ctrls": []
        },
        "authorized_routes": [],
        "forbidden_routes": [],
        "inc": null,
        "data": [],
        "o": null,
        "obj": null,
        "_mvc": null,
        "_plugin": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "Mvc",
    "summary": "MVC",
    "description": "",
    "description_parts": []
}