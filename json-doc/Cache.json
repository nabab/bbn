{
    "doc": {
        "description": "Universal caching class: called once per request, it holds the cache system.",
        "tags": {
            "copyright": "BBN Solutions",
            "since": "Jan 23, 2016, 23:23:55 +0000",
            "category": "Cache",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT"
        }
    },
    "name": "bbn\\Cache",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Cache.php",
    "startLine": 14,
    "endLine": 709,
    "contentConstructor": {
        "file": "bbn\\Cache",
        "returns": null
    },
    "methods": {
        "makeHash": {
            "name": "makeHash",
            "summary": "Makes a unique hash out of whatever value which will be used to check if the value has changed.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($value)\n  {\n    if (\\is_object($value) || \\is_array($value)) {\n      $value = serialize($value);\n    }\n\n    return md5($value);\n  }",
            "startLine": 114,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "value",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getType": {
            "name": "getType",
            "summary": "Returns the type of cache engine running in the class.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$type;\n  }",
            "startLine": 129,
            "endLine": 132,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "ttl": {
            "name": "ttl",
            "summary": "Returns a length in seconds based on the given parameter, allowing strings such as xl or s to be given as ttl arguments.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($ttl)\n  {\n    if (Str::isInteger($ttl)) {\n      return (int)$ttl;\n    }\n\n    if (\\is_string($ttl)) {\n      switch ($ttl) {\n        case 'xxs':\n          return 30;\n        case 'xs':\n          return 60;\n        case 's':\n          return 300;\n        case 'm':\n          return 3600;\n        case 'l':\n          return 3600 * 24;\n        case 'xl':\n          return 3600 * 24 * 7;\n        case 'xxl':\n          return 3600 * 24 * 30;\n      }\n    }\n\n    throw new \\Exception(\n      X::_(\"Wrong ttl parameter\")\n    );\n  }",
            "startLine": 141,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "ttl",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCache": {
            "name": "getCache",
            "summary": "Returns the cache object (and creates one of the given type if it doesn't exist).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $engine = NULL)\n  {\n    self::_init($engine);\n    return self::$engine;\n  }",
            "startLine": 178,
            "endLine": 182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getEngine": {
            "name": "getEngine",
            "summary": "Alias of get_cache.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $engine = NULL)\n  {\n    return self::getCache($engine);\n  }",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "Constructor - this is a singleton: it can't be called more then once.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $engine = NULL)\n  {\n    \/** @todo APC doesn't work *\/\n    $engine = 'files';\n    if (self::$is_init) {\n      throw new \\Exception(\n        X::_(\"Only one cache object can be called. Use static function Cache::getEngine()\")\n      );\n    }\n\n    if ((!$engine || ($engine === 'apc')) && function_exists('apc_clear_cache')) {\n      self::_set_type('apc');\n    }\n    elseif ((!$engine || ($engine === 'memcache')) && class_exists(\"Memcache\")) {\n      $this->obj = new \\Memcache();\n      if ($this->obj->connect(\"127.0.0.1\", 11211)) {\n        self::_set_type('memcache');\n      }\n    }\n    elseif ($this->path = Mvc::getCachePath()) {\n      self::_set_type('files');\n      $this->fs = new File\\System();\n    }\n  }",
            "startLine": 204,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "engine",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "has": {
            "name": "has",
            "summary": "Checks whether a valid cache exists for the given item.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item, $ttl = 0)\n  {\n    if (self::$type) {\n      switch (self::$type){\n        case 'apc':\n          return apc_exists($item);\n        case 'memcache':\n          return $this->obj->get($item) !== $item;\n        case 'files':\n          $file = self::_file($item, $this->path);\n          if (($content = $this->fs->getContents($file))\n              && ($t = json_decode($content, true))\n          ) {\n            if ((!$ttl || !isset($t['ttl']) || ($ttl === $t['ttl']))\n                && (!$t['expire'] || ($t['expire'] > time()))\n            ) {\n              return true;\n            }\n\n            $this->fs->delete($file);\n          }\n          return false;\n      }\n    }\n  }",
            "startLine": 237,
            "endLine": 261,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The time-to-live value"
                },
                {
                    "name": "ttl",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Removes the given item from the cache.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item)\n  {\n    if (self::$type) {\n      switch (self::$type){\n        case 'apc':\n          return apc_delete($item);\n        case 'memcache':\n          return $this->obj->delete($item);\n        case 'files':\n          $file = self::_file($item, $this->path);\n          if (is_file($file)) {\n            return !!$this->fs->delete($file);\n          }\n          return false;\n      }\n    }\n  }",
            "startLine": 270,
            "endLine": 286,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteAll": {
            "name": "deleteAll",
            "summary": "Deletes all the cache from the given path or globally if none is given.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $st = NULL)\n  {\n    if (self::$type === 'files') {\n      if ($st === null) {\n          $st = '';\n      }\n\n      $dir = self::_dir($st, $this->path, false);\n      if ($this->fs->isDir($dir)) {\n        return !!$this->fs->delete($dir, $dir === $this->path ? false : true);\n      }\n      else {\n        return !!$this->fs->delete($dir.'.bbn.cache');\n      }\n    }\n    elseif (self::$type) {\n      $items = $this->items($st);\n      $res   = 0;\n      foreach ($items as $item){\n        if (!$st || strpos($item, $st) === 0) {\n          switch (self::$type){\n            case 'apc':\n              $res += (int)apc_delete($item);\n              break;\n            case 'memcache':\n              $res += (int)$this->obj->delete($item);\n              break;\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return false;\n  }",
            "startLine": 296,
            "endLine": 331,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "clear": {
            "name": "clear",
            "summary": "Deletes all the cache globally.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->deleteAll();\n    return $this;\n  }",
            "startLine": 339,
            "endLine": 343,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "timestamp": {
            "name": "timestamp",
            "summary": "Returns the timestamp of the given item.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item)\n  {\n    if ($r = $this->getRaw($item)) {\n      return $r['timestamp'];\n    }\n\n    return null;\n  }",
            "startLine": 352,
            "endLine": 359,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hash": {
            "name": "hash",
            "summary": "Returns the hash of the given item.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item)\n  {\n    if ($r = $this->getRaw($item)) {\n      return $r['hash'];\n    }\n\n    return null;\n  }",
            "startLine": 368,
            "endLine": 375,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isNew": {
            "name": "isNew",
            "summary": "Checks whether or not the given item is more recent than the given timestamp.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item, int $time = NULL)\n  {\n    if (!$time) {\n      return false;\n    }\n\n    if ($r = $this->getRaw($item)) {\n      return $r['timestamp'] > $time;\n    }\n\n    return true;\n  }",
            "startLine": 385,
            "endLine": 396,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The timestamp to which the item's timestamp will be compared"
                },
                {
                    "name": "time",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "set": {
            "name": "set",
            "summary": "Stores the given value in the cache for as long as says the TTL.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item, $val, int $ttl = 10, float $exec = NULL)\n  {\n    if (self::$type) {\n      $ttl  = self::ttl($ttl);\n      $hash = self::makeHash($val);\n      switch (self::$type){\n        case 'apc':\n          return \\apc_store(\n            $item, [\n            'timestamp' => microtime(1),\n            'hash' => $hash,\n            'ttl' => $ttl,\n            'value' => $val\n            ], $ttl\n          );\n        case 'memcache':\n          return $this->obj->set(\n            $item, [\n            'timestamp' => microtime(1),\n            'hash' => $hash,\n            'ttl' => $ttl,\n            'value' => $val\n            ], false, $ttl\n          );\n        case 'files':\n          $file = self::_file($item, $this->path);\n          if ($this->fs->createPath(X::dirname($file))) {\n            $value = [\n              'timestamp' => microtime(1),\n              'hash' => $hash,\n              'expire' => $ttl ? time() + $ttl : 0,\n              'ttl' => $ttl,\n              'exec' => $exec,\n              'value' => $val\n            ];\n            if ($this->fs->putContents($file, json_encode($value, JSON_PRETTY_PRINT))) {\n              return true;\n            }\n          }\n      }\n    }\n\n    return false;\n  }",
            "startLine": 407,
            "endLine": 450,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The value to be stored in the cache"
                },
                {
                    "name": "val",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The length in seconds during which the value will be considered as valid"
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 10,
                    "default_name": ""
                },
                {
                    "name": "exec",
                    "position": 3,
                    "type": "float",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "isChanged": {
            "name": "isChanged",
            "summary": "Checks if the value of the item corresponds to the given hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item, $hash)\n  {\n    return $hash !== $this->hash($item);\n  }",
            "startLine": 460,
            "endLine": 463,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "A MD5 hash to compare with"
                },
                {
                    "name": "hash",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "get": {
            "name": "get",
            "summary": "Returns the cache value, false otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item, int $ttl = 0)\n  {\n    if ($r = $this->getRaw($item, $ttl)) {\n      return $r['value'];\n    }\n\n    return false;\n  }",
            "startLine": 529,
            "endLine": 536,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The cache length"
                },
                {
                    "name": "ttl",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSet": {
            "name": "getSet",
            "summary": "Returns the cache for the given item, but if expired or absent creates it before by running the provided function.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $fn, string $item, int $ttl = 0)\n  {\n    switch (self::$type) {\n      case 'apc':\n        break;\n      case 'memcache':\n        break;\n      case 'files':\n        \/\/ Getting the data\n        $tmp  = $this->getRaw($item, $ttl);\n        $data = null;\n        \/\/ Can't get the data\n        if (!$tmp) {\n          $file = self::_file($item, $this->path);\n          \/\/ Temporary file will be created to tell other processes the cache is being created\n          $tmp_file = X::dirname($file).'\/_'.X::basename($file);\n          \/\/ Will become true if the cache should be created\n          $do = false;\n          \/\/ If the temporary file doesn't exist we create one\n          if (!$this->fs->isFile($tmp_file)) {\n            $this->fs->createPath(X::dirname($tmp_file));\n            $this->fs->putContents($tmp_file, ' ');\n            \/\/ If the original file exists we delete it\n            if ($this->fs->isFile($file)) {\n              $this->fs->delete($file);\n            }\n\n            $timer = new Util\\Timer();\n            $timer->start();\n            try {\n              $data = $fn();\n            }\n            catch (\\Exception $e) {\n              unlink($tmp_file);\n              throw $e;\n            }\n\n            $exec = $timer->stop();\n            $this->set($item, $data, $ttl, $exec);\n            $this->fs->delete($tmp_file);\n          }\n          \/\/ Otherwise another process is certainly creating the cache, so wait for it\n          else {\n            return $this->get($item);\n          }\n\n          \/\/ Creating the cache\n        }\n        else {\n          $data = $tmp['value'];\n        }\n        return $data;\n    }\n  }",
            "startLine": 549,
            "endLine": 602,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the item"
                },
                {
                    "name": "item",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The cache length"
                },
                {
                    "name": "ttl",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "info": {
            "name": "info",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (self::$type) {\n      switch (self::$type){\n        case 'apc':\n          return apc_cache_info();\n        case 'memcache':\n          return $this->obj->getStats('slabs');\n        case 'files':\n          return $this->fs->getFiles($this->path);\n      }\n    }\n  }",
            "startLine": 608,
            "endLine": 620,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "stat": {
            "name": "stat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (self::$type) {\n      switch (self::$type){\n        case 'apc':\n          return apc_cache_info();\n        case 'memcache':\n          return $this->obj->getStats();\n        case 'files':\n          return $this->fs->getFiles($this->path);\n      }\n    }\n  }",
            "startLine": 626,
            "endLine": 638,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "items": {
            "name": "items",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir = '')\n  {\n    if (self::$type) {\n      switch (self::$type){\n        case 'apc':\n          $all  = apc_cache_info();\n          $list = [];\n          foreach ($all['cache_list'] as $a){\n            array_push($list, $a['info']);\n          }\n          return $list;\n        case 'memcache':\n          $list     = [];\n          $allSlabs = $this->obj->getExtendedStats('slabs');\n          foreach ($allSlabs as $server => $slabs){\n            foreach ($slabs as $slabId => $slabMeta){\n              $cdump = $this->obj->getExtendedStats('cachedump',(int)$slabId);\n              foreach ($cdump AS $keys => $arrVal){\n                foreach ($arrVal AS $k => $v){\n                  if ($k !== 'CLIENT_ERROR') {\n                    echo array_push($list, $k);\n                  }\n                }\n              }\n            }\n          }\n          return $list;\n        case 'files':\n          $cache =& $this;\n          $list  = array_filter(\n            array_map(\n              function ($a) use ($dir) {\n                return ( $dir ? $dir.'\/' : '' ).X::basename($a, '.bbn.cache');\n              }, $this->fs->getFiles($this->path.($dir ? '\/'.$dir : ''))\n            ),\n            function ($a) use ($cache) {\n              \/\/ Only gives valid cache\n              return $cache->has($a);\n            }\n          );\n          $dirs  = $this->fs->getDirs($this->path.($dir ? '\/'.$dir : ''));\n          if (\\count($dirs)) {\n            foreach ($dirs as $d){\n              $res = $this->items($dir ? $dir.'\/'.X::basename($d) : X::basename($d));\n              foreach ($res as $r){\n                array_push($list, $r);\n              }\n            }\n          }\n          return $list;\n      }\n    }\n  }",
            "startLine": 645,
            "endLine": 697,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "serializeFunction": {
            "name": "serializeFunction",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Cache",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $function)\n  {\n    return serialize(\n      new \\Opis\\Closure\\SerializableClosure($function)\n    );\n  }",
            "startLine": 703,
            "endLine": 708,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "is_init": 1,
        "type": "files",
        "max_wait": 10,
        "engine": {}
    },
    "constants": null,
    "numMethods": 21,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "is_init": false,
        "type": null,
        "max_wait": 10,
        "engine": null,
        "path": null,
        "obj": null,
        "fs": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "Cache",
    "summary": "Universal caching class: called once per request, it holds the cache system."
}