{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Db\\Sync",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Db\/Sync.php",
    "startLine": 9,
    "endLine": 570,
    "contentConstructor": null,
    "methods": {
        "__callStatic": {
            "name": "__callStatic",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": true,
            "code": "function(string $name, array $arguments)\n  {\n    if (($name === 'cbf1') || ($name === 'cbf2')) {\n      return \\call_user_func_array(self::$methods[$name], $arguments);\n    }\n  }",
            "startLine": 76,
            "endLine": 81,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addMethod": {
            "name": "addMethod",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": true,
            "code": "function(string $name, callable $fn)\n  {\n    self::$methods[$name] = \\Closure::bind($fn, null, __CLASS__);\n  }",
            "startLine": 90,
            "endLine": 93,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fn",
                    "position": 1,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "init": {
            "name": "init",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, array $sync_cfg = [], array $tables = [], string $sync_table = '')\n  {\n    if (self::$is_init) {\n      throw new \\Exception(\"Impossible to init twice the dbsync class\");\n    }\n    self::$current_connection = $db;\n\n\n    if (!empty($sync_table)) {\n      self::$sync_table = $sync_table;\n    }\n    if (!Str::checkName(self::$sync_table)) {\n      throw new \\Exception(X::_(\"Table name not allowed\"));\n    }\n    if (empty($sync_cfg)) {\n      self::$sync_connection = new Db(self::$default_cfg);\n    }\n    elseif (isset($sync_cfg['connection'])) {\n      if (is_object($sync_cfg['connection']) && (is_a($sync_cfg['connection'], '\\\\bbn\\\\Db')\n          || is_subclass_of($sync_cfg['connection'], '\\\\bbn\\\\Db'))\n      ) {\n        self::$sync_connection = $sync_cfg['connection'];\n      }\n      else {\n        throw new \\Exception(X::_(\"Invalid connection given to the synchronization class\"));\n      }\n    }\n    elseif (isset($sync_cfg['engine'])) {\n      if (($sync_cfg['engine'] === 'sqlite')\n          || ($sync_cfg['engine'] !== self::$current_connection->getEngine())\n      ) {\n        self::$sync_connection = new Db($sync_cfg);\n      }\n      elseif (isset($sync_cfg['db']) && !isset($sync_cfg['user'])) {\n        self::$sync_connection =& self::$current_connection;\n        self::$sync_table = self::$sync_connection->tfn($sync_cfg['db'].'.'.self::$sync_table);\n      }\n    }\n    elseif (isset($sync_cfg['db']) && !isset($sync_cfg['user'])) {\n      self::$sync_connection =& self::$current_connection;\n      self::$sync_table = self::$sync_connection->tfn($sync_cfg['db'].'.'.self::$sync_table);\n    }\n    self::$tables = $tables;\n    self::$is_init = true;\n    if (\\count(self::$tables) === 0) {\n      self::$tables = self::$current_connection->getTables();\n    }\n    if (\\is_array(self::$tables)) {\n      foreach (self::$tables as $i => $t){\n        self::$tables[$i] = self::$current_connection->tfn($t);\n      }\n      self::$current_connection->setTrigger(\n        '\\\\bbn\\Db\\\\sync::trigger',\n        ['delete', 'update', 'insert'],\n        ['before', 'after'],\n        self::$tables\n      );\n    }\n  }",
            "startLine": 115,
            "endLine": 173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "sync_cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "cfg"
                },
                {
                    "name": "tables",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "sync_table",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "table"
                }
            ]
        },
        "isInit": {
            "name": "isInit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$is_init;\n  }",
            "startLine": 175,
            "endLine": 178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "createTable": {
            "name": "createTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (\\is_array(self::$sync_connection)) {\n      self::$sync_connection = new bbn\\Db(self::$sync_connection);\n    }\n    if (class_exists('\\\\bbn\\\\Appui\\\\History') && bbn\\Appui\\History::$is_used) {\n      self::$has_history = 1;\n    }\n    \/** @todo Replace with DB functions *\/\n    if (self::$sync_connection->getEngine() === 'sqlite') {\n      self::$sync_connection->exec(\n        sprintf(\n          'CREATE TABLE \"%s\" (\n            \"id\" INTEGER PRIMARY KEY  NOT NULL ,\n            \"db\" TEXT NOT NULL ,\n            \"tab\" TEXT NOT NULL ,\n            \"chrono\" REAL NOT NULL,\n            \"action\" TEXT NOT NULL,\n            \"rows\" TEXT,\"vals\" TEXT,\n            \"state\" INTEGER NOT NULL DEFAULT (0)\n          );\n          CREATE INDEX \"db\" \"dbsync\" (\"db\");\n          CREATE INDEX \"tab\" \"dbsync\" (\"tab\");\n          CREATE INDEX \"chrono\" \"dbsync\" (\"chrono\");\n          CREATE INDEX \"action\" \"dbsync\" (\"action\");\n          CREATE INDEX \"state\" \"dbsync\" (\"state\");',\n          self::$table_sync\n        )\n      );\n    }\n    elseif (self::$sync_connection->getEngine() === 'mysql') {\n      self::$sync_connection->exec(\n        sprintf(\n          \"CREATE TABLE IF NOT EXISTS `%s` (\n            `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n            `db` varchar(50) NOT NULL,\n            `tab` varchar(50) NOT NULL,\n            `chrono` decimal(14,4) unsigned NOT NULL,\n            `action` varchar(20) NOT NULL,\n            `rows` text,\n            `vals` longtext,\n            `state` int(10) NOT NULL DEFAULT '0'\n          ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n          ALTER TABLE `dbsync`\n            ADD PRIMARY KEY (`id`),\n            ADD KEY `db` (`db`),\n            ADD KEY `tab` (`tab`),\n            ADD KEY `chrono` (`chrono`),\n            ADD KEY `action` (`action`),\n            ADD KEY `state` (`state`);\",\n            self::$table_sync\n        )\n      );\n    }\n  }",
            "startLine": 180,
            "endLine": 234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks if the initialization has been all right - performs it only once.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!isset(self::$is_checked)) {\n      self::$is_checked = \\is_object(self::$current_connection)\n        && \\is_object(self::$sync_connection)\n        && self::$current_connection->check()\n        && self::$sync_connection->check();\n    }\n    return self::$is_checked;\n  }",
            "startLine": 241,
            "endLine": 250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "disable": {
            "name": "disable",
            "summary": "Disable the sync trigger.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::$disabled = true;\n  }",
            "startLine": 257,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "enable": {
            "name": "enable",
            "summary": "Enable the sync trigger.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    self::$disabled = false;\n  }",
            "startLine": 267,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "trigger": {
            "name": "trigger",
            "summary": "Writes new rows in the sync table after a writing operation has happened.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    \/** @todo I would like to understand... *\/\n    if (!isset($cfg['run'])) {\n      $cfg['run'] = 1;\n    }\n    if (!isset($cfg['trig'])) {\n      $cfg['run'] = 1;\n    }\n    if (!self::$disabled\n        && self::check()\n        && (count($cfg['tables']) === 1)\n        && ($table = self::$current_connection->tfn(current($cfg['tables'])))\n        && \\in_array($table, self::$tables, true)\n    ) {\n      if ($cfg['moment'] === 'after') {\n        \/\/ Case where we actually delete or restore through the $hcol column\n        $values = [];\n        if (X::hasProps($cfg, ['fields', 'values'], true)) {\n          foreach ($cfg['fields'] as $i => $f) {\n            $values[$f] = $cfg['values'][$i];\n          }\n        }\n        $last_id = self::$sync_connection->lastId();\n        self::$sync_connection->insert(\n          self::$sync_table, [\n          'db' => self::$current_connection->getCurrent(),\n          'tab' => self::$current_connection->tsn($table),\n          'action' => $cfg['kind'],\n          'chrono' => microtime(true),\n          'rows' => empty($cfg['where']) ? '[]' : X::jsonBase64Encode($cfg['where']),\n          'vals' => empty($values) ? '[]' : X::jsonBase64Encode($values)\n          ]\n        );\n        self::$sync_connection->setLastInsertId($last_id);\n      }\n    }\n    return $cfg;\n  }",
            "startLine": 278,
            "endLine": 316,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Configuration array"
                }
            ]
        },
        "callback1": {
            "name": "callback1",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(callable $f)\n  {\n    self::addMethod('cbf1', $f);\n  }",
            "startLine": 318,
            "endLine": 321,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "callback2": {
            "name": "callback2",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(callable $f)\n  {\n    self::addMethod('cbf2', $f);\n  }",
            "startLine": 323,
            "endLine": 326,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteCompleted": {
            "name": "deleteCompleted",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(float $start = NULL)\n  {\n    if (!self::isInit()) {\n      die(\"DB sync is not initiated\");\n    }\n    if (!$start\n        || !($start = self::$sync_connection->selectOne(\n          self::$sync_table, 'MIN(chrono)', [\n          ['db', 'NOT LIKE', self::$current_connection->getCurrent()],\n          'state' => 0\n          ]\n        ))\n    ) {\n      $start = time();\n    }\n    \/\/ Deleting the entries prior to this sync we produced and have been seen by the twin process\n    return self::$sync_connection->delete(\n      self::$sync_table, [\n      'db' => self::$current_connection->getCurrent(),\n      'state'=> 1,\n      ['chrono', '<', $start]\n      ]\n    );\n  }",
            "startLine": 328,
            "endLine": 351,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "start",
                    "position": 0,
                    "type": "float",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "currentRowCfg": {
            "name": "currentRowCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($row)\n  {\n\n  }",
            "startLine": 353,
            "endLine": 356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "row",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "destRowCfg": {
            "name": "destRowCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($row)\n  {\n\n  }",
            "startLine": 358,
            "endLine": 361,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "row",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "sync": {
            "name": "sync",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Sync",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, $dbs = '', $sync_table = '', $num_try = 0)\n  {\n    if (!self::isInit()) {\n      die(\"DB sync is not initiated\");\n    }\n    self::disable();\n    $mode_db = self::$current_connection->getErrorMode();\n    $mode_dbs = self::$sync_connection->getErrorMode();\n    self::$current_connection->setErrorMode(\"continue\");\n    self::$sync_connection->setErrorMode(\"continue\");\n\n    $num_try++;\n\n    $to_log = [\n      'deleted_sync' => 0,\n      'deleted_real' => 0,\n      'updated_sync' => 0,\n      'updated_real' => 0,\n      'inserted_sync' => 0,\n      'inserted_real' => 0,\n      'num_problems' => 0,\n      'problems' => []\n    ];\n\n    $to_log['deleted_sync'] = self::deleteCompleted();\n\n    $retry = false;\n\n    \/\/ Selecting the entries inserted\n    $ds = self::$sync_connection->rselectAll(\n      self::$sync_table, ['id', 'tab', 'vals', 'chrono'], [\n      ['db', '!=', self::$current_connection->getCurrent()],\n      ['state', '=', 0],\n      ['action', 'LIKE', 'INSERT']\n      ], [\n      'chrono' => 'ASC',\n      'id' => 'ASC'\n      ]\n    );\n    \/\/ They just have to be inserted\n    foreach ($ds as $i => $d){\n      if (isset(self::$methods['cbf1'])) {\n        self::cbf1($d);\n      }\n      $vals = X::jsonBase64Decode($d['vals']);\n      if (!\\is_array($vals)) {\n        $to_log['num_problems']++;\n        $to_log['problems'][] = \"Hey, look urgently at the row $d[id]!\";\n      }\n      elseif (self::$current_connection->insert($d['tab'], $vals)) {\n        if (isset(self::$methods['cbf2'])) {\n          self::cbf2($d);\n        }\n        $to_log['inserted_sync']++;\n        self::$sync_connection->update(self::$sync_table, [\"state\" => 1], [\"id\" => $d['id']]);\n      }\n      elseif (self::$current_connection->select($d['tab'], [], $vals)) {\n        self::$sync_connection->update(self::$sync_table, [\"state\" => 1], [\"id\" => $d['id']]);\n      }\n      else{\n        if ($num_try > self::$max_retry) {\n          $to_log['num_problems']++;\n          $to_log['problems'][] = \"Problem while syncing (insert), check data with status 5 and ID \".$d['id'];\n          self::$sync_connection->update(self::$sync_table, [\"state\" => 5], [\"id\" => $d['id']]);\n        }\n        $retry = 1;\n      }\n    }\n\n\n    \/\/ Selecting the entries modified and deleted in the twin DB,\n    \/\/ ordered by table and rows (so the same go together)\n    $ds = self::$sync_connection->rselectAll(\n      self::$sync_table, ['id', 'tab', 'action', 'rows', 'vals', 'chrono'], [\n      ['db', '!=', self::$current_connection->getCurrent()],\n      ['state', '=', 0],\n      ['rows', '!=', '[]'],\n      ['action', '!=', 'insert']\n      ], [\n      'tab' => 'ASC',\n      'rows' => 'ASC',\n      'chrono' => 'ASC',\n      'id' => 'ASC'\n      ]\n    );\n    foreach ($ds as $i => $d){\n      \/\/ Executing the first callback\n      $d['rows'] = X::jsonBase64Decode($d['rows']);\n      $d['vals'] = X::jsonBase64Decode($d['vals']);\n      if (isset(self::$methods['cbf1'])) {\n        self::cbf1($d);\n      }\n      \/\/ Proceeding to the actions: delete is before\n      if (strtolower($d['action']) === 'delete') {\n        if (self::$current_connection->delete($d['tab'], $d['rows'])) {\n          self::$sync_connection->update(self::$sync_table, [\"state\" => 1], [\"id\" => $d['id']]);\n          $to_log['deleted_real']++;\n        }\n        elseif (!self::$current_connection->select($d['tab'], [], $d['rows'])) {\n          self::$sync_connection->update(self::$sync_table, [\"state\" => 1], [\"id\" => $d['id']]);\n        }\n        else{\n          if ($num_try > self::$max_retry) {\n            self::$sync_connection->update(self::$sync_table, [\"state\" => 5], [\"id\" => $d['id']]);\n            $to_log['num_problems']++;\n            $to_log['problems'][] = \"Problem while syncing (delete), check data with status 5 and ID \".$d['id'];\n          }\n          $retry = 1;\n        }\n      }\n      \/\/ Checking if there is another change done to this record and when in the twin DB\n      $next_time = (\n              isset($ds[$i+1]) &&\n              ($ds[$i+1]['tab'] === $d['tab']) &&\n              ($ds[$i+1]['rows'] === $d['rows'])\n            ) ? $ds[$i+1]['chrono'] : microtime();\n      \/\/ Looking for the actions done on this specific record in our database\n      \/\/ between the twin change and the next (or now if there is no other change)\n      $each = self::$sync_connection->rselectAll(\n        self::$sync_table, ['id', 'chrono', 'action', 'vals'], [\n        ['db', '=', self::$current_connection->getCurrent()],\n        ['tab', '=', $d['tab']],\n        ['rows', '=', $d['rows']],\n        ['chrono', '>=', $d['chrono']],\n        ['chrono', '<', $next_time],\n        ]\n      );\n      if (\\count($each) > 0) {\n        $to_log['num_problems']++;\n        $to_log['problems'][] = \"Conflict!\";\n        $to_log['problems'][] = $d;\n        foreach ($each as $e){\n          $e['vals'] = X::jsonBase64Decode($e['vals']);\n          \/\/ If it's deleted locally and updated on the twin we restore\n          if (strtolower($e['action']) === 'delete') {\n            if (strtolower($d['action']) === 'update') {\n              if (!self::$current_connection->insertUpdate(\n                $d['tab'],\n                X::mergeArrays(\n                  $e['vals'],\n                  $d['vals']\n                )\n              )\n              ) {\n                $to_log['num_problems']++;\n                $to_log['problems'][] = \"insert_update number 1 had a problem\";\n              }\n            }\n          }\n          \/\/ If it's updated locally and deleted in the twin we restore\n          elseif (strtolower($e['action']) === 'update') {\n            if (strtolower($d['action']) === 'delete') {\n              if (!self::$current_connection->insertUpdate($d['tab'], X::mergeArrays($d['vals'], $e['vals']))) {\n                $to_log['num_problems']++;\n                $to_log['problems'][] = \"insert_update had a problem\";\n              }\n            }\n            \/\/ If it's updated locally and in the twin we merge the values for the update\n            elseif (strtolower($d['action']) === 'update') {\n              $d['vals'] = X::mergeArrays($d['vals'], $e['vals']);\n            }\n          }\n        }\n      }\n      \/\/ Proceeding to the actions update is after in case we needed to restore\n      if (strtolower($d['action']) === 'update') {\n        X::log(X::mergeArrays($d['rows'], $d['vals']), 'synct');\n        if (self::$current_connection->update($d['tab'], $d['vals'], $d['rows'])) {\n          self::$sync_connection->update(self::$sync_table, [\"state\" => 1], [\"id\" => $d['id']]);\n          $to_log['updated_real']++;\n        }\n        elseif (self::$current_connection->count($d['tab'], X::mergeArrays($d['rows'], $d['vals']))) {\n          self::$sync_connection->update(self::$sync_table, [\"state\" => 1], [\"id\" => $d['id']]);\n        }\n        else{\n          if ($num_try > self::$max_retry) {\n            self::$sync_connection->update(self::$sync_table, [\"state\" => 5], [\"id\" => $d['id']]);\n            $to_log['num_problems']++;\n            $to_log['problems'][] = \"Problem while syncing (update), check data with status 5 and ID \".$d['id'];\n          }\n          $retry = 1;\n        }\n      }\n      \/\/ Callback number 2\n      if (isset(self::$methods['cbf2'])) {\n        self::cbf2($d);\n      }\n    }\n\n\n    $res = [];\n    foreach ($to_log as $k => $v){\n      if (!empty($v)) {\n        $res[$k] = $v;\n      }\n    }\n    self::$current_connection->setErrorMode($mode_db);\n    self::$sync_connection->setErrorMode($mode_dbs);\n    self::enable();\n    if ($retry && ( $num_try <= self::$max_retry )) {\n      $res = X::mergeArrays($res, self::sync($db, $dbs, $sync_table, $num_try));\n    }\n    return $res;\n  }",
            "startLine": 366,
            "endLine": 569,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dbs",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "sync_table",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num_try",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "current_connection": false,
        "sync_connection": null,
        "has_history": false,
        "tables": [],
        "sync_table": "dbsync",
        "methods": [],
        "default_cfg": {
            "engine": "sqlite",
            "host": "localhost",
            "db": "dbsync"
        },
        "is_init": false,
        "is_checked": null,
        "disabled": false,
        "max_retry": 5
    },
    "constants": null,
    "numMethods": 15,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 11,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "current_connection": false,
        "sync_connection": null,
        "has_history": false,
        "tables": [],
        "sync_table": "dbsync",
        "methods": [],
        "default_cfg": {
            "engine": "sqlite",
            "host": "localhost",
            "db": "dbsync"
        },
        "is_init": false,
        "is_checked": null,
        "disabled": false,
        "max_retry": 5
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Db",
    "shortName": "Sync",
    "summary": "",
    "description": "",
    "description_parts": []
}