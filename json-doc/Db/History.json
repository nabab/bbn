{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Db\\History",
    "namespace": true,
    "realName": "History",
    "realNamespace": "bbn\\Db",
    "traits": [
        "bbn\\Models\\Tts\\Report",
        "bbn\\Models\\Tts\\DbActions"
    ],
    "interfaces": [],
    "fileName": "\/Db\/History.php",
    "startLine": 12,
    "endLine": 1633,
    "numMethods": 77,
    "numProperties": 25,
    "numConstants": 0,
    "numStaticProperties": 5,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_history",
            "tables": {
                "history": "bbn_history",
                "history_uids": "bbn_history_uids"
            },
            "arch": {
                "history": {
                    "opr": "opr",
                    "uid": "uid",
                    "col": "col",
                    "val": "val",
                    "ref": "ref",
                    "tst": "tst",
                    "usr": "usr",
                    "dt": "dt"
                },
                "history_uids": {
                    "bbn_uid": "bbn_uid",
                    "bbn_table": "bbn_table",
                    "bbn_active": "bbn_active"
                }
            },
            "conditions": []
        },
        "instances": [],
        "_error": null,
        "_last_error": null,
        "_debug": null,
        "database_obj": null,
        "admin_db": "",
        "enabled": true,
        "enabled_count": 0,
        "disabled_count": 0,
        "date": null,
        "structures": [],
        "class_cfg": null,
        "_isInitClassCfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Db",
    "shortName": "History",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "History constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, array $cfg = [], ?string $user = null, ?Database $database_obj = null)\n  {\n    $this->db           = $db;\n    $this->database_obj = $database_obj ?? new Database($this->db);\n    $this->user         = $user;\n\n    \/\/ Setting up the class configuration\n    $this->initClassCfg($cfg);\n\n    $this->admin_db = $this->db->getCurrent();\n\n    $this->links = $this->db->getForeignKeys(\n      $this->getHistoryUidsColumnName('bbn_uid'),\n      $this->getHistoryUidsTableName(), $this->admin_db\n    );\n\n    $this->db->setTrigger(function (array $cfg) {\n      return $this->trigger($cfg);\n    });\n\n    $this->hash = $this->makeHash();\n\n    if (!isset(self::$instances[$this->hash])) {\n      self::$instances[$this->hash] = $this;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 99,
            "endLine": 124,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "user",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "database_obj",
                    "position": 3,
                    "type": "null|bbn\\Appui\\Database",
                    "type_arr": [
                        "null",
                        "bbn\\Appui\\Database"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "obj"
                }
            ],
            "doc": {
                "description": "History constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "Db",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$user"
                    },
                    {
                        "tag": "param",
                        "type": "Database|null",
                        "name": "$database",
                        "description": "obj"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * History constructor.\n   * @param Db            $db\n   * @param array         $cfg\n   * @param string|null   $user\n   * @param Database|null $database_obj\n   * @throws \\Exception\n   *\/"
        },
        "_get_db": {
            "name": "_get_db",
            "summary": "Returns the database connection object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_db(): ?Db\n  {\n    return $this->db;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_db",
            "returns": [
                null,
                "bbn\\Db"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the database connection object.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the database connection object.\n   *\n   * @return Db\n   *\/"
        },
        "_get_database": {
            "name": "_get_database",
            "summary": "Returns an instance of the Appui\\Database class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_database(): ?database\n  {\n    return $this->database_obj;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 143,
            "endLine": 146,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_database",
            "returns": [
                null,
                "bbn\\Appui\\Database"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns an instance of the Appui\\Database class.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an instance of the Appui\\Database class.\n   *\n   * @return database\n   *\/"
        },
        "_insert": {
            "name": "_insert",
            "summary": "Adds a row in the history table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _insert(array $cfg): int\n  {\n    $this->ensureUserIsSet();\n\n    if (isset($cfg['column'], $cfg['line'], $cfg['chrono'])) {\n      \/\/ Recording the last ID\n      $id = $this->db->lastId();\n      $this->db->disableLast();\n      $this->disable();\n      if (!array_key_exists('old', $cfg)) {\n        $cfg['ref'] = null;\n        $cfg['val'] = null;\n      }\n      elseif (Str::isUid($cfg['old'])\n        && $this->db->count(\n          $this->getHistoryUidsTableName(),\n          [$this->getHistoryUidsColumnName('bbn_uid') => $cfg['old']]\n        )\n      ) {\n        $cfg['ref'] = $cfg['old'];\n        $cfg['val'] = null;\n      }\n      else{\n        $cfg['ref'] = null;\n        $cfg['val'] = $cfg['old'];\n      }\n\n      \/\/ New row in the history table\n      if ($res = $this->db->insert(\n        $this->getHistoryTableName(), [\n          $this->getHistoryTableColumnName('opr') => $cfg['operation'],\n          $this->getHistoryTableColumnName('uid') => $cfg['line'],\n          $this->getHistoryTableColumnName('col') => $cfg['column'],\n          $this->getHistoryTableColumnName('val') => $cfg['val'],\n          $this->getHistoryTableColumnName('ref') => $cfg['ref'],\n          $this->getHistoryTableColumnName('tst') => $this->date ?: $cfg['chrono'],\n          $this->getHistoryTableColumnName('usr') => $this->user\n        ]\n      )\n      ) {\n        \/\/ Set back the original last ID\n        $this->db->setLastInsertId($id);\n      }\n\n      $this->db->enableLast();\n      $this->enable();\n      return $res;\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 155,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_insert",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a row in the history table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a row in the history table.\n   *\n   * @param array $cfg\n   * @return int\n   *\/"
        },
        "_get_table_where": {
            "name": "_get_table_where",
            "summary": "Get a string for the WHERE in the query with all the columns selection.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_table_where(string $table): ?string\n  {\n    if (Str::checkName($table)\n      && ($model = $this->database_obj->modelize($table))\n    ) {\n      $col      = $this->db->escape($this->getHistoryTableColumnName('col'));\n      $where_ar = [];\n      if (isset($model['fields']) && is_array($model['fields'])) {\n        foreach ($model['fields'] as $k => $f){\n          if (!empty($f['id_option'])) {\n            $where_ar[] = $col.' = UNHEX(\"'.$this->db->escapeValue($f['id_option']).'\")';\n          }\n        }\n      }\n\n      if (\\count($where_ar)) {\n        return implode(' OR ', $where_ar);\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 213,
            "endLine": 234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_table_where",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Get a string for the WHERE in the query with all the columns selection.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get a string for the WHERE in the query with all the columns selection.\n   * @param string $table\n   * @return string|null\n   *\/"
        },
        "getIdColumn": {
            "name": "getIdColumn",
            "summary": "Returns the column's corresponding option's ID",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdColumn(string $column, string $table): ?string\n  {\n    if ($full_table = $this->db->tfn($table)) {\n      [$database, $table] = explode('.', $full_table);\n      return $this->database_obj->columnId($column, $table, $database);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 243,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getIdColumn",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                }
            ],
            "doc": {
                "description": "Returns the column's corresponding option's ID\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$column",
                        "description": "string"
                    },
                    {
                        "tag": "param",
                        "type": "$table",
                        "description": "string"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the column's corresponding option's ID\n   * @param $column string\n   * @param $table  string\n   * @return null|string\n   *\/"
        },
        "disable": {
            "name": "disable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function disable(): void\n  {\n    $this->enabled = false;\n    $this->disabled_count++;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 257,
            "endLine": 261,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disable",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "enable": {
            "name": "enable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function enable(): void\n  {\n    $this->enabled = true;\n    $this->enabled_count++;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enable",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "isEnabled": {
            "name": "isEnabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isEnabled(): bool\n  {\n    return $this->enabled === true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 277,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isEnabled",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return bool\n   *\/"
        },
        "validDate": {
            "name": "validDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function validDate(string $d): ?float\n  {\n    if (!Str::isNumber($d)) {\n      $d = strtotime($d);\n    }\n\n    if (($d > 0) && Str::isNumber($d)) {\n      return (float)$d;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 287,
            "endLine": 298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "validDate",
            "returns": [
                null,
                "float"
            ],
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$d"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $d\n   * @return null|float\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks if all history parameters are set in order to read and write into history",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check(): bool\n  {\n    return isset($this->user);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 305,
            "endLine": 308,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if all history parameters are set in order to read and write into history\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if all history parameters are set in order to read and write into history\n   * @return bool\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Effectively deletes a row (deletes the row, the history row and the ID row)",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(string $id): bool\n  {\n    if ($id) {\n      return $this->db->delete(\n        $this->getHistoryUidsTableName(),\n        [$this->getHistoryUidsColumnName('bbn_uid') => $id]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 327,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Effectively deletes a row (deletes the row, the history row and the ID row)\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Effectively deletes a row (deletes the row, the history row and the ID row)\n   *\n   * @param string $id\n   * @return bool\n   *\/"
        },
        "setColumn": {
            "name": "setColumn",
            "summary": "Sets the \"active\" column name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setColumn(string $column): void\n  {\n    if (Str::checkName($column)) {\n      $this->class_cfg['arch']['history_uids']['bbn_active'] = $column;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 336,
            "endLine": 341,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setColumn",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the \"active\" column name\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the \"active\" column name\n   *\n   * @param string $column\n   * @return void\n   *\/"
        },
        "getColumn": {
            "name": "getColumn",
            "summary": "Gets the \"active\" column name",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColumn(): ?string\n  {\n    return $this->getHistoryUidsColumnName('bbn_active');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 349,
            "endLine": 352,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getColumn",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the \"active\" column name\n",
                "params": [],
                "return": "the \"active\" column name"
            },
            "comments": "  \/**\n   * Gets the \"active\" column name\n   *\n   * @return string|null the \"active\" column name\n   *\/"
        },
        "setDate": {
            "name": "setDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDate($date): void\n  {\n    \/\/ Sets the current date\n    if (!Str::isNumber($date) && !($date = strtotime($date))) {\n      return;\n    }\n\n    $t = time();\n    \/\/ Impossible to write history in the future\n    if ($date > $t) {\n      $date = $t;\n    }\n\n    $this->date = (float)$date;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 359,
            "endLine": 373,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDate",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "date",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$date"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $date\n   * @return void\n   *\/"
        },
        "getDate": {
            "name": "getDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDate(): ?float\n  {\n    return $this->date;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 379,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDate",
            "returns": [
                null,
                "float"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return float\n   *\/"
        },
        "unsetDate": {
            "name": "unsetDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetDate(): void\n  {\n    $this->date = null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 388,
            "endLine": 391,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "unsetDate",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "setUser": {
            "name": "setUser",
            "summary": "Sets the user ID that will be used to fill the user_id field",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setUser($user): void\n  {\n    if (Str::isUid($user)) {\n      $this->user = $user;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 399,
            "endLine": 404,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setUser",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the user ID that will be used to fill the user_id field\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the user ID that will be used to fill the user_id field\n   * @param $user\n   * @return void\n   *\/"
        },
        "getUser": {
            "name": "getUser",
            "summary": "Gets the user ID that is being used to fill the user_id field",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUser(): ?string\n  {\n    return $this->user;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 411,
            "endLine": 414,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUser",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the user ID that is being used to fill the user_id field\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the user ID that is being used to fill the user_id field\n   * @return null|string\n   *\/"
        },
        "getAllHistory": {
            "name": "getAllHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAllHistory(string $table, int $start = 0, int $limit = 20, string|null $dir = null): array\n  {\n    if ($id_table = $this->database_obj->tableId($table, $this->db->getCurrent())) {\n      $tab      = $this->db->escape($this->getHistoryTableName());\n      $tab_uids = $this->db->escape($this->getHistoryUidsTableName());\n      $uid      = $this->db->cfn($this->getHistoryUidsColumnName('bbn_uid'), $this->getHistoryUidsTableName(), true);\n      $id_tab   = $this->db->cfn($this->getHistoryUidsColumnName('bbn_table'), $this->getHistoryUidsTableName(), true);\n      $uid2     = $this->db->cfn($this->getHistoryTableColumnName('uid'), $this->getHistoryTableName(), true);\n      $chrono   = $this->db->cfn($this->getHistoryTableColumnName('tst'), $this->getHistoryTableName(), true);\n      $order    = $dir && (Str::changeCase($dir, 'lower') === 'asc') ? 'ASC' : 'DESC';\n      $sql      = <<< MYSQL\nSELECT DISTINCT($uid)\nFROM $tab_uids\n  JOIN $tab\n    ON $uid = $uid2\nWHERE $id_tab = ? \nORDER BY $chrono $order\nLIMIT $start, $limit\nMYSQL;\n      return $this->db->getColArray($sql, hex2bin($id_table));\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 424,
            "endLine": 447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getAllHistory",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 3,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$dir"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string      $table\n   * @param int         $start\n   * @param int         $limit\n   * @param string|null $dir\n   * @return array\n   *\/"
        },
        "getLastModifiedLines": {
            "name": "getLastModifiedLines",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastModifiedLines(string $table, int $start = 0, int $limit = 20): array\n  {\n    $r = [];\n    if ($id_table = $this->database_obj->tableId($table, $this->db->getCurrent())) {\n      $tab      = $this->db->escape($this->getHistoryTableName());\n      $tab_uids = $this->db->escape($this->getHistoryUidsTableName());\n      $uid      = $this->db->cfn($this->getHistoryUidsColumnName('bbn_uid'), $this->getHistoryUidsTableName(), true);\n      $active   = $this->db->cfn($this->getHistoryUidsColumnName('bbn_active'), $this->getHistoryUidsTableName(), true);\n      $id_tab   = $this->db->cfn($this->getHistoryUidsColumnName('bbn_table'), $this->getHistoryUidsTableName(), true);\n      $line     = $this->db->escape($this->getHistoryTableColumnName('uid'));\n      $chrono   = $this->db->escape($this->getHistoryTableColumnName('tst'));\n      $sql      = <<< MYSQL\nSELECT DISTINCT($line)\nFROM $tab_uids\n  JOIN $tab\n    ON $uid = $line\nWHERE $id_tab = ? \nAND $active = 1\nORDER BY $chrono\nLIMIT $start, $limit\nMYSQL;\n      $r        = $this->db->getColArray($sql, hex2bin($id_table));\n    }\n\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 456,
            "endLine": 481,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getLastModifiedLines",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $table\n   * @param int $start\n   * @param int $limit\n   * @return array\n   *\/"
        },
        "getNextUpdate": {
            "name": "getNextUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNextUpdate(string $table, string $id, $from_when, $column = null)\n  {\n    \/** @todo To be redo totally with all the fields' IDs instead of the history column *\/\n    if (Str::checkName($table)\n      && ($date = $this->validDate($from_when))\n      && ($id_table = $this->database_obj->tableId($table))\n    ) {\n      $this->disable();\n      $tab      = $this->db->escape($this->getHistoryTableName());\n      $tab_uids = $this->db->escape($this->getHistoryUidsTableName());\n      $uid      = $this->db->cfn($this->getHistoryUidsColumnName('bbn_uid'), $this->getHistoryUidsTableName());\n      $id_tab   = $this->db->cfn($this->getHistoryUidsColumnName('bbn_table'),$this->getHistoryUidsTableName());\n      $id_col   = $this->db->cfn($this->getHistoryTableColumnName('col'), $this->getHistoryTableName());\n      $line     = $this->db->cfn($this->getHistoryTableColumnName('uid'), $this->getHistoryTableName());\n      $usr      = $this->db->cfn($this->getHistoryTableColumnName('usr'), $this->getHistoryTableName());\n      $chrono   = $this->db->cfn($this->getHistoryTableColumnName('tst'), $this->getHistoryTableName());\n      $where    = [\n        $uid => $id,\n        $id_tab => $id_table,\n        [$chrono, '>', $date]\n      ];\n      if ($column) {\n        $where[$id_col] = Str::isUid($column) ? $column : $this->database_obj->columnId($column, $id_table);\n      }\n      else {\n        $w = $this->_get_table_where($table);\n        \/\/$where = $id_col.\" != UNHEX('$id_column') \" . ($w ?: '');\n      }\n\n      $res = $this->db->rselect(\n        [\n          'tables' => [$tab_uids],\n          'fields' => [\n            $line,\n            $id_col,\n            $chrono,\n            'val' => 'IFNULL('.$this->getHistoryTableColumnName('val').', '.$this->getHistoryTableColumnName('ref').')',\n            $usr\n          ],\n          'join' => [[\n            'table' => $tab,\n            'on' => [\n              'logic' => 'AND',\n              'conditions' => [[\n                'field' => $uid,\n                'operator' => '=',\n                'exp' => $line\n              ]]\n            ]]],\n          'where' => $where,\n          'order' => [$chrono => 'ASC']\n        ]\n      );\n      $this->enable();\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 492,
            "endLine": 550,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "getNextUpdate",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "$from_when"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$column"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param $from_when\n   * @param null   $column\n   * @return null|array\n   * @throws \\Exception\n   *\/"
        },
        "getPrevUpdate": {
            "name": "getPrevUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrevUpdate(string $table, string $id, $from_when, $column = null): ?array\n  {\n    if (Str::checkName($table) && $date = $this->validDate($from_when)) {\n      $tab       = $this->db->escape($this->getHistoryTableName());\n      $line      = $this->db->escape($this->getHistoryTableColumnName('uid'));\n      $operation = $this->db->escape($this->getHistoryTableColumnName('opr'));\n      $chrono    = $this->db->escape($this->getHistoryTableColumnName('tst'));\n      if ($column) {\n        $where = $this->db->escape($this->getHistoryTableColumnName('col')).\n          ' = UNHEX(\"'.$this->db->escapeValue(\n            Str::isUid($column) ? $column : $this->database_obj->columnId($column, $table)\n          ).'\")';\n      }\n      else{\n        $where = $this->_get_table_where($table);\n      }\n\n      $sql = <<< MYSQL\nSELECT *\nFROM $tab\nWHERE $line = ?\nAND ($where)\nAND $operation LIKE 'UPDATE'\nAND $chrono < ?\nORDER BY $chrono DESC\nLIMIT 1\nMYSQL;\n      return $this->db->getRow($sql, hex2bin($id), $date);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 560,
            "endLine": 591,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "getPrevUpdate",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "$from_when"
                    },
                    {
                        "tag": "param",
                        "type": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param $from_when\n   * @param $id\n   * @param null   $column\n   * @return null|array\n   *\/"
        },
        "getNextValue": {
            "name": "getNextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNextValue(string $table, string $id, $from_when, $column)\n  {\n    if ($r = $this->getNextUpdate($table, $id, $from_when, $column)) {\n      return $r[$this->getHistoryTableColumnName('ref')] ?: $r[$this->getHistoryTableColumnName('val')];\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 601,
            "endLine": 608,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "getNextValue",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "$from_when"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param $from_when\n   * @param string $id\n   * @param $column\n   * @return bool|mixed\n   *\/"
        },
        "getPrevValue": {
            "name": "getPrevValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrevValue(string $table, string $id, $from_when, $column)\n  {\n    if ($r = $this->getPrevUpdate($table, $id, $from_when, $column)) {\n      return $r[$this->getHistoryTableColumnName('ref')] ?: $r[$this->getHistoryTableColumnName('val')];\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 618,
            "endLine": 625,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "getPrevValue",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "$from_when"
                    },
                    {
                        "tag": "param",
                        "type": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param $from_when\n   * @param $column\n   * @return bool|mixed\n   *\/"
        },
        "getRowBack": {
            "name": "getRowBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRowBack(string $table, string $id, $when, array $columns = []): ?array\n  {\n    if (!($when = $this->validDate($when))) {\n      $this->_report_error(\"The date $when is incorrect\", __CLASS__, __LINE__);\n    }\n    elseif (($model = $this->database_obj->modelize($table)) && ($cfg = $this->getTableCfg($table))) {\n      \/\/ Time is after last modification: the current is given\n      $this->disable();\n      if ($when >= time()) {\n        $r = $this->db->rselect(\n          $table, $columns, [\n            $cfg['primary'] => $id\n          ]\n        ) ?: null;\n      }\n      \/\/ Time is before creation: null is given\n      elseif ($when < $this->getCreationDate($table, $id)) {\n        $r = null;\n      }\n      else {\n        \/\/ No columns = All columns\n        if (\\count($columns) === 0) {\n          $columns = array_keys($model['fields']);\n        }\n\n        $r = [];\n        \/\/die(var_dump($columns, $model['fields']));\n        foreach ($columns as $col){\n          $tmp = null;\n          if (isset($model['fields'][$col]['id_option'])) {\n            if ($tmp = $this->db->rselect(\n              $this->getHistoryTableName(),\n              [\n                $this->getHistoryTableColumnName('val'),\n                $this->getHistoryTableColumnName('ref')\n              ]\n              , [\n                $this->getHistoryTableColumnName('uid') => $id,\n                $this->getHistoryTableColumnName('col') => $model['fields'][$col]['id_option'],\n                $this->getHistoryTableColumnName('opr') => 'UPDATE',\n                [$this->getHistoryTableColumnName('tst'), '>', $when]\n              ]\n            )\n            ) {\n              $r[$col] = $tmp[$this->getHistoryTableColumnName('ref')] ?: $tmp[$this->getHistoryTableColumnName('val')];\n            }\n          }\n\n          if (!$tmp) {\n            $r[$col] = $this->db->selectOne(\n              $table, $col, [\n                $cfg['primary'] => $id\n              ]\n            );\n          }\n        }\n      }\n\n      $this->enable();\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 635,
            "endLine": 698,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "getRowBack",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "when",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "columns",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "$when"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$columns"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param $when\n   * @param array  $columns\n   * @return array|null\n   *\/"
        },
        "getValBack": {
            "name": "getValBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getValBack(string $table, string $id, $when, $column)\n  {\n    if ($row = $this->getRowBack($table, $id, $when, [$column])) {\n      return $row[$column] ?? false;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 708,
            "endLine": 715,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "getValBack",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "when",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "$when"
                    },
                    {
                        "tag": "param",
                        "type": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $table\n   * @param $id\n   * @param $when\n   * @param $column\n   * @return bool|mixed\n   *\/"
        },
        "getCreationDate": {
            "name": "getCreationDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreationDate(string $table, string $id): ?float\n  {\n    if ($res = $this->getCreation($table, $id)) {\n      return $res['date'] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 723,
            "endLine": 730,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getCreationDate",
            "returns": [
                null,
                "float"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @return float|null\n   *\/"
        },
        "getCreation": {
            "name": "getCreation",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreation(string $table, string $id): ?array\n  {\n    if (($cfg = $this->getTableCfg($table)) && ($id_col = $this->getIdColumn($cfg['primary'], $table))) {\n      $this->disable();\n      if ($r = $this->db->rselect(\n        $this->getHistoryTableName(),\n        [\n          'date' => $this->getHistoryTableColumnName('tst'),\n          'user' => $this->getHistoryTableColumnName('usr')\n        ], [\n        $this->getHistoryTableColumnName('uid') => $id,\n        $this->getHistoryTableColumnName('col') => $id_col,\n        $this->getHistoryTableColumnName('opr') => 'INSERT'\n      ], [\n          $this->getHistoryTableColumnName('tst') => 'DESC'\n        ]\n      )\n      ) {\n        $this->enable();\n        return $r;\n      }\n\n      $this->enable();\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 738,
            "endLine": 764,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getCreation",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $table\n   * @param $id\n   * @return array|null\n   *\/"
        },
        "getLastDate": {
            "name": "getLastDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastDate(string $table, string $id, $column = null): ?float\n  {\n    if ($column && ($id_col = $this->getIdColumn($column, $table))) {\n      return $this->db->selectOne(\n        $this->getHistoryTableName(), $this->getHistoryTableColumnName('tst'), [\n        $this->getHistoryTableColumnName('uid') => $id,\n        $this->getHistoryTableColumnName('col') => $id_col\n      ], [\n          $this->getHistoryTableColumnName('tst') => 'DESC'\n        ]\n      );\n    }\n    elseif (!$column && ($where = $this->_get_table_where($table))) {\n      $tab    = $this->db->escape($this->getHistoryTableName());\n      $chrono = $this->db->escape($this->getHistoryTableColumnName('tst'));\n      $line   = $this->db->escape($this->getHistoryTableColumnName('uid'));\n      $sql    = <<< MYSQL\nSELECT $chrono\nFROM $tab\nWHERE $line = ?\nAND ($where)\nORDER BY $chrono DESC\nMYSQL;\n      return $this->db->getOne($sql, hex2bin($id));\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 773,
            "endLine": 800,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getLastDate",
            "returns": [
                null,
                "float"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param null   $column\n   * @return float|null\n   *\/"
        },
        "getHistory": {
            "name": "getHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHistory(string $table, string $id, string $col = '')\n  {\n    if ($this->check() && ($modelize = $this->getTableCfg($table))) {\n      $pat    = [\n        'ins' => 'INSERT',\n        'upd' => 'UPDATE',\n        'res' => 'RESTORE',\n        'del' => 'DELETE'\n      ];\n      $r      = [];\n      $fields = [\n        'date' => $this->getHistoryTableColumnName('tst'),\n        'user' => $this->getHistoryTableColumnName('usr'),\n        $this->getHistoryTableColumnName('col')\n      ];\n      $where  = [\n        $this->getHistoryTableColumnName('uid') => $id\n      ];\n\n      if (!empty($col)) {\n        if (!Str::isUid($col)) {\n          $fields[] = $modelize['fields'][$col]['type'] === 'binary' ? $this->getHistoryTableColumnName('ref') : $this->getHistoryTableColumnName('val');\n\n          $col = $this->database_obj->columnId($col, $table);\n        }\n        else {\n          $idx = X::search($modelize['fields'], ['id_option' => strtolower($col)]);\n          if (null === $idx) {\n            throw new \\Error(X::_(\"Impossible to find the option $col\"));\n          }\n\n          $fields[] = $modelize['fields'][$idx]['type'] === 'binary' ? $this->getHistoryTableColumnName('ref') : $this->getHistoryTableColumnName('val');\n        }\n\n        $where[$this->getHistoryTableColumnName('col')] = $col;\n      }\n      else {\n        $fields[] = $this->getHistoryTableColumnName('val');\n        $fields[] = $this->getHistoryTableColumnName('ref');\n      }\n\n      foreach ($pat as $k => $p){\n        $where[$this->getHistoryTableColumnName('opr')] = $p;\n        if ($q = $this->db->rselectAll(\n          [\n            'table' => $this->getHistoryTableName(),\n            'fields' => $fields,\n            'where' => [\n              'conditions' => $where\n            ],\n            'order' => [[\n              'field' => $this->getHistoryTableColumnName('tst'),\n              'dir' => 'desc'\n            ]]\n          ]\n        )\n        ) {\n          $r[$k] = $q;\n        }\n      }\n\n      return $r;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 809,
            "endLine": 874,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getHistory",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "col",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param string $col\n   * @return array\n   *\/"
        },
        "getFullHistory": {
            "name": "getFullHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFullHistory(string $table, string $id): array\n  {\n    $r = [];\n    if ($where = $this->_get_table_where($table)) {\n      $tab    = $this->db->escape($this->getHistoryTableName());\n      $line   = $this->db->escape($this->getHistoryTableColumnName('uid'));\n      $chrono = $this->db->escape($this->getHistoryTableColumnName('tst'));\n      $sql    = <<< MYSQL\nSELECT *\nFROM $tab\nWHERE $line = ?\nAND ($where)\nORDER BY $chrono ASC\nMYSQL;\n      $r      = $this->db->getRows($sql, hex2bin($id));\n    }\n\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 882,
            "endLine": 900,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getFullHistory",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @return array\n   *\/"
        },
        "getColumnHistory": {
            "name": "getColumnHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColumnHistory(string $table, string $id, string $column)\n  {\n    if ($this->check()\n      && ($primary = $this->db->getPrimary($table))\n      && ($modelize = $this->getTableCfg($table))\n    ) {\n      if (Str::isUid($column)) {\n        $column = X::search($modelize['fields'], ['id_option' => strtolower($column)]);\n      }\n\n      if (null === $column || !isset($modelize['fields'][$column])) {\n        throw new \\Error(X::_(\"Impossible to find the option $column\"));\n      }\n\n      $current = $this->db->selectOne(\n        $table, $column, [\n          $primary[0] => $id\n        ]\n      );\n      $val = $modelize['fields'][$column] === 'binary' ? $this->getHistoryTableColumnName('ref') : $this->getHistoryTableColumnName('val');\n\n      $hist = $this->getHistory($table, $id, $column);\n      $r    = [];\n      if ($crea = $this->getCreation($table, $id)) {\n        if (!empty($hist['upd'])) {\n          $hist['upd'] = array_reverse($hist['upd']);\n          foreach ($hist['upd'] as $i => $h){\n            if ($i === 0) {\n              $r[] = [\n                'date' => $crea['date'],\n                $val => $h[$val],\n                'user' => $crea['user']\n              ];\n            }\n            else{\n              $r[] = [\n                'date' => $hist['upd'][$i - 1]['date'],\n                $val => $h[$val],\n                'user' => $hist['upd'][$i - 1]['user']\n              ];\n            }\n          }\n\n          $r[] = [\n            'date' => $hist['upd'][$i]['date'],\n            $val => $current,\n            'user' => $hist['upd'][$i]['user']\n          ];\n        }\n        elseif (!empty($hist['ins'])) {\n          $r[0] = [\n            'date' => $hist['ins'][0]['date'],\n            $val => $current,\n            'user' => $hist['ins'][0]['user']\n          ];\n        }\n      }\n\n      return $r;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 909,
            "endLine": 971,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getColumnHistory",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param string $column\n   * @return array\n   *\/"
        },
        "getTableCfg": {
            "name": "getTableCfg",
            "summary": "Gets all information about a given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTableCfg(string $table, bool $force = false): ?array\n  {\n    \/\/ Check history is enabled and table's name correct\n    if (($table = $this->db->tfn($table))) {\n      if ($force || !isset($this->structures[$table])) {\n        if ($model = $this->database_obj->modelize($table)) {\n          $this->structures[$table] = [\n            'history' => false,\n            'primary' => false,\n            'primary_type' => null,\n            'primary_length' => 0,\n            'auto_increment' => false,\n            'id' => null,\n            'fields' => []\n          ];\n          if ($this->isLinked($table)\n            && isset($model['keys']['PRIMARY'])\n            && (\\count($model['keys']['PRIMARY']['columns']) === 1)\n            && ($primary = $model['keys']['PRIMARY']['columns'][0])\n            && !empty($model['fields'][$primary])\n          ) {\n            \/\/ Looking for the config of the table\n            $this->structures[$table]['history']        = 1;\n            $this->structures[$table]['primary']        = $primary;\n            $this->structures[$table]['primary_type']   = $model['fields'][$primary]['type'];\n            $this->structures[$table]['primary_length'] = $model['fields'][$primary]['maxlength'];\n            $this->structures[$table]['auto_increment'] = isset($model['fields'][$primary]['extra']) && ($model['fields'][$primary]['extra'] === 'auto_increment');\n            $this->structures[$table]['id']             = $this->database_obj->tableId($this->db->tsn($table), $this->db->getCurrent());\n            $this->structures[$table]['fields']         = array_filter(\n              $model['fields'], function ($a) {\n              return isset($a['id_option']);\n            }\n            );\n          }\n        }\n      }\n\n      \/\/ The table exists and has history\n      if (isset($this->structures[$table]) && !empty($this->structures[$table]['history'])) {\n        return $this->structures[$table];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 980,
            "endLine": 1024,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getTableCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets all information about a given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": "Table's full name"
            },
            "comments": "  \/**\n   * Gets all information about a given table\n   * @param string $table\n   * @param bool   $force\n   * @return null|array Table's full name\n   *\/"
        },
        "getDbCfg": {
            "name": "getDbCfg",
            "summary": "Returns information about all tables in the given database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDbCfg(string|null $db = null, bool $force = false): array\n  {\n    $res    = [];\n    $tables = $this->db->getTables($db);\n    if ($tables && count($tables)) {\n      foreach ($tables as $t) {\n        if ($tmp = $this->getTableCfg($t, $force)) {\n          $res[$t] = $tmp;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1034,
            "endLine": 1047,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getDbCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns information about all tables in the given database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns information about all tables in the given database.\n   *\n   * @param string|null $db\n   * @param bool        $force\n   * @return array\n   *\/"
        },
        "isLinked": {
            "name": "isLinked",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isLinked(string $table): bool\n  {\n    return ($ftable = $this->db->tfn($table)) && isset($this->links[$ftable]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1054,
            "endLine": 1057,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isLinked",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @return bool\n   *\/"
        },
        "getLinks": {
            "name": "getLinks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLinks()\n  {\n    return $this->links;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1063,
            "endLine": 1066,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLinks",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return array\n   *\/"
        },
        "trigger": {
            "name": "trigger",
            "summary": "The function used by the db trigger",
            "description": "This will basically execute the history query if it's configured for.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "This will basically execute the history query if it's configured for."
                }
            ],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function trigger(array $cfg): array\n  {\n    if (!$this->isEnabled()) {\n      return $cfg;\n    }\n\n    $tables = $cfg['tables'] ?? (array)$cfg['table'];\n    \/\/ Will return false if disabled, the table doesn't exist, or doesn't have history\n    if (($cfg['kind'] === 'SELECT')\n      && ($cfg['moment'] === 'before')\n      && !empty($cfg['tables'])\n      && !in_array($this->db->tfn($this->getHistoryTableName()), $cfg['tables_full'], true)\n      && !in_array($this->db->tfn($this->getHistoryUidsTableName()), $cfg['tables_full'], true)\n    ) {\n      $change = 0;\n      if (!isset($cfg['history'])) {\n        $cfg['history'] = [];\n        $new_join       = [];\n        foreach ($cfg['join'] as $i => $t){\n          $post_join = false;\n          $model     = $this->db->modelize($t['table']);\n          if (isset($model['keys']['PRIMARY'])\n            && ($model['keys']['PRIMARY']['ref_table'] === $this->db->csn($this->getHistoryUidsTableName()))\n          ) {\n            $change++;\n            if ($t['type'] !== 'left') {\n              $post_join = [\n                'table' => $this->db->tsn($this->getHistoryUidsTableName()),\n                'alias' => $this->db->tsn($this->getHistoryUidsTableName()).$change,\n                'type' => $t['type'] ?? 'right',\n                'on' => [\n                  'conditions' => [\n                    [\n                      'field' => $this->db->cfn(\n                        $this->getHistoryUidsColumnName('bbn_uid'),\n                        $this->getHistoryUidsTableName().$change\n                      ),\n                      'operator' => 'eq',\n                      'exp' => $this->db->cfn(\n                        $model['keys']['PRIMARY']['columns'][0],\n                        !empty($t['alias']) ? $t['alias'] : $t['table'],\n                        true\n                      )\n                    ], [\n                      'field' => $this->db->cfn(\n                        $this->getHistoryUidsColumnName('bbn_active'),\n                        $this->getHistoryUidsTableName().$change\n                      ),\n                      'operator' => '=',\n                      'exp' => '1'\n                    ]\n                  ],\n                  'logic' => 'AND'\n                ]\n              ];\n            }\n            else{\n              $join_alias                     = $t;\n              $alias                          = strtolower(Str::genpwd());\n              $join_alias['alias']            = $alias;\n              $join_alias['on']['conditions'] = $this->db->replaceTableInConditions($join_alias['on']['conditions'], !empty($t['alias']) ? $t['alias'] : $t['table'], $alias);\n              $new_join[]                     = $join_alias;\n              $t['on']                        = [\n                'conditions' => [\n                  [\n                    'field' => $this->db->cfn(\n                      $this->getHistoryUidsColumnName('bbn_uid'),\n                      $this->getHistoryUidsTableName().$change\n                    ),\n                    'operator' => 'eq',\n                    'exp' => $this->db->cfn($model['keys']['PRIMARY']['columns'][0], !empty($t['alias']) ? $t['alias'] : $t['table'], true)\n                  ], [\n                    'field' => $this->db->cfn(\n                      $this->getHistoryUidsColumnName('bbn_active'),\n                      $this->getHistoryUidsTableName().$change\n                    ),\n                    'operator' => '=',\n                    'exp' => '1'\n                  ]\n                ],\n                'logic' => 'AND'\n              ];\n              $new_join[]                     = [\n                'table' => $this->db->tsn($this->getHistoryUidsTableName()),\n                'alias' => $this->db->tsn($this->getHistoryUidsTableName()).$change,\n                'type' => 'left',\n                'on' => [\n                  'conditions' => [\n                    [\n                      'field' => $this->db->cfn(\n                        $this->getHistoryUidsColumnName('bbn_uid'),\n                        $this->getHistoryUidsTableName().$change\n                      ),\n                      'operator' => 'eq',\n                      'exp' => $this->db->cfn($model['keys']['PRIMARY']['columns'][0], $alias, true)\n                    ]\n                  ],\n                  'logic' => 'AND'\n                ]\n              ];\n            }\n          }\n\n          $new_join[] = $t;\n          if ($post_join) {\n            $new_join[] = $post_join;\n          }\n        }\n\n        foreach ($cfg['tables'] as $alias => $table){\n          $model = $this->db->modelize($table);\n          if (isset($model['keys']['PRIMARY']['ref_table'])\n            && ($this->db->tfn($model['keys']['PRIMARY']['ref_db'].'.'.$model['keys']['PRIMARY']['ref_table']) === $this->getHistoryUidsTableName())\n          ) {\n            $change++;\n            $new_join[] = [\n              'table' => $this->getHistoryUidsTableName(),\n              'alias' => $this->db->tsn($this->getHistoryUidsTableName()).$change,\n              'on' => [\n                'conditions' => [\n                  [\n                    'field' => $this->db->cfn(\n                      $this->getHistoryUidsTableName().$change.'.'.$this->getHistoryUidsColumnName('bbn_uid')\n                    ),\n                    'operator' => 'eq',\n                    'exp' => $this->db->cfn($model['keys']['PRIMARY']['columns'][0], \\is_string($alias) ? $alias : $table, true)\n                  ], [\n                    'field' => $this->db->cfn(\n                      $this->getHistoryUidsTableName().$change.'.'.$this->getHistoryUidsColumnName('bbn_active')\n                    ),\n                    'operator' => '=',\n                    'exp' => '1'\n                  ]\n                ],\n                'logic' => 'AND'\n              ]\n            ];\n          }\n        }\n\n        if ($change) {\n          $cfg['join']  = $new_join;\n          $cfg['where'] = $cfg['filters'];\n          $cfg          = $this->db->reprocessCfg($cfg);\n        }\n      }\n    }\n\n    if (isset($cfg['write'])\n      && ($table = $this->db->tfn(current($tables)))\n      && ($s = $this->getTableCfg($table))\n    ) {\n      \/\/ This happens before the query is executed\n      if ($cfg['moment'] === 'before') {\n        $primary_where   = false;\n        $primary_defined = false;\n        $primary_value   = false;\n        $idx1            = X::search($cfg['values_desc'], ['primary' => true]);\n        if ($idx1 !== null) {\n          $primary_where = $cfg['values'][$idx1];\n        }\n\n        $idx = array_search($s['primary'], $cfg['fields'], true);\n        if (($idx !== false) && isset($cfg['values'][$idx])) {\n          $primary_defined = $cfg['generate_id'] ? false : true;\n          $primary_value   = $cfg['values'][$idx];\n        }\n\n        switch ($cfg['kind']){\n          case 'INSERT':\n            \/\/ If the primary is specified and already exists in a row in deleted state\n            \/\/ (if it exists in active state, DB will return its standard error but it's not this class' problem)\n            if (!$primary_defined) {\n              \/\/ Checks if there is a unique value (non based on UID)\n              $modelize = $this->db->modelize($table);\n              $keys     = $modelize['keys'];\n              unset($keys['PRIMARY']);\n              foreach ($keys as $key){\n                if (!empty($key['unique']) && !empty($key['columns'])) {\n                  $fields = [];\n                  $exit   = false;\n                  foreach ($key['columns'] as $col){\n                    $col_idx = array_search($col, $cfg['fields'], true);\n                    if (($col_idx === false) || \\is_null($cfg['values'][$col_idx])) {\n                      $exit = true;\n                      break;\n                    }\n                    else {\n                      $fields[] = [\n                        'field' => $col,\n                        'operator' => 'eq',\n                        'value' => $cfg['values'][$col_idx]\n                      ];\n                    }\n                  }\n\n                  if ($exit) {\n                    continue;\n                  }\n\n                  $this->disable();\n                  if ($tmp = $this->db->selectOne(\n                    [\n                      'tables' => [$table],\n                      'fields' => [$s['primary']],\n                      'join' => [[\n                        'table' => $this->getHistoryUidsTableName(),\n                        'on' => [[\n                          'field' => $this->db->cfn(\n                            $this->getHistoryUidsColumnName('bbn_uid'),\n                            $this->getHistoryUidsTableName()\n                          ),\n                          'operator' => 'eq',\n                          'exp' => $this->db->cfn($s['primary'], $table, true)\n                        ]]\n                      ]],\n                      'where' => [\n                        'conditions' => $fields,\n                        'logic' => 'AND'\n                      ]\n                    ]\n                  )\n                  ) {\n                    $primary_value   = $tmp;\n                    $primary_defined = true;\n                    $this->enable();\n                    break;\n                  }\n\n                  $this->enable();\n                }\n              }\n            }\n\n            if ($primary_defined\n              && ($this->db->selectOne(\n                  $this->getHistoryUidsTableName(),\n                  $this->getColumn(),\n                  [$this->getHistoryUidsColumnName('bbn_uid') => $primary_value]\n                ) === 0)\n\n              && ($all = $this->db->rselect(\n                [\n                  'table' => $table,\n                  'fields' => $cfg['fields'],\n                  'join' => [[\n                    'table' => $this->getHistoryUidsTableName(),\n                    'on' => [\n                      'conditions' => [[\n                        'field' => $s['primary'],\n                        'exp' => 'bbn_uid'\n                      ], [\n                        'field' => $this->getColumn(),\n                        'value' => 0\n                      ]]\n                    ]\n                  ]],\n                  'where' => [\n                    'conditions' => [[\n                      'field' => $s['primary'],\n                      'value' => $primary_value\n                    ]]\n                  ]\n                ]\n              ))\n            ) {\n              \/\/ We won't execute the after trigger\n              $cfg['trig'] = false;\n              \/\/ Real query's execution will be prevented\n              $cfg['run']   = false;\n              $cfg['value'] = 0;\n              \/** @var array $update The values to be updated *\/\n              $update = [];\n              \/\/ We update each element which needs to (the new ones different from the old, and the old ones different from the default)\n              foreach ($all as $k => $v){\n                if ($k !== $s['primary']) {\n                  $idx = array_search($k, $cfg['fields'], true);\n                  if ($idx !== false) {\n                    if ($v !== $cfg['values'][$idx]) {\n                      $update[$k] = $cfg['values'][$idx];\n                    }\n                  }\n                  elseif ($v !== $s['fields'][$k]['default']) {\n                    $update[$k] = $s['fields'][$k]['default'];\n                  }\n                }\n              }\n\n              $this->disable();\n              if ($cfg['value'] = $this->db->update(\n                $this->getHistoryUidsTableName(), [$this->getHistoryUidsColumnName('bbn_active') => 1], [\n                  [$this->getHistoryUidsColumnName('bbn_uid'), '=', $primary_value]\n                ]\n              )\n              ) {\n                \/\/ Without this the record won't be write in bbn_history. Added by Mirko\n                $cfg['trig'] = true;\n                \/\/ --------\n                if (\\count($update) > 0) {\n                  $this->enable();\n                  $this->db->update(\n                    $table, $update, [\n                      $s['primary'] => $primary_value\n                    ]\n                  );\n                }\n\n                $cfg['history'][] = [\n                  'operation' => 'RESTORE',\n                  'column' => $s['fields'][$s['primary']]['id_option'],\n                  'line' => $primary_value,\n                  'chrono' => microtime(true)\n                ];\n              }\n\n              $this->enable();\n            }\n            else {\n              $this->disable();\n              if ($primary_defined && !$this->db->count($table, [$s['primary'] => $primary_value])) {\n                $primary_defined = false;\n              }\n\n              if (!$primary_defined && $this->db->insert(\n                  $this->getHistoryUidsTableName(), [\n                    $this->getHistoryUidsColumnName('bbn_uid') => $primary_value,\n                    $this->getHistoryUidsColumnName('bbn_table') => $s['id']\n                  ]\n                )\n              ) {\n                $cfg['history'][] = [\n                  'operation' => 'INSERT',\n                  'column' => isset($s['fields'][$s['primary']]) ? $s['fields'][$s['primary']]['id_option'] : null,\n                  'line' => $primary_value,\n                  'chrono' => microtime(true)\n                ];\n                $this->db->setLastInsertId($primary_value);\n              }\n\n              $this->enable();\n            }\n            break;\n          case 'UPDATE':\n            \/\/ ********** CHANGED BY MIRKO *************\n            if ($primary_where\n              && ($row = $this->db->rselect($table, $cfg['fields'], [$s['primary'] => $primary_where]))\n            ) {\n              $time = microtime(true);\n              foreach ($cfg['fields'] as $i => $idx){\n                $csn = $this->db->csn($idx);\n                if (array_key_exists($csn, $s['fields'])\n                  && ($row[$csn] !== $cfg['values'][$i])\n                ) {\n                  $cfg['history'][] = [\n                    'operation' => 'UPDATE',\n                    'column' => $s['fields'][$csn]['id_option'],\n                    'line' => $primary_where,\n                    'old' => $row[$csn],\n                    'chrono' => $time\n                  ];\n                }\n              }\n            }\n            \/\/ Case where the primary is not defined, we'll update each primary instead\n            elseif ($ids = $this->db->getColumnValues($table, $s['primary'], $cfg['filters'])) {\n              \/\/ We won't execute the after trigger\n              $cfg['trig'] = false;\n              \/\/ Real query's execution will be prevented\n              $cfg['run']   = false;\n              $cfg['value'] = 0;\n\n              $tmp = [];\n              foreach ($cfg['fields'] as $i => $f){\n                $tmp[$f] = $cfg['values'][$i];\n              }\n\n              foreach ($ids as $id){\n                $cfg['value'] += $this->db->update($table, $tmp, [$s['primary'] => $id]);\n              }\n\n              \/\/ ****************************************\n            }\n            break;\n\n          \/\/ Nothing is really deleted, the hcol is just set to 0\n          case 'DELETE':\n            \/\/ We won't execute the after trigger\n            $cfg['trig'] = false;\n            \/\/ Real query's execution will be prevented\n            $cfg['run']   = false;\n            $cfg['value'] = 0;\n            \/\/ Case where the primary is not defined, we'll delete based on each primary instead\n            if (!$primary_where) {\n              $ids = $this->db->getColumnValues($table, $s['primary'], $cfg['filters']);\n              foreach ($ids as $id){\n                $cfg['value'] += $this->db->delete($table, [$s['primary'] => $id]);\n              }\n            }\n            else {\n              $this->disable();\n              $cfg['value'] = $this->db->update(\n                $this->getHistoryUidsTableName(), [\n                $this->getHistoryUidsColumnName('bbn_active') => 0\n              ], [\n                  $this->getHistoryUidsColumnName('bbn_uid') => $primary_where\n                ]\n              );\n              \/\/var_dump(\"HIST\", $primary_where);\n              $this->enable();\n              if ($cfg['value']) {\n                $cfg['trig'] = 1;\n                \/\/ And we insert into the history table\n                $cfg['history'][] = [\n                  'operation' => 'DELETE',\n                  'column' => $s['fields'][$s['primary']]['id_option'],\n                  'line' => $primary_where,\n                  'old' => null,\n                  'chrono' => microtime(true)\n                ];\n              }\n            }\n            break;\n        }\n      }\n      elseif (($cfg['moment'] === 'after')\n        && isset($cfg['history'])\n      ) {\n        foreach ($cfg['history'] as $h){\n          $this->_insert($h);\n        }\n\n        unset($cfg['history']);\n      }\n    }\n\n    return $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1082,
            "endLine": 1518,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "trigger",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "The function used by the db trigger\nThis will basically execute the history query if it's configured for.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "The $cfg array, modified or not",
                "internal": {
                    "tag": "internal",
                    "text": "param array \"where\" key\/value array of fields names and fields values identifying the row"
                }
            },
            "comments": "  \/**\n   * The function used by the db trigger\n   * This will basically execute the history query if it's configured for.\n   *\n   * @param array $cfg\n   * @internal param string \"table\" The table for which the history is called\n   * @internal param string \"kind\" The type of action: select|update|insert|delete\n   * @internal param string \"moment\" The moment according to the db action: before|after\n   * @internal param array \"values\" key\/value array of fields names and fields values selected\/inserted\/updated\n   * @internal param array \"where\" key\/value array of fields names and fields values identifying the row\n   * @return array The $cfg array, modified or not\n   *\n   *\/"
        },
        "getHistoryTableName": {
            "name": "getHistoryTableName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getHistoryTableName(): string\n  {\n    return $this->class_cfg['table'];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1524,
            "endLine": 1527,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHistoryTableName",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string\n   *\/"
        },
        "getHistoryTableColumns": {
            "name": "getHistoryTableColumns",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getHistoryTableColumns(): array\n  {\n    return $this->class_cfg['arch']['history'];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1533,
            "endLine": 1536,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHistoryTableColumns",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return array\n   *\/"
        },
        "getHistoryTableColumnName": {
            "name": "getHistoryTableColumnName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getHistoryTableColumnName(string $field): ?string\n  {\n    return $this->getHistoryTableColumns()[$field] ?? null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1543,
            "endLine": 1546,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getHistoryTableColumnName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$field"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $field\n   * @return string|null\n   *\/"
        },
        "getHistoryUidsTableName": {
            "name": "getHistoryUidsTableName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getHistoryUidsTableName(): string\n  {\n    return $this->class_cfg['tables']['history_uids'];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1552,
            "endLine": 1555,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHistoryUidsTableName",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string\n   *\/"
        },
        "getHistoryUidsColumns": {
            "name": "getHistoryUidsColumns",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getHistoryUidsColumns(): array\n  {\n    return $this->class_cfg['arch']['history_uids'];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1561,
            "endLine": 1564,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHistoryUidsColumns",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return array\n   *\/"
        },
        "getHistoryUidsColumnName": {
            "name": "getHistoryUidsColumnName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getHistoryUidsColumnName(string $column): ?string\n  {\n    return $this->getHistoryUidsColumns()[$column] ?? null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1571,
            "endLine": 1574,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getHistoryUidsColumnName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $column\n   * @return string|null\n   *\/"
        },
        "ensureUserIsSet": {
            "name": "ensureUserIsSet",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function ensureUserIsSet()\n  {\n    if (!$this->user) {\n      throw new \\Exception(X::_('User id is not set!'));\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1577,
            "endLine": 1582,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "ensureUserIsSet",
            "returns": [],
            "arguments": []
        },
        "makeHash": {
            "name": "makeHash",
            "summary": "Makes a string that will be the id of the request.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function makeHash(): string\n  {\n    $args = $this->class_cfg;\n    if ((\\count($args) === 1) && \\is_array($args[0])) {\n      $args = $args[0];\n    }\n\n    $st = '';\n    foreach ($args as $a){\n      $st .= \\is_array($a) ? serialize($a) : '--'.$a.'--';\n    }\n\n    return md5($st);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1590,
            "endLine": 1603,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeHash",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Makes a string that will be the id of the request.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Makes a string that will be the id of the request.\n   *\n   * @return string\n   *\n   *\/"
        },
        "getHash": {
            "name": "getHash",
            "summary": "Returns the hash of the object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHash()\n  {\n    return $this->hash;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1611,
            "endLine": 1614,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHash",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the hash of the object.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the hash of the object.\n   *\n   * @return string\n   *\/"
        },
        "getInstanceFromHash": {
            "name": "getInstanceFromHash",
            "summary": "Returns an instance of registered history by it's hash.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getInstanceFromHash(string $hash): ?History\n  {\n    if (isset(self::$instances[$hash]) && self::$instances[$hash] instanceof History) {\n      return self::$instances[$hash];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1623,
            "endLine": 1630,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getInstanceFromHash",
            "returns": [
                null,
                "bbn\\Db\\History"
            ],
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an instance of registered history by it's hash.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$hash"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an instance of registered history by it's hash.\n   *\n   * @param string $hash\n   * @return History|null\n   *\/"
        },
        "_report_error": {
            "name": "_report_error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Report.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function _report_error($error, $class, $line){\n    throw new \\Exception(bbn\\X::_($error));\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Report",
            "startLine": 19,
            "endLine": 21,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_report_error",
            "returns": [],
            "arguments": [
                {
                    "name": "error",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "class",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "line",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(IFNULL(' . $this->db->csn($col, true) . ' ,\"{}\")';\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n\n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string|null $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the class configuration.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array|null $cfg = null)\n  {\n    $arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n\n      foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 41,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 96,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 144,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 152,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 164,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string|null $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 205,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string|null $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\History",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        }
    },
    "properties": {
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "Additional conditions when querying the history table\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": false,
            "value": {
                "table": "bbn_history",
                "tables": {
                    "history": "bbn_history",
                    "history_uids": "bbn_history_uids"
                },
                "arch": {
                    "history": {
                        "opr": "opr",
                        "uid": "uid",
                        "col": "col",
                        "val": "val",
                        "ref": "ref",
                        "tst": "tst",
                        "usr": "usr",
                        "dt": "dt"
                    },
                    "history_uids": {
                        "bbn_uid": "bbn_uid",
                        "bbn_table": "bbn_table",
                        "bbn_active": "bbn_active"
                    }
                },
                "conditions": []
            }
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Db",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Db The DB connection",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "database_obj": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var database The database class which collects the columns IDs",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "admin_db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var null|string Name of the database where the history table is",
                "tags": []
            },
            "parent": false,
            "value": ""
        },
        "enabled": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var boolean Setting it to false avoid execution of history triggers",
                "tags": []
            },
            "parent": false,
            "value": true
        },
        "enabled_count": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": 0
        },
        "disabled_count": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": 0
        },
        "date": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var float The current date can be overwritten if this variable is set",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "user": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string|null User's ID",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "structures": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array A collection of DB connections",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "links": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array The foregin links atytached to history UIDs' table",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "instances": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array A collection of DB connections",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "hash": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "string",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Db\\History",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string Object hash based on configuration",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $class_cfg",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "_error": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Report",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_last_error": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Report",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_debug": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Report",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\History"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_history",
            "tables": {
                "history": "bbn_history",
                "history_uids": "bbn_history_uids"
            },
            "arch": {
                "history": {
                    "opr": "opr",
                    "uid": "uid",
                    "col": "col",
                    "val": "val",
                    "ref": "ref",
                    "tst": "tst",
                    "usr": "usr",
                    "dt": "dt"
                },
                "history_uids": {
                    "bbn_uid": "bbn_uid",
                    "bbn_table": "bbn_table",
                    "bbn_active": "bbn_active"
                }
            },
            "conditions": []
        },
        "instances": [],
        "_error": null,
        "_last_error": null,
        "_debug": null
    },
    "constants": null,
    "uses": {
        "bbn\\Appui\\Database": "Database",
        "bbn\\Db": "Db",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Tts\\Report": "Report",
        "bbn\\Str": "Str",
        "bbn\\X": "X"
    },
    "dummyComments": [],
    "summary": "",
    "description": "",
    "description_parts": []
}