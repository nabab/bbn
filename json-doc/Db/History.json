{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Db\\History",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Report",
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Db\/History.php",
    "startLine": 12,
    "endLine": 1633,
    "contentConstructor": {
        "file": "bbn\\Db\\History",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "History constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, array $cfg = [], string $user = NULL, bbn\\Appui\\Database $database_obj = NULL)\n  {\n    $this->db           = $db;\n    $this->database_obj = $database_obj ?? new Database($this->db);\n    $this->user         = $user;\n\n    \/\/ Setting up the class configuration\n    $this->_init_class_cfg($cfg);\n\n    $this->admin_db = $this->db->getCurrent();\n\n    $this->links = $this->db->getForeignKeys(\n      $this->getHistoryUidsColumnName('bbn_uid'),\n      $this->getHistoryUidsTableName(), $this->admin_db\n    );\n\n    $this->db->setTrigger(function (array $cfg) {\n      return $this->trigger($cfg);\n    });\n\n    $this->hash = $this->makeHash();\n\n    if (!isset(self::$instances[$this->hash])) {\n      self::$instances[$this->hash] = $this;\n    }\n  }",
            "startLine": 99,
            "endLine": 124,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "user",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "database_obj",
                    "position": 3,
                    "type": "bbn\\Appui\\Database",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "obj"
                }
            ]
        },
        "getIdColumn": {
            "name": "getIdColumn",
            "summary": "Returns the column's corresponding option's ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $column, string $table)\n  {\n    if ($full_table = $this->db->tfn($table)) {\n      [$database, $table] = explode('.', $full_table);\n      return $this->database_obj->columnId($column, $table, $database);\n    }\n\n    return false;\n  }",
            "startLine": 243,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "string"
                }
            ]
        },
        "disable": {
            "name": "disable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->enabled = false;\n    $this->disabled_count++;\n  }",
            "startLine": 257,
            "endLine": 261,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "enable": {
            "name": "enable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->enabled = true;\n    $this->enabled_count++;\n  }",
            "startLine": 267,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "isEnabled": {
            "name": "isEnabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->enabled === true;\n  }",
            "startLine": 277,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "validDate": {
            "name": "validDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $d)\n  {\n    if (!Str::isNumber($d)) {\n      $d = strtotime($d);\n    }\n\n    if (($d > 0) && Str::isNumber($d)) {\n      return (float)$d;\n    }\n\n    return null;\n  }",
            "startLine": 287,
            "endLine": 298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "float",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "check": {
            "name": "check",
            "summary": "Checks if all history parameters are set in order to read and write into history",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return isset($this->user);\n  }",
            "startLine": 305,
            "endLine": 308,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "delete": {
            "name": "delete",
            "summary": "Effectively deletes a row (deletes the row, the history row and the ID row)",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($id) {\n      return $this->db->delete(\n        $this->getHistoryUidsTableName(),\n        [$this->getHistoryUidsColumnName('bbn_uid') => $id]\n      );\n    }\n\n    return false;\n  }",
            "startLine": 317,
            "endLine": 327,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setColumn": {
            "name": "setColumn",
            "summary": "Sets the \"active\" column name",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $column)\n  {\n    if (Str::checkName($column)) {\n      $this->class_cfg['arch']['history_uids']['bbn_active'] = $column;\n    }\n  }",
            "startLine": 336,
            "endLine": 341,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getColumn": {
            "name": "getColumn",
            "summary": "Gets the \"active\" column name",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->getHistoryUidsColumnName('bbn_active');\n  }",
            "startLine": 349,
            "endLine": 352,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "setDate": {
            "name": "setDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($date)\n  {\n    \/\/ Sets the current date\n    if (!Str::isNumber($date) && !($date = strtotime($date))) {\n      return;\n    }\n\n    $t = time();\n    \/\/ Impossible to write history in the future\n    if ($date > $t) {\n      $date = $t;\n    }\n\n    $this->date = (float)$date;\n  }",
            "startLine": 359,
            "endLine": 373,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "date",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDate": {
            "name": "getDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->date;\n  }",
            "startLine": 379,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "float",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "unsetDate": {
            "name": "unsetDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->date = null;\n  }",
            "startLine": 388,
            "endLine": 391,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": []
        },
        "setUser": {
            "name": "setUser",
            "summary": "Sets the user ID that will be used to fill the user_id field",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user)\n  {\n    if (Str::isUid($user)) {\n      $this->user = $user;\n    }\n  }",
            "startLine": 399,
            "endLine": 404,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUser": {
            "name": "getUser",
            "summary": "Gets the user ID that is being used to fill the user_id field",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->user;\n  }",
            "startLine": 411,
            "endLine": 414,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getAllHistory": {
            "name": "getAllHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, int $start = 0, int $limit = 20, string $dir = NULL)\n  {\n    if ($id_table = $this->database_obj->tableId($table, $this->db->getCurrent())) {\n      $tab      = $this->db->escape($this->getHistoryTableName());\n      $tab_uids = $this->db->escape($this->getHistoryUidsTableName());\n      $uid      = $this->db->cfn($this->getHistoryUidsColumnName('bbn_uid'), $this->getHistoryUidsTableName(), true);\n      $id_tab   = $this->db->cfn($this->getHistoryUidsColumnName('bbn_table'), $this->getHistoryUidsTableName(), true);\n      $uid2     = $this->db->cfn($this->getHistoryTableColumnName('uid'), $this->getHistoryTableName(), true);\n      $chrono   = $this->db->cfn($this->getHistoryTableColumnName('tst'), $this->getHistoryTableName(), true);\n      $order    = $dir && (Str::changeCase($dir, 'lower') === 'asc') ? 'ASC' : 'DESC';\n      $sql      = <<< MYSQL\nSELECT DISTINCT($uid)\nFROM $tab_uids\n  JOIN $tab\n    ON $uid = $uid2\nWHERE $id_tab = ? \nORDER BY $chrono $order\nLIMIT $start, $limit\nMYSQL;\n      return $this->db->getColArray($sql, hex2bin($id_table));\n    }\n\n    return [];\n  }",
            "startLine": 424,
            "endLine": 447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                },
                {
                    "name": "dir",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getLastModifiedLines": {
            "name": "getLastModifiedLines",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, int $start = 0, int $limit = 20)\n  {\n    $r = [];\n    if ($id_table = $this->database_obj->tableId($table, $this->db->getCurrent())) {\n      $tab      = $this->db->escape($this->getHistoryTableName());\n      $tab_uids = $this->db->escape($this->getHistoryUidsTableName());\n      $uid      = $this->db->cfn($this->getHistoryUidsColumnName('bbn_uid'), $this->getHistoryUidsTableName(), true);\n      $active   = $this->db->cfn($this->getHistoryUidsColumnName('bbn_active'), $this->getHistoryUidsTableName(), true);\n      $id_tab   = $this->db->cfn($this->getHistoryUidsColumnName('bbn_table'), $this->getHistoryUidsTableName(), true);\n      $line     = $this->db->escape($this->getHistoryTableColumnName('uid'));\n      $chrono   = $this->db->escape($this->getHistoryTableColumnName('tst'));\n      $sql      = <<< MYSQL\nSELECT DISTINCT($line)\nFROM $tab_uids\n  JOIN $tab\n    ON $uid = $line\nWHERE $id_tab = ? \nAND $active = 1\nORDER BY $chrono\nLIMIT $start, $limit\nMYSQL;\n      $r        = $this->db->getColArray($sql, hex2bin($id_table));\n    }\n\n    return $r;\n  }",
            "startLine": 456,
            "endLine": 481,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 20,
                    "default_name": ""
                }
            ]
        },
        "getNextUpdate": {
            "name": "getNextUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, $from_when, $column = NULL)\n  {\n    \/** @todo To be redo totally with all the fields' IDs instead of the history column *\/\n    if (Str::checkName($table)\n      && ($date = $this->validDate($from_when))\n      && ($id_table = $this->database_obj->tableId($table))\n    ) {\n      $this->disable();\n      $tab      = $this->db->escape($this->getHistoryTableName());\n      $tab_uids = $this->db->escape($this->getHistoryUidsTableName());\n      $uid      = $this->db->cfn($this->getHistoryUidsColumnName('bbn_uid'), $this->getHistoryUidsTableName());\n      $id_tab   = $this->db->cfn($this->getHistoryUidsColumnName('bbn_table'),$this->getHistoryUidsTableName());\n      $id_col   = $this->db->cfn($this->getHistoryTableColumnName('col'), $this->getHistoryTableName());\n      $line     = $this->db->cfn($this->getHistoryTableColumnName('uid'), $this->getHistoryTableName());\n      $usr      = $this->db->cfn($this->getHistoryTableColumnName('usr'), $this->getHistoryTableName());\n      $chrono   = $this->db->cfn($this->getHistoryTableColumnName('tst'), $this->getHistoryTableName());\n      $where    = [\n        $uid => $id,\n        $id_tab => $id_table,\n        [$chrono, '>', $date]\n      ];\n      if ($column) {\n        $where[$id_col] = Str::isUid($column) ? $column : $this->database_obj->columnId($column, $id_table);\n      }\n      else {\n        $w = $this->_get_table_where($table);\n        \/\/$where = $id_col.\" != UNHEX('$id_column') \" . ($w ?: '');\n      }\n\n      $res = $this->db->rselect(\n        [\n          'tables' => [$tab_uids],\n          'fields' => [\n            $line,\n            $id_col,\n            $chrono,\n            'val' => 'IFNULL('.$this->getHistoryTableColumnName('val').', '.$this->getHistoryTableColumnName('ref').')',\n            $usr\n          ],\n          'join' => [[\n            'table' => $tab,\n            'on' => [\n              'logic' => 'AND',\n              'conditions' => [[\n                'field' => $uid,\n                'operator' => '=',\n                'exp' => $line\n              ]]\n            ]]],\n          'where' => $where,\n          'order' => [$chrono => 'ASC']\n        ]\n      );\n      $this->enable();\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 492,
            "endLine": 550,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getPrevUpdate": {
            "name": "getPrevUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, $from_when, $column = NULL)\n  {\n    if (Str::checkName($table) && $date = $this->validDate($from_when)) {\n      $tab       = $this->db->escape($this->getHistoryTableName());\n      $line      = $this->db->escape($this->getHistoryTableColumnName('uid'));\n      $operation = $this->db->escape($this->getHistoryTableColumnName('opr'));\n      $chrono    = $this->db->escape($this->getHistoryTableColumnName('tst'));\n      if ($column) {\n        $where = $this->db->escape($this->getHistoryTableColumnName('col')).\n          ' = UNHEX(\"'.$this->db->escapeValue(\n            Str::isUid($column) ? $column : $this->database_obj->columnId($column, $table)\n          ).'\")';\n      }\n      else{\n        $where = $this->_get_table_where($table);\n      }\n\n      $sql = <<< MYSQL\nSELECT *\nFROM $tab\nWHERE $line = ?\nAND ($where)\nAND $operation LIKE 'UPDATE'\nAND $chrono < ?\nORDER BY $chrono DESC\nLIMIT 1\nMYSQL;\n      return $this->db->getRow($sql, hex2bin($id), $date);\n    }\n\n    return null;\n  }",
            "startLine": 560,
            "endLine": 591,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getNextValue": {
            "name": "getNextValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, $from_when, $column)\n  {\n    if ($r = $this->getNextUpdate($table, $id, $from_when, $column)) {\n      return $r[$this->getHistoryTableColumnName('ref')] ?: $r[$this->getHistoryTableColumnName('val')];\n    }\n\n    return false;\n  }",
            "startLine": 601,
            "endLine": 608,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPrevValue": {
            "name": "getPrevValue",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, $from_when, $column)\n  {\n    if ($r = $this->getPrevUpdate($table, $id, $from_when, $column)) {\n      return $r[$this->getHistoryTableColumnName('ref')] ?: $r[$this->getHistoryTableColumnName('val')];\n    }\n\n    return false;\n  }",
            "startLine": 618,
            "endLine": 625,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "from_when",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRowBack": {
            "name": "getRowBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, $when, array $columns = [])\n  {\n    if (!($when = $this->validDate($when))) {\n      $this->_report_error(\"The date $when is incorrect\", __CLASS__, __LINE__);\n    }\n    elseif (($model = $this->database_obj->modelize($table)) && ($cfg = $this->getTableCfg($table))) {\n      \/\/ Time is after last modification: the current is given\n      $this->disable();\n      if ($when >= time()) {\n        $r = $this->db->rselect(\n          $table, $columns, [\n            $cfg['primary'] => $id\n          ]\n        ) ?: null;\n      }\n      \/\/ Time is before creation: null is given\n      elseif ($when < $this->getCreationDate($table, $id)) {\n        $r = null;\n      }\n      else {\n        \/\/ No columns = All columns\n        if (\\count($columns) === 0) {\n          $columns = array_keys($model['fields']);\n        }\n\n        $r = [];\n        \/\/die(var_dump($columns, $model['fields']));\n        foreach ($columns as $col){\n          $tmp = null;\n          if (isset($model['fields'][$col]['id_option'])) {\n            if ($tmp = $this->db->rselect(\n              $this->getHistoryTableName(),\n              [\n                $this->getHistoryTableColumnName('val'),\n                $this->getHistoryTableColumnName('ref')\n              ]\n              , [\n                $this->getHistoryTableColumnName('uid') => $id,\n                $this->getHistoryTableColumnName('col') => $model['fields'][$col]['id_option'],\n                $this->getHistoryTableColumnName('opr') => 'UPDATE',\n                [$this->getHistoryTableColumnName('tst'), '>', $when]\n              ]\n            )\n            ) {\n              $r[$col] = $tmp[$this->getHistoryTableColumnName('ref')] ?: $tmp[$this->getHistoryTableColumnName('val')];\n            }\n          }\n\n          if (!$tmp) {\n            $r[$col] = $this->db->selectOne(\n              $table, $col, [\n                $cfg['primary'] => $id\n              ]\n            );\n          }\n        }\n      }\n\n      $this->enable();\n      return $r;\n    }\n\n    return null;\n  }",
            "startLine": 635,
            "endLine": 698,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "when",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "columns",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getValBack": {
            "name": "getValBack",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, $when, $column)\n  {\n    if ($row = $this->getRowBack($table, $id, $when, [$column])) {\n      return $row[$column] ?? false;\n    }\n\n    return false;\n  }",
            "startLine": 708,
            "endLine": 715,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "when",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 3,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCreationDate": {
            "name": "getCreationDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id)\n  {\n    if ($res = $this->getCreation($table, $id)) {\n      return $res['date'] ?? null;\n    }\n\n    return null;\n  }",
            "startLine": 723,
            "endLine": 730,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "float",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCreation": {
            "name": "getCreation",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id)\n  {\n    if (($cfg = $this->getTableCfg($table)) && ($id_col = $this->getIdColumn($cfg['primary'], $table))) {\n      $this->disable();\n      if ($r = $this->db->rselect(\n        $this->getHistoryTableName(),\n        [\n          'date' => $this->getHistoryTableColumnName('tst'),\n          'user' => $this->getHistoryTableColumnName('usr')\n        ], [\n        $this->getHistoryTableColumnName('uid') => $id,\n        $this->getHistoryTableColumnName('col') => $id_col,\n        $this->getHistoryTableColumnName('opr') => 'INSERT'\n      ], [\n          $this->getHistoryTableColumnName('tst') => 'DESC'\n        ]\n      )\n      ) {\n        $this->enable();\n        return $r;\n      }\n\n      $this->enable();\n    }\n\n    return null;\n  }",
            "startLine": 738,
            "endLine": 764,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLastDate": {
            "name": "getLastDate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, $column = NULL)\n  {\n    if ($column && ($id_col = $this->getIdColumn($column, $table))) {\n      return $this->db->selectOne(\n        $this->getHistoryTableName(), $this->getHistoryTableColumnName('tst'), [\n        $this->getHistoryTableColumnName('uid') => $id,\n        $this->getHistoryTableColumnName('col') => $id_col\n      ], [\n          $this->getHistoryTableColumnName('tst') => 'DESC'\n        ]\n      );\n    }\n    elseif (!$column && ($where = $this->_get_table_where($table))) {\n      $tab    = $this->db->escape($this->getHistoryTableName());\n      $chrono = $this->db->escape($this->getHistoryTableColumnName('tst'));\n      $line   = $this->db->escape($this->getHistoryTableColumnName('uid'));\n      $sql    = <<< MYSQL\nSELECT $chrono\nFROM $tab\nWHERE $line = ?\nAND ($where)\nORDER BY $chrono DESC\nMYSQL;\n      return $this->db->getOne($sql, hex2bin($id));\n    }\n\n    return null;\n  }",
            "startLine": 773,
            "endLine": 800,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "float",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getHistory": {
            "name": "getHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, string $col = '')\n  {\n    if ($this->check() && ($modelize = $this->getTableCfg($table))) {\n      $pat    = [\n        'ins' => 'INSERT',\n        'upd' => 'UPDATE',\n        'res' => 'RESTORE',\n        'del' => 'DELETE'\n      ];\n      $r      = [];\n      $fields = [\n        'date' => $this->getHistoryTableColumnName('tst'),\n        'user' => $this->getHistoryTableColumnName('usr'),\n        $this->getHistoryTableColumnName('col')\n      ];\n      $where  = [\n        $this->getHistoryTableColumnName('uid') => $id\n      ];\n\n      if (!empty($col)) {\n        if (!Str::isUid($col)) {\n          $fields[] = $modelize['fields'][$col]['type'] === 'binary' ? $this->getHistoryTableColumnName('ref') : $this->getHistoryTableColumnName('val');\n\n          $col = $this->database_obj->columnId($col, $table);\n        }\n        else {\n          $idx = X::find($modelize['fields'], ['id_option' => strtolower($col)]);\n          if (null === $idx) {\n            throw new \\Error(X::_(\"Impossible to find the option $col\"));\n          }\n\n          $fields[] = $modelize['fields'][$idx]['type'] === 'binary' ? $this->getHistoryTableColumnName('ref') : $this->getHistoryTableColumnName('val');\n        }\n\n        $where[$this->getHistoryTableColumnName('col')] = $col;\n      }\n      else {\n        $fields[] = $this->getHistoryTableColumnName('val');\n        $fields[] = $this->getHistoryTableColumnName('ref');\n      }\n\n      foreach ($pat as $k => $p){\n        $where[$this->getHistoryTableColumnName('opr')] = $p;\n        if ($q = $this->db->rselectAll(\n          [\n            'table' => $this->getHistoryTableName(),\n            'fields' => $fields,\n            'where' => [\n              'conditions' => $where\n            ],\n            'order' => [[\n              'field' => $this->getHistoryTableColumnName('tst'),\n              'dir' => 'desc'\n            ]]\n          ]\n        )\n        ) {\n          $r[$k] = $q;\n        }\n      }\n\n      return $r;\n    }\n\n    return [];\n  }",
            "startLine": 809,
            "endLine": 874,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "col",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFullHistory": {
            "name": "getFullHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id)\n  {\n    $r = [];\n    if ($where = $this->_get_table_where($table)) {\n      $tab    = $this->db->escape($this->getHistoryTableName());\n      $line   = $this->db->escape($this->getHistoryTableColumnName('uid'));\n      $chrono = $this->db->escape($this->getHistoryTableColumnName('tst'));\n      $sql    = <<< MYSQL\nSELECT *\nFROM $tab\nWHERE $line = ?\nAND ($where)\nORDER BY $chrono ASC\nMYSQL;\n      $r      = $this->db->getRows($sql, hex2bin($id));\n    }\n\n    return $r;\n  }",
            "startLine": 882,
            "endLine": 900,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getColumnHistory": {
            "name": "getColumnHistory",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $id, string $column)\n  {\n    if ($this->check()\n      && ($primary = $this->db->getPrimary($table))\n      && ($modelize = $this->getTableCfg($table))\n    ) {\n      if (Str::isUid($column)) {\n        $column = X::find($modelize['fields'], ['id_option' => strtolower($column)]);\n      }\n\n      if (null === $column || !isset($modelize['fields'][$column])) {\n        throw new \\Error(X::_(\"Impossible to find the option $column\"));\n      }\n\n      $current = $this->db->selectOne(\n        $table, $column, [\n          $primary[0] => $id\n        ]\n      );\n      $val = $modelize['fields'][$column] === 'binary' ? $this->getHistoryTableColumnName('ref') : $this->getHistoryTableColumnName('val');\n\n      $hist = $this->getHistory($table, $id, $column);\n      $r    = [];\n      if ($crea = $this->getCreation($table, $id)) {\n        if (!empty($hist['upd'])) {\n          $hist['upd'] = array_reverse($hist['upd']);\n          foreach ($hist['upd'] as $i => $h){\n            if ($i === 0) {\n              $r[] = [\n                'date' => $crea['date'],\n                $val => $h[$val],\n                'user' => $crea['user']\n              ];\n            }\n            else{\n              $r[] = [\n                'date' => $hist['upd'][$i - 1]['date'],\n                $val => $h[$val],\n                'user' => $hist['upd'][$i - 1]['user']\n              ];\n            }\n          }\n\n          $r[] = [\n            'date' => $hist['upd'][$i]['date'],\n            $val => $current,\n            'user' => $hist['upd'][$i]['user']\n          ];\n        }\n        elseif (!empty($hist['ins'])) {\n          $r[0] = [\n            'date' => $hist['ins'][0]['date'],\n            $val => $current,\n            'user' => $hist['ins'][0]['user']\n          ];\n        }\n      }\n\n      return $r;\n    }\n\n    return [];\n  }",
            "startLine": 909,
            "endLine": 971,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTableCfg": {
            "name": "getTableCfg",
            "summary": "Gets all information about a given table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $force = false)\n  {\n    \/\/ Check history is enabled and table's name correct\n    if (($table = $this->db->tfn($table))) {\n      if ($force || !isset($this->structures[$table])) {\n        if ($model = $this->database_obj->modelize($table)) {\n          $this->structures[$table] = [\n            'history' => false,\n            'primary' => false,\n            'primary_type' => null,\n            'primary_length' => 0,\n            'auto_increment' => false,\n            'id' => null,\n            'fields' => []\n          ];\n          if ($this->isLinked($table)\n            && isset($model['keys']['PRIMARY'])\n            && (\\count($model['keys']['PRIMARY']['columns']) === 1)\n            && ($primary = $model['keys']['PRIMARY']['columns'][0])\n            && !empty($model['fields'][$primary])\n          ) {\n            \/\/ Looking for the config of the table\n            $this->structures[$table]['history']        = 1;\n            $this->structures[$table]['primary']        = $primary;\n            $this->structures[$table]['primary_type']   = $model['fields'][$primary]['type'];\n            $this->structures[$table]['primary_length'] = $model['fields'][$primary]['maxlength'];\n            $this->structures[$table]['auto_increment'] = isset($model['fields'][$primary]['extra']) && ($model['fields'][$primary]['extra'] === 'auto_increment');\n            $this->structures[$table]['id']             = $this->database_obj->tableId($this->db->tsn($table), $this->db->getCurrent());\n            $this->structures[$table]['fields']         = array_filter(\n              $model['fields'], function ($a) {\n              return isset($a['id_option']);\n            }\n            );\n          }\n        }\n      }\n\n      \/\/ The table exists and has history\n      if (isset($this->structures[$table]) && !empty($this->structures[$table]['history'])) {\n        return $this->structures[$table];\n      }\n    }\n\n    return null;\n  }",
            "startLine": 980,
            "endLine": 1024,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getDbCfg": {
            "name": "getDbCfg",
            "summary": "Returns information about all tables in the given database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db = NULL, bool $force = false)\n  {\n    $res    = [];\n    $tables = $this->db->getTables($db);\n    if ($tables && count($tables)) {\n      foreach ($tables as $t) {\n        if ($tmp = $this->getTableCfg($t, $force)) {\n          $res[$t] = $tmp;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1034,
            "endLine": 1047,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "isLinked": {
            "name": "isLinked",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    return ($ftable = $this->db->tfn($table)) && isset($this->links[$ftable]);\n  }",
            "startLine": 1054,
            "endLine": 1057,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLinks": {
            "name": "getLinks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->links;\n  }",
            "startLine": 1063,
            "endLine": 1066,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "trigger": {
            "name": "trigger",
            "summary": "The function used by the db trigger",
            "description": "This will basically execute the history query if it's configured for.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>This will basically execute the history query if it's configured for.<\/p>"
                }
            ],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    if (!$this->isEnabled()) {\n      return $cfg;\n    }\n\n    $tables = $cfg['tables'] ?? (array)$cfg['table'];\n    \/\/ Will return false if disabled, the table doesn't exist, or doesn't have history\n    if (($cfg['kind'] === 'SELECT')\n      && ($cfg['moment'] === 'before')\n      && !empty($cfg['tables'])\n      && !in_array($this->db->tfn($this->getHistoryTableName()), $cfg['tables_full'], true)\n      && !in_array($this->db->tfn($this->getHistoryUidsTableName()), $cfg['tables_full'], true)\n    ) {\n      $change = 0;\n      if (!isset($cfg['history'])) {\n        $cfg['history'] = [];\n        $new_join       = [];\n        foreach ($cfg['join'] as $i => $t){\n          $post_join = false;\n          $model     = $this->db->modelize($t['table']);\n          if (isset($model['keys']['PRIMARY'])\n            && ($model['keys']['PRIMARY']['ref_table'] === $this->db->csn($this->getHistoryUidsTableName()))\n          ) {\n            $change++;\n            if ($t['type'] !== 'left') {\n              $post_join = [\n                'table' => $this->db->tsn($this->getHistoryUidsTableName()),\n                'alias' => $this->db->tsn($this->getHistoryUidsTableName()).$change,\n                'type' => $t['type'] ?? 'right',\n                'on' => [\n                  'conditions' => [\n                    [\n                      'field' => $this->db->cfn(\n                        $this->getHistoryUidsColumnName('bbn_uid'),\n                        $this->getHistoryUidsTableName().$change\n                      ),\n                      'operator' => 'eq',\n                      'exp' => $this->db->cfn(\n                        $model['keys']['PRIMARY']['columns'][0],\n                        !empty($t['alias']) ? $t['alias'] : $t['table'],\n                        true\n                      )\n                    ], [\n                      'field' => $this->db->cfn(\n                        $this->getHistoryUidsColumnName('bbn_active'),\n                        $this->getHistoryUidsTableName().$change\n                      ),\n                      'operator' => '=',\n                      'exp' => '1'\n                    ]\n                  ],\n                  'logic' => 'AND'\n                ]\n              ];\n            }\n            else{\n              $join_alias                     = $t;\n              $alias                          = strtolower(Str::genpwd());\n              $join_alias['alias']            = $alias;\n              $join_alias['on']['conditions'] = $this->db->replaceTableInConditions($join_alias['on']['conditions'], !empty($t['alias']) ? $t['alias'] : $t['table'], $alias);\n              $new_join[]                     = $join_alias;\n              $t['on']                        = [\n                'conditions' => [\n                  [\n                    'field' => $this->db->cfn(\n                      $this->getHistoryUidsColumnName('bbn_uid'),\n                      $this->getHistoryUidsTableName().$change\n                    ),\n                    'operator' => 'eq',\n                    'exp' => $this->db->cfn($model['keys']['PRIMARY']['columns'][0], !empty($t['alias']) ? $t['alias'] : $t['table'], true)\n                  ], [\n                    'field' => $this->db->cfn(\n                      $this->getHistoryUidsColumnName('bbn_active'),\n                      $this->getHistoryUidsTableName().$change\n                    ),\n                    'operator' => '=',\n                    'exp' => '1'\n                  ]\n                ],\n                'logic' => 'AND'\n              ];\n              $new_join[]                     = [\n                'table' => $this->db->tsn($this->getHistoryUidsTableName()),\n                'alias' => $this->db->tsn($this->getHistoryUidsTableName()).$change,\n                'type' => 'left',\n                'on' => [\n                  'conditions' => [\n                    [\n                      'field' => $this->db->cfn(\n                        $this->getHistoryUidsColumnName('bbn_uid'),\n                        $this->getHistoryUidsTableName().$change\n                      ),\n                      'operator' => 'eq',\n                      'exp' => $this->db->cfn($model['keys']['PRIMARY']['columns'][0], $alias, true)\n                    ]\n                  ],\n                  'logic' => 'AND'\n                ]\n              ];\n            }\n          }\n\n          $new_join[] = $t;\n          if ($post_join) {\n            $new_join[] = $post_join;\n          }\n        }\n\n        foreach ($cfg['tables'] as $alias => $table){\n          $model = $this->db->modelize($table);\n          if (isset($model['keys']['PRIMARY']['ref_table'])\n            && ($this->db->tfn($model['keys']['PRIMARY']['ref_db'].'.'.$model['keys']['PRIMARY']['ref_table']) === $this->getHistoryUidsTableName())\n          ) {\n            $change++;\n            $new_join[] = [\n              'table' => $this->getHistoryUidsTableName(),\n              'alias' => $this->db->tsn($this->getHistoryUidsTableName()).$change,\n              'on' => [\n                'conditions' => [\n                  [\n                    'field' => $this->db->cfn(\n                      $this->getHistoryUidsTableName().$change.'.'.$this->getHistoryUidsColumnName('bbn_uid')\n                    ),\n                    'operator' => 'eq',\n                    'exp' => $this->db->cfn($model['keys']['PRIMARY']['columns'][0], \\is_string($alias) ? $alias : $table, true)\n                  ], [\n                    'field' => $this->db->cfn(\n                      $this->getHistoryUidsTableName().$change.'.'.$this->getHistoryUidsColumnName('bbn_active')\n                    ),\n                    'operator' => '=',\n                    'exp' => '1'\n                  ]\n                ],\n                'logic' => 'AND'\n              ]\n            ];\n          }\n        }\n\n        if ($change) {\n          $cfg['join']  = $new_join;\n          $cfg['where'] = $cfg['filters'];\n          $cfg          = $this->db->reprocessCfg($cfg);\n        }\n      }\n    }\n\n    if (isset($cfg['write'])\n      && ($table = $this->db->tfn(current($tables)))\n      && ($s = $this->getTableCfg($table))\n    ) {\n      \/\/ This happens before the query is executed\n      if ($cfg['moment'] === 'before') {\n        $primary_where   = false;\n        $primary_defined = false;\n        $primary_value   = false;\n        $idx1            = X::find($cfg['values_desc'], ['primary' => true]);\n        if ($idx1 !== null) {\n          $primary_where = $cfg['values'][$idx1];\n        }\n\n        $idx = array_search($s['primary'], $cfg['fields'], true);\n        if (($idx !== false) && isset($cfg['values'][$idx])) {\n          $primary_defined = $cfg['generate_id'] ? false : true;\n          $primary_value   = $cfg['values'][$idx];\n        }\n\n        switch ($cfg['kind']){\n          case 'INSERT':\n            \/\/ If the primary is specified and already exists in a row in deleted state\n            \/\/ (if it exists in active state, DB will return its standard error but it's not this class' problem)\n            if (!$primary_defined) {\n              \/\/ Checks if there is a unique value (non based on UID)\n              $modelize = $this->db->modelize($table);\n              $keys     = $modelize['keys'];\n              unset($keys['PRIMARY']);\n              foreach ($keys as $key){\n                if (!empty($key['unique']) && !empty($key['columns'])) {\n                  $fields = [];\n                  $exit   = false;\n                  foreach ($key['columns'] as $col){\n                    $col_idx = array_search($col, $cfg['fields'], true);\n                    if (($col_idx === false) || \\is_null($cfg['values'][$col_idx])) {\n                      $exit = true;\n                      break;\n                    }\n                    else {\n                      $fields[] = [\n                        'field' => $col,\n                        'operator' => 'eq',\n                        'value' => $cfg['values'][$col_idx]\n                      ];\n                    }\n                  }\n\n                  if ($exit) {\n                    continue;\n                  }\n\n                  $this->disable();\n                  if ($tmp = $this->db->selectOne(\n                    [\n                      'tables' => [$table],\n                      'fields' => [$s['primary']],\n                      'join' => [[\n                        'table' => $this->getHistoryUidsTableName(),\n                        'on' => [[\n                          'field' => $this->db->cfn(\n                            $this->getHistoryUidsColumnName('bbn_uid'),\n                            $this->getHistoryUidsTableName()\n                          ),\n                          'operator' => 'eq',\n                          'exp' => $this->db->cfn($s['primary'], $table, true)\n                        ]]\n                      ]],\n                      'where' => [\n                        'conditions' => $fields,\n                        'logic' => 'AND'\n                      ]\n                    ]\n                  )\n                  ) {\n                    $primary_value   = $tmp;\n                    $primary_defined = true;\n                    $this->enable();\n                    break;\n                  }\n\n                  $this->enable();\n                }\n              }\n            }\n\n            if ($primary_defined\n              && ($this->db->selectOne(\n                  $this->getHistoryUidsTableName(),\n                  $this->getColumn(),\n                  [$this->getHistoryUidsColumnName('bbn_uid') => $primary_value]\n                ) === 0)\n\n              && ($all = $this->db->rselect(\n                [\n                  'table' => $table,\n                  'fields' => $cfg['fields'],\n                  'join' => [[\n                    'table' => $this->getHistoryUidsTableName(),\n                    'on' => [\n                      'conditions' => [[\n                        'field' => $s['primary'],\n                        'exp' => 'bbn_uid'\n                      ], [\n                        'field' => $this->getColumn(),\n                        'value' => 0\n                      ]]\n                    ]\n                  ]],\n                  'where' => [\n                    'conditions' => [[\n                      'field' => $s['primary'],\n                      'value' => $primary_value\n                    ]]\n                  ]\n                ]\n              ))\n            ) {\n              \/\/ We won't execute the after trigger\n              $cfg['trig'] = false;\n              \/\/ Real query's execution will be prevented\n              $cfg['run']   = false;\n              $cfg['value'] = 0;\n              \/** @var array $update The values to be updated *\/\n              $update = [];\n              \/\/ We update each element which needs to (the new ones different from the old, and the old ones different from the default)\n              foreach ($all as $k => $v){\n                if ($k !== $s['primary']) {\n                  $idx = array_search($k, $cfg['fields'], true);\n                  if ($idx !== false) {\n                    if ($v !== $cfg['values'][$idx]) {\n                      $update[$k] = $cfg['values'][$idx];\n                    }\n                  }\n                  elseif ($v !== $s['fields'][$k]['default']) {\n                    $update[$k] = $s['fields'][$k]['default'];\n                  }\n                }\n              }\n\n              $this->disable();\n              if ($cfg['value'] = $this->db->update(\n                $this->getHistoryUidsTableName(), [$this->getHistoryUidsColumnName('bbn_active') => 1], [\n                  [$this->getHistoryUidsColumnName('bbn_uid'), '=', $primary_value]\n                ]\n              )\n              ) {\n                \/\/ Without this the record won't be write in bbn_history. Added by Mirko\n                $cfg['trig'] = true;\n                \/\/ --------\n                if (\\count($update) > 0) {\n                  $this->enable();\n                  $this->db->update(\n                    $table, $update, [\n                      $s['primary'] => $primary_value\n                    ]\n                  );\n                }\n\n                $cfg['history'][] = [\n                  'operation' => 'RESTORE',\n                  'column' => $s['fields'][$s['primary']]['id_option'],\n                  'line' => $primary_value,\n                  'chrono' => microtime(true)\n                ];\n              }\n\n              $this->enable();\n            }\n            else {\n              $this->disable();\n              if ($primary_defined && !$this->db->count($table, [$s['primary'] => $primary_value])) {\n                $primary_defined = false;\n              }\n\n              if (!$primary_defined && $this->db->insert(\n                  $this->getHistoryUidsTableName(), [\n                    $this->getHistoryUidsColumnName('bbn_uid') => $primary_value,\n                    $this->getHistoryUidsColumnName('bbn_table') => $s['id']\n                  ]\n                )\n              ) {\n                $cfg['history'][] = [\n                  'operation' => 'INSERT',\n                  'column' => isset($s['fields'][$s['primary']]) ? $s['fields'][$s['primary']]['id_option'] : null,\n                  'line' => $primary_value,\n                  'chrono' => microtime(true)\n                ];\n                $this->db->setLastInsertId($primary_value);\n              }\n\n              $this->enable();\n            }\n            break;\n          case 'UPDATE':\n            \/\/ ********** CHANGED BY MIRKO *************\n            if ($primary_where\n              && ($row = $this->db->rselect($table, $cfg['fields'], [$s['primary'] => $primary_where]))\n            ) {\n              $time = microtime(true);\n              foreach ($cfg['fields'] as $i => $idx){\n                $csn = $this->db->csn($idx);\n                if (array_key_exists($csn, $s['fields'])\n                  && ($row[$csn] !== $cfg['values'][$i])\n                ) {\n                  $cfg['history'][] = [\n                    'operation' => 'UPDATE',\n                    'column' => $s['fields'][$csn]['id_option'],\n                    'line' => $primary_where,\n                    'old' => $row[$csn],\n                    'chrono' => $time\n                  ];\n                }\n              }\n            }\n            \/\/ Case where the primary is not defined, we'll update each primary instead\n            elseif ($ids = $this->db->getColumnValues($table, $s['primary'], $cfg['filters'])) {\n              \/\/ We won't execute the after trigger\n              $cfg['trig'] = false;\n              \/\/ Real query's execution will be prevented\n              $cfg['run']   = false;\n              $cfg['value'] = 0;\n\n              $tmp = [];\n              foreach ($cfg['fields'] as $i => $f){\n                $tmp[$f] = $cfg['values'][$i];\n              }\n\n              foreach ($ids as $id){\n                $cfg['value'] += $this->db->update($table, $tmp, [$s['primary'] => $id]);\n              }\n\n              \/\/ ****************************************\n            }\n            break;\n\n          \/\/ Nothing is really deleted, the hcol is just set to 0\n          case 'DELETE':\n            \/\/ We won't execute the after trigger\n            $cfg['trig'] = false;\n            \/\/ Real query's execution will be prevented\n            $cfg['run']   = false;\n            $cfg['value'] = 0;\n            \/\/ Case where the primary is not defined, we'll delete based on each primary instead\n            if (!$primary_where) {\n              $ids = $this->db->getColumnValues($table, $s['primary'], $cfg['filters']);\n              foreach ($ids as $id){\n                $cfg['value'] += $this->db->delete($table, [$s['primary'] => $id]);\n              }\n            }\n            else {\n              $this->disable();\n              $cfg['value'] = $this->db->update(\n                $this->getHistoryUidsTableName(), [\n                $this->getHistoryUidsColumnName('bbn_active') => 0\n              ], [\n                  $this->getHistoryUidsColumnName('bbn_uid') => $primary_where\n                ]\n              );\n              \/\/var_dump(\"HIST\", $primary_where);\n              $this->enable();\n              if ($cfg['value']) {\n                $cfg['trig'] = 1;\n                \/\/ And we insert into the history table\n                $cfg['history'][] = [\n                  'operation' => 'DELETE',\n                  'column' => $s['fields'][$s['primary']]['id_option'],\n                  'line' => $primary_where,\n                  'old' => null,\n                  'chrono' => microtime(true)\n                ];\n              }\n            }\n            break;\n        }\n      }\n      elseif (($cfg['moment'] === 'after')\n        && isset($cfg['history'])\n      ) {\n        foreach ($cfg['history'] as $h){\n          $this->_insert($h);\n        }\n\n        unset($cfg['history']);\n      }\n    }\n\n    return $cfg;\n  }",
            "startLine": 1082,
            "endLine": 1518,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getHash": {
            "name": "getHash",
            "summary": "Returns the hash of the object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->hash;\n  }",
            "startLine": 1611,
            "endLine": 1614,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getInstanceFromHash": {
            "name": "getInstanceFromHash",
            "summary": "Returns an instance of registered history by it's hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $hash)\n  {\n    if (isset(self::$instances[$hash]) && self::$instances[$hash] instanceof History) {\n      return self::$instances[$hash];\n    }\n\n    return null;\n  }",
            "startLine": 1623,
            "endLine": 1630,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bbn\\Db\\History",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $res = $this->db->count(\n      $this->class_table, [\n      $this->class_cfg['arch'][$this->class_table_index]['id'] => $id\n      ]\n    );\n    return (bool)$res;\n  }",
            "startLine": 35,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 55,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->fields;\n  }",
            "startLine": 66,
            "endLine": 69,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $data)\n  {\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if ($this->db->insert($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 79,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id, array $data, bool $addCfg = false)\n  {\n    if (!$this->exists($id)) {\n      throw new \\Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($addCfg) {\n      $data = array_merge($this->select($id), $data);\n    }\n\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return (bool)$this->db->update($ccfg['table'], $data, [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 119,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "addCfg",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $id)\n  {\n    if ($this->exists($id)) {\n      $f = $this->class_cfg['arch'][$this->class_table_index];\n      if ($arr = $this->db->rselect(\n        $this->class_table, array_values($f), [\n          $f['id'] => $id\n        ]\n      )) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n\n        return $arr;\n      }\n    }\n\n    return null;\n\n  }",
            "startLine": 146,
            "endLine": 167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\History",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cond)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if ($arrs = $this->db->rselectAll($this->class_table, array_values($f), $cond)) {\n      foreach ($arrs as &$arr) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n      }\n      unset($arr);\n\n      return $arrs;\n    }\n\n    return [];\n  }",
            "startLine": 177,
            "endLine": 198,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cond",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "default_class_cfg": {
            "table": "bbn_history",
            "tables": {
                "history": "bbn_history",
                "history_uids": "bbn_history_uids"
            },
            "arch": {
                "history": {
                    "opr": "opr",
                    "uid": "uid",
                    "col": "col",
                    "val": "val",
                    "ref": "ref",
                    "tst": "tst",
                    "usr": "usr",
                    "dt": "dt"
                },
                "history_uids": {
                    "bbn_uid": "bbn_uid",
                    "bbn_table": "bbn_table",
                    "bbn_active": "bbn_active"
                }
            },
            "conditions": []
        },
        "instances": [],
        "_error": null,
        "_last_error": null,
        "_debug": null
    },
    "constants": null,
    "numMethods": 43,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 5,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Report",
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "table": "bbn_history",
            "tables": {
                "history": "bbn_history",
                "history_uids": "bbn_history_uids"
            },
            "arch": {
                "history": {
                    "opr": "opr",
                    "uid": "uid",
                    "col": "col",
                    "val": "val",
                    "ref": "ref",
                    "tst": "tst",
                    "usr": "usr",
                    "dt": "dt"
                },
                "history_uids": {
                    "bbn_uid": "bbn_uid",
                    "bbn_table": "bbn_table",
                    "bbn_active": "bbn_active"
                }
            },
            "conditions": []
        },
        "instances": [],
        "_error": null,
        "_last_error": null,
        "_debug": null,
        "database_obj": null,
        "admin_db": "",
        "enabled": true,
        "enabled_count": 0,
        "disabled_count": 0,
        "date": null,
        "structures": [],
        "class_cfg": null,
        "_is_init_class_cfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Db",
    "shortName": "History",
    "summary": "",
    "description": "",
    "description_parts": []
}