{
    "doc": {
        "description": "DB Interface\n\n\nThese methods have to be implemented on both database and query.\nMost methods usable on query should be also usable directly through database, which will create the query apply its method.\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Database",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.2r89"
        }
    },
    "name": "bbn\\Db\\Engines",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
    "startLine": 23,
    "endLine": 604,
    "contentConstructor": null,
    "methods": {
        "postCreation": {
            "name": "postCreation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows text-indexed\n   *\n   * @param string $db\n   * @return mixed\n   *\/\n  public function change(string $db);\n\n\n  \/**\n   * Returns a database item expression escaped like database, table, column, key names\n   *\n   * @param string $item The item's name (escaped or not)\n   * @return string | false\n   *\/\n  public function escape(string $item): string;\n\n\n  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableFullName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, ?string $table = null, bool $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 39,
            "endLine": 39,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "change": {
            "name": "change",
            "summary": "Fetches the database and returns an array of several arrays of rows text-indexed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db)\n  {\n\n  \/**\n   * Returns a database item expression escaped like database, table, column, key names\n   *\n   * @param string $item The item's name (escaped or not)\n   * @return string | false\n   *\/\n  public function escape(string $item): string;\n\n\n  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableFullName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, ?string $table = null, bool $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 48,
            "endLine": 48,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Returns a database item expression escaped like database, table, column, key names",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item)\n  {\n\n  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableFullName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, ?string $table = null, bool $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 57,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item's name (escaped or not)"
                }
            ]
        },
        "tableFullName": {
            "name": "tableFullName",
            "summary": "Returns a table's full name i.e. database.table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $escaped = false)\n  {\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, ?string $table = null, bool $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 67,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "tableSimpleName": {
            "name": "tableSimpleName",
            "summary": "Returns a table's simple name i.e. table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $escaped = false)\n  {\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, ?string $table = null, bool $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 77,
            "endLine": 77,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "colFullName": {
            "name": "colFullName",
            "summary": "Returns a column's full name i.e. table.column",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, string $table = NULL, bool $escaped = false)\n  {\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 88,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "colSimpleName": {
            "name": "colSimpleName",
            "summary": "Returns a column's simple name i.e. column",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, bool $escaped = false)\n  {\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 98,
            "endLine": 98,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "isTableFullName": {
            "name": "isTableFullName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 105,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isColFullName": {
            "name": "isColFullName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col)\n  {\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 112,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "disableKeys": {
            "name": "disableKeys",
            "summary": "Disables foreign keys check.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 119,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "enableKeys": {
            "name": "enableKeys",
            "summary": "Enables foreign keys check.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 126,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getDatabases": {
            "name": "getDatabases",
            "summary": "Return databases' names as an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 134,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getTables": {
            "name": "getTables",
            "summary": "Return tables' names of a database as an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database = '')\n  {\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 143,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getColumns": {
            "name": "getColumns",
            "summary": "Return columns' structure of a table as an array indexed with the fields names.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 152,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRows": {
            "name": "getRows",
            "summary": "Return an array that includes indexed arrays for every row resultant from the query.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 160,
            "endLine": 160,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getRow": {
            "name": "getRow",
            "summary": "Return the first row resulting from the query as an array indexed with the fields' name.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 168,
            "endLine": 168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getIrow": {
            "name": "getIrow",
            "summary": "Return a row as a numeric indexed array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 175,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getIrows": {
            "name": "getIrows",
            "summary": "Return an array of numeric indexed rows.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 183,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getByColumns": {
            "name": "getByColumns",
            "summary": "Return an array indexed on the searched field's in which there are all the values of the column.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 191,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getObject": {
            "name": "getObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 196,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "stdClass",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getObjects": {
            "name": "getObjects",
            "summary": "Return an array of stdClass objects.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 204,
            "endLine": 204,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getKeys": {
            "name": "getKeys",
            "summary": "Return the table's keys as an array indexed with the fields names.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 212,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getConditions": {
            "name": "getConditions",
            "summary": "Returns a string with the conditions for any filter clause.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0)\n  {\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/\n  public function alter(string $table, array $cfg): int;\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 224,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "alter": {
            "name": "alter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $cfg)\n  {\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 232,
            "endLine": 232,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createDatabase": {
            "name": "createDatabase",
            "summary": "Creates a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database)\n  {\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 240,
            "endLine": 240,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dropDatabase": {
            "name": "dropDatabase",
            "summary": "Drops a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database)\n  {\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 249,
            "endLine": 249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbSize": {
            "name": "dbSize",
            "summary": "Gets the size of a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database = '', string $type = '')\n  {\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 258,
            "endLine": 258,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableSize": {
            "name": "tableSize",
            "summary": "Gets the size of a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $type = '')\n  {\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 268,
            "endLine": 268,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "status": {
            "name": "status",
            "summary": "Gets the status of a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table = '', string $database = '')\n  {\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 278,
            "endLine": 278,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUid": {
            "name": "getUid",
            "summary": "Returns a UUID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 286,
            "endLine": 286,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "startFancyStuff": {
            "name": "startFancyStuff",
            "summary": "Starts fancy stuff.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 294,
            "endLine": 294,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "stopFancyStuff": {
            "name": "stopFancyStuff",
            "summary": "Stops fancy stuff.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 301,
            "endLine": 301,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "processCfg": {
            "name": "processCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $args, bool $force = false)\n  {\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 308,
            "endLine": 308,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "reprocessCfg": {
            "name": "reprocessCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 314,
            "endLine": 314,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setLastInsertId": {
            "name": "setLastInsertId",
            "summary": "Changes the value of last inserted id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id = '')\n  {\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 322,
            "endLine": 322,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "lastId": {
            "name": "lastId",
            "summary": "Return the last inserted ID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 329,
            "endLine": 329,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "last": {
            "name": "last",
            "summary": "Return the last query for this connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 336,
            "endLine": 336,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "modelize": {
            "name": "modelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = NULL, bool $force = false)\n  {\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 345,
            "endLine": 345,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getQueryValues": {
            "name": "getQueryValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 351,
            "endLine": 351,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "treatConditions": {
            "name": "treatConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where, bool $full = true)\n  {\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 358,
            "endLine": 358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "enableTrigger": {
            "name": "enableTrigger",
            "summary": "Enable the triggers' functions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 365,
            "endLine": 365,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "disableTrigger": {
            "name": "disableTrigger",
            "summary": "Disable the triggers' functions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 372,
            "endLine": 372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "isTriggerEnabled": {
            "name": "isTriggerEnabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 377,
            "endLine": 377,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "isTriggerDisabled": {
            "name": "isTriggerDisabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 382,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "setTrigger": {
            "name": "setTrigger",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $function, $kind = NULL, $moment = NULL, $tables = '*')\n  {\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 391,
            "endLine": 391,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "kind",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "moment",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "tables",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "*",
                    "default_name": ""
                }
            ]
        },
        "getTriggers": {
            "name": "getTriggers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 396,
            "endLine": 396,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getFieldsList": {
            "name": "getFieldsList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($tables)\n  {\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 402,
            "endLine": 402,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "tables",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getForeignKeys": {
            "name": "getForeignKeys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, string $table, string $db = NULL)\n  {\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 410,
            "endLine": 410,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "findRelations": {
            "name": "findRelations",
            "summary": "find_relations",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, string $db = '')\n  {\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 419,
            "endLine": 419,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPrimary": {
            "name": "getPrimary",
            "summary": "Return primary keys of a table as a numeric array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 427,
            "endLine": 427,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "flush": {
            "name": "flush",
            "summary": "Deletes all the queries recorded and returns their (ex) number.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 434,
            "endLine": 434,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "countQueries": {
            "name": "countQueries",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 439,
            "endLine": 439,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "query": {
            "name": "query",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement)\n  {\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 445,
            "endLine": 445,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOne": {
            "name": "getOne",
            "summary": "Executes the given query with given vars, and extracts the first cell's result.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 452,
            "endLine": 452,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getKeyVal": {
            "name": "getKeyVal",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>The value will be an array if the request has more than two fields.<\/p>"
                }
            ],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 460,
            "endLine": 460,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getColArray": {
            "name": "getColArray",
            "summary": "Return an array with the values of single field resulting from the query.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 469,
            "endLine": 469,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "countFieldValues": {
            "name": "countFieldValues",
            "summary": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, string $field = NULL, array $where = [], array $order = [])\n  {\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 480,
            "endLine": 480,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getColumnValues": {
            "name": "getColumnValues",
            "summary": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table",
            "description": "```php\nX::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]"
                }
            ],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, string $field = NULL, array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 504,
            "endLine": 504,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "fetch": {
            "name": "fetch",
            "summary": "Return an indexed array with the first result of the query or false if there are no results.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $query)\n  {\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 512,
            "endLine": 512,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchAll": {
            "name": "fetchAll",
            "summary": "Return an array of indexed array with all results of the query or false if there are no results.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $query)\n  {\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 520,
            "endLine": 520,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchColumn": {
            "name": "fetchColumn",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query, int $num = 0)\n  {\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 527,
            "endLine": 527,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "fetchObject": {
            "name": "fetchObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 533,
            "endLine": 533,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 539,
            "endLine": 539,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getHash": {
            "name": "getHash",
            "summary": "Gets the created hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 546,
            "endLine": 546,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks if the database is ready to process a query.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 552,
            "endLine": 552,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "setErrorMode": {
            "name": "setErrorMode",
            "summary": "Sets the error mode.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $mode)\n  {\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 559,
            "endLine": 559,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getErrorMode": {
            "name": "getErrorMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 564,
            "endLine": 564,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getLastError": {
            "name": "getLastError",
            "summary": "Returns the last error.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 571,
            "endLine": 571,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "Returns the current database selected by the current connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 578,
            "endLine": 578,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getHost": {
            "name": "getHost",
            "summary": "Returns the host of the current connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 585,
            "endLine": 585,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getConnectionCode": {
            "name": "getConnectionCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 590,
            "endLine": 590,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getLastCfg": {
            "name": "getLastCfg",
            "summary": "Return the last config for this connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 597,
            "endLine": 597,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getConnection": {
            "name": "getConnection",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n  }",
            "startLine": 603,
            "endLine": 603,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "numMethods": 73,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": true,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": true,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": [],
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Db",
    "shortName": "Engines",
    "summary": "DB Interface",
    "description": "These methods have to be implemented on both database and query.\nMost methods usable on query should be also usable directly through database, which will create the query apply its method.",
    "description_parts": [
        {
            "type": "text",
            "content": "<p>These methods have to be implemented on both database and query.\nMost methods usable on query should be also usable directly through database, which will create the query apply its method.<\/p>"
        }
    ]
}