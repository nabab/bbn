{
    "doc": {
        "description": "DB Interface\n *\n *\nThese methods have to be implemented on both database and query.\nMost methods usable on query should be also usable directly through database, which will create the query apply its method.",
        "tags": {
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Database",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.2r89"
        }
    },
    "name": "bbn\\Db\\Engines",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
    "startLine": 23,
    "endLine": 403,
    "contentConstructor": null,
    "methods": {
        "getConnection": {
            "name": "getConnection",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n\n  \/**\n   * Actions to do once the PDO object has been created\n   *\n   * @return void\n   *\/\n  public function postCreation();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows text-indexed\n   *\n   * @param string $db\n   * @return mixed\n   *\/\n  public function change(string $db);\n\n\n  \/**\n   * Returns a database item expression escaped like database, table, column, key names\n   *\n   * @param string $item The item's name (escaped or not)\n   * @return string | false\n   *\/\n  public function escape(string $item): string;\n\n\n  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableFullName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, $table = null, $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 31,
            "endLine": 31,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ]
        },
        "postCreation": {
            "name": "postCreation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows text-indexed\n   *\n   * @param string $db\n   * @return mixed\n   *\/\n  public function change(string $db);\n\n\n  \/**\n   * Returns a database item expression escaped like database, table, column, key names\n   *\n   * @param string $item The item's name (escaped or not)\n   * @return string | false\n   *\/\n  public function escape(string $item): string;\n\n\n  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableFullName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, $table = null, $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 39,
            "endLine": 39,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "change": {
            "name": "change",
            "summary": "Fetches the database and returns an array of several arrays of rows text-indexed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($db)\n  {\n\n  \/**\n   * Returns a database item expression escaped like database, table, column, key names\n   *\n   * @param string $item The item's name (escaped or not)\n   * @return string | false\n   *\/\n  public function escape(string $item): string;\n\n\n  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableFullName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, $table = null, $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 48,
            "endLine": 48,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Returns a database item expression escaped like database, table, column, key names",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($item)\n  {\n\n  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableFullName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, $table = null, $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 57,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableFullName": {
            "name": "tableFullName",
            "summary": "Returns a table's full name i.e. database.table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, $table = null, $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 67,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "tableSimpleName": {
            "name": "tableSimpleName",
            "summary": "Returns a table's simple name i.e. table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, $table = null, $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 77,
            "endLine": 77,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "colFullName": {
            "name": "colFullName",
            "summary": "Returns a column's full name i.e. table.column",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table = NULL, $escaped = false)\n  {\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 88,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "colSimpleName": {
            "name": "colSimpleName",
            "summary": "Returns a column's simple name i.e. column",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $escaped = false)\n  {\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 98,
            "endLine": 98,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "isTableFullName": {
            "name": "isTableFullName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 105,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isColFullName": {
            "name": "isColFullName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col)\n  {\n\n  \/**\n   * Fetches the database and returns an array of a single row num-indexed\n   *\n   * @return false|array\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 112,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "disableKeys": {
            "name": "disableKeys",
            "summary": "Fetches the database and returns an array of a single row num-indexed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows num-indexed\n   *\n   * @return false|array\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 120,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "enableKeys": {
            "name": "enableKeys",
            "summary": "Fetches the database and returns an array of several arrays of rows num-indexed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Fetches the database and returns an array of arrays, one per column, each having each column's values\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 128,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getDatabases": {
            "name": "getDatabases",
            "summary": "Fetches the database and returns an array of arrays, one per column, each having each column's values",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Fetches the database and returns an object of a single row, alias of get_object\n   *\n   * @return null|array\n   *\/\n  public function getTables(): ?array;\n\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 136,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getTables": {
            "name": "getTables",
            "summary": "Fetches the database and returns an object of a single row, alias of get_object",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Fetches the database and returns an object of a single row\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 144,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getColumns": {
            "name": "getColumns",
            "summary": "Fetches the database and returns an object of a single row",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n\n  \/**\n   * Fetches the database and returns an array of objects.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 153,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getKeys": {
            "name": "getKeys",
            "summary": "Fetches the database and returns an array of objects.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool  $is_having\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 162,
            "endLine": 162,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getConditions": {
            "name": "getConditions",
            "summary": "Returns a string with the conditions for any filter clause.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, array $cfg = [], $is_having = false, $indent = 0)\n  {\n\n  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getSelect(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 173,
            "endLine": 173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSelect": {
            "name": "getSelect",
            "summary": "Generates a string starting with SELECT ... FROM with corresponding parameters",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getInsert(array $cfg): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 182,
            "endLine": 182,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInsert": {
            "name": "getInsert",
            "summary": "Fetches the database and returns an array of objects",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param array $cfg The configuration array\n   * @return false|array\n   *\/\n  public function getUpdate(array $cfg): string;\n\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 191,
            "endLine": 191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUpdate": {
            "name": "getUpdate",
            "summary": "Fetches the database and returns an array of objects",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Returns the SQL code for a DELETE statement.\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\/\n  public function getDelete(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 200,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDelete": {
            "name": "getDelete",
            "summary": "Returns the SQL code for a DELETE statement.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getJoin(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 209,
            "endLine": 209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getJoin": {
            "name": "getJoin",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getWhere(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 218,
            "endLine": 218,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getWhere": {
            "name": "getWhere",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getGroupBy(array $cfg): string;\n\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 227,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getGroupBy": {
            "name": "getGroupBy",
            "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getHaving(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 236,
            "endLine": 236,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getHaving": {
            "name": "getHaving",
            "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getOrder(array $cfg): string;\n\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 245,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOrder": {
            "name": "getOrder",
            "summary": "Get a string starting with ORDER BY with corresponding parameters to $order",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getLimit(array $cfg): string;\n\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 254,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLimit": {
            "name": "getLimit",
            "summary": "Get a string starting with LIMIT with corresponding parameters to $where",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 263,
            "endLine": 263,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTableComment": {
            "name": "getTableComment",
            "summary": "Returns the comment (or an empty string if none) for a given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n\n  \/**\n   * Fetches the database and returns an array of objects\n   *\n   * @param string $table The table for which to create the statement\n   * @return string\n   *\/\n  public function getCreate(string $table, array $model = null): string;\n\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 273,
            "endLine": 273,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCreate": {
            "name": "getCreate",
            "summary": "Fetches the database and returns an array of objects",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n\n  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/\n  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;\n\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 282,
            "endLine": 282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "createIndex": {
            "name": "createIndex",
            "summary": "Creates an index",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $column, $unique = false, $length = NULL)\n  {\n\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 294,
            "endLine": 294,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unique",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteIndex": {
            "name": "deleteIndex",
            "summary": "Deletes an index",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $key)\n  {\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 304,
            "endLine": 304,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createUser": {
            "name": "createUser",
            "summary": "Creates a database user",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user, $pass, $db = NULL)\n  {\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 315,
            "endLine": 315,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pass",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "createDatabase": {
            "name": "createDatabase",
            "summary": "Creates a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 324,
            "endLine": 324,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dropDatabase": {
            "name": "dropDatabase",
            "summary": "Drops a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 333,
            "endLine": 333,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteUser": {
            "name": "deleteUser",
            "summary": "Deletes a database user",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user)\n  {\n\n  \/**\n   * Returns an array of queries to recreate the user(s)\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 342,
            "endLine": 342,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "Returns an array of queries to recreate the user(s)",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user = '', $host = '')\n  {\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 352,
            "endLine": 352,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbSize": {
            "name": "dbSize",
            "summary": "Gets the size of a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database = '', $type = '')\n  {\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 362,
            "endLine": 362,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableSize": {
            "name": "tableSize",
            "summary": "Gets the size of a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $type = '')\n  {\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 372,
            "endLine": 372,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "status": {
            "name": "status",
            "summary": "Gets the status of a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = '', $database = '')\n  {\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string\n   *\/\n  public function getUid(): string;\n\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 382,
            "endLine": 382,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUid": {
            "name": "getUid",
            "summary": "Returns a UUID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Renames the given table to the new given name.\n   * \n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  }",
            "startLine": 390,
            "endLine": 390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "renameTable": {
            "name": "renameTable",
            "summary": "Renames the given table to the new given name.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $newName)\n  {\n  }",
            "startLine": 400,
            "endLine": 400,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The current table's name"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The new name."
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "numMethods": 41,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": true,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": true,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": [],
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Db",
    "shortName": "Engines",
    "summary": "DB Interface",
    "description": "*\n *\nThese methods have to be implemented on both database and query.\nMost methods usable on query should be also usable directly through database, which will create the query apply its method.",
    "description_parts": [
        {
            "type": "text",
            "content": "<p><em>\n<\/em>\nThese methods have to be implemented on both database and query.\nMost methods usable on query should be also usable directly through database, which will create the query apply its method.<\/p>"
        }
    ]
}