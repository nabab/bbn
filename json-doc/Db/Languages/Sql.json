{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Db\\Languages\\Sql",
    "namespace": true,
    "traits": [
        "bbn\\Db\\HasError",
        "bbn\\Models\\Tts\\Cache"
    ],
    "interfaces": {
        "bbn\\Db\\SqlEngines": {
            "name": "bbn\\Db\\SqlEngines"
        },
        "bbn\\Db\\Engines": {
            "name": "bbn\\Db\\Engines"
        },
        "bbn\\Db\\EnginesApi": {
            "name": "bbn\\Db\\EnginesApi"
        },
        "bbn\\Db\\SqlFormatters": {
            "name": "bbn\\Db\\SqlFormatters"
        }
    },
    "fileName": "\/Db\/Languages\/Sql.php",
    "startLine": 14,
    "endLine": 4904,
    "numMethods": 145,
    "numProperties": 7,
    "numConstants": 0,
    "numStaticProperties": 11,
    "interfaceNames": [
        "bbn\\Db\\SqlEngines",
        "bbn\\Db\\Engines",
        "bbn\\Db\\EnginesApi",
        "bbn\\Db\\SqlFormatters"
    ],
    "isInterface": false,
    "traitNames": [
        "bbn\\Db\\HasError",
        "bbn\\Models\\Tts\\Cache"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": true,
    "isFinal": false,
    "modifiers": 64,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "operators": [
            "!=",
            "=",
            "<>",
            "<",
            "<=",
            ">",
            ">=",
            "like",
            "clike",
            "slike",
            "not",
            "is",
            "is not",
            "in",
            "between",
            "not like"
        ],
        "numeric_types": [
            "integer",
            "int",
            "smallint",
            "tinyint",
            "mediumint",
            "bigint",
            "decimal",
            "numeric",
            "float",
            "double"
        ],
        "date_types": [
            "date",
            "time",
            "datetime"
        ],
        "types": [
            "tinyint",
            "smallint",
            "mediumint",
            "int",
            "bigint",
            "decimal",
            "float",
            "double",
            "bit",
            "char",
            "varchar",
            "binary",
            "varbinary",
            "tinyblob",
            "blob",
            "mediumblob",
            "longblob",
            "tinytext",
            "text",
            "mediumtext",
            "longtext",
            "enum",
            "set",
            "date",
            "time",
            "datetime",
            "timestamp",
            "year",
            "geometry",
            "point",
            "linestring",
            "polygon",
            "geometrycollection",
            "multilinestring",
            "multipoint",
            "multipolygon",
            "json"
        ],
        "interoperability": {
            "integer": "int",
            "real": "decimal",
            "text": "text",
            "blob": "blob"
        },
        "aggr_functions": [
            "AVG",
            "BIT_AND",
            "BIT_OR",
            "COUNT",
            "GROUP_CONCAT",
            "MAX",
            "MIN",
            "STD",
            "STDDEV_POP",
            "STDDEV_SAMP",
            "STDDEV",
            "SUM",
            "VAR_POP",
            "VAR_SAMP",
            "VARIANCE"
        ],
        "write_kinds": [
            "INSERT",
            "UPDATE",
            "DELETE",
            "DROP",
            "ALTER",
            "CREATE",
            "RENAME"
        ],
        "read_kinds": [
            "SELECT",
            "SHOW"
        ],
        "structure_kinds": [
            "DROP",
            "ALTER",
            "CREATE",
            "RENAME"
        ],
        "LINE": "---------------------------------------------------------------------------------",
        "_has_error_all": false,
        "qte": "`",
        "cache": [],
        "cache_renewal": 3600,
        "queries": [],
        "list_queries": [],
        "_triggers_disabled": false,
        "id_just_inserted": null,
        "last_insert_id": null,
        "last_params": {
            "sequences": false,
            "values": false
        },
        "last_query": null,
        "last_real_query": null,
        "last_real_params": {
            "sequences": false,
            "values": false
        },
        "_last_enabled": true,
        "max_queries": 50,
        "length_queries": 60,
        "hash_contour": "__BBN__",
        "hash": null,
        "cfgs": [],
        "_triggers": {
            "SELECT": {
                "before": [],
                "after": []
            },
            "INSERT": {
                "before": [],
                "after": []
            },
            "UPDATE": {
                "before": [],
                "after": []
            },
            "DELETE": {
                "before": [],
                "after": []
            }
        },
        "last_cfg": null,
        "_fancy": 1,
        "current": null,
        "_parser": null,
        "_has_error": false,
        "last_error": null,
        "on_error": "exception",
        "_cache_prefix": null,
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Db\\Languages",
    "shortName": "Sql",
    "contentConstructor": null,
    "methods": {
        "isAggregateFunction": {
            "name": "isAggregateFunction",
            "summary": "Returns true if the column name is an aggregate function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $f)\n  {\n    foreach (self::$aggr_functions as $a) {\n      if (preg_match('\/' . $a . '\\\\s*\\\\(\/i', $f)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 251,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to check"
                }
            ]
        },
        "__destruct": {
            "name": "__destruct",
            "summary": "Destructor; setting the property holding the PDO object to null will close the connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->close();\n  }",
            "startLine": 266,
            "endLine": 269,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getOperators": {
            "name": "getOperators",
            "summary": "Returns the list of operators in the current language",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$operators;\n  }",
            "startLine": 277,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getTypes": {
            "name": "getTypes",
            "summary": "Returns the list of all types",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$types;\n  }",
            "startLine": 288,
            "endLine": 291,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getNumericTypes": {
            "name": "getNumericTypes",
            "summary": "Returns the list of numeric types in the current language",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$numeric_types;\n  }",
            "startLine": 299,
            "endLine": 302,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getDateTypes": {
            "name": "getDateTypes",
            "summary": "Returns the list of date types in the current language",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$date_types;\n  }",
            "startLine": 310,
            "endLine": 313,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "close": {
            "name": "close",
            "summary": "Closes the connection definitely, making the object unusable.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->pdo) {\n      $this->pdo = null;\n    }\n  }",
            "startLine": 319,
            "endLine": 324,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getEngine": {
            "name": "getEngine",
            "summary": "Returns the engine class that extends the base Sql class.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $class = static::class;\n    return strtolower(X::basename(str_replace('\\\\', '\/', $class)));\n  }",
            "startLine": 332,
            "endLine": 336,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "Returns the current database selected by the current connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->current;\n  }",
            "startLine": 344,
            "endLine": 347,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getLastCfg": {
            "name": "getLastCfg",
            "summary": "Return the last config for this connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_cfg;\n  }",
            "startLine": 355,
            "endLine": 358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "change": {
            "name": "change",
            "summary": "Changes the current database to the given one.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $db)\n  {\n    if (($this->getCurrent() !== $db) && Str::checkName($db)) {\n      $this->rawQuery(\"USE `$db`\");\n      $this->current = $db;\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 366,
            "endLine": 375,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database name or file"
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Returns a database item expression escaped like database, table, column, key names",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $item)\n  {\n    $items = explode('.', str_replace($this->qte, '', $item));\n    $r     = [];\n\n    foreach ($items as $m) {\n      if (!Str::checkName($m)) {\n        throw new \\Exception(X::_(\"Illegal name %s for the column\", $m));\n      }\n\n      $r[] = $this->qte . $m . $this->qte;\n    }\n\n    return implode('.', $r);\n  }",
            "startLine": 384,
            "endLine": 398,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item's name (escaped or not)"
                }
            ]
        },
        "tableFullName": {
            "name": "tableFullName",
            "summary": "Returns a table's full name i.e. database.table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $escaped = false)\n  {\n    $bits = explode('.', $table);\n\n    if (\\count($bits) === 3) {\n      $db    = trim($bits[0], ' ' . $this->qte);\n      $table = trim($bits[1]);\n    } elseif (\\count($bits) === 2) {\n      $db    = trim($bits[0], ' ' . $this->qte);\n      $table = trim($bits[1], ' ' . $this->qte);\n    } else {\n      $db    = $this->getCurrent();\n      $table = trim($bits[0], ' ' . $this->qte);\n    }\n\n    if (Str::checkName($db) && Str::checkName($table)) {\n      return $escaped\n        ? $this->escape(\"$db.$table\")\n        : \"$db.$table\";\n    }\n\n    return null;\n  }",
            "startLine": 408,
            "endLine": 430,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "tableSimpleName": {
            "name": "tableSimpleName",
            "summary": "Returns a table's simple name i.e. table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, bool $escaped = false)\n  {\n    if ($table = trim($table)) {\n      $bits = explode('.', $table);\n      switch (\\count($bits)) {\n        case 1:\n          $table = trim($bits[0], ' ' . $this->qte);\n          break;\n        case 2:\n        case 3:\n          $table = trim($bits[1], ' ' . $this->qte);\n          break;\n      }\n\n      if (Str::checkName($table)) {\n        return $escaped ? $this->escape($table) : $table;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 439,
            "endLine": 459,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "colFullName": {
            "name": "colFullName",
            "summary": "Returns a column's full name i.e. table.column",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, string $table = NULL, bool $escaped = false)\n  {\n    if ($col = trim($col)) {\n      $bits = explode('.', $col);\n      $ok   = null;\n      $col  = trim(array_pop($bits), ' ' . $this->qte);\n      if ($table && ($table = $this->tableSimpleName($table))) {\n        $ok = 1;\n      } elseif (\\count($bits)) {\n        $table = trim(array_pop($bits), ' ' . $this->qte);\n        $ok    = 1;\n      }\n\n      if ((null !== $ok) && Str::checkName($table) && Str::checkName($col)) {\n        return $escaped\n          ? $this->escape(\"$table.$col\")\n          : \"$table.$col\";\n      }\n    }\n\n    return null;\n  }",
            "startLine": 469,
            "endLine": 490,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "colSimpleName": {
            "name": "colSimpleName",
            "summary": "Returns a column's simple name i.e. column",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, bool $escaped = false)\n  {\n    if ($bits = explode('.', $col)) {\n      $col = trim(end($bits), ' ' . $this->qte);\n      if ($col && Str::checkName($col)) {\n        return $escaped ? $this->escape($col) : $col;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 499,
            "endLine": 509,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ]
        },
        "isTableFullName": {
            "name": "isTableFullName",
            "summary": "Returns true if the given string is the full name of a table ('database.table').",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    return (bool)strpos($table, '.');\n  }",
            "startLine": 517,
            "endLine": 520,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isColFullName": {
            "name": "isColFullName",
            "summary": "Returns true if the given string is the full name of a column ('table.column').",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col)\n  {\n    return (bool)strpos($col, '.');\n  }",
            "startLine": 528,
            "endLine": 531,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "rawQuery": {
            "name": "rawQuery",
            "summary": "Executes the original PDO query function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->_fancy) {\n      $this->stopFancyStuff();\n      $switch_to_fancy = true;\n    }\n\n    $result = $this->pdo->query(...\\func_get_args());\n\n    if (!empty($switch_to_fancy)) {\n      $this->startFancyStuff();\n    }\n\n    return $result;\n  }",
            "startLine": 538,
            "endLine": 552,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "parseQuery": {
            "name": "parseQuery",
            "summary": "Parses an SQL query and return an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $statement)\n  {\n    if ($this->_parser === null) {\n      $this->_parser = new PHPSQLParser();\n    }\n\n    $done = false;\n    try {\n      $r    = $this->_parser->parse($statement);\n      $done = 1;\n    }\n    catch (\\Exception $e){\n      $this->log('Error while parsing the query '.$statement);\n    }\n\n    if ($done) {\n      if (!$r || !count($r)) {\n        $this->log('Impossible to parse the query '.$statement);\n        return null;\n      }\n\n      if (isset($r['BRACKET']) && (\\count($r) === 1)) {\n        \/** @todo Is it impossible to parse queries with brackets ? *\/\n        \/\/throw new \\Exception('Bracket in the query '.$statement);\n        return null;\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "startLine": 560,
            "endLine": 591,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getQueryValues": {
            "name": "getQueryValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = [];\n    if (!empty($cfg['values'])) {\n      \/\/ Only for the insert \/ update part (at the start of the query), before the where (but not before the join in insert \/ update beware!)\n      $num_types = in_array($cfg['kind'], ['INSERT', 'UPDATE']) && !empty($cfg['values_types']) ? count($cfg['values_types']) : 0;\n      foreach ($cfg['values'] as $i => $v) {\n        if (!isset($cfg['values_desc'][$i])) {\n          X::log([$i, $cfg['values_desc'], $v], 'no_desc_in_sql');\n        }\n        if ($num_types && ($i < $num_types) && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n          continue;\n        }\n        \/\/ Transforming the values if needed\n        if (($cfg['values_desc'][$i]['type'] === 'binary')\n          && ($cfg['values_desc'][$i]['maxlength'] === 16)\n          && Str::isUid($v)\n        ) {\n          $res[] = hex2bin($v);\n        }\n        elseif (\\is_string($v) && ((            ($cfg['values_desc'][$i]['type'] === 'date')\n              && (\\strlen($v) < 10)) || (            ($cfg['values_desc'][$i]['type'] === 'time')\n              && (\\strlen($v) < 8)) || (            ($cfg['values_desc'][$i]['type'] === 'datetime')\n              && (\\strlen($v) < 19))            )\n        ) {\n          $res[] = $v.'%';\n        }\n        elseif (!empty($cfg['values_desc'][$i]['operator'])) {\n          switch ($cfg['values_desc'][$i]['operator']){\n            case 'contains':\n            case 'doesnotcontain':\n              $res[] = '%'.$v.'%';\n              break;\n            case 'startswith':\n              $res[] = $v.'%';\n              break;\n            case 'endswith':\n              $res[] = '%'.$v;\n              break;\n            default:\n              $res[] = $v;\n          }\n        }\n        else{\n          $res[] = $v;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 597,
            "endLine": 647,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getFieldsList": {
            "name": "getFieldsList",
            "summary": "Returns an array of fields for the given table(s).",
            "description": "```php\nX::dump($db->getFieldsList(\"table_users\"));\n\/\/ (array) ['table_users.username', 'table_users.name']\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getFieldsList(\"table_users\"));\n\/\/ (array) ['table_users.username', 'table_users.name']"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($tables)\n  {\n    $res = [];\n    if (!\\is_array($tables)) {\n      $tables = [$tables];\n    }\n\n    foreach ($tables as $t){\n      $model = $this->getColumns($t);\n      if (!is_array($model)) {\n        $this->error('Impossible to find the table '.$t);\n        throw new \\Exception(X::_('Impossible to find the table ').$t);\n      }\n\n      foreach (array_keys($model) as $f){\n        $res[] = $this->colFullName($f, $t);\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 661,
            "endLine": 681,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "tables",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPrimary": {
            "name": "getPrimary",
            "summary": "Return primary keys of a table as a numeric array.",
            "description": "```php\nX::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    if (($keys = $this->getKeys($table)) && isset($keys['keys']['PRIMARY'])) {\n      return $keys['keys']['PRIMARY']['columns'];\n    }\n\n    return [];\n  }",
            "startLine": 694,
            "endLine": 701,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "getUniquePrimary": {
            "name": "getUniquePrimary",
            "summary": "Return the unique primary key of the given table.",
            "description": "```php\nX::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    if (($keys = $this->getKeys($table))\n      && isset($keys['keys']['PRIMARY'])\n      && (\\count($keys['keys']['PRIMARY']['columns']) === 1)\n    ) {\n      return $keys['keys']['PRIMARY']['columns'][0];\n    }\n\n    return null;\n  }",
            "startLine": 714,
            "endLine": 724,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "getUniqueKeys": {
            "name": "getUniqueKeys",
            "summary": "Return the unique keys of a table as a numeric array.",
            "description": "```php\nX::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    if ($ks = $this->getKeys($table)) {\n      foreach ($ks['keys'] as $k){\n        if ($k['unique']) {\n          return $k['columns'];\n        }\n      }\n    }\n\n    return [];\n  }",
            "startLine": 737,
            "endLine": 748,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "arrangeConditions": {
            "name": "arrangeConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array &$conditions, array $cfg)\n  {\n    if (!empty($cfg['available_fields']) && isset($conditions['conditions'])) {\n      foreach ($conditions['conditions'] as &$c){\n        if (array_key_exists('conditions', $c) && \\is_array($c['conditions'])) {\n          $this->arrangeConditions($c, $cfg);\n        }\n        elseif (isset($c['field']) && empty($cfg['available_fields'][$c['field']]) && !$this->isColFullName($c['field'])) {\n          foreach ($cfg['tables'] as $t => $o){\n            if (isset($cfg['available_fields'][$this->colFullName($c['field'], $t)])) {\n              $c['field'] = $this->colFullName($c['field'], $t);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }",
            "startLine": 754,
            "endLine": 771,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "removeVirtual": {
            "name": "removeVirtual",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $res)\n  {\n    if (isset($res['fields'])) {\n      $to_remove = [];\n      foreach ($res['fields'] as $i => $f){\n        if (!empty($res['available_fields'][$f])\n          && isset($res['models'][$res['available_fields'][$f]]['fields'][$this->colSimpleName($f)])\n          && !empty($res['models'][$res['available_fields'][$f]]['fields'][$this->colSimpleName($f)]['virtual'])\n        ) {\n          array_unshift($to_remove, $i);\n        }\n      }\n\n      foreach ($to_remove as $i) {\n        array_splice($res['fields'], $i, 1);\n        array_splice($res['values'], $i, 1);\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 777,
            "endLine": 797,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "res",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getValuesDesc": {
            "name": "getValuesDesc",
            "summary": "Returns a linear array",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where, array $cfg, &$others = [])\n  {\n    if (!empty($where['conditions'])) {\n      foreach ($where['conditions'] as &$f){\n        \/\/ It's an imbricated condition\n        if (isset($f['logic'], $f['conditions']) && \\is_array($f['conditions'])) {\n          $this->getValuesDesc($f, $cfg, $others);\n        }\n        \/\/ Value is set\n        elseif (array_key_exists('value', $f)) {\n          $desc = [\n            'primary' => false,\n            'type' => null,\n            'maxlength' => null,\n            'operator' => $f['operator'] ?? null\n          ];\n          if (isset($cfg['models'], $f['field'], $cfg['available_fields'][$f['field']])) {\n            $t = $cfg['available_fields'][$f['field']];\n            if (isset($cfg['models'], $f['field'], $cfg['tables_full'][$t], $cfg['models'][$cfg['tables_full'][$t]])\n              && ($model = $cfg['models'][$cfg['tables_full'][$t]])\n              && ($fname = $this->colSimpleName($f['field']))\n            ) {\n              $desc['name'] = $fname;\n              if (!empty($model['fields'][$fname]['type'])) {\n                $desc['type'] = $model['fields'][$fname]['type'];\n                $desc['maxlength'] = $model['fields'][$fname]['maxlength'] ?? null;\n                $desc['operator'] = $f['operator'] ?? null;\n              }\n              \/\/ Fixing filters using alias\n              elseif (isset($cfg['fields'][$f['field']])\n                && ($fname = $this->colSimpleName($cfg['fields'][$f['field']]))\n                && !empty($model['fields'][$fname]['type'])\n              ) {\n                $desc['type'] = $model['fields'][$fname]['type'];\n                $desc['maxlength'] = $model['fields'][$fname]['maxlength'] ?? null;\n                $desc['operator'] = $f['operator'] ?? null;\n              }\n\n              if (!empty($desc['type'])\n                && isset($model['keys']['PRIMARY'])\n                && (count($model['keys']['PRIMARY']['columns']) === 1)\n                && ($model['keys']['PRIMARY']['columns'][0] === $fname)\n              ) {\n                $desc['primary'] = true;\n              }\n            }\n          }\n\n          $others[] = $desc;\n        }\n      }\n    }\n\n    return $others;\n  }",
            "startLine": 805,
            "endLine": 859,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "others",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getConditions": {
            "name": "getConditions",
            "summary": "Returns a string with the conditions for the ON, WHERE, or HAVING part of the query if there is, empty otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0)\n  {\n    $res = '';\n    if (isset($conditions['conditions'], $conditions['logic'])) {\n      $logic = isset($conditions['logic']) && ($conditions['logic'] === 'OR') ? 'OR' : 'AND';\n      foreach ($conditions['conditions'] as $key => $f) {\n        if (\\is_array($f) && isset($f['logic']) && isset($f['conditions'])) {\n          if ($tmp = $this->getConditions($f, $cfg, $is_having, $indent + 2)) {\n            $res .= (empty($res) ? '(' : PHP_EOL . str_repeat(' ', $indent) . \"$logic (\") .\n              $tmp . PHP_EOL . str_repeat(' ', $indent) . \")\";\n          }\n        }\n        elseif (isset($f['operator'], $f['field'])) {\n          $field = $f['field'];\n          if (!array_key_exists('value', $f)) {\n            $f['value'] = false;\n          }\n\n          $is_number = false;\n          $is_null   = true;\n          $is_uid    = false;\n          $is_date   = false;\n          $is_bool   = false;\n          $model     = null;\n          if ($is_having) {\n            $res .= PHP_EOL . str_repeat(' ', $indent) . (empty($res) ? '' : \"$logic \") . $field . ' ';\n          }\n          elseif (isset($cfg['available_fields'][$field])) {\n            $table  = $cfg['tables_full'][$cfg['available_fields'][$field]] ?? false;\n            $column = $this->colSimpleName($cfg['fields'][$field] ?? $field);\n            if ($table && $column && isset($cfg['models'][$table]['fields'][$column])) {\n              $model = $cfg['models'][$table]['fields'][$column];\n              $res  .= PHP_EOL . \n                  str_repeat(' ', $indent) . \n                  (empty($res) ? '' : \"$logic \") .\n                  (\n                    !empty($cfg['available_fields'][$field]) ?\n                      $this->colFullName(\n                        $cfg['fields'][$field] ?? $field,\n                        $cfg['available_fields'][$field],\n                        true\n                      )\n                      : $this->colSimpleName($column, true)\n                ) . ' ';\n            }\n            else {\n              \/\/ Remove the alias from where and join but not in having except if it's a count\n              if (!$is_having && empty($table) && isset($cfg['fields'][$field])) {\n                $field = $cfg['fields'][$field];\n                \/\/ Same for exp in case it's an alias\n                if (!empty($f['exp']) && isset($cfg['fields'][$f['exp']])) {\n                  $f['exp'] = $cfg['fields'][$f['exp']];\n                }\n              }\n\n              $res .= (empty($res) ? '' : PHP_EOL . str_repeat(' ', $indent) . $logic . ' ') . $field . ' ';\n            }\n\n            if (!empty($model)) {\n              $is_null = (bool)$model['null'];\n              if ($model['type'] === 'binary') {\n                $is_number = true;\n                if (($model['maxlength'] === 16) && !empty($model['key'])) {\n                  $is_uid = true;\n                }\n              }\n              elseif (\\in_array($model['type'], self::$numeric_types, true)) {\n                $is_number = true;\n              }\n              elseif (\\in_array($model['type'], self::$date_types, true)) {\n                $is_date = true;\n              }\n            }\n            elseif ($f['value'] && Str::isUid($f['value'])) {\n              $is_uid = true;\n            }\n            elseif (\\is_int($f['value']) || \\is_float($f['value'])) {\n              $is_number = true;\n            }\n          }\n          else {\n            $res .= (empty($res) ? '' : PHP_EOL . str_repeat(' ', $indent) . $logic . ' ') . $field . ' ';\n          }\n\n          if (empty($f['exp']) && isset($f['value']) && in_array($f['value'], [1, 0, true, false], true)) {\n            \/\/ Always use LIKE as booleans and 1 and 0 are interpreted badly by MySQL\n            $is_bool = true;\n          }\n\n          switch (strtolower($f['operator'])) {\n            case '=':\n              if ($is_uid && $is_bool) {\n                $res .= isset($f['exp']) ? 'LIKE ' . $f['exp'] : 'LIKE ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : '= ?';\n              }\n              break;\n            case '!=':\n              if (isset($f['exp'])) {\n                $res .= '!= ' . $f['exp'];\n              }\n              else {\n                $res .= '!= ?';\n              }\n              break;\n            case 'like':\n              if (isset($f['exp'])) {\n                $res .= 'LIKE ' . $f['exp'];\n              }\n              else {\n                $res .= 'LIKE ?';\n              }\n              break;\n            case 'not like':\n              if (isset($f['exp'])) {\n                $res .= 'NOT LIKE ' . $f['exp'];\n              }\n              else {\n                $res .= 'NOT LIKE ?';\n              }\n              break;\n            case 'eq':\n            case 'is':\n              if ($is_uid && $is_bool) {\n                $res .= isset($f['exp']) ? 'LIKE ' . $f['exp'] : 'LIKE ?';\n              }\n              elseif ($is_uid) {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : '= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : ($is_number ? '= ?' : 'LIKE ?');\n              }\n              break;\n            case 'neq':\n            case 'isnot':\n              if ($is_uid) {\n                $res .= isset($f['exp']) ? '!= ' . $f['exp'] : '!= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '!= ' . $f['exp'] : ($is_number ? '!= ?' : 'NOT LIKE ?');\n              }\n              break;\n\n            case 'doesnotcontains':\n            case 'doesnotcontain':\n              $res .= 'NOT LIKE ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'endswith':\n            case 'startswith':\n            case 'contains':\n              $res .= 'LIKE ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gte':\n            case '>=':\n              if (isset($f['exp'])) {\n                $res .= '>= ' . $f['exp'];\n              }\n              else {\n                $res .= '>= ?';\n              }\n              break;\n\n            case 'gt':\n            case '>':\n              if (isset($f['exp'])) {\n                $res .= '> ' . $f['exp'];\n              }\n              else {\n                $res .= '> ?';\n              }\n              break;\n\n            case 'lte':\n            case '<=':\n              if (isset($f['exp'])) {\n                $res .= '<= ' . $f['exp'];\n              }\n              else {\n                $res .= '<= ?';\n              }\n              break;\n\n            case 'lt':\n            case '<':\n              if (isset($f['exp'])) {\n                $res .= '< ' . $f['exp'];\n              }\n              else {\n                $res .= '< ?';\n              }\n              break;\n\n            \/** @todo Check if it is working with an array *\/\n            case 'isnull':\n              $res .= 'IS NULL';\n              break;\n\n            case 'isnotnull':\n              $res .= 'IS NOT NULL';\n              break;\n\n            case 'isempty':\n              $res .= $is_number ? '= 0' : \"LIKE ''\";\n              break;\n\n            case 'isnotempty':\n              $res .= $is_number ? '!= 0' : \"NOT LIKE ''\";\n              break;\n\n            case 'doesnotcontain':\n              $res .= $is_number ? '!= ?' : 'NOT LIKE ?';\n              break;\n\n            case 'contains':\n              $res .= 'LIKE ?';\n              break;\n\n            default:\n              $res .= $is_uid && $is_bool ? 'LIKE ?' : '= ?';\n              break;\n          }\n        }\n      }\n    }\n\n    if (!empty($res)) {\n      return str_replace(PHP_EOL . PHP_EOL, PHP_EOL, $res . PHP_EOL);\n    }\n\n    return $res;\n  }",
            "startLine": 871,
            "endLine": 1104,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSelect": {
            "name": "getSelect",
            "summary": "Generates a string starting with SELECT ... FROM with corresponding parameters",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (\\is_array($cfg['tables']) && !empty($cfg['tables'])) {\n      $res = 'SELECT ';\n      if (!empty($cfg['count'])) {\n        if (!empty($cfg['group_by'])) {\n          $indexes = [];\n          $idxs    = [];\n          foreach ($cfg['group_by'] as $g) {\n            \/\/ Alias\n            if (isset($cfg['fields'][$g])) {\n              $g = $cfg['fields'][$g];\n            }\n\n            if ((!empty($cfg['available_fields'][$g]) && $t = $cfg['available_fields'][$g])\n              && ($cfn = $this->colFullName($g, $t))\n            ) {\n              $indexes[] = $cfn;\n              \/\/$idxs[] = $this->colSimpleName($g, true);\n              \/\/ Changed by Mirko\n              $idxs[] = $this->colSimpleName($cfg['aliases'][$g] ?? $g, true);\n            } else {\n              $indexes[] = $g;\n              $idxs[] = $cfg['aliases'][$g] ?? $g;\n            }\n          }\n\n          if (!empty($cfg['having'])) {\n            if (count($indexes) === count($cfg['group_by'])) {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n              $tmp  = [];\n              if ($extracted_fields = $this->extractFields($cfg, $cfg['having']['conditions'])) {\n                \/\/die(var_dump($extracted_fields));\n                foreach ($extracted_fields as $ef) {\n                  if (!in_array($ef, $indexes)) {\n                    if (!empty($cfg['fields'][$ef])) {\n                      $tmp[$ef] = $cfg['fields'][$ef];\n                    } else {\n                      $tmp[] = $ef;\n                    }\n                  }\n                }\n              }\n\n              $cfg['fields'] = $indexes;\n              foreach ($tmp as $k => $v) {\n                if (is_string($k)) {\n                  $cfg['fields'][$k] = $v;\n                } else {\n                  $cfg['fields'][] = $v;\n                }\n              }\n            } else {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n            }\n          } else {\n            if (count($indexes) === count($cfg['group_by'])) {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n              \/\/$cfg['fields'] = $indexes;\n              \/\/ Changed by Mirko\n              $cfg['fields'] = array_combine($idxs, $indexes);\n            } else {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n            }\n          }\n        } else {\n          $res          .= 'COUNT(*)';\n          $cfg['fields'] = [];\n        }\n      }\n\n      if (!empty($cfg['fields'])) {\n        $fields_to_put = [];\n        \/\/ Checking the selected fields\n        foreach ($cfg['fields'] as $alias => $f) {\n          $is_distinct = false;\n          $f           = trim($f);\n          $bits        = explode(' ', $f);\n          if ((count($bits) > 1) && (strtolower($bits[0]) === 'distinct')) {\n            $is_distinct = true;\n            array_shift($bits);\n            $f = implode(' ', $bits);\n          }\n\n          \/\/ Adding the alias in $fields\n          if (strpos($f, '(')) {\n            $fields_to_put[] = ($is_distinct ? 'DISTINCT ' : '') . $f . (\\is_string($alias) ? ' AS ' . $this->escape($alias) : '');\n          }\n          elseif (isset($cfg['available_fields']) && array_key_exists($f, $cfg['available_fields'])) {\n            $idx    = $cfg['available_fields'][$f];\n            if ($idx && isset($cfg['tables_full'][$idx])) {\n              $idx = $cfg['tables_full'][$idx];\n            }\n\n            $csn    = $this->colSimpleName($f);\n            $is_uid = false;\n            \/\/die(var_dump($idx, $f, $tables[$idx]));\n            if (($idx !== false) && isset($cfg['models'][$idx]['fields'][$csn])) {\n              $column = $cfg['models'][$idx]['fields'][$csn];\n              if (($column['type'] === 'binary') && ($column['maxlength'] === 16)) {\n                $is_uid = true;\n                if (!\\is_string($alias)) {\n                  $alias = $csn;\n                }\n              }\n            }\n\n            \/\/$res['fields'][$alias] = $this->cfn($f, $fields[$f]);\n            if ($is_uid) {\n              if (method_exists($this, 'getHexStatement')) {\n                $st = 'LOWER(' . $this->getHexStatement($this->colFullName($csn, $cfg['available_fields'][$f], true)) . ')';\n              }\n              else {\n                $st = 'LOWER(HEX(' . $this->colFullName($csn, $cfg['available_fields'][$f], true) . '))';\n              }\n            }\n            \/\/ For JSON fields\n            elseif ($cfg['available_fields'][$f] === false) {\n              $st = $f;\n            }\n            else {\n              $st = $this->colFullName($csn, $cfg['available_fields'][$f], true);\n            }\n\n            if (\\is_string($alias)) {\n              $st .= ' AS ' . $this->escape($alias);\n            }\n\n            $fields_to_put[] = ($is_distinct ? 'DISTINCT ' : '') . $st;\n          } elseif (isset($cfg['available_fields'][$f]) && ($cfg['available_fields'][$f] === false)) {\n            $this->error(\"Error! The column '$f' exists on several tables in '\" . implode(', ', $cfg['tables']), false);\n          } else {\n            $this->error(\"Error! The column '$f' doesn't exist in '\" . implode(', ', $cfg['tables']), false);\n          }\n        }\n\n        $res .= implode(', ', $fields_to_put);\n      }\n\n      $res          .= PHP_EOL;\n      $tables_to_put = [];\n      foreach ($cfg['tables'] as $alias => $tfn) {\n        $st = $this->tableFullName($tfn, true);\n        if (is_string($alias) && $alias !== $tfn) {\n          $st .= ' AS ' . $this->escape($alias);\n        }\n\n        $tables_to_put[] = $st;\n      }\n\n      $res .= 'FROM ' . implode(', ', $tables_to_put) . PHP_EOL;\n      return $res;\n    }\n\n    return $res;\n  }",
            "startLine": 1114,
            "endLine": 1270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getInsert": {
            "name": "getInsert",
            "summary": "Generates a string for the insert from a cfg array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $fields_to_put = [\n      'values' => [],\n      'fields' => [],\n    ];\n    $i             = 0;\n    foreach ($cfg['fields'] as $i => $f) {\n      if (isset($cfg['available_fields'][$f], $cfg['models'][$cfg['available_fields'][$f]])) {\n        $model  = $cfg['models'][$cfg['available_fields'][$f]];\n        $csn    = $this->colSimpleName($f);\n        if (isset($model['fields'][$csn])) {\n\n          $fields_to_put['fields'][] = $this->colSimpleName($f, true);\n          if ($cfg['values_desc'][$i] && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n            $fields_to_put['values'][] = $cfg['values'][$i][1];\n          }\n          else {\n            $fields_to_put['values'][] = '?';\n          }\n        }\n        else {\n          $this->error(X::_(\"Error! Impossible to find the model for %s\", implode(', ', $cfg['tables'])), false);\n        }\n      } else {\n        $this->error(X::_(\"Error! The column '%s' doesn't exist in %s\", $f, implode(', ', $cfg['tables'])), false);\n      }\n\n      $i++;\n    }\n\n    if (count($fields_to_put['fields']) && (count($cfg['tables']) === 1)) {\n      return 'INSERT ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') . 'INTO ' . $this->tableFullName(current($cfg['tables']), true) . PHP_EOL .\n        '(' . implode(', ', $fields_to_put['fields']) . ')' . PHP_EOL . ' VALUES (' .\n        implode(', ', $fields_to_put['values']) . ')' . PHP_EOL;\n    }\n\n    return '';\n  }",
            "startLine": 1279,
            "endLine": 1317,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getUpdate": {
            "name": "getUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res           = '';\n    $fields_to_put = [\n      'values' => [],\n      'fields' => [],\n    ];\n    foreach ($cfg['fields'] as $i => $f) {\n      if (isset($cfg['available_fields'][$f], $cfg['models'][$cfg['available_fields'][$f]])) {\n        $model  = $cfg['models'][$cfg['available_fields'][$f]];\n        $csn    = $this->colSimpleName($f);\n        if (isset($model['fields'][$csn])) {\n          $fields_to_put['fields'][] = $this->colSimpleName($f, true);\n          if ($cfg['values_desc'][$i] && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n            $fields_to_put['values'][] = $cfg['values'][$i][1];\n          }\n          else {\n            $fields_to_put['values'][] = '?';\n          }\n        }\n        else {\n          $this->error(X::_(\"Impossible to retrieve the column %s\", $f), false);\n        }\n      }\n      else {\n        $this->error(X::_(\"The column '%s' doesn't exist in %s\", $f, implode(', ', $cfg['tables'])), false);\n      }\n    }\n\n    if (count($fields_to_put['fields']) && (count($cfg['tables']) === 1)) {\n      $res .= 'UPDATE ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') . $this->tableFullName(current($cfg['tables']), true) . ' SET ';\n      $last = count($fields_to_put['fields']) - 1;\n      foreach ($fields_to_put['fields'] as $i => $f) {\n        $res .= $f . ' = ' . $fields_to_put['values'][$i];\n        if ($i < $last) {\n          $res .= ',';\n        }\n\n        $res .= PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1325,
            "endLine": 1368,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getDelete": {
            "name": "getDelete",
            "summary": "Return SQL code for row(s) DELETE.",
            "description": "```php\nX::dump($db->getDelete(['tables' => 'users']);\n\/\/ (string) DELETE FROM `db_example`.`table_users`\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getDelete(['tables' => 'users']);\n\/\/ (string) DELETE FROM `db_example`.`table_users`"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (count($cfg['tables']) === 1) {\n      $res = 'DELETE ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') .\n        (count($cfg['join'] ?? []) ? current($cfg['tables']) . ' ' : '') .\n        'FROM ' . $this->tableFullName(current($cfg['tables']), true) . PHP_EOL;\n    }\n\n    return $res;\n  }",
            "startLine": 1383,
            "endLine": 1393,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getJoin": {
            "name": "getJoin",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (!empty($cfg['join'])) {\n      foreach ($cfg['join'] as $join) {\n        if (isset($join['table'], $join['on']) && ($cond = $this->getConditions($join['on'], $cfg, false, 4))) {\n          $res .= '  ' .\n            (isset($join['type']) && (strtolower($join['type']) === 'left') ? 'LEFT ' : '') .\n            'JOIN ' . $this->tableFullName($join['table'], true) .\n            (!empty($join['alias']) ? ' AS ' . $this->escape($join['alias']) : '')\n            . PHP_EOL . '    ON ' . $cond;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1403,
            "endLine": 1419,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getWhere": {
            "name": "getWhere",
            "summary": "Returns a string with the WHERE part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = $this->getConditions($cfg['filters'] ?? [], $cfg);\n    if (!empty($res)) {\n      $res = 'WHERE ' . $res;\n    }\n\n    return $res;\n  }",
            "startLine": 1428,
            "endLine": 1436,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getGroupBy": {
            "name": "getGroupBy",
            "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res          = '';\n    $group_to_put = [];\n    if (!empty($cfg['group_by'])) {\n      foreach ($cfg['group_by'] as $g) {\n        if (isset($cfg['available_fields'][$g])) {\n          $group_to_put[] = $this->escape($g);\n        } else {\n          $this->error(\"Error! The column '$g' doesn't exist for group by \" . print_r($cfg, true), false);\n        }\n      }\n\n      if (count($group_to_put)) {\n        $res .= 'GROUP BY ' . implode(', ', $group_to_put) . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1445,
            "endLine": 1464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getHaving": {
            "name": "getHaving",
            "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (!empty($cfg['group_by'])\n      && !empty($cfg['having'])\n      && ($cond = $this->getConditions($cfg['having'], $cfg, true, 2))\n    ) {\n      if (!empty($cfg['count'])) {\n        $res .= ' WHERE ' . $cond . PHP_EOL;\n      } else {\n        $res .= '  HAVING ' . $cond . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1473,
            "endLine": 1488,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOrder": {
            "name": "getOrder",
            "summary": "Get a string starting with ORDER BY with corresponding parameters to $order.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (!empty($cfg['order'])) {\n      foreach ($cfg['order'] as $col => $dir) {\n        if (\\is_array($dir) && isset($dir['field'])) {\n          $col = $dir['field'];\n          $dir = $dir['dir'] ?? 'ASC';\n        }\n\n        if (isset($cfg['available_fields'][$col])) {\n          \/\/ If it's an alias we use the simple name\n          if (isset($cfg['fields'][$col])) {\n            $f = $this->colSimpleName($col, true);\n          } elseif ($cfg['available_fields'][$col] === false) {\n            $f = $col;\n          } else {\n            $f = $this->colFullName($col, $cfg['available_fields'][$col], true);\n          }\n\n          $res .= $f . ' ' . (strtolower($dir) === 'desc' ? 'DESC' : 'ASC') . ',' . PHP_EOL;\n        }\n      }\n\n      if (!empty($res)) {\n        return 'ORDER BY ' . substr($res, 0, Strrpos($res, ',')) . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1497,
            "endLine": 1527,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLimit": {
            "name": "getLimit",
            "summary": "Get a string starting with LIMIT with corresponding parameters to $where",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (!empty($cfg['limit']) && Str::isInteger($cfg['limit'])) {\n      $res .= 'LIMIT ' . (!empty($cfg['start']) && Str::isInteger($cfg['start']) ? (string)$cfg['start'] : '0') . ', ' . $cfg['limit'];\n    }\n\n    return $res;\n  }",
            "startLine": 1536,
            "endLine": 1544,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCreateConstraints": {
            "name": "getCreateConstraints",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $model = NULL)\n  {\n    $st = '';\n    if (!$model) {\n      $model = $this->modelize($table);\n    }\n\n    if ($model && !empty($model['keys'])) {\n      $constraints = array_filter(\n        $model['keys'], function ($a) {\n        return !empty($a['ref_table']) && isset($a['columns']) && (count($a['columns']) === 1)\n          && !empty($a['constraint']) && !empty($a['ref_column']);\n      }\n      );\n      if ($last = count($constraints)) {\n        $st .= 'ALTER TABLE ' . $this->escape($table) . PHP_EOL;\n        $i   = 0;\n        foreach ($constraints as $name => $key) {\n          $i++;\n          $st .= '  ADD ' .\n            'CONSTRAINT ' . $this->escape($key['constraint']) . ' FOREIGN KEY (' . $this->escape($key['columns'][0]) . ') ' .\n            'REFERENCES ' . $this->escape($key['ref_table']) . ' (' . $this->escape($key['ref_column']) . ')' .\n            (!empty($key['delete']) ? ' ON DELETE ' . $key['delete'] : '') .\n            (!empty($key['update']) ? ' ON UPDATE ' . $key['update'] : '') .\n            ($i === $last ? ';' : ',' . PHP_EOL);\n        }\n      }\n    }\n\n    return $st;\n  }",
            "startLine": 1560,
            "endLine": 1590,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "tableExists": {
            "name": "tableExists",
            "summary": "Returns true if the given table exists",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $database = '')\n  {\n    $q = \"SHOW tables \";\n    if ($database) {\n      $q .= \"FROM \" . $this->escape($database) . \" \";\n    }\n\n    return (bool)$this->getOne($q . \"LIKE ?\", $table);\n  }",
            "startLine": 1600,
            "endLine": 1608,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "or currently selected if none"
                }
            ]
        },
        "dropTable": {
            "name": "dropTable",
            "summary": "Drops a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $database = '')\n  {\n    $tfn = $this->tableFullName(($database ? $database . '.' : '') . $table, true);\n    if (!$tfn) {\n      throw new Exception(X::_(\"Invalid table name to drop\"));\n    }\n\n    if (!$this->tableExists($table, $database)) {\n      throw new Exception(X::_(\"The table %s does not exist\", $table));\n    }\n\n    $this->query(\"DROP table $tfn\");\n    return !$this->tableExists($table, $database);\n\n  }",
            "startLine": 1618,
            "endLine": 1632,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "or currently selected if none"
                }
            ]
        },
        "dropColumn": {
            "name": "dropColumn",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $column)\n  {\n    if (($table = $this->tableFullName($table, true)) && Str::checkName($column)) {\n      return (bool)$this->rawQuery(\"ALTER TABLE $table DROP COLUMN $column\");\n    }\n\n    return false;\n  }",
            "startLine": 1641,
            "endLine": 1648,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "treatConditions": {
            "name": "treatConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $where, bool $full = true)\n  {\n    if (!isset($where['conditions'])) {\n      $where['conditions'] = $where;\n    }\n\n    if (isset($where['conditions']) && \\is_array($where['conditions'])) {\n      if (!isset($where['logic']) || (strtoupper($where['logic']) !== 'OR')) {\n        $where['logic'] = 'AND';\n      }\n\n      $res = [\n        'conditions' => [],\n        'logic' => $where['logic']\n      ];\n      foreach ($where['conditions'] as $key => $f){\n        $is_array = \\is_array($f);\n        if ($is_array\n          && array_key_exists('conditions', $f)\n          && \\is_array($f['conditions'])\n        ) {\n          $res['conditions'][] = $this->treatConditions($f, false);\n        }\n        else {\n          if (\\is_string($key)) {\n            \/\/ 'id_user' => [1, 2] Will do OR\n            if (!$is_array) {\n              if (null === $f) {\n                $f = [\n                  'field' => $key,\n                  'operator' => 'isnull'\n                ];\n              }\n              else{\n                $f = [\n                  'field' => $key,\n                  'operator' => is_string($f) && !Str::isUid($f) ? 'LIKE' : '=',\n                  'value' => $f\n                ];\n              }\n            }\n            elseif (isset($f[0])) {\n              $tmp = [\n                'conditions' => [],\n                'logic' => 'OR'\n              ];\n              foreach ($f as $v){\n                if (null === $v) {\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => 'isnull'\n                  ];\n                }\n                else{\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => is_string($f) && !Str::isUid($f) ? 'LIKE' : '=',\n                    'value' => $v\n                  ];\n                }\n              }\n\n              $res['conditions'][] = $tmp;\n            }\n          }\n          elseif ($is_array && !X::isAssoc($f) && count($f) >= 2) {\n            $tmp = [\n              'field' => $f[0],\n              'operator' => $f[1]\n            ];\n            if (isset($f[3])) {\n              $tmp['exp'] = $f[3];\n            }\n            elseif (array_key_exists(2, $f)) {\n              if (is_array($f[2])) {\n                $tmp = [\n                  'conditions' => [],\n                  'logic' => 'AND'\n                ];\n                foreach ($f[2] as $v){\n                  if (null === $v) {\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => 'isnotnull'\n                    ];\n                  }\n                  else{\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => $f[1],\n                      'value' => $v\n                    ];\n                  }\n                }\n\n                $res['conditions'][] = $tmp;\n              }\n              elseif ($f[2] === null) {\n                $tmp['operator'] = $f[2] === '!=' ? 'isnotnull' : 'isnull';\n              }\n              else{\n                $tmp['value'] = $f[2];\n              }\n            }\n\n            $f = $tmp;\n          }\n\n          if (isset($f['field'])) {\n            if (!isset($f['operator'])) {\n              $f['operator'] = 'eq';\n            }\n\n            $res['conditions'][] = $f;\n          }\n        }\n      }\n\n      if ($full) {\n        $tmp = $this->_remove_conditions_value($res);\n        $res = [\n          'hashed' => $tmp['hashed'],\n          'values' => $tmp['values'],\n          'where' => $res\n        ];\n      }\n\n      return $res;\n    }\n\n    return false;\n  }",
            "startLine": 1655,
            "endLine": 1786,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "findReferences": {
            "name": "findReferences",
            "summary": "find_references",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, string $db = '')\n  {\n    $changed = false;\n    if ($db && ($db !== $this->getCurrent())) {\n      $changed = $this->getCurrent();\n      $this->change($db);\n    }\n\n    $column = $this->colFullName($column);\n    $bits   = explode('.', $column);\n    if (\\count($bits) === 2) {\n      array_unshift($bits, $this->getCurrent());\n    }\n\n    if (\\count($bits) !== 3) {\n      return null;\n    }\n\n    $refs   = [];\n    $schema = $this->modelize();\n    $test   = function ($key) use ($bits) {\n      return ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    };\n    foreach ($schema as $table => $cfg){\n      foreach ($cfg['keys'] as $k){\n        if ($test($k)) {\n          $refs[] = $table.'.'.$k['columns'][0];\n        }\n      }\n    }\n\n    if ($changed) {\n      $this->change($changed);\n    }\n\n    return $refs;\n  }",
            "startLine": 1825,
            "endLine": 1861,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "findRelations": {
            "name": "findRelations",
            "summary": "find_relations",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($column, string $db = '')\n  {\n    $changed = false;\n    if ($db && ($db !== $this->getCurrent())) {\n      $changed = $this->getCurrent();\n      $this->change($db);\n    }\n\n    $column = $this->colFullName($column);\n    $bits   = explode('.', $column);\n    if (\\count($bits) === 2) {\n      array_unshift($bits, $db ?: $this->current);\n    }\n\n    if (\\count($bits) !== 3) {\n      return null;\n    }\n\n    $table = $bits[1];\n    if ($schema = $this->modelize()) {\n      $refs = [];\n      $test = function ($key) use ($bits) {\n        return ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n      };\n      foreach ($schema as $tf => $cfg) {\n        $t = $this->tableSimpleName($tf);\n        if ($t !== $table) {\n          foreach ($cfg['keys'] as $k) {\n            if ($test($k)) {\n              foreach ($cfg['keys'] as $k2) {\n                \/\/ Is not the same table\n                if (!$test($k2)\n                  \/\/ Has a reference\n                  && !empty($k2['ref_column'])\n                  \/\/ and refers to a single column\n                  && (\\count($k['columns']) === 1)\n                  \/\/ A unique reference\n                  && (\\count($k2['columns']) === 1)\n                  \/\/ To a table with a primary\n                  && isset($schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']])\n                  \/\/ which is a sole column\n                  && (\\count($schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']]) === 1)\n                  \/\/ We retrieve the key name\n                  && ($key_name = $schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']][0])\n                  \/\/ which is unique\n                  && !empty($schema[$this->tableFullName($k2['ref_table'])]['keys'][$key_name]['unique'])\n                ) {\n                  if (!isset($refs[$t])) {\n                    $refs[$t] = ['column' => $k['columns'][0], 'refs' => []];\n                  }\n\n                  $refs[$t]['refs'][$k2['columns'][0]] = $k2['ref_table'].'.'.$k2['ref_column'];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if ($changed) {\n        $this->change($changed);\n      }\n\n      return $refs;\n    }\n  }",
            "startLine": 1870,
            "endLine": 1935,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "query": {
            "name": "query",
            "summary": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($statement)\n  {\n    if (!$this->pdo) {\n      return null;\n    }\n\n    $args = \\func_get_args();\n    \/\/ If fancy is false we just use the regular PDO query function\n    if (!$this->_fancy) {\n      return $this->pdo->query(...$args);\n    }\n\n    \/\/ The function can be called directly with func_get_args()\n    while ((\\count($args) === 1) && \\is_array($args[0])){\n      $args = $args[0];\n    }\n\n    if (!empty($args[0]) && \\is_string($args[0])) {\n      \/\/ The first argument is the statement\n      $statement = trim(array_shift($args));\n\n      \/\/ Sending a hash as second argument from helper functions will bind it to the saved statement\n      if (count($args)\n        && \\is_string($args[0])\n        && isset($this->queries[$args[0]])\n      ) {\n        $hash      = is_string($this->queries[$args[0]]) ? $this->queries[$args[0]] : $args[0];\n        $hash_sent = array_shift($args);\n      }\n      else {\n        $hash = $this->makeHash($statement);\n      }\n\n      $driver_options = [];\n      if (count($args)\n        && \\is_array($args[0])\n      ) {\n        \/\/ Case where drivers are arguments\n        if (!array_key_exists(0, $args[0])) {\n          $driver_options = array_shift($args);\n        }\n        \/\/ Case where values are in a single argument\n        elseif (\\count($args) === 1) {\n          $args = $args[0];\n        }\n      }\n\n      \/** @var array $params Will become the property last_params each time a query is executed *\/\n      $params     = [\n        'statement' => $statement,\n        'values' => [],\n        'last' => microtime(true)\n      ];\n      $num_values = 0;\n      foreach ($args as $i => $arg){\n        if (!\\is_array($arg)) {\n          $params['values'][] = $arg;\n          $num_values++;\n        }\n        elseif (isset($arg[2])) {\n          $params['values'][] = $arg[2];\n          $num_values++;\n        }\n      }\n\n      if (!isset($this->queries[$hash])) {\n        \/** @var int $placeholders The number of placeholders in the statement *\/\n        $placeholders = 0;\n        if ($sequences = $this->parseQuery($statement)) {\n          \/* Or looking for question marks *\/\n          $sequences = array_keys($sequences);\n          preg_match_all('\/(\\?)\/', $statement, $exp);\n          $placeholders = isset($exp[1]) && \\is_array($exp[1]) ? \\count($exp[1]) : 0;\n          while ($sequences[0] === 'OPTIONS'){\n            array_shift($sequences);\n          }\n\n          $params['kind']      = $sequences[0];\n          $params['union']     = isset($sequences['UNION']);\n          $params['write']     = !\\in_array($params['kind'], self::$read_kinds, true);\n          $params['structure'] = \\in_array($params['kind'], self::$structure_kinds, true);\n        }\n        elseif (($this->getEngine() === 'sqlite') && (strpos($statement, 'PRAGMA') === 0)) {\n          $params['kind'] = 'PRAGMA';\n        }\n        else {\n          throw new \\Exception(\n            \\defined('BBN_IS_DEV') && BBN_IS_DEV\n              ? \"Impossible to parse the query $statement\"\n              : 'Impossible to parse the query'\n          );\n        }\n\n        \/\/ This will add to the queries array\n        $this->_add_query(\n          $hash,\n          $statement,\n          $params['kind'],\n          $placeholders,\n          $driver_options\n        );\n        if (!empty($hash_sent)) {\n          $this->queries[$hash_sent] = $hash;\n        }\n      }\n      \/\/ The hash of the hash for retrieving a query based on the helper's config's hash\n      elseif (\\is_string($this->queries[$hash])) {\n        $hash = $this->queries[$hash];\n      }\n\n      $this->_update_query($hash);\n      $q =& $this->queries[$hash];\n      \/* If the number of values is inferior to the number of placeholders we fill the values with the last given value *\/\n      if (!empty($params['values']) && ($num_values < $q['placeholders'])) {\n        $this->error(X::_(\"Placeholders and values don't match\"), false);\n        $params['values'] = array_merge(\n          $params['values'],\n          array_fill($num_values, $q['placeholders'] - $num_values, end($params['values']))\n        );\n        $num_values       = \\count($params['values']);\n      }\n\n      \/* The number of values must match the number of placeholders to bind *\/\n      if ($num_values !== $q['placeholders']) {\n        $this->error(\n          X::_('Incorrect arguments count (your values: %u, in the statement: %u)', $num_values, $q['placeholders']).\"\\n\\n\"\n            . $statement.\"\\n\\n\".'Number of values'.count($params['values']).'Arguments:'\n            . print_r(\\func_get_args(), true)\n            . print_r($q, true),\n          false\n        );\n        exit;\n      }\n\n      if ($q['exe_time'] === 0) {\n        $time = $q['last'];\n      }\n\n      \/\/ That will always contain the parameters of the last query done\n\n      $this->addStatement($q['sql'], $params);\n      \/\/ If the statement is a structure modifier we need to clear the cache\n      if ($q['structure']) {\n        $tmp                = $q;\n        $this->queries      = [$hash => $tmp];\n        $this->list_queries = [[\n          'hash' => $hash,\n          'last' => $tmp['last']\n        ]];\n        unset($tmp);\n        \/** @todo Clear the cache *\/\n      }\n\n      try{\n        \/\/ This is a writing statement, it will execute the statement and return the number of affected rows\n        if ($q['write']) {\n          \/\/ A prepared query already exists for the writing\n          \/** @var \\bbn\\Db\\Query *\/\n          if ($q['prepared']) {\n            $r = $q['prepared']->init($params['values'])->execute();\n          }\n          \/\/ If there are no values we can assume the statement doesn't need to be prepared and is just executed\n          elseif ($num_values === 0) {\n            \/\/ Native PDO function which returns the number of affected rows\n            $r = $this->pdo->exec($q['sql']);\n          }\n          \/\/ Preparing the query\n          else{\n            \/\/ Native PDO function which will use Db\\Query as base class\n            \/** @var \\bbn\\Db\\Query *\/\n            $q['prepared'] = $this->pdo->prepare($q['sql'], $q['options']);\n            $r             = $q['prepared']->execute();\n          }\n        }\n        \/\/ This is a reading statement, it will prepare the statement and return a query object\n        else{\n          if (!$q['prepared']) {\n            \/\/ Native PDO function which will use Db\\Query as base class\n            $q['prepared'] = $this->pdo->prepare($q['sql'], $driver_options);\n          }\n          else{\n            \/\/ Returns the same Db\\Query object\n            $q['prepared']->init($params['values']);\n          }\n        }\n\n        if (!empty($time) && ($q['exe_time'] === 0)) {\n          $q['exe_time'] = microtime(true) - $time;\n        }\n      }\n      catch (\\PDOException $e) {\n        $this->error($e);\n      }\n\n      if ($this->check()) {\n        \/\/ So if read statement returns the query object\n        if (!$q['write']) {\n          return $q['prepared'];\n        }\n\n        \/\/ If it is a write statement returns the number of affected rows\n        if ($q['prepared'] && $q['write']) {\n          $r = $q['prepared']->rowCount();\n        }\n\n        \/\/ If it is an insert statement we (try to) set the last inserted ID\n        if (($q['kind'] === 'INSERT') && $r) {\n          $this->setLastInsertId();\n        }\n\n        if (!isset($r)) {\n          X::log($q, 'no_r_in_sql');\n          return false;\n        }\n\n        return $r ?: false;\n      }\n    }\n  }",
            "startLine": 1944,
            "endLine": 2162,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "modelize": {
            "name": "modelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "```php\nX::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = NULL, bool $force = false)\n  {\n    $r      = [];\n    $tables = false;\n    if (empty($table) || ($table === '*')) {\n      $tables = $this->getTables();\n    }\n    elseif (\\is_string($table)) {\n      $tables = [$table];\n    }\n    elseif (\\is_array($table)) {\n      $tables = $table;\n    }\n\n    if (\\is_array($tables)) {\n      foreach ($tables as $t) {\n        if ($full = $this->tableFullName($t)) {\n          $r[$full] = $this->_get_cache($full, 'columns', $force);\n        }\n      }\n\n      if (\\count($r) === 1) {\n        return end($r);\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "startLine": 2366,
            "endLine": 2395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will force the modernization to re-perform even if the cache exists"
                }
            ]
        },
        "enableTrigger": {
            "name": "enableTrigger",
            "summary": "Enable the triggers' functions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_triggers_disabled = false;\n    return $this;\n  }",
            "startLine": 2411,
            "endLine": 2415,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "disableTrigger": {
            "name": "disableTrigger",
            "summary": "Disable the triggers' functions",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_triggers_disabled = true;\n    return $this;\n  }",
            "startLine": 2423,
            "endLine": 2427,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "isTriggerEnabled": {
            "name": "isTriggerEnabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return !$this->_triggers_disabled;\n  }",
            "startLine": 2430,
            "endLine": 2433,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "isTriggerDisabled": {
            "name": "isTriggerDisabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_triggers_disabled;\n  }",
            "startLine": 2436,
            "endLine": 2439,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "setTrigger": {
            "name": "setTrigger",
            "summary": "Apply a function each time the methods $kind are used",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(callable $function, $kind = NULL, $moment = NULL, $tables = '*')\n  {\n    $kinds   = ['SELECT', 'INSERT', 'UPDATE', 'DELETE'];\n    $moments = ['before', 'after'];\n    if (empty($kind)) {\n      $kind = $kinds;\n    }\n    elseif (!\\is_array($kind)) {\n      $kind = (array)strtoupper($kind);\n    }\n    else{\n      $kind = array_map('strtoupper', $kind);\n    }\n\n    if (empty($moment)) {\n      $moment = $moments;\n    }\n    else {\n      $moment = !\\is_array($moment) ? (array)strtolower($moment) : array_map('strtolower', $moment);\n    }\n\n    foreach ($kind as $k){\n      if (\\in_array($k, $kinds, true)) {\n        foreach ($moment as $m){\n          if (array_key_exists($m, $this->_triggers[$k]) && \\in_array($m, $moments, true)) {\n            if ($tables === '*') {\n              $tables = $this->getTables();\n            }\n            elseif (Str::checkName($tables)) {\n              $tables = [$tables];\n            }\n\n            if (\\is_array($tables)) {\n              foreach ($tables as $table){\n                $t = $this->tableFullName($table);\n                if (!isset($this->_triggers[$k][$m][$t])) {\n                  $this->_triggers[$k][$m][$t] = [];\n                }\n\n                $this->_triggers[$k][$m][$t][] = $function;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 2451,
            "endLine": 2499,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "kind",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "select|insert|update|delete"
                },
                {
                    "name": "moment",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "before|after"
                },
                {
                    "name": "tables",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "*",
                    "default_name": "",
                    "description": "database's table(s) name(s)"
                }
            ]
        },
        "getTriggers": {
            "name": "getTriggers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_triggers;\n  }",
            "startLine": 2505,
            "endLine": 2508,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "processCfg": {
            "name": "processCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $args, bool $force = false)\n  {\n    \/\/ Avoid confusion when\n    while (isset($args[0]) && \\is_array($args[0])) {\n      $args = $args[0];\n    }\n\n    if (!empty($args['bbn_db_processed'])) {\n      return $args;\n    }\n\n    if (empty($args['bbn_db_treated'])) {\n      $args = $this->_treat_arguments($args);\n    }\n\n    if (isset($args['hash'])) {\n      if (isset($this->cfgs[$args['hash']])) {\n        return array_merge(\n          $this->cfgs[$args['hash']], [\n            'values' => $args['values'] ?? [],\n            'where' => $args['where'] ?? [],\n            'filters' => $args['filters'] ?? []\n          ]\n        );\n      }\n\n      $tables_full = [];\n      $res         = array_merge(\n        $args, [\n          'tables' => [],\n          'values_desc' => [],\n          'bbn_db_processed' => true,\n          'available_fields' => [],\n          'generate_id' => false\n        ]\n      );\n      $models      = [];\n\n      foreach ($args['tables'] as $key => $tab) {\n        if (empty($tab)) {\n          $this->log(\\debug_backtrace());\n          throw new \\Exception(\"$key is not defined\");\n        }\n\n        $tfn = $this->tableFullName($tab);\n\n        \/\/ 2 tables in the same statement can't have the same idx\n        $idx = \\is_string($key) ? $key : $tfn;\n        \/\/ Error if they do\n        if (isset($tables_full[$idx])) {\n          $this->error('You cannot use twice the same table with the same alias'.PHP_EOL.X::getDump($args['tables']), false);\n          return null;\n        }\n\n        $tables_full[$idx]   = $tfn;\n        $res['tables'][$idx] = $tfn;\n        if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n          $models[$tfn] = $model;\n        }\n      }\n\n      if ((\\count($res['tables']) === 1)\n        && ($tfn = array_values($res['tables'])[0])\n        && isset($models[$tfn]['keys']['PRIMARY'])\n        && (\\count($models[$tfn]['keys']['PRIMARY']['columns']) === 1)\n        && ($res['primary'] = $models[$tfn]['keys']['PRIMARY']['columns'][0])\n      ) {\n        $p                     = $models[$tfn]['fields'][$res['primary']];\n        $res['auto_increment'] = isset($p['extra']) && ($p['extra'] === 'auto_increment');\n        $res['primary_length'] = $p['maxlength'] ?? null;\n        $res['primary_type']   = $p['type'];\n        if (($res['kind'] === 'INSERT')\n          && !$res['auto_increment']\n          && !\\in_array($this->colSimpleName($res['primary']), $res['fields'], true)\n        ) {\n          $res['generate_id'] = true;\n          $res['fields'][]    = $res['primary'];\n        }\n      }\n\n      foreach ($args['join'] as $key => $join){\n        if (!empty($join['table']) && !empty($join['on'])) {\n          $tfn = $this->tableFullName($join['table']);\n          if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n            $models[$tfn] = $model;\n          }\n\n          $idx               = $join['alias'] ?? $tfn;\n          $tables_full[$idx] = $tfn;\n        }\n        else{\n          $this->error('Error! The join array must have on and table defined'.PHP_EOL.X::getDump($join), false);\n        }\n      }\n\n      foreach ($tables_full as $idx => $tfn){\n        foreach ($models[$tfn]['fields'] as $col => $cfg){\n          $res['available_fields'][$this->colFullName($col, $idx)] = $idx;\n          $csn                                             = $this->colSimpleName($col);\n          if (!isset($res['available_fields'][$csn])) {\n            \/*\n            $res['available_fields'][$csn] = false;\n            }\n            else{\n            *\/\n            $res['available_fields'][$csn] = $idx;\n          }\n        }\n      }\n\n      foreach ($res['fields'] as $idx => &$col){\n        if (strpos($col, '(')\n          || strpos($col, '-')\n          || strpos($col, \"+\")\n          || strpos($col, '*')\n          || strpos($col, \"\/\")\n          \/*\n        strpos($col, '->\"$.')  ||\n        strpos($col, \"->'$.\") ||\n        strpos($col, '->>\"$.')  ||\n        strpos($col, \"->>'$.\") ||\n        *\/\n          \/\/ string as value\n          || preg_match('\/^[\\\\\\'\\\"]{1}[^\\\\\\'\\\"]*[\\\\\\'\\\"]{1}$\/', $col)\n        ) {\n          $res['available_fields'][$col] = false;\n        }\n\n        if (\\is_string($idx)) {\n          if (!isset($res['available_fields'][$col])) {\n            \/\/$this->log($res);\n            \/\/$this->log(json_encode($res['available_fields'], JSON_PRETTY_PRINT));\n            $this->error(\"Impossible to find the column $col\", false);\n            return null;\n          }\n\n          $res['available_fields'][$idx] = $res['available_fields'][$col];\n        }\n      }\n\n      \/\/ From here the available fields are defined\n      if (!empty($res['filters'])) {\n        $this->arrangeConditions($res['filters'], $res);\n      }\n\n      unset($col);\n      $res['models']      = $models;\n      $res['tables_full'] = $tables_full;\n\n      if (($res['kind'] === 'SELECT') && empty($res['fields'])) {\n        foreach (array_keys($res['available_fields']) as $f){\n          if ($this->isColFullName($f)) {\n            $res['fields'][] = $f;\n          }\n        }\n      }\n\n      if (in_array($res['kind'], ['INSERT', 'UPDATE'])) {\n        $res = $this->removeVirtual($res);\n        foreach ($res['fields'] as $i => $name) {\n          $desc = [\n            'name' => $name\n          ];\n          if (isset($res['models'], $res['available_fields'][$name])) {\n            $t = $res['available_fields'][$name];\n            if (isset($tables_full[$t])\n              && ($model = $res['models'][$tables_full[$t]]['fields'])\n              && ($fname = $this->colSimpleName($name))\n              && !empty($model[$fname]['type'])\n            ) {\n              $desc['type']      = $model[$fname]['type'];\n              $desc['maxlength'] = $model[$fname]['maxlength'] ?? null;\n            }\n          }\n          if (isset($res['values'][$i]) && is_array($res['values'][$i])) {\n            if ((count($res['values'][$i]) !== 2) || !$res['values'][$i][1]) {\n              X::log([$res['tables'], $res['values']], 'arrays_in_db_write');\n              throw new Exception(X::_(\"Using an array for insert\/update value is allowed only for expressions with a 2 value array, the second value being the expression\"));\n            }\n\n            $desc['type'] = 'exp';\n          }\n\n          $res['values_desc'][] = $desc;\n        }\n      }\n\n      foreach ($res['join'] as $r){\n        $this->getValuesDesc($r['on'], $res, $res['values_desc']);\n      }\n      $this->getValuesDesc($res['filters'], $res, $res['values_desc']);\n      $this->getValuesDesc($res['having'], $res, $res['values_desc']);\n\n      switch ($res['kind']){\n        case 'SELECT':\n          if ($res['select_st'] = $this->getSelect($res)) {\n            $res['sql'] = $res['select_st'];\n          }\n          break;\n        case 'INSERT':\n          if ($res['insert_st'] = $this->getInsert($res)) {\n            $res['sql'] = $res['insert_st'];\n          }\n\n          \/\/var_dump($res);\n          break;\n        case 'UPDATE':\n          if ($res['update_st'] = $this->getUpdate($res)) {\n            $res['sql'] = $res['update_st'];\n          }\n          break;\n        case 'DELETE':\n          if ($res['delete_st'] = $this->getDelete($res)) {\n            $res['sql'] = $res['delete_st'];\n          }\n          break;\n      }\n\n      $res['join_st']   = $this->getJoin($res);\n      $res['where_st']  = $this->getWhere($res);\n      $res['group_st']  = $this->getGroupBy($res);\n      $res['having_st'] = $this->getHaving($res);\n\n      if (empty($res['count'])\n        && (count($res['fields']) === 1)\n        && (self::isAggregateFunction(reset($res['fields'])))\n      ) {\n        $res['order_st'] = '';\n        $res['limit_st'] = '';\n      }\n      else {\n        $res['order_st'] = $res['count'] ? '' : $this->getOrder($res);\n        $res['limit_st'] = $res['count'] ? '' : $this->getLimit($res);\n      }\n\n      if (!empty($res['sql'])) {\n        $res['sql'] .= $res['join_st'].$res['where_st'].$res['group_st'];\n        if ($res['count'] && $res['group_by']) {\n          $res['sql'] .= ') AS t '.PHP_EOL;\n        }\n\n        $res['sql']           .= $res['having_st'].$res['order_st'].$res['limit_st'];\n        $res['statement_hash'] = $this->makeHash($res['sql']);\n        $this->cfgs[$res['hash']] = $res;\n      }\n\n      return $res;\n    }\n\n    $this->error('Impossible to process the config (no hash)'.PHP_EOL.print_r($args, true), false);\n    return null;\n  }",
            "startLine": 2686,
            "endLine": 2937,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "reprocessCfg": {
            "name": "reprocessCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    unset($cfg['bbn_db_processed']);\n    unset($cfg['bbn_db_treated']);\n\n    if (isset($cfg['hash'])) {\n      unset($this->cfgs[$cfg['hash']]);\n    }\n\n    $tmp = $this->processCfg($cfg, true);\n\n    if (!empty($cfg['values']) && (count($cfg['values']) === count($tmp['values']))) {\n      $tmp = array_merge($tmp, ['values' => $cfg['values']]);\n    }\n\n    return $tmp;\n  }",
            "startLine": 2944,
            "endLine": 2960,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRealLastParams": {
            "name": "getRealLastParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_real_params;\n  }",
            "startLine": 3374,
            "endLine": 3377,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "realLast": {
            "name": "realLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_real_query;\n  }",
            "startLine": 3382,
            "endLine": 3385,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getLastValues": {
            "name": "getLastValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_params ? $this->last_params['values'] : null;\n  }",
            "startLine": 3387,
            "endLine": 3390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getLastParams": {
            "name": "getLastParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_params;\n  }",
            "startLine": 3392,
            "endLine": 3395,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "enableLast": {
            "name": "enableLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_last_enabled = true;\n  }",
            "startLine": 3400,
            "endLine": 3403,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "disableLast": {
            "name": "disableLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_last_enabled = false;\n  }",
            "startLine": 3408,
            "endLine": 3411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "setLastInsertId": {
            "name": "setLastInsertId",
            "summary": "Changes the value of last_insert_id (used by history).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id = '')\n  {\n    if ($id === '') {\n      if ($this->id_just_inserted) {\n        $id                     = $this->id_just_inserted;\n        $this->id_just_inserted = null;\n      }\n      else{\n        $id = $this->pdo->lastInsertId();\n        if (\\is_string($id) && Str::isInteger($id) && ((int)$id != PHP_INT_MAX)) {\n          $id = (int)$id;\n        }\n      }\n    }\n    else{\n      $this->id_just_inserted = $id;\n    }\n\n    $this->last_insert_id = $id;\n    return $this;\n  }",
            "startLine": 3427,
            "endLine": 3447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "lastId": {
            "name": "lastId",
            "summary": "Return the last inserted ID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->last_insert_id) {\n      return Str::isBuid($this->last_insert_id) ? bin2hex($this->last_insert_id) : $this->last_insert_id;\n    }\n\n    return false;\n  }",
            "startLine": 3454,
            "endLine": 3461,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "last": {
            "name": "last",
            "summary": "Return the last query for this connection.",
            "description": "```php\nX::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_query;\n  }",
            "startLine": 3473,
            "endLine": 3476,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "countQueries": {
            "name": "countQueries",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return \\count($this->queries);\n  }",
            "startLine": 3481,
            "endLine": 3484,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "flush": {
            "name": "flush",
            "summary": "Deletes all the queries recorded and returns their (ex) number.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $num                = \\count($this->queries);\n    $this->queries      = [];\n    $this->list_queries = [];\n    return $num;\n  }",
            "startLine": 3491,
            "endLine": 3497,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": []
        },
        "getHash": {
            "name": "getHash",
            "summary": "Gets the created hash.",
            "description": "```php\nX::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->hash;\n  }",
            "startLine": 3547,
            "endLine": 3550,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "startFancyStuff": {
            "name": "startFancyStuff",
            "summary": "Starts fancy stuff.",
            "description": "```php\n$db->startFancyStuff();\n\/\/ (self)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->startFancyStuff();\n\/\/ (self)"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->pdo->setAttribute(\\PDO::ATTR_STATEMENT_CLASS, [\\bbn\\Db\\Query::class, [$this]]);\n    $this->_fancy = 1;\n\n    return $this;\n  }",
            "startLine": 3561,
            "endLine": 3567,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "stopFancyStuff": {
            "name": "stopFancyStuff",
            "summary": "Stops fancy stuff.",
            "description": "```php\n $db->stopFancyStuff();\n\/\/ (self)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->stopFancyStuff();\n\/\/ (self)"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->pdo->setAttribute(\\PDO::ATTR_STATEMENT_CLASS, [\\PDOStatement::class]);\n    $this->_fancy = false;\n\n    return $this;\n  }",
            "startLine": 3579,
            "endLine": 3585,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "retrieveQuery": {
            "name": "retrieveQuery",
            "summary": "Retrieves a query array based on its hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $hash)\n  {\n    if (isset($this->queries[$hash])) {\n      if (\\is_string($this->queries[$hash])) {\n        $hash = $this->queries[$hash];\n      }\n\n      return $this->queries[$hash];\n    }\n\n    return null;\n  }",
            "startLine": 3631,
            "endLine": 3642,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "extractFields": {
            "name": "extractFields",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, array $conditions, array &$res = NULL)\n  {\n    if (null === $res) {\n      $res = [];\n    }\n\n    if (isset($conditions['conditions'])) {\n      $conditions = $conditions['conditions'];\n    }\n\n    foreach ($conditions as $c) {\n      if (isset($c['conditions'])) {\n        $this->extractFields($cfg, $c['conditions'], $res);\n      }\n      else {\n        if (isset($c['field'], $cfg['available_fields'][$c['field']])) {\n          $res[] = $cfg['available_fields'][$c['field']] ? $this->colFullName($c['field'], $cfg['available_fields'][$c['field']]) : $c['field'];\n        }\n\n        if (isset($c['exp'], $cfg['available_fields'][$c['exp']])) {\n          $res[] = $cfg['available_fields'][$c['exp']] ? $this->colFullName($c['exp'], $cfg['available_fields'][$c['exp']]) : $c['exp'];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 3650,
            "endLine": 3676,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "conditions",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "res",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "filterFilters": {
            "name": "filterFilters",
            "summary": "Retrieve an array of specific filters among the existing ones.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg, $field, $operator = NULL)\n  {\n    if (isset($cfg['filters'])) {\n      $f = function ($cond, &$res = []) use (&$f, $field, $operator) {\n        foreach ($cond as $c){\n          if (isset($c['conditions'])) {\n            $f($c['conditions'], $res);\n          }\n          elseif (($c['field'] === $field) && (!$operator || ($operator === $c['operator']))) {\n            $res[] = $c;\n          }\n        }\n\n        return $res;\n      };\n      return isset($cfg['filters']['conditions']) ? $f($cfg['filters']['conditions']) : [];\n    }\n\n    return null;\n  }",
            "startLine": 3686,
            "endLine": 3705,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "operator",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getOne": {
            "name": "getOne",
            "summary": "Executes the given query with given vars, and extracts the first cell's result.",
            "description": "```php\nX::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    \/** @var \\bbn\\Db\\Query $r *\/\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->fetchColumn(0);\n    }\n\n    return false;\n  }",
            "startLine": 3727,
            "endLine": 3735,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getKeyVal": {
            "name": "getKeyVal",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\n\n```php\nX::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>The value will be an array if the request has more than two fields.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      if ($rows = $r->getRows()) {\n        return X::indexByFirstVal($rows);\n      }\n\n      return [];\n    }\n\n    return null;\n  }",
            "startLine": 3768,
            "endLine": 3779,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getColArray": {
            "name": "getColArray",
            "summary": "Return an array with the values of single field resulting from the query.",
            "description": "```php\nX::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->getByColumns(...\\func_get_args())) {\n      return array_values(current($r));\n    }\n\n    return [];\n  }",
            "startLine": 3794,
            "endLine": 3801,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "select": {
            "name": "select",
            "summary": "Returns the first row resulting from the query as an object.",
            "description": "```php\nX::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $start = 0)\n  {\n    $args = $this->_add_kind($this->_set_limit_1(\\func_get_args()));\n    if ($r = $this->_exec(...$args)) {\n      if (!is_object($r)) {\n        $this->log([$args, $this->processCfg($args)]);\n      }\n      else{\n        return $r->getObject();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 3831,
            "endLine": 3844,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Return table's rows resulting from the query as an array of objects.",
            "description": "```php\nX::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind(\\func_get_args()))) {\n      return $r->getObjects();\n    }\n\n    return null;\n  }",
            "startLine": 3875,
            "endLine": 3882,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "iselect": {
            "name": "iselect",
            "summary": "Return the first row resulting from the query as a numeric array.",
            "description": "```php\nX::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args())))) {\n      return $r->getIrow();\n    }\n\n    return null;\n  }",
            "startLine": 3905,
            "endLine": 3912,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "iselectAll": {
            "name": "iselectAll",
            "summary": "Return the searched rows as an array of numeric arrays.",
            "description": "```php\nX::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind(\\func_get_args()))) {\n      return $r->getIrows();\n    }\n\n    return null;\n  }",
            "startLine": 3944,
            "endLine": 3951,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Return the first row resulting from the query as an indexed array.",
            "description": "```php\nX::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], int $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args())))) {\n      return $r->getRow();\n    }\n\n    return null;\n  }",
            "startLine": 3974,
            "endLine": 3981,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "rselectAll": {
            "name": "rselectAll",
            "summary": "Return table's rows as an array of indexed arrays.",
            "description": "```php\nX::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind(\\func_get_args()))) {\n      if (method_exists($r, 'getRows')) {\n        return $r->getRows();\n      }\n\n      $this->log('ERROR IN RSELECT_ALL', $r);\n    }\n\n    return [];\n  }",
            "startLine": 4012,
            "endLine": 4023,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "selectOne": {
            "name": "selectOne",
            "summary": "Return a single value",
            "description": "```php\nX::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $field = NULL, array $where = [], array $order = [], int $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(\\func_get_args())))) {\n      if (method_exists($r, 'getIrow')) {\n        return ($a = $r->getIrow()) ? $a[0] : false;\n      }\n\n      $this->log('ERROR IN SELECT_ONE', $this->last_cfg, $r, $this->_add_kind($this->_set_limit_1(\\func_get_args())));\n    }\n\n    return false;\n  }",
            "startLine": 4042,
            "endLine": 4053,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ]
        },
        "count": {
            "name": "count",
            "summary": "Return the number of records in the table corresponding to the $where condition (non mandatory).",
            "description": "```php\nX::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = [])\n  {\n    $args          = \\is_array($table) && (isset($table['tables']) || isset($table['table'])) ? $table : [\n      'tables' => [$table],\n      'where' => $where\n    ];\n    $args['count'] = true;\n    if (!empty($args['bbn_db_processed'])) {\n      unset($args['bbn_db_processed']);\n    }\n\n    if (\\is_object($r = $this->_exec($args))) {\n      $a = $r->getIrow();\n      return $a ? (int)$a[0] : null;\n    }\n\n    return null;\n  }",
            "startLine": 4068,
            "endLine": 4085,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                }
            ]
        },
        "selectAllByKeys": {
            "name": "selectAllByKeys",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n\n```php\nX::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>The value will be an array if the request has more than two fields.\nReturn the same value as &quot;get_key_val&quot;.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n    if ($rows = $this->rselectAll($table, $fields, $where, $order, $limit, $start)) {\n      return X::indexByFirstVal($rows);\n    }\n\n    return $this->check() ? [] : null;\n  }",
            "startLine": 4116,
            "endLine": 4123,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                }
            ]
        },
        "stat": {
            "name": "stat",
            "summary": "Return an array with the count of values corresponding to the where conditions.",
            "description": "```php\nX::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $column, array $where = [], array $order = [])\n  {\n    if ($this->check()) {\n      return $this->rselectAll(\n        [\n          'tables' => [$table],\n          'fields' => [\n            $column,\n            'num' => 'COUNT(*)'\n          ],\n          'where' => $where,\n          'order' => $order,\n          'group_by' => [$column]\n        ]\n      );\n    }\n\n    return null;\n  }",
            "startLine": 4150,
            "endLine": 4168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array."
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition."
                }
            ]
        },
        "countFieldValues": {
            "name": "countFieldValues",
            "summary": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.",
            "description": "```php\nX::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, string $field = NULL, array $where = [], array $order = [])\n  {\n    if (\\is_array($table) && \\is_array($table['fields']) && count($table['fields'])) {\n      $args  = $table;\n      $field = array_values($table['fields'])[0];\n    }\n    else{\n      $args = [\n        'tables' => [$table],\n        'where' => $where,\n        'order' => $order\n      ];\n    }\n\n    $args = array_merge(\n      $args, [\n        'kind' => 'SELECT',\n        'fields' => [\n          'val' => $field,\n          'num' => 'COUNT(*)'\n        ],\n        'group_by' => [$field]\n      ]\n    );\n    return $this->rselectAll($args);\n  }",
            "startLine": 4184,
            "endLine": 4209,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ]
        },
        "getColumnValues": {
            "name": "getColumnValues",
            "summary": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table",
            "description": "```php\nX::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, string $field = NULL, array $where = [], array $order = [], int $limit = 0, int $start = 0)\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = [];\n      if (\\is_array($table) && isset($table['fields']) && \\is_array($table['fields']) && !empty($table['fields'][0])) {\n        array_splice($table['fields'], 0, 1, 'DISTINCT '.(string)$table['fields'][0]);\n      }\n      elseif (\\is_string($table) && \\is_string($field) && (stripos($field, 'DISTINCT') !== 0)) {\n        $field = 'DISTINCT '.$field;\n      }\n\n      if ($rows = $this->iselectAll($table, $field, $where, $order, $limit, $start)) {\n        foreach ($rows as $row){\n          $res[] = $row[0];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 4233,
            "endLine": 4253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts row(s) in a table.",
            "description": "<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;insert(&quot;table_users&quot;, [\n[&quot;name&quot; =&gt; &quot;Ted&quot;],\n[&quot;surname&quot; =&gt; &quot;McLow&quot;]\n]);\n<\/code><\/p>\n<p><code>\n$db-&gt;insert(&quot;table_users&quot;, [\n[&quot;name&quot; =&gt; &quot;July&quot;],\n[&quot;surname&quot; =&gt; &quot;O'neill&quot;]\n], [\n[&quot;name&quot; =&gt; &quot;Peter&quot;],\n[&quot;surname&quot; =&gt; &quot;Griffin&quot;]\n], [\n[&quot;name&quot; =&gt; &quot;Marge&quot;],\n[&quot;surname&quot; =&gt; &quot;Simpson&quot;]\n]);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, bool $ignore = false)\n  {\n    if (empty($table)) {\n      throw new \\Exception(X::_('Table name is not specified'));\n    }\n\n    if (\\is_array($table) && isset($table['values'])) {\n      $values = $table['values'];\n    }\n\n    \/\/ Array of arrays\n    if (\\is_array($values)\n      && count($values)\n      && !X::isAssoc($values)\n      && \\is_array($values[0])\n    ) {\n      $res = 0;\n\n      foreach ($values as $v){\n        $res += $this->insert(\n          is_array($table)\n            ? ($table['tables'][0] ?? '')\n            : $table,\n          $v,\n          is_array($table)\n            ? ($table['ignore'] ?? $ignore)\n            : $ignore\n        );\n      }\n\n      return $res;\n    }\n\n    $cfg         = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'INSERT';\n    return $this->_exec($cfg);\n  }",
            "startLine": 4295,
            "endLine": 4335,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true, controls if the row is already existing and ignores it."
                }
            ]
        },
        "insertUpdate": {
            "name": "insertUpdate",
            "summary": "If not exist inserts row(s) in a table, else update.",
            "description": "<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;insertUpdate(\n&quot;table_users&quot;,\n[\n'id' =&gt; '12',\n'name' =&gt; 'Frank'\n]\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL)\n  {\n    if (empty($table)) {\n      throw new \\Exception(X::_('Table name is not specified'));\n    }\n    \/\/ Twice the arguments\n    if (\\is_array($table) && isset($table['values'])) {\n      $values = $table['values'];\n    }\n\n    if (!X::isAssoc($values)) {\n      $res = 0;\n      foreach ($values as $v){\n        $res += $this->insertUpdate(\n          is_array($table)\n            ? ($table['tables'][0] ?? $table['table'][0] ?? '')\n            : $table,\n          $v\n        );\n      }\n\n      return $res;\n    }\n\n    $keys   = $this->getKeys($table);\n    $unique = [];\n    foreach ($keys['keys'] as $k){\n      \/\/ Checking each unique key\n      if ($k['unique']) {\n        $i = 0;\n        foreach ($k['columns'] as $c){\n          if (isset($values[$c])) {\n            $unique[$c] = $values[$c];\n            $i++;\n          }\n        }\n\n        \/\/ Only if the number of known field values matches the number of columns\n        \/\/ which are parts of the unique key\n        \/\/ If a value is null it won't pass isset and so won't be used\n        if (($i === \\count($k['columns'])) && $this->count($table, $unique)) {\n          \/\/ Removing unique matching fields from the values (as it is the where)\n          foreach ($unique as $f => $v){\n            unset($values[$f]);\n          }\n\n          \/\/ For updating\n          return $this->update($table, $values, $unique);\n        }\n      }\n    }\n\n    \/\/ No need to update, inserting\n    return $this->insert($table, $values);\n  }",
            "startLine": 4357,
            "endLine": 4411,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates row(s) in a table.",
            "description": "<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;update(\n&quot;table_users&quot;,\n[\n['name' =&gt; 'Frank'],\n['surname' =&gt; 'Red']\n],\n['id' =&gt; '127']\n);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $values = NULL, array $where = NULL, bool $ignore = false)\n  {\n    $cfg         = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'UPDATE';\n    return $this->_exec($cfg);\n  }",
            "startLine": 4435,
            "endLine": 4445,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new value(s)."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If IGNORE should be added to the statement"
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes row(s) in a table.",
            "description": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p><code>\n$db-&gt;delete(&quot;table_users&quot;, ['id' =&gt; '32']);\n<\/code><\/p>"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $where = NULL, bool $ignore = false)\n  {\n    $cfg         = \\is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'DELETE';\n    return $this->_exec($cfg);\n  }",
            "startLine": 4461,
            "endLine": 4470,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "default: false."
                }
            ]
        },
        "fetch": {
            "name": "fetch",
            "summary": "Return an indexed array with the first result of the query or false if there are no results.",
            "description": "```php\nX::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $query)\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->fetch();\n    }\n\n    return false;\n  }",
            "startLine": 4495,
            "endLine": 4502,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchAll": {
            "name": "fetchAll",
            "summary": "Return an array of indexed array with all results of the query or empty array if there are no results.",
            "description": "```php\nX::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $query)\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $this->fetchAllResults($r);\n    }\n\n    return false;\n  }",
            "startLine": 4534,
            "endLine": 4541,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fetchColumn": {
            "name": "fetchColumn",
            "summary": "Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result",
            "description": "```php\nX::dump($db->fetchColumn(\"SELECT `name`, `id` FROM users WHERE name = ?\", 0, 'john'));\n\/\/ (string) \"john\"\n\nX::dump($db->fetchColumn(\"SELECT `name`, `email` FROM users WHERE name = ?\", 1, 'john'));\n\/\/ (string) \"john@mail.com\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchColumn(\"SELECT `name`, `id` FROM users WHERE name = ?\", 0, 'john'));\n\/\/ (string) \"john\"\n\nX::dump($db->fetchColumn(\"SELECT `name`, `email` FROM users WHERE name = ?\", 1, 'john'));\n\/\/ (string) \"john@mail.com\""
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query, int $num = 0)\n  {\n    $args = func_get_args();\n\n    if (isset($args[1])) {\n      unset($args[1]);\n    }\n\n    if ($r = $this->query(...$args)) {\n      return $r->fetchColumn($num);\n    }\n\n    return false;\n  }",
            "startLine": 4559,
            "endLine": 4572,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "fetchObject": {
            "name": "fetchObject",
            "summary": "Return stdClass object or false if no result.",
            "description": "```php\nX::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($query)\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->fetchObject();\n    }\n\n    return false;\n  }",
            "startLine": 4589,
            "endLine": 4596,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRows": {
            "name": "getRows",
            "summary": "Return an array that includes indexed arrays for every row resultant from the query.",
            "description": "```php\nX::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getRows();\n    }\n\n    return null;\n  }",
            "startLine": 4620,
            "endLine": 4627,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getRow": {
            "name": "getRow",
            "summary": "Return the first row resulting from the query as an array indexed with the fields' name.",
            "description": "```php\nX::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getRow();\n    }\n\n    return null;\n  }",
            "startLine": 4646,
            "endLine": 4653,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getIrow": {
            "name": "getIrow",
            "summary": "Return a row as a numeric indexed array.",
            "description": "```php\nX::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getIrow();\n    }\n\n    return null;\n  }",
            "startLine": 4672,
            "endLine": 4679,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getIrows": {
            "name": "getIrows",
            "summary": "Return an array of numeric indexed rows.",
            "description": "```php\nX::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getIrows();\n    }\n\n    return null;\n  }",
            "startLine": 4702,
            "endLine": 4709,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getByColumns": {
            "name": "getByColumns",
            "summary": "Return an array indexed on the searched field's in which there are all the values of the column.",
            "description": "```php\nX::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getByColumns();\n    }\n\n    return null;\n  }",
            "startLine": 4733,
            "endLine": 4740,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getObject": {
            "name": "getObject",
            "summary": "Return the first row resulting from the query as an object.",
            "description": "Synonym of get_obj.\n\n```php\nX::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Synonym of get_obj.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getObject();\n    }\n\n    return null;\n  }",
            "startLine": 4757,
            "endLine": 4764,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "stdClass"
            ],
            "parent": false,
            "arguments": []
        },
        "getObjects": {
            "name": "getObjects",
            "summary": "Return an array of stdClass objects.",
            "description": "```php\nX::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($r = $this->query(...\\func_get_args())) {\n      return $r->getObjects();\n    }\n\n    return [];\n  }",
            "startLine": 4796,
            "endLine": 4803,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getForeignKeys": {
            "name": "getForeignKeys",
            "summary": "Return an array with tables and fields related to the searched foreign key.",
            "description": "```php\nX::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $col, string $table, string $db = NULL)\n  {\n    if (!$db) {\n      $db = $this->getCurrent();\n    }\n\n    $res   = [];\n    $model = $this->modelize();\n    foreach ($model as $tn => $m){\n      foreach ($m['keys'] as $k => $t){\n        if (($t['ref_table'] === $table)\n          && ($t['ref_column'] === $col)\n          && ($t['ref_db'] === $db)\n          && (\\count($t['columns']) === 1)\n        ) {\n          if (!isset($res[$tn])) {\n            $res[$tn] = [$t['columns'][0]];\n          }\n          else{\n            $res[$tn][] = $t['columns'][0];\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 4818,
            "endLine": 4844,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The database name if different from the current one"
                }
            ]
        },
        "hasIdIncrement": {
            "name": "hasIdIncrement",
            "summary": "Return true if in the table there are fields with auto-increment.",
            "description": "Working only on mysql.\n\n```php\nX::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Working only on mysql.<\/p>"
                },
                {
                    "type": "code",
                    "content": "X::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n    return ($model = $this->modelize($table)) &&\n      isset($model['keys']['PRIMARY']) &&\n      (\\count($model['keys']['PRIMARY']['columns']) === 1) &&\n      ($model['fields'][$model['keys']['PRIMARY']['columns'][0]]['extra'] === 'auto_increment');\n  }",
            "startLine": 4858,
            "endLine": 4864,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "fmodelize": {
            "name": "fmodelize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table = '', bool $force = false)\n  {\n    if ($res = $this->modelize(...\\func_get_args())) {\n      foreach ($res['fields'] as $n => $f){\n        $res['fields'][$n]['name'] = $n;\n        $res['fields'][$n]['keys'] = [];\n        if (isset($res['cols'][$n])) {\n          foreach ($res['cols'][$n] as $key){\n            $res['fields'][$n]['keys'][$key] = $res['keys'][$key];\n          }\n        }\n      }\n\n      return $res['fields'];\n    }\n\n    return null;\n  }",
            "startLine": 4872,
            "endLine": 4889,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "fetchAllResults": {
            "name": "fetchAllResults",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(PDOStatement $PDOStatement, $args)\n  {\n    if (method_exists($PDOStatement, '_fetchAll')) {\n      return $PDOStatement->_fetchAll(...$args);\n    }\n\n    return $PDOStatement->fetchAll(...$args);\n  }",
            "startLine": 4896,
            "endLine": 4903,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "PDOStatement",
                    "position": 0,
                    "type": "PDOStatement",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "$PDOStatement"
                },
                {
                    "name": "args",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "error": {
            "name": "error",
            "summary": "Set an error and acts appropriately based oon the error mode",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($e, bool $show_last = true, bool $show_backtrace = true)\n  {\n    $this->_has_error = true;\n    self::_set_has_error_all();\n    $msg = [\n      self::$LINE,\n      self::getLogLine('ERROR DB!'),\n      self::$LINE\n    ];\n    if (\\is_string($e)) {\n      $msg[] = self::getLogLine('USER MESSAGE');\n      $msg[] = $e;\n    }\n    elseif (method_exists($e, 'getMessage')) {\n      $msg[] = self::getLogLine('DB MESSAGE');\n      $msg[] = $e->getMessage();\n    }\n\n    $this->last_error = end($msg);\n\n    if ($show_last) {\n      $msg[]            = self::getLogLine('QUERY');\n      $msg[]            = $this->last();\n\n      if (($last_real_params = $this->getRealLastParams()) && !empty($last_real_params['values'])) {\n        $msg[] = self::getLogLine('VALUES');\n        foreach ($last_real_params['values'] as $v){\n          if ($v === null) {\n            $msg[] = 'NULL';\n          }\n          elseif (\\is_bool($v)) {\n            $msg[] = $v ? 'TRUE' : 'FALSE';\n          }\n          elseif (\\is_string($v)) {\n            $msg[] = Str::isBuid($v) ? bin2hex($v) : Str::cut($v, 30);\n          }\n          else{\n            $msg[] = $v;\n          }\n        }\n      }\n    }\n\n    if ($show_backtrace) {\n      $msg[] = self::getLogLine('BACKTRACE');\n      $last = '';\n      $i = 0;\n      $btr = array_map(function($a) use (&$last, &$i) {\n        $r = [\n          'dfile' => X::basename(\n            X::dirname($a['file'])).'\/'.\n            X::basename($a['file']\n          ),\n          'good' => false\n        ];\n        if (($last === 'bbn\/Db.php') && ($r['dfile'] !== $last)) {\n          $r['good'] = true;\n        }\n\n        $last = $r['dfile'];\n        $r['msg'] = \"{$a['function']}  (\".\n          $r['dfile'] . \":{$a['line']})\";\n        $i++;\n        return $r;\n      }, debug_backtrace());\n      $dbt = array_reverse($btr);\n      array_walk(\n        $dbt,\n        function ($a, $i) use (&$msg) {\n          if (isset($a['dfile'])) {\n            $msg[] = str_repeat($a['good'] ? '!' : ' ', $i).\n            ($i ? '->' : '').$a['msg'];\n          }\n        }\n      );\n    }\n\n    $this->log(implode(PHP_EOL, $msg));\n    if ($this->on_error === Errors::E_EXCEPTION) {\n      throw new \\Exception(X::join($msg, PHP_EOL));\n    }\n\n    elseif ($this->on_error === Errors::E_DIE) {\n      throw new \\Exception(X::join($msg, PHP_EOL));\n      die();\n    }\n  }",
            "startLine": 51,
            "endLine": 137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "void"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "e",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "show_last",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "last"
                },
                {
                    "name": "show_backtrace",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "backtrace"
                }
            ]
        },
        "getLogLine": {
            "name": "getLogLine",
            "summary": "Returns a string with the given text in the middle of a \"line\" of logs.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $text = '')\n  {\n    if ($text) {\n      $text = ' '.$text.' ';\n    }\n\n    $tot  = \\strlen(self::$LINE) - \\strlen($text);\n    $char = \\substr(self::$LINE, 0, 1);\n    return \\str_repeat($char, floor($tot \/ 2)).$text.\\str_repeat($char, ceil($tot \/ 2));\n  }",
            "startLine": 155,
            "endLine": 164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The text to write"
                }
            ]
        },
        "log": {
            "name": "log",
            "summary": "Writes in data\/logs\/db.log.",
            "description": "```php\n$db->$db->log('test');\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->$db->log('test');"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      X::log($a, 'db');\n    }\n\n    return $this;\n  }",
            "startLine": 175,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setErrorMode": {
            "name": "setErrorMode",
            "summary": "Sets the error mode.",
            "description": "```php\n$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $mode)\n  {\n    $this->on_error = $mode;\n    return $this;\n  }",
            "startLine": 196,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                }
            ]
        },
        "getErrorMode": {
            "name": "getErrorMode",
            "summary": "Gets the error mode.",
            "description": "```php\nX::dump($db->getErrorMode());\n\/\/ (string) stop_all\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getErrorMode());\n\/\/ (string) stop_all"
                }
            ],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->on_error;\n  }",
            "startLine": 211,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getLastError": {
            "name": "getLastError",
            "summary": "Returns the last error.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->last_error;\n  }",
            "startLine": 221,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks if the database is ready to process a query.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Sql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!property_exists($this, 'current')) {\n      throw new \\Exception('Property current does not exist');\n    }\n\n    \/\/ if $on_error is set to E_CONTINUE returns true\n    if (in_array($this->on_error, [Errors::E_EXCEPTION, Errors::E_CONTINUE])) {\n      return true;\n    }\n\n    \/\/ If any connection has an error with mode E_STOP_ALL\n    if (self::$_has_error_all && ($this->on_error === Errors::E_STOP_ALL)) {\n      return false;\n    }\n\n    \/\/ If this connection has an error with mode E_STOP or E_STOP_ALL\n    if ($this->_has_error && in_array($this->on_error, [Errors::E_STOP, $this->on_error === Errors::E_STOP_ALL])) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 232,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "createIndex": {
            "name": "createIndex",
            "summary": "Creates an index",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlEngines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, $column, bool $unique = false, $length = NULL)\n  {\n  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/\n  public function deleteIndex(string $table, string $key): bool;\n\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string|null $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n  \/**\n   * Return an array including privileges of a specific db_user or all db_users.\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n  \/**\n   * Renames the given table to the new given name.\n   *\n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $col\n   * @return bool\n   *\/\n  public function createColumn(string $table, string $column, array $col): bool;\n\n  \/**\n   * Drops the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/\n  }",
            "startLine": 16,
            "endLine": 16,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unique",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteIndex": {
            "name": "deleteIndex",
            "summary": "Deletes an index",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlEngines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $key)\n  {\n  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string|null $db\n   * @return bool\n   *\/\n  public function createUser(string $user, string $pass, string $db = null): bool;\n\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n  \/**\n   * Return an array including privileges of a specific db_user or all db_users.\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n  \/**\n   * Renames the given table to the new given name.\n   *\n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $col\n   * @return bool\n   *\/\n  public function createColumn(string $table, string $column, array $col): bool;\n\n  \/**\n   * Drops the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/\n  }",
            "startLine": 25,
            "endLine": 25,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createUser": {
            "name": "createUser",
            "summary": "Creates a database user",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlEngines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $user, string $pass, string $db = NULL)\n  {\n  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/\n  public function deleteUser(string $user): bool;\n\n  \/**\n   * Return an array including privileges of a specific db_user or all db_users.\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n  \/**\n   * Renames the given table to the new given name.\n   *\n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $col\n   * @return bool\n   *\/\n  public function createColumn(string $table, string $column, array $col): bool;\n\n  \/**\n   * Drops the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/\n  }",
            "startLine": 35,
            "endLine": 35,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pass",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteUser": {
            "name": "deleteUser",
            "summary": "Deletes a database user",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlEngines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $user)\n  {\n  \/**\n   * Return an array including privileges of a specific db_user or all db_users.\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/\n  public function getUsers(string $user = '', string $host = ''): ?array;\n\n  \/**\n   * Renames the given table to the new given name.\n   *\n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $col\n   * @return bool\n   *\/\n  public function createColumn(string $table, string $column, array $col): bool;\n\n  \/**\n   * Drops the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/\n  }",
            "startLine": 43,
            "endLine": 43,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "Return an array including privileges of a specific db_user or all db_users.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlEngines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $user = '', string $host = '')\n  {\n  \/**\n   * Renames the given table to the new given name.\n   *\n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/\n  public function renameTable(string $table, string $newName): bool;\n\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $col\n   * @return bool\n   *\/\n  public function createColumn(string $table, string $column, array $col): bool;\n\n  \/**\n   * Drops the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/\n  }",
            "startLine": 52,
            "endLine": 52,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "renameTable": {
            "name": "renameTable",
            "summary": "Renames the given table to the new given name.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlEngines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $newName)\n  {\n  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/\n  public function getTableComment(string $table): string;\n\n  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $col\n   * @return bool\n   *\/\n  public function createColumn(string $table, string $column, array $col): bool;\n\n  \/**\n   * Drops the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/\n  }",
            "startLine": 61,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The current table's name"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The new name."
                }
            ]
        },
        "getTableComment": {
            "name": "getTableComment",
            "summary": "Returns the comment (or an empty string if none) for a given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlEngines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $col\n   * @return bool\n   *\/\n  public function createColumn(string $table, string $column, array $col): bool;\n\n  \/**\n   * Drops the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/\n  }",
            "startLine": 70,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "createColumn": {
            "name": "createColumn",
            "summary": "Creates the given column for the given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlEngines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $column, array $col)\n  {\n  \/**\n   * Drops the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/\n  }",
            "startLine": 80,
            "endLine": 80,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "col",
                    "position": 2,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "postCreation": {
            "name": "postCreation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Fetches the database and returns an array of several arrays of rows text-indexed\n   *\n   * @param string $db\n   * @return mixed\n   *\/\n  public function change(string $db);\n\n\n  \/**\n   * Returns a database item expression escaped like database, table, column, key names\n   *\n   * @param string $item The item's name (escaped or not)\n   * @return string | false\n   *\/\n  public function escape(string $item): string;\n\n\n  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableFullName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function tableSimpleName(string $table, bool $escaped = false): ?string;\n\n\n  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string      $col     The column's name (escaped or not)\n   * @param null|string $table   The table's name (escaped or not)\n   * @param bool        $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colFullName(string $col, ?string $table = null, bool $escaped = false);\n\n\n  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return string | false\n   *\/\n  public function colSimpleName(string $col, bool $escaped = false);\n\n\n  \/**\n   * @param string $table\n   * @return bool\n   *\/\n  public function isTableFullName(string $table): bool;\n\n\n  \/**\n   * @param string $col\n   * @return bool\n   *\/\n  public function isColFullName(string $col): bool;\n\n\n  \/**\n   * Disables foreign keys check.\n   *\n   *\/\n  public function disableKeys();\n\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 39,
            "endLine": 39,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "disableKeys": {
            "name": "disableKeys",
            "summary": "Disables foreign keys check.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Enables foreign keys check.\n   *\n   *\/\n  public function enableKeys();\n\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 119,
            "endLine": 119,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "enableKeys": {
            "name": "enableKeys",
            "summary": "Enables foreign keys check.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/\n  public function getDatabases(): ?array;\n\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 126,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getDatabases": {
            "name": "getDatabases",
            "summary": "Return databases' names as an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/\n  public function getTables(string $database = ''): ?array;\n\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 134,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getTables": {
            "name": "getTables",
            "summary": "Return tables' names of a database as an array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database = '')\n  {\n\n  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getColumns(string $table): ?array;\n\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 143,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getColumns": {
            "name": "getColumns",
            "summary": "Return columns' structure of a table as an array indexed with the fields names.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n\n  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * @return array|null\n   *\/\n  public function getRows(): ?array;\n\n\n  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * @return array|null\n   *\/\n  public function getRow(): ?array;\n\n  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * @return array|null\n   *\/\n  public function getIrow(): ?array;\n\n\n  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * @return array|null\n   *\/\n  public function getIrows(): ?array;\n\n\n  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * @return array|null\n   *\/\n  public function getByColumns(): ?array;\n\n  \/**\n   * @return \\stdClass|null\n   *\/\n  public function getObject(): ?\\stdClass;\n\n\n  \/**\n   * Return an array of stdClass objects.\n   *\n   * @return array|null\n   *\/\n  public function getObjects(): ?array;\n\n  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/\n  public function getKeys(string $table): ?array;\n\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 152,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getKeys": {
            "name": "getKeys",
            "summary": "Return the table's keys as an array indexed with the fields names.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table)\n  {\n\n  \/**\n   * Returns a string with the conditions for any filter clause.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/\n  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string;\n\n\n  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function createDatabase(string $database): bool;\n\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 212,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createDatabase": {
            "name": "createDatabase",
            "summary": "Creates a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database)\n  {\n\n  \/**\n   * Drops a database\n   *\n   * @param string $database\n   * @return bool\n   *\/\n  public function dropDatabase(string $database): bool;\n\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 233,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dropDatabase": {
            "name": "dropDatabase",
            "summary": "Drops a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database)\n  {\n  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string $database or currently selected\n   * @return bool\n   *\/\n  public function dropTable(string $table, string $database = ''): bool;\n\n  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function dbSize(string $database = '', string $type = ''): int;\n\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 242,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbSize": {
            "name": "dbSize",
            "summary": "Gets the size of a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $database = '', string $type = '')\n  {\n\n  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/\n  public function tableSize(string $table, string $type = ''): int;\n\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 260,
            "endLine": 260,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableSize": {
            "name": "tableSize",
            "summary": "Gets the size of a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, string $type = '')\n  {\n\n  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/\n  public function status(string $table = '', string $database = '');\n\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 270,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "status": {
            "name": "status",
            "summary": "Gets the status of a table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table = '', string $database = '')\n  {\n\n  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/\n  public function getUid(): ?string;\n\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 280,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUid": {
            "name": "getUid",
            "summary": "Returns a UUID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  \/**\n   * Starts fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function startFancyStuff(): self;\n\n  \/**\n   * Stops fancy stuff.\n   *\n   * @return $this\n   *\/\n  public function stopFancyStuff(): self;\n\n  \/**\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function processCfg(array $args, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array|null\n   *\/\n  public function reprocessCfg(array $cfg): ?array;\n\n  \/**\n   * Changes the value of last inserted id.\n   *\n   * @param string $id\n   * @return $this\n   *\/\n  public function setLastInsertId($id = ''): self;\n\n  \/**\n   * Return the last inserted ID.\n   *\n   * @return mixed\n   *\/\n  public function lastId();\n\n  \/**\n   * Return the last query for this connection.\n   *\n   * @return string|null\n   *\/\n  public function last(): ?string;\n\n  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * @param null $table\n   * @param bool $force\n   * @return array|null\n   *\/\n  public function modelize($table = null, bool $force = false): ?array;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  public function getQueryValues(array $cfg): array;\n\n  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/\n  public function treatConditions(array $where, bool $full = true);\n\n  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/\n  public function enableTrigger(): self;\n\n  \/**\n   * Disable the triggers' functions\n   *\n   * @return $this\n   *\/\n  public function disableTrigger(): self;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerEnabled(): bool;\n\n  \/**\n   * @return bool\n   *\/\n  public function isTriggerDisabled(): bool;\n\n  \/**\n   * @param callable $function\n   * @param array|string|null $kind\n   * @param array|string|null $moment\n   * @param null|string|array $tables\n   * @return self\n   *\/\n  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self;\n\n  \/**\n   * @return array\n   *\/\n  public function getTriggers(): array;\n\n  \/**\n   * @param $tables\n   * @return array\n   *\/\n  public function getFieldsList($tables): array;\n\n  \/**\n   * @param string $col\n   * @param string $table\n   * @param string|null $db\n   * @return array\n   *\/\n  public function getForeignKeys(string $col, string $table, string $db = null): array;\n\n  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/\n  public function findRelations($column, string $db = ''): ?array;\n\n  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/\n  public function getPrimary(string $table): array;\n\n  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/\n  public function flush(): int;\n\n  \/**\n   * @return int\n   *\/\n  public function countQueries(): int;\n\n  \/**\n   * @param $statement\n   * @return mixed\n   *\/\n  public function query($statement);\n\n  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * @return mixed\n   *\/\n  public function getOne();\n\n  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * @return array|null\n   *\/\n  public function getKeyVal(): ?array;\n\n  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/\n  public function getColArray(): array;\n\n  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * @param $table\n   * @param string|null $field\n   * @param array $where\n   * @param array $order\n   * @return array|null\n   *\/\n  public function countFieldValues($table, string $field = null,  array $where = [], array $order = []): ?array;\n\n  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/\n  public function getColumnValues($table, string $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array;\n\n  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetch(string $query);\n\n  \/**\n   * Return an array of indexed array with all results of the query or false if there are no results.\n   *\n   * @param string $query\n   * @return array|false\n   *\/\n  public function fetchAll(string $query);\n\n  \/**\n   * @param $query\n   * @param int $num\n   * @return mixed\n   *\/\n  public function fetchColumn($query, int $num = 0);\n\n  \/**\n   * @param $query\n   * @return bool|\\stdClass\n   *\/\n  public function fetchObject($query);\n\n\n  \/**\n   * @return array\n   *\/\n  public function getCfg(): array;\n\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 288,
            "endLine": 288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Gets the created hash.\n   *\n   * @return string\n   *\/\n  public function getHash(): string;\n\n  \/**\n   * Checks if the database is ready to process a query.\n   * @return bool\n   *\/\n  public function check(): bool;\n\n  \/**\n   * Sets the error mode.\n   *\n   * @param string $mode\n   *\/\n  public function setErrorMode(string $mode);\n\n  \/**\n   * @return string\n   *\/\n  public function getErrorMode(): string;\n\n  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/\n  public function getLastError(): ?string;\n\n  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getCurrent(): ?string;\n\n  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/\n  public function getHost(): ?string;\n\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 541,
            "endLine": 541,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getHost": {
            "name": "getHost",
            "summary": "Returns the host of the current connection.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * @return string\n   *\/\n  public function getConnectionCode();\n\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 587,
            "endLine": 587,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "getConnectionCode": {
            "name": "getConnectionCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/\n  public function getLastCfg(): ?array;\n\n  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/\n  }",
            "startLine": 592,
            "endLine": 592,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [],
            "parent": false,
            "arguments": []
        },
        "getConnection": {
            "name": "getConnection",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Engines",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n  }",
            "startLine": 605,
            "endLine": 605,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null,
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ]
        },
        "getCreate": {
            "name": "getCreate",
            "summary": "Fetches the database and returns an array of objects",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlFormatters",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $model = NULL)\n  {\n  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   *\/\n  public function getCreateTable(string $table, array $model = null): string;\n\n  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   *\/\n  public function getCreateKeys(string $table, array $model = null): string;\n\n  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   *\/\n  public function getCreateConstraints(string $table, array $model = null): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterTable(string $table, array $cfg): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterColumn(string $table, array $cfg): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterKey(string $table, array $cfg): string;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  }",
            "startLine": 104,
            "endLine": 104,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table for which to create the statement"
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCreateTable": {
            "name": "getCreateTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlFormatters",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $model = NULL)\n  {\n  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   *\/\n  public function getCreateKeys(string $table, array $model = null): string;\n\n  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   *\/\n  public function getCreateConstraints(string $table, array $model = null): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterTable(string $table, array $cfg): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterColumn(string $table, array $cfg): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterKey(string $table, array $cfg): string;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  }",
            "startLine": 111,
            "endLine": 111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCreateKeys": {
            "name": "getCreateKeys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlFormatters",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $model = NULL)\n  {\n  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   *\/\n  public function getCreateConstraints(string $table, array $model = null): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterTable(string $table, array $cfg): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterColumn(string $table, array $cfg): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterKey(string $table, array $cfg): string;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  }",
            "startLine": 118,
            "endLine": 118,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getAlterTable": {
            "name": "getAlterTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlFormatters",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $cfg)\n  {\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterColumn(string $table, array $cfg): string;\n\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterKey(string $table, array $cfg): string;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  }",
            "startLine": 133,
            "endLine": 133,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAlterColumn": {
            "name": "getAlterColumn",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlFormatters",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $cfg)\n  {\n\n  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/\n  public function getAlterKey(string $table, array $cfg): string;\n\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  }",
            "startLine": 141,
            "endLine": 141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAlterKey": {
            "name": "getAlterKey",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\SqlFormatters",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $table, array $cfg)\n  {\n  \/**\n   * @param array $cfg\n   * @return array\n   *\/\n  }",
            "startLine": 149,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "qte": {
            "visibility": "public",
            "doc": {
                "description": "@var string The quote character",
                "tags": []
            },
            "value": "`"
        },
        "operators": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var array Allowed operators",
                "tags": []
            },
            "value": [
                "!=",
                "=",
                "<>",
                "<",
                "<=",
                ">",
                ">=",
                "like",
                "clike",
                "slike",
                "not",
                "is",
                "is not",
                "in",
                "between",
                "not like"
            ]
        },
        "numeric_types": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var array Numeric column types",
                "tags": []
            },
            "value": [
                "integer",
                "int",
                "smallint",
                "tinyint",
                "mediumint",
                "bigint",
                "decimal",
                "numeric",
                "float",
                "double"
            ]
        },
        "date_types": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var array Time and date column types",
                "tags": []
            },
            "value": [
                "date",
                "time",
                "datetime"
            ]
        },
        "types": {
            "static": true,
            "visibility": "public",
            "value": [
                "tinyint",
                "smallint",
                "mediumint",
                "int",
                "bigint",
                "decimal",
                "float",
                "double",
                "bit",
                "char",
                "varchar",
                "binary",
                "varbinary",
                "tinyblob",
                "blob",
                "mediumblob",
                "longblob",
                "tinytext",
                "text",
                "mediumtext",
                "longtext",
                "enum",
                "set",
                "date",
                "time",
                "datetime",
                "timestamp",
                "year",
                "geometry",
                "point",
                "linestring",
                "polygon",
                "geometrycollection",
                "multilinestring",
                "multipoint",
                "multipolygon",
                "json"
            ]
        },
        "interoperability": {
            "static": true,
            "visibility": "public",
            "value": {
                "integer": "int",
                "real": "decimal",
                "text": "text",
                "blob": "blob"
            }
        },
        "aggr_functions": {
            "static": true,
            "visibility": "public",
            "value": [
                "AVG",
                "BIT_AND",
                "BIT_OR",
                "COUNT",
                "GROUP_CONCAT",
                "MAX",
                "MIN",
                "STD",
                "STDDEV_POP",
                "STDDEV_SAMP",
                "STDDEV",
                "SUM",
                "VAR_POP",
                "VAR_SAMP",
                "VARIANCE"
            ]
        }
    },
    "staticProperties": {
        "operators": [
            "!=",
            "=",
            "<>",
            "<",
            "<=",
            ">",
            ">=",
            "like",
            "clike",
            "slike",
            "not",
            "is",
            "is not",
            "in",
            "between",
            "not like"
        ],
        "numeric_types": [
            "integer",
            "int",
            "smallint",
            "tinyint",
            "mediumint",
            "bigint",
            "decimal",
            "numeric",
            "float",
            "double"
        ],
        "date_types": [
            "date",
            "time",
            "datetime"
        ],
        "types": [
            "tinyint",
            "smallint",
            "mediumint",
            "int",
            "bigint",
            "decimal",
            "float",
            "double",
            "bit",
            "char",
            "varchar",
            "binary",
            "varbinary",
            "tinyblob",
            "blob",
            "mediumblob",
            "longblob",
            "tinytext",
            "text",
            "mediumtext",
            "longtext",
            "enum",
            "set",
            "date",
            "time",
            "datetime",
            "timestamp",
            "year",
            "geometry",
            "point",
            "linestring",
            "polygon",
            "geometrycollection",
            "multilinestring",
            "multipoint",
            "multipolygon",
            "json"
        ],
        "interoperability": {
            "integer": "int",
            "real": "decimal",
            "text": "text",
            "blob": "blob"
        },
        "aggr_functions": [
            "AVG",
            "BIT_AND",
            "BIT_OR",
            "COUNT",
            "GROUP_CONCAT",
            "MAX",
            "MIN",
            "STD",
            "STDDEV_POP",
            "STDDEV_SAMP",
            "STDDEV",
            "SUM",
            "VAR_POP",
            "VAR_SAMP",
            "VARIANCE"
        ],
        "write_kinds": [
            "INSERT",
            "UPDATE",
            "DELETE",
            "DROP",
            "ALTER",
            "CREATE",
            "RENAME"
        ],
        "read_kinds": [
            "SELECT",
            "SHOW"
        ],
        "structure_kinds": [
            "DROP",
            "ALTER",
            "CREATE",
            "RENAME"
        ],
        "LINE": "---------------------------------------------------------------------------------",
        "_has_error_all": false
    },
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}