{
    "doc": {
        "description": "Database Class\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Database",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.4"
        }
    },
    "name": "bbn\\Db\\Languages\\Sqlite",
    "namespace": true,
    "realName": "Sqlite",
    "realNamespace": "bbn\\Db\\Languages",
    "traits": [],
    "interfaces": {
        "bbn\\Db\\SqlEngines": {
            "name": "bbn\\Db\\SqlEngines"
        },
        "bbn\\Db\\Engines": {
            "name": "bbn\\Db\\Engines"
        },
        "bbn\\Db\\EnginesApi": {
            "name": "bbn\\Db\\EnginesApi"
        },
        "bbn\\Db\\SqlFormatters": {
            "name": "bbn\\Db\\SqlFormatters"
        },
        "Stringable": {
            "name": "Stringable"
        }
    },
    "fileName": "\/Db\/Languages\/Sqlite.php",
    "startLine": 26,
    "endLine": 1541,
    "numMethods": 226,
    "numProperties": 46,
    "numConstants": 0,
    "numStaticProperties": 14,
    "interfaceNames": [
        "bbn\\Db\\SqlEngines",
        "bbn\\Db\\Engines",
        "bbn\\Db\\EnginesApi",
        "bbn\\Db\\SqlFormatters",
        "Stringable"
    ],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Db\\Languages\\Sql",
    "isSubclassOf": false,
    "defaultProperties": {
        "operators": [
            "!=",
            "=",
            "<>",
            "<",
            "<=",
            ">",
            ">=",
            "like",
            "clike",
            "slike",
            "not",
            "is",
            "is not",
            "in",
            "between",
            "not like"
        ],
        "numeric_types": [
            "integer",
            "real"
        ],
        "date_types": [],
        "types": [
            "integer",
            "real",
            "text",
            "blob"
        ],
        "interoperability": {
            "tinyint": "integer",
            "smallint": "integer",
            "mediumint": "integer",
            "int": "integer",
            "bigint": "integer",
            "decimal": "real",
            "float": "real",
            "double": "real",
            "bit": "",
            "char": "",
            "varchar": "text",
            "binary": "blob",
            "varbinary": "blob",
            "tinyblob": "blob",
            "blob": "blob",
            "mediumblob": "blob",
            "longblob": "blob",
            "tinytext": "text",
            "text": "text",
            "mediumtext": "text",
            "longtext": "text",
            "enum": "text",
            "set": "text",
            "date": "text",
            "time": "text",
            "datetime": "text",
            "timestamp": "integer",
            "year": "integer",
            "json": "text"
        },
        "aggr_functions": [
            "AVG",
            "COUNT",
            "GROUP_CONCAT",
            "MAX",
            "MIN",
            "SUM"
        ],
        "defaultCharset": "UTF-8",
        "defaultCollation": null,
        "defaultEngine": null,
        "write_kinds": [
            "INSERT",
            "UPDATE",
            "DELETE",
            "DROP",
            "ALTER",
            "CREATE",
            "RENAME"
        ],
        "read_kinds": [
            "SELECT",
            "SHOW"
        ],
        "structure_kinds": [
            "DROP",
            "ALTER",
            "CREATE",
            "RENAME"
        ],
        "LINE": "---------------------------------------------------------------------------------",
        "_has_error_all": false,
        "qte": "\"",
        "sqlite_keys_enabled": false,
        "connection_code": null,
        "host": null,
        "username": null,
        "cache": [],
        "cache_renewal": 3600,
        "queries": [],
        "list_queries": [],
        "_triggers_disabled": false,
        "id_just_inserted": null,
        "last_insert_id": null,
        "last_params": {
            "sequences": false,
            "values": false
        },
        "last_query": null,
        "last_real_query": null,
        "last_real_params": {
            "sequences": false,
            "values": false
        },
        "_last_enabled": true,
        "max_queries": 50,
        "length_queries": 60,
        "hash_contour": "__BBN__",
        "hash": null,
        "cfgs": [],
        "_triggers": {
            "SELECT": {
                "before": [],
                "after": []
            },
            "INSERT": {
                "before": [],
                "after": []
            },
            "UPDATE": {
                "before": [],
                "after": []
            },
            "DELETE": {
                "before": [],
                "after": []
            }
        },
        "last_cfg": null,
        "_fancy": 1,
        "current": null,
        "_has_error": false,
        "last_error": null,
        "on_error": "exception",
        "cache_engine": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Db\\Languages",
    "shortName": "Sqlite",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(array $cfg = [])\n  {\n    if (!\\extension_loaded('pdo_sqlite')) {\n      throw new Exception('The SQLite driver for PDO is not installed...');\n    }\n\n    parent::__construct($cfg);\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(array $cfg)\n  {\n    if (!\\extension_loaded('pdo_mysql')) {\n      throw new Exception(X::_(\"The MySQL driver for PDO is not installed...\"));\n    }\n\n    $cfg = $this->getConnection($cfg);\n\n    try {\n      $this->cacheInit();\n      $this->current = $cfg['db'] ?? null;\n      $this->host = $cfg['host'] ?? null;\n      $this->username = $cfg['user'] ?? null;\n      $this->connection_code = $cfg['code_host'];\n\n      $this->pdo = new PDO(...$cfg['args']);\n      $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n      $this->pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n      $this->pdo->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, false);\n      $this->cfg = $cfg;\n      $this->setHash($cfg['args']);\n\n      if (!empty($cfg['cache_length'])) {\n        $this->cache_renewal = (int)$cfg['cache_length'];\n      }\n\n      if (isset($cfg['on_error'])) {\n        $this->on_error = $cfg['on_error'];\n      }\n\n      unset($cfg['pass']);\n    }\n    catch (PDOException $e) {\n      $err = X::_(\"Impossible to create the connection\") .\n        \" $cfg[engine] \".X::_(\"to\").\" {$this->host} \"\n        . X::_(\"with the following error\") . \" \" . $e->getMessage();\n        X::log($cfg);\n      throw new Exception($err);\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 306,
                "endLine": 345,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Constructor\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Constructor\n   *\n   * @param array $cfg\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 98,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Constructor\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Constructor\n   * @param array $cfg\n   * @throws Exception\n   *\/"
        },
        "getConnection": {
            "name": "getConnection",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getConnection(array $cfg = []): ?array\n  {\n    $cfg['engine'] = 'sqlite';\n\n    if (!isset($cfg['db']) && \\defined('BBN_DATABASE')) {\n      $cfg['db'] = constant('BBN_DATABASE');\n    }\n\n    if (empty($cfg['db']) || !\\is_string($cfg['db'])) {\n      throw new Exception('Database name is not specified');\n    }\n\n    if (is_file($cfg['db'])) {\n      $info        = X::pathinfo($cfg['db']);\n      $cfg['host'] = $info['dirname'].DIRECTORY_SEPARATOR;\n      $cfg['db']   = $info['filename'];\n    }\n    elseif (\\defined('BBN_DATA_PATH')\n      && is_dir(constant('BBN_DATA_PATH').'db')\n      && (strpos($cfg['db'], '\/') === false)\n    ) {\n      $cfg['host'] = constant('BBN_DATA_PATH').'db'.DIRECTORY_SEPARATOR;\n      if (!is_file(constant('BBN_DATA_PATH').'db'.DIRECTORY_SEPARATOR.$cfg['db'])\n        && (strpos($cfg['db'], '.') === false)\n      ) {\n        $cfg['db'] .= '.sqlite';\n      }\n    }\n    else{\n      $info = X::pathinfo($cfg['db']);\n      if (is_writable($info['dirname'])) {\n        $cfg['host'] = $info['dirname'].DIRECTORY_SEPARATOR;\n        $cfg['db']   = isset($info['extension']) ? $info['basename'] : $info['basename'].'.sqlite';\n      }\n    }\n\n    if (!isset($cfg['host'])\n      || !is_file($cfg['host'].$cfg['db'])\n    ) {\n      throw new Exception('Db file could not be located');\n    }\n\n    $cfg['args'] = ['sqlite:'.$cfg['host'].$cfg['db']];\n    $cfg['originalDb'] = $cfg['db'];\n    $cfg['originalHost'] = $cfg['host'];\n    $cfg['db']   = 'main';\n\n    return $cfg;\n  }",
            "parent": {
                "name": "getConnection",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getConnection(array $cfg = []): ?array;",
                "parent": false,
                "trait": false,
                "startLine": 621,
                "endLine": 621,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "getConnection",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The user's options"
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg",
                            "description": "The user's options"
                        }
                    ],
                    "return": "The final configuration"
                },
                "comments": "  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/"
            },
            "trait": false,
            "startLine": 111,
            "endLine": 159,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getConnection",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The user's options"
                    }
                ],
                "return": "The final configuration"
            },
            "comments": "  \/**\n   * @param array $cfg The user's options\n   * @return array|null The final configuration\n   *\/"
        },
        "postCreation": {
            "name": "postCreation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function postCreation()\n  {\n    \/\/ Obliged to do that  if we want to use foreign keys with SQLite\n    $this->enableKeys();\n  }",
            "parent": {
                "name": "postCreation",
                "summary": "Actions to do once the PDO object has been created",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function postCreation();",
                "parent": false,
                "trait": false,
                "startLine": 39,
                "endLine": 39,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "postCreation",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Actions to do once the PDO object has been created\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Actions to do once the PDO object has been created\n   *\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 175,
            "endLine": 179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "postCreation",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Actions to do once the PDO object has been created\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Actions to do once the PDO object has been created\n   *\n   * @return void\n   *\/"
        },
        "change": {
            "name": "change",
            "summary": "Changes the current database to the given one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function change(string $db): bool\n  {\n    if (strpos($db, '.') === false) {\n      $db .= '.sqlite';\n    }\n\n    $info = X::pathinfo($db);\n    if (($info['filename'] !== $this->getCurrent()) && file_exists($this->host.$db) && strpos($db, $this->qte) === false) {\n      $this->rawQuery(\"ATTACH '\".$this->host.$db.\"' AS \".$info['filename']);\n      $this->current = $info['filename'];\n\n      return true;\n    }\n\n      return false;\n  }",
            "parent": {
                "name": "change",
                "summary": "Changes the current database to the given one.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function change(string $db): bool\n  {\n    if (($this->getCurrent() !== $db) && Str::checkName($db)) {\n      $this->rawQuery(\"USE `$db`\");\n      $this->current = $db;\n      return true;\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 457,
                "endLine": 466,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "change",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The database name or file"
                    }
                ],
                "doc": {
                    "description": "Changes the current database to the given one.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$db",
                            "description": "The database name or file"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Changes the current database to the given one.\n   *\n   * @param string $db The database name or file\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 188,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "change",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database name or file"
                }
            ],
            "doc": {
                "description": "Changes the current database to the given one.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db",
                        "description": "The database name or file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the current database to the given one.\n   *\n   * @param string $db The database name or file\n   * @return string|false\n   *\/"
        },
        "tableExists": {
            "name": "tableExists",
            "summary": "Returns true if the given table exists",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableExists(string $table, string $database = ''): bool\n  {\n    return (bool)$this->getRow(\"SELECT name FROM sqlite_master WHERE type='table' AND name='$table'\");\n  }",
            "parent": false,
            "trait": false,
            "startLine": 213,
            "endLine": 216,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tableExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "or currently selected if none"
                }
            ],
            "doc": {
                "description": "Returns true if the given table exists\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "or currently selected if none"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given table exists\n   *\n   * @param string $table\n   * @param string $database. or currently selected if none\n   * @return boolean\n   *\/"
        },
        "tableFullName": {
            "name": "tableFullName",
            "summary": "Returns a table's full name i.e. database.table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableFullName(string $table, bool $escaped = false): ?string\n  {\n    $bits = explode('.', str_replace($this->qte, '', $table));\n    if (\\count($bits) === 2) {\n      $db    = trim($bits[0]);\n      $table = trim($bits[1]);\n    }\n    else {\n      $db    = $this->getCurrent();\n      $table = trim($bits[0]);\n    }\n\n    if (Str::checkName($table) && Str::checkName($db)) {\n      if ($db === 'main') {\n        return $escaped ? $this->qte.$table.$this->qte : $table;\n      }\n\n      return $escaped\n        ? $this->qte.$db.$this->qte.'.'.$this->qte.$table.$this->qte\n        : $db.'.'.$table;\n    }\n\n      return null;\n  }",
            "parent": {
                "name": "tableFullName",
                "summary": "Returns a table's full name i.e. database.table",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function tableFullName(string $table, bool $escaped = false): ?string\n  {\n    $bits = explode('.', $table);\n\n    if (\\count($bits) === 3) {\n      $db    = trim($bits[0], ' ' . $this->qte);\n      $table = trim($bits[1]);\n    } elseif (\\count($bits) === 2) {\n      $db    = trim($bits[0], ' ' . $this->qte);\n      $table = trim($bits[1], ' ' . $this->qte);\n    } else {\n      $db    = $this->getCurrent();\n      $table = trim($bits[0], ' ' . $this->qte);\n    }\n\n    if (Str::checkName($db) && Str::checkName($table)) {\n      return $escaped\n        ? $this->escape(\"$db.$table\")\n        : \"$db.$table\";\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 499,
                "endLine": 521,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "tableFullName",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "name": "escaped",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "doc": {
                    "description": "Returns a table's full name i.e. database.table\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name (escaped or not)"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$escaped",
                            "description": "If set to true the returned string will be escaped"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table The table's name (escaped or not)\n   * @param bool $escaped If set to true the returned string will be escaped\n   * @return string|null\n   *\/"
            },
            "trait": false,
            "startLine": 226,
            "endLine": 249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tableFullName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ],
            "doc": {
                "description": "Returns a table's full name i.e. database.table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a table's full name i.e. database.table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return null|string\n   *\/"
        },
        "tableSimpleName": {
            "name": "tableSimpleName",
            "summary": "Returns a table's simple name i.e. table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableSimpleName(string $table, bool $escaped = false): ?string\n  {\n    if ($table = trim($table)) {\n      $bits  = explode('.', str_replace($this->qte, '', $table));\n      $table = end($bits);\n\n      if (Str::checkName($table)) {\n        return $escaped ? $this->qte.$table.$this->qte : $table;\n      }\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "tableSimpleName",
                "summary": "Returns a table's simple name i.e. table",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function tableSimpleName(string $table, bool $escaped = false): ?string\n  {\n    if ($table = trim($table)) {\n      $bits = explode('.', $table);\n      switch (\\count($bits)) {\n        case 1:\n          $table = trim($bits[0], ' ' . $this->qte);\n          break;\n        case 2:\n        case 3:\n          $table = trim($bits[1], ' ' . $this->qte);\n          break;\n      }\n\n      if (Str::checkName($table)) {\n        return $escaped ? $this->escape($table) : $table;\n      }\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 530,
                "endLine": 550,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "tableSimpleName",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "name": "escaped",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "doc": {
                    "description": "Returns a table's simple name i.e. table\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name (escaped or not)"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$escaped",
                            "description": "If set to true the returned string will be escaped"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table The table's name (escaped or not)\n   * @param bool $escaped If set to true the returned string will be escaped\n   * @return string|null\n   *\/"
            },
            "trait": false,
            "startLine": 259,
            "endLine": 271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tableSimpleName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ],
            "doc": {
                "description": "Returns a table's simple name i.e. table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a table's simple name i.e. table\n   *\n   * @param string $table   The table's name (escaped or not)\n   * @param bool   $escaped If set to true the returned string will be escaped\n   * @return null|string\n   *\/"
        },
        "disableKeys": {
            "name": "disableKeys",
            "summary": "Disable foreign keys check",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function disableKeys(): self\n  {\n    $this->rawQuery('PRAGMA foreign_keys = OFF;');\n\n    return $this;\n  }",
            "parent": {
                "name": "disableKeys",
                "summary": "Disables foreign keys check.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function disableKeys();",
                "parent": false,
                "trait": false,
                "startLine": 119,
                "endLine": 119,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "disableKeys",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Disables foreign keys check.\n",
                    "tags": []
                },
                "comments": "  \/**\n   * Disables foreign keys check.\n   *\n   *\/"
            },
            "trait": false,
            "startLine": 278,
            "endLine": 283,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disableKeys",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Disable foreign keys check\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Disable foreign keys check\n   *\n   * @return self\n   *\/"
        },
        "enableKeys": {
            "name": "enableKeys",
            "summary": "Enable foreign keys check",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function enableKeys(): self\n  {\n    $this->rawQuery('PRAGMA foreign_keys = ON;');\n\n    return $this;\n  }",
            "parent": {
                "name": "enableKeys",
                "summary": "Enables foreign keys check.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function enableKeys();",
                "parent": false,
                "trait": false,
                "startLine": 126,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "enableKeys",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Enables foreign keys check.\n",
                    "tags": []
                },
                "comments": "  \/**\n   * Enables foreign keys check.\n   *\n   *\/"
            },
            "trait": false,
            "startLine": 291,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enableKeys",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Enable foreign keys check\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Enable foreign keys check\n   *\n   * @return self\n   *\/"
        },
        "getDatabases": {
            "name": "getDatabases",
            "summary": "Return databases' names as an array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDatabases(): ?array\n  {\n    return null;\n    if (!$this->check()) {\n      return null;\n    }\n\n    $x  = [];\n    $fs = Dir::scan($this->host);\n    foreach ($fs as $f){\n      if (is_file($f)) {\n        $x[] = X::pathinfo($f, PATHINFO_FILENAME);\n      }\n    }\n\n    sort($x);\n    return $x;\n  }",
            "parent": {
                "name": "getDatabases",
                "summary": "Return databases' names as an array.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDatabases(): ?array;",
                "parent": false,
                "trait": false,
                "startLine": 134,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getDatabases",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return databases' names as an array.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Return databases' names as an array.\n   *\n   * @return false|array\n   *\/"
            },
            "trait": false,
            "startLine": 305,
            "endLine": 322,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDatabases",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return databases' names as an array.\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return databases' names as an array.\n   *\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "getTables": {
            "name": "getTables",
            "summary": "Return tables' names of a database as an array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTables(string $database = ''): ?array\n  {\n    if (!$this->check()) {\n      return null;\n    }\n\n    if (empty($database) || !Str::checkName($database)) {\n      $database = $this->getCurrent() === 'main' ? '' : '\"'.$this->getCurrent().'\".';\n    }\n    elseif ($database === 'main') {\n      $database = '';\n    }\n\n    $t2 = [];\n    if (($r = $this->rawQuery(\n      '\n      SELECT \"tbl_name\"\n      FROM '.$database.'\"sqlite_master\"\n        WHERE type = \\'table\\''\n    ) )\n        && $t1 = $this->fetchAllResults($r, PDO::FETCH_NUM)\n    ) {\n      foreach ($t1 as $t){\n        if (strpos($t[0], 'sqlite') !== 0) {\n          array_push($t2, $t[0]);\n        }\n      }\n    }\n\n    return $t2;\n  }",
            "parent": {
                "name": "getTables",
                "summary": "Return tables' names of a database as an array.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getTables(string $database = ''): ?array;",
                "parent": false,
                "trait": false,
                "startLine": 143,
                "endLine": 143,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "getTables",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return tables' names of a database as an array.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database\n   * @return null|array\n   *\/"
            },
            "trait": false,
            "startLine": 332,
            "endLine": 362,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getTables",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "Database name"
                }
            ],
            "doc": {
                "description": "Return tables' names of a database as an array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "Database name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return tables' names of a database as an array.\n   *\n   * @param string $database Database name\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "getColumns": {
            "name": "getColumns",
            "summary": "Returns the columns' configuration of the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColumns(string $table): ?array\n  {\n    if (!$this->check()) {\n      return null;\n    }\n\n    $r = [];\n    if ($table = $this->tableFullName($table)) {\n      $p = 1;\n      if ($rows = $this->getRows(\"PRAGMA table_info($table)\")) {\n        foreach ($rows as $row){\n          $f     = $row['name'];\n          $r[$f] = [\n            'position' => $p++,\n            'null' => $row['notnull'] == 0 ? 1 : 0,\n            'key' => $row['pk'] == 1 ? 'PRI' : null,\n            'default' => is_string($row['dflt_value'])\n              ? rtrim(\n                ltrim($row['dflt_value'], \"'\"),\n                \"'\"\n              )\n              : $row['dflt_value'],\n            \/\/ INTEGER PRIMARY KEY is a ROWID\n            \/\/ https:\/\/www.sqlite.org\/autoinc.html\n            'extra' => $row['type'] === 'INTEGER' && $row['pk'] == 1 ? 'auto_increment' :  null,\n            'maxlength' => null,\n            'signed' => 1\n          ];\n\n          if ($row['dflt_value'] !== '') {\n            $r[$f]['defaultExpression'] = false;\n          }\n\n          if (in_array($row['dflt_value'], ['CURRENT_TIME', 'CURRENT_DATE', 'CURRENT_TIMESTAMP'], true)) {\n            $r[$f]['defaultExpression'] = true;\n          }\n\n\n          $type  = strtolower($row['type']);\n          if (strpos($type, 'blob') !== false) {\n            $r[$f]['type'] = 'BLOB';\n          }\n          elseif (( strpos($type, 'int') !== false ) || ( strpos($type, 'bool') !== false ) || ( strpos($type, 'timestamp') !== false )) {\n            $r[$f]['type'] = 'INTEGER';\n\n            if (strpos($type, 'unsigned') !== false) {\n              $r[$f]['signed'] = 0;\n            }\n          }\n          elseif (( strpos($type, 'floa') !== false ) || ( strpos($type, 'doub') !== false ) || ( strpos($type, 'real') !== false )) {\n            $r[$f]['type'] = 'REAL';\n\n            if (strpos($type, 'unsigned') !== false) {\n              $r[$f]['signed'] = 0;\n            }\n          }\n          elseif (( strpos($type, 'char') !== false ) || ( strpos($type, 'text') !== false )) {\n            $r[$f]['type'] = 'TEXT';\n          }\n\n          if (preg_match_all('\/\\((.*?)\\)\/', $row['type'], $matches)) {\n            $r[$f]['maxlength'] = (int)$matches[1][0];\n          }\n\n          if (!isset($r[$f]['type'])) {\n            $r[$f]['type'] = 'TEXT';\n          }\n        }\n      }\n    }\n\n      return $r;\n  }",
            "parent": {
                "name": "getColumns",
                "summary": "Return columns' structure of a table as an array indexed with the fields names.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getColumns(string $table): ?array;",
                "parent": false,
                "trait": false,
                "startLine": 152,
                "endLine": 152,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getColumns",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return columns' structure of a table as an array indexed with the fields names.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return columns' structure of a table as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/"
            },
            "trait": false,
            "startLine": 372,
            "endLine": 444,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getColumns",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Returns the columns' configuration of the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the columns' configuration of the given table.\n   *\n   * @param null|string $table The table's name\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "getKeys": {
            "name": "getKeys",
            "summary": "Returns the keys of the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getKeys(string $table): ?array\n  {\n    if (!$this->check()) {\n      return null;\n    }\n\n    $r = [];\n    if ($full = $this->tableFullName($table)) {\n      $r        = [];\n      $keys     = [];\n      $cols     = [];\n      $database = $this->getCurrent() === 'main' ? '' : '\"'.$this->getCurrent().'\".';\n      if ($indexes = $this->getRows('PRAGMA index_list('.$table.')')) {\n        foreach ($indexes as $d){\n          if ($fields = $this->getRows('PRAGMA index_info('.$database.'\"'.$d['name'].'\")')) {\n            foreach ($fields as $d2){\n              $key_name = strtolower($d['origin']) === 'pk' ? 'PRIMARY' : $d['name'];\n              if (!isset($keys[$key_name])) {\n                $keys[$key_name] = [\n                  'columns' => [$d2['name']],\n                  'ref_db' => null,\n                  'ref_table' => null,\n                  'ref_column' => null,\n                  'constraint' => null,\n                  'update' => null,\n                  'delete' => null,\n                  'unique' => $d['unique'] == 1 ? 1 : 0\n                ];\n              }\n              else{\n                $keys[$key_name]['columns'][] = $d2['name'];\n              }\n\n              if (!isset($cols[$d2['name']])) {\n                $cols[$d2['name']] = [$key_name];\n              }\n              else{\n                $cols[$d2['name']][] = $key_name;\n              }\n            }\n          }\n        }\n      }\n\n      \/\/ when a column is INTEGER PRIMARY KEY it doesn't show up in the query: PRAGMA index_list\n      \/\/ INTEGER PRIMARY KEY considered as auto_increment: https:\/\/www.sqlite.org\/autoinc.html\n      if ($columns = $this->getColumns($table)) {\n        $columns = array_filter($columns, function ($item) {\n          return $item['extra'] === 'auto_increment' && $item['key'] === 'PRI';\n        });\n\n        foreach ($columns as $column_name => $column) {\n          if (!isset($keys['PRIMARY'])) {\n            $keys['PRIMARY'] = [\n              'columns' => [$column_name],\n              'ref_db' => null,\n              'ref_table' => null,\n              'ref_column' => null,\n              'constraint' => null,\n              'update' => null,\n              'delete' => null,\n              'unique' => 1\n            ];\n          }\n          else {\n            $keys['PRIMARY']['columns'][] = $column_name;\n          }\n\n          if (!isset($cols[$column_name])) {\n            $cols[$column_name] = ['PRIMARY'];\n          }\n          else {\n            $cols[$column_name][] = 'PRIMARY';\n          }\n        }\n      }\n\n      if ($constraints = $this->getRows(\"PRAGMA foreign_key_list($database\\\"$table\\\")\")) {\n        foreach ($constraints as $constraint) {\n          $constraint_name = \"{$constraint['table']}_{$constraint['from']}\";\n          if (empty($cols[$constraint['from']])) {\n            $keys[$constraint_name] = [\n              'columns' => [$constraint['from']],\n              'ref_db' => $this->getCurrent(),\n              'ref_table' => $constraint['table'] ?? null,\n              'ref_column' => $constraint['to'] ??  null,\n              'constraint' => $constraint_name,\n              'update' => $constraint['on_update'] ?? null,\n              'delete' => $constraint['on_delete'] ?? null,\n              'unique' => 0\n            ];\n\n            $cols[$constraint['from']] = [$constraint_name];\n\n          } else {\n            foreach ($cols[$constraint['from']] as $col) {\n              if (isset($keys[$col])) {\n                $keys[$col]['ref_db'] = $this->getCurrent();\n                $keys[$col]['ref_table'] = $constraint['table'] ?? null;\n                $keys[$col]['ref_column'] = $constraint['to'] ?? null;\n                $keys[$col]['constraint'] = $constraint_name;\n                $keys[$col]['update'] = $constraint['on_update'] ?? null;\n                $keys[$col]['delete'] =  $constraint['on_delete'] ?? null;\n              }\n            }\n          }\n        }\n      }\n\n      $r['keys'] = $keys;\n      $r['cols'] = $cols;\n    }\n\n      return $r;\n  }",
            "parent": {
                "name": "getKeys",
                "summary": "Return the table's keys as an array indexed with the fields names.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getKeys(string $table): ?array;",
                "parent": false,
                "trait": false,
                "startLine": 212,
                "endLine": 212,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getKeys",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return the table's keys as an array indexed with the fields names.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the table's keys as an array indexed with the fields names.\n   *\n   * @param string $table\n   * @return null|array\n   *\/"
            },
            "trait": false,
            "startLine": 454,
            "endLine": 568,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getKeys",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Returns the keys of the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the keys of the given table.\n   *\n   * @param string $table The table's name\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "getOrder": {
            "name": "getOrder",
            "summary": "Get a string starting with ORDER BY with corresponding parameters to $order.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOrder(array $cfg): string\n  {\n    $res = '';\n    if (!empty($cfg['order'])) {\n      foreach ($cfg['order'] as $col => $dir) {\n        if (\\is_array($dir) && isset($dir['field'])) {\n          $col = $dir['field'];\n          $dir = $dir['dir'] ?? 'ASC';\n        }\n\n        if (isset($cfg['available_fields'][$col])) {\n          \/\/ If it's an alias we use the simple name\n          if (isset($cfg['fields'][$col])) {\n            $f = $this->colSimpleName($col, true);\n          } elseif ($cfg['available_fields'][$col] === false) {\n            $f = $this->escape($col);\n          } else {\n            $f = $this->colFullName($col, $cfg['available_fields'][$col], true);\n          }\n\n          $res .= $f.' COLLATE NOCASE '.\n            (strtolower($dir) === 'desc' ? 'DESC' : 'ASC' ).','.PHP_EOL;\n        }\n      }\n\n      if (!empty($res)) {\n        return 'ORDER BY '.substr($res,0, Strrpos($res,',')).PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getOrder",
                "summary": "Get a string starting with ORDER BY with corresponding parameters to $order.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getOrder(array $cfg): string\n  {\n    $res = '';\n    if (!empty($cfg['order'])) {\n      foreach ($cfg['order'] as $col => $dir) {\n        if (is_array($dir) && isset($dir['field'])) {\n          $col = $dir['field'];\n          $dir = $dir['dir'] ?? 'ASC';\n        }\n\n        if (isset($cfg['available_fields'][$col])) {\n          \/\/ If it's an alias we use the simple name\n          if (isset($cfg['fields'][$col])) {\n            $f = $this->colSimpleName($col, true);\n          } elseif ($cfg['available_fields'][$col] === false) {\n            $f = $col;\n          } else {\n            $f = $this->colFullName($col, $cfg['available_fields'][$col], true);\n          }\n\n          $res .= $f . ' ' . (strtolower($dir) === 'desc' ? 'DESC' : 'ASC') . ',' . PHP_EOL;\n        }\n      }\n\n      if (!empty($res)) {\n        return 'ORDER BY ' . substr($res, 0, Strrpos($res, ',')) . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1682,
                "endLine": 1712,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getOrder",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Get a string starting with ORDER BY with corresponding parameters to $order.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order.\n   *\n   * @param array $cfg\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 576,
            "endLine": 607,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getOrder",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Get a string starting with ORDER BY with corresponding parameters to $order.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get a string starting with ORDER BY with corresponding parameters to $order.\n   *\n   * @param array $cfg\n   * @return string\n   *\/"
        },
        "getRawCreate": {
            "name": "getRawCreate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRawCreate(string $table): string\n  {\n    if (($table = $this->tableFullName($table, true))\n        && ($r = $this->rawQuery(\"SELECT sql FROM sqlite_master WHERE name = $table\"))\n    ) {\n      return $r->fetch(PDO::FETCH_ASSOC)['sql'] ?? '';\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 613,
            "endLine": 622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getRawCreate",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table for which to create the statement"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$table",
                        "description": "The table for which to create the statement"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param null|string $table The table for which to create the statement\n   * @return string\n   *\/"
        },
        "getCharsetDatabase": {
            "name": "getCharsetDatabase",
            "summary": "Returns the SQL statement to get the charset of a database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCharsetDatabase(string $database): string\n  {\n    return \"PRAGMA encoding\";\n  }",
            "parent": false,
            "trait": false,
            "startLine": 631,
            "endLine": 634,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCharsetDatabase",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to get the charset of a database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the SQL statement to get the charset of a database.\n   *\n   * @param string $database\n   * @return string\n   *\/"
        },
        "getAnalyzeDatabase": {
            "name": "getAnalyzeDatabase",
            "summary": "Returns the SQL statement to analyze the current database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAnalyzeDatabase(): string\n  {\n    return \"ANALYZE;\";\n  }",
            "parent": {
                "name": "getAnalyzeDatabase",
                "summary": "Returns the SQL statement to analyze the current database.",
                "description": "This method generates an ANALYZE statement for each table in the database.",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "This method generates an ANALYZE statement for each table in the database."
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getAnalyzeDatabase(): string\n  {\n    $sql = '';\n    if ($tables = $this->getTables()\n    ) {\n      foreach ($tables as $i => $table) {\n        $sql .= $this->getAnalyzeTable($table);\n        if (!empty($tables[$i + 1])) {\n          $sql .= PHP_EOL;\n        }\n      }\n    }\n\n    return $sql;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 94,
                "endLine": 108,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getAnalyzeDatabase",
                "returns": [
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the SQL statement to analyze the current database.\nThis method generates an ANALYZE statement for each table in the database.\n",
                    "params": [],
                    "return": "The SQL statement to analyze the database, or an empty string if there are no tables."
                },
                "comments": "  \/**\n   * Returns the SQL statement to analyze the current database.\n   * This method generates an ANALYZE statement for each table in the database.\n   * @return string The SQL statement to analyze the database, or an empty string if there are no tables.\n   *\/"
            },
            "trait": false,
            "startLine": 641,
            "endLine": 644,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAnalyzeDatabase",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the SQL statement to analyze the current database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the SQL statement to analyze the current database.\n   *\n   * @return string\n   *\/"
        },
        "getCreateTable": {
            "name": "getCreateTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateTable(string $table, ?array $cfg = null): string\n  {\n    if (!$cfg) {\n      $cfg = $this->modelize($table);\n    }\n\n    $st   = 'CREATE TABLE ' . $this->escape($table) . ' (' . PHP_EOL;\n    $numFields = count($cfg['fields']);\n    $i = 0;\n    foreach ($cfg['fields'] as $name => $col) {\n      $i++;\n      $st .= $this->getColumnDefinitionStatement($name, $col);\n      if ($i < $numFields) {\n        $st .= ',' . PHP_EOL;\n      }\n    }\n\n    if (isset($cfg['keys']['PRIMARY'])) {\n      $st .= ',' . PHP_EOL . '  PRIMARY KEY (' . X::join(\n        array_map(\n          function ($a) {\n            return $this->escape($a);\n          },\n          $cfg['keys']['PRIMARY']['columns']\n        ),\n        ', '\n      ) . ')';\n    }\n\n    if ($c = $this->getCreateConstraintsOnly($table, $cfg)) {\n      $st .= ',' . PHP_EOL . $c;\n    }\n\n    $st .= PHP_EOL . '); PRAGMA encoding=' . $this->qte . (empty($cfg['charset']) ? static::$defaultCharset : $cfg['charset']) . $this->qte . ';';\n    return $st;\n  }",
            "parent": {
                "name": "getCreateTable",
                "summary": "Returns the SQL statement to create a table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getCreateTable(string $table, ?array $cfg = null): string\n  {\n    if (!$cfg) {\n      $cfg = $this->modelize($table);\n    }\n\n    $st = 'CREATE TABLE '.$this->escape($table).' ('.PHP_EOL;\n    $done = false;\n    foreach ($cfg['fields'] as $name => $col) {\n      if (!$done) {\n        $done = true;\n      }\n      else {\n        $st .= ',' . PHP_EOL;\n      }\n\n      $st .= $this->getColumnDefinitionStatement($name, $col);\n    }\n\n    $st .= PHP_EOL . ');';\n    return $st;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 148,
                "endLine": 169,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "getCreateTable",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to create a table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the SQL statement to create a table.\n   * @param string $table\n   * @param array|null $cfg\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 653,
            "endLine": 688,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateTable",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getCharsetTable": {
            "name": "getCharsetTable",
            "summary": "Returns the SQL statement to get the charset of a table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCharsetTable(string $table): string\n  {\n    if (Str::checkName($table)) {\n      return $this->getCharsetDatabase($this->getCurrent());\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 697,
            "endLine": 704,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getCharsetTable",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to get the charset of a table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the SQL statement to get the charset of a table.\n   *\n   * @param string $table\n   * @return string\n   *\/"
        },
        "getCreateKeys": {
            "name": "getCreateKeys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateKeys(string $table, ?array $cfg = null): string\n  {\n    $st = '';\n    if (!$cfg) {\n      $cfg = $this->modelize($table);\n    }\n\n    if ($cfg\n      && !empty($cfg['keys'])\n      && ($keys = array_filter(\n        $cfg['keys'],\n        fn($k) => !empty($k['columns']) && empty($k['ref_table']) && empty($k['ref_column'])\n      ))\n    ) {\n      ;\n      foreach ($keys as $name => $key) {\n        if ($name === 'PRIMARY') {\n          continue;\n        }\n\n        $st .= 'CREATE ';\n        if (!empty($key['unique'])) {\n          $st .= 'UNIQUE ';\n        }\n\n        $st .= 'INDEX \\''.Str::escapeSquotes($name).'\\' ON ' . $this->escape($table);\n\n        $st .= ' ('.X::join(\n          array_map(\n            fn($a) => $this->escape($a),\n            $key['columns']\n          ),\n          ', '\n        ).')';\n        $st .= ';' . PHP_EOL;\n      }\n    }\n\n    return $st;\n  }",
            "parent": {
                "name": "getCreateKeys",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlFormatters",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlFormatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getCreateKeys(string $table, array|null $model = null): string;",
                "parent": false,
                "trait": false,
                "startLine": 125,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "getCreateKeys",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "model",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$model"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 713,
            "endLine": 752,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateKeys",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getCreateTableRaw": {
            "name": "getCreateTableRaw",
            "summary": "Return SQL string for table creation.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateTableRaw(\n    string $table,\n    ?array $cfg = null,\n    bool $createKeys = true,\n    bool $createConstraints = true\n  ): string\n  {\n    if (empty($cfg)) {\n      $cfg = $this->modelize($table);\n    }\n\n    if (!$createKeys || !$createConstraints) {\n      foreach ($cfg['keys'] as $k => $v) {\n        if (!$createKeys\n          && !empty($v['columns'])\n          && empty($v['ref_table'])\n          && empty($v['ref_column'])\n        ) {\n          unset($cfg['keys'][$k]);\n        }\n\n        if (!$createConstraints\n          && !empty($v['columns'])\n          && !empty($v['constraint'])\n          && !empty($v['ref_table'])\n          && !empty($v['ref_column'])\n        ) {\n          unset($cfg['keys'][$k]);\n        }\n      }\n    }\n\n    if ($sql = $this->getCreateTable($table, $cfg)) {\n      if ($createKeys) {\n        $sql .= PHP_EOL.$this->getCreateKeys($table, $cfg);\n      }\n\n      return $sql;\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getCreateTableRaw",
                "summary": "Returns the SQL statement to create a table, including keys and constraints if specified.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getCreateTableRaw(\n    string $table,\n    ?array $cfg = null,\n    bool $createKeys = true,\n    bool $createConstraints = true\n    ): string\n  {\n    if ($sql = $this->getCreateTable($table, $cfg)) {\n      if ($createKeys) {\n        $sql .= PHP_EOL.$this->getCreateKeys($table, $cfg);\n      }\n\n      if ($createConstraints) {\n        $sql .= PHP_EOL.$this->getCreateConstraints($table, $cfg);\n      }\n\n      return $sql;\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 119,
                "endLine": 139,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "getCreateTableRaw",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "createKeys",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": true,
                        "default_name": "",
                        "description": "eys"
                    },
                    {
                        "name": "createConstraints",
                        "position": 3,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": true,
                        "default_name": "",
                        "description": "onstraints"
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to create a table, including keys and constraints if specified.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$cfg"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$create",
                            "description": "eys"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$create",
                            "description": "onstraints"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the SQL statement to create a table, including keys and constraints if specified.\n   * @param string $table\n   * @param array|null $cfg\n   * @param bool $createKeys\n   * @param bool $createConstraints\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 764,
            "endLine": 805,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateTableRaw",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "createKeys",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "eys"
                },
                {
                    "name": "createConstraints",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "onstraints"
                }
            ],
            "doc": {
                "description": "Return SQL string for table creation.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "eys"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "onstraints"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return SQL string for table creation.\n   *\n   * @param string $table\n   * @param array|null $cfg\n   * @param bool $createKeys\n   * @param bool $createConstraints\n   * @return string\n   *\/"
        },
        "alter": {
            "name": "alter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function alter(string $table, array $cfg): int\n  {\n    if ($st = $this->getAlterTable($table, $cfg)) {\n      \/\/ Sqlite does not support multiple alter statements in one query\n      \/\/ So we will use begin a transaction then execute all queries one by one\n      $this->pdo->beginTransaction();\n\n      foreach (explode(';' . PHP_EOL, $st) as $query) {\n        $this->rawQuery($query);\n      }\n\n      return (int)$this->pdo->commit();\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 813,
            "endLine": 828,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "alter",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return int\n   *\/"
        },
        "getAlterTable": {
            "name": "getAlterTable",
            "summary": "Return a string for alter table sql statement.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$cfg = [\n   'fields' => [\n     'id' => [\n       'type' => 'binary',\n       'maxlength' => 32\n     ],\n     'role' => [\n       'type' => 'enum',\n       'default' => 'user'\n     ],\n     'permission' => [\n       'type' => 'set,\n       'default' => 'read'\n     ],\n     'balance' => [\n       'type' => 'real',\n       'maxlength' => 10,\n       'signed' => true,\n       'default' => 0\n     ],\n     'created_at' => [\n       'type' => 'datetime',\n       'default' => 'CURRENT_TIMESTAMP'\n     ],\n     'role_id' => [\n        'alter_type' => 'drop'\n     ]\n   ]\n];\nX::dump($db->getAlterTable('users', $cfg));\n\n\/\/ (string) ALTER TABLE \"users\" ADD   \"id\" blob(32) NOT NULL;\n\/\/ ALTER TABLE \"users\" ADD   \"role\" text NOT NULL DEFAULT \"user\";\n\/\/ ALTER TABLE \"users\" ADD   \"permission\" text NOT NULL DEFAULT 'read';\n\/\/ ALTER TABLE \"users\" ADD   \"balance\" real(10) NOT NULL DEFAULT 0;\n\/\/ ALTER TABLE \"users\" ADD   \"created_at\" real NOT NULL DEFAULT CURRENT_TIMESTAMP;\n\/\/ ALTER TABLE \"users\" DROP COLUMN \"role_id\";"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAlterTable(string $table, array $cfg): string\n  {\n    if (empty($cfg['fields'])) {\n      throw new Exception(X::_('Fields are not specified'));\n    }\n\n    if ($this->check() && Str::checkName($table)) {\n      $st = '';\n\n      foreach ($cfg['fields'] as $name => $col) {\n        $st .= 'ALTER TABLE ' . $this->escape($table) . ' ';\n\n        $st .= $this->getAlterColumn($table, array_merge($col, [\n          'col_name' => $name,\n          'no_table_exp' => true\n        ]));\n\n        $st .= \";\" . PHP_EOL;\n      }\n    }\n\n    return $st ?? '';\n  }",
            "parent": {
                "name": "getAlterTable",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlFormatters",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlFormatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getAlterTable(string $table, array $cfg): string;",
                "parent": false,
                "trait": false,
                "startLine": 147,
                "endLine": 147,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "getAlterTable",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 880,
            "endLine": 902,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getAlterTable",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return a string for alter table sql statement.\n\n```php\n$cfg = [\n   'fields' => [\n     'id' => [\n       'type' => 'binary',\n       'maxlength' => 32\n     ],\n     'role' => [\n       'type' => 'enum',\n       'default' => 'user'\n     ],\n     'permission' => [\n       'type' => 'set,\n       'default' => 'read'\n     ],\n     'balance' => [\n       'type' => 'real',\n       'maxlength' => 10,\n       'signed' => true,\n       'default' => 0\n     ],\n     'created_at' => [\n       'type' => 'datetime',\n       'default' => 'CURRENT_TIMESTAMP'\n     ],\n     'role_id' => [\n        'alter_type' => 'drop'\n     ]\n   ]\n];\nX::dump($db->getAlterTable('users', $cfg));\n\n\/\/ (string) ALTER TABLE \"users\" ADD   \"id\" blob(32) NOT NULL;\n\/\/ ALTER TABLE \"users\" ADD   \"role\" text NOT NULL DEFAULT \"user\";\n\/\/ ALTER TABLE \"users\" ADD   \"permission\" text NOT NULL DEFAULT 'read';\n\/\/ ALTER TABLE \"users\" ADD   \"balance\" real(10) NOT NULL DEFAULT 0;\n\/\/ ALTER TABLE \"users\" ADD   \"created_at\" real NOT NULL DEFAULT CURRENT_TIMESTAMP;\n\/\/ ALTER TABLE \"users\" DROP COLUMN \"role_id\";\n\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return a string for alter table sql statement.\n   *\n   * ```php\n   * $cfg = [\n   *    'fields' => [\n   *      'id' => [\n   *        'type' => 'binary',\n   *        'maxlength' => 32\n   *      ],\n   *      'role' => [\n   *        'type' => 'enum',\n   *        'default' => 'user'\n   *      ],\n   *      'permission' => [\n   *        'type' => 'set,\n   *        'default' => 'read'\n   *      ],\n   *      'balance' => [\n   *        'type' => 'real',\n   *        'maxlength' => 10,\n   *        'signed' => true,\n   *        'default' => 0\n   *      ],\n   *      'created_at' => [\n   *        'type' => 'datetime',\n   *        'default' => 'CURRENT_TIMESTAMP'\n   *      ],\n   *      'role_id' => [\n   *         'alter_type' => 'drop'\n   *      ]\n   *    ]\n   * ];\n   * X::dump($db->getAlterTable('users', $cfg));\n   *\n   * \/\/ (string) ALTER TABLE \"users\" ADD   \"id\" blob(32) NOT NULL;\n   * \/\/ ALTER TABLE \"users\" ADD   \"role\" text NOT NULL DEFAULT \"user\";\n   * \/\/ ALTER TABLE \"users\" ADD   \"permission\" text NOT NULL DEFAULT 'read';\n   * \/\/ ALTER TABLE \"users\" ADD   \"balance\" real(10) NOT NULL DEFAULT 0;\n   * \/\/ ALTER TABLE \"users\" ADD   \"created_at\" real NOT NULL DEFAULT CURRENT_TIMESTAMP;\n   * \/\/ ALTER TABLE \"users\" DROP COLUMN \"role_id\";\n   *\n   * ```\n   *\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getAlterColumn": {
            "name": "getAlterColumn",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAlterColumn(string $table, array $cfg): string\n  {\n    $alter_types = ['add', 'modify', 'drop'];\n\n    if (!empty($cfg['alter_type']) && in_array(strtolower($cfg['alter_type']), $alter_types)) {\n      $alter_type = strtoupper($cfg['alter_type']);\n    }\n    else {\n      $alter_type = 'ADD';\n    }\n\n    $st = '';\n\n    if (empty($cfg['no_table_exp'])) {\n      $st = 'ALTER TABLE '. $this->escape($table) . PHP_EOL;\n    }\n\n    if ($alter_type === 'MODIFY' && !empty($cfg['new_name'])) {\n      \/\/ Sqlite does not support modifying column types, only renaming\n      $st .= \"RENAME COLUMN \";\n      $st .= $this->escape($cfg['col_name']) . ' TO ' . $this->escape($cfg['new_name']) . ' ';\n    }\n    elseif ($alter_type === 'DROP') {\n      $st .= \"DROP COLUMN \" . $this->escape($cfg['col_name']);\n    }\n    else {\n      $st .= $alter_type . ' ' . $this->getColumnDefinitionStatement($cfg['col_name'], $cfg);\n    }\n\n    return $st;\n  }",
            "parent": {
                "name": "getAlterColumn",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlFormatters",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlFormatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getAlterColumn(string $table, array $cfg): string;",
                "parent": false,
                "trait": false,
                "startLine": 155,
                "endLine": 155,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "getAlterColumn",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 911,
            "endLine": 941,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getAlterColumn",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getAlterKey": {
            "name": "getAlterKey",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAlterKey(string $table, array $cfg): string\n  {\n    \/\/ Sqlite does not support altering keys\n    return '';\n  }",
            "parent": {
                "name": "getAlterKey",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlFormatters",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlFormatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getAlterKey(string $table, array $cfg): string;",
                "parent": false,
                "trait": false,
                "startLine": 163,
                "endLine": 163,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "getAlterKey",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 949,
            "endLine": 953,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getAlterKey",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array $cfg\n   * @return string\n   *\/"
        },
        "createIndex": {
            "name": "createIndex",
            "summary": "Creates an index",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createIndex(string $table, $column, bool $unique = false, $length = null, $order = null): bool\n  {\n    if (!\\is_array($column)) {\n      $column = [$column];\n    }\n\n    $name = Str::encodeFilename($table);\n    foreach ($column as $i => $c){\n      if (!Str::checkName($c)) {\n        $this->error(\"Illegal column $c\");\n      }\n\n      $name      .= '_'.$c;\n      $column[$i] = '`'.$column[$i].'`';\n      if (!empty($length[$i]) && \\is_int($length[$i]) && $length[$i] > 0) {\n        $column[$i] .= '('.$length[$i].')';\n      }\n    }\n\n    $name = Str::cut($name, 50);\n    if ($table = $this->tableFullName($table, 1)) {\n      $query = 'CREATE '.( $unique ? 'UNIQUE ' : '' ).\"INDEX `$name` ON $table ( \".implode(', ', $column);\n      if (($order === \"ASC\") || ($order === \"DESC\")) {\n        $query .= ' '. $order .' );';\n      }\n      else {\n        $query .= ' );';\n      }\n\n      X::log(['index', $query],'vito');\n      return (bool)$this->rawQuery($query);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "createIndex",
                "summary": "Creates an index",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlEngines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlEngines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function createIndex(string $table, $column, bool $unique = false, $length = null): bool;",
                "parent": false,
                "trait": false,
                "startLine": 16,
                "endLine": 16,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "createIndex",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "column",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "unique",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": ""
                    },
                    {
                        "name": "length",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Creates an index\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$column"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$unique"
                        },
                        {
                            "tag": "param",
                            "type": "null",
                            "name": "$length"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Creates an index\n   *\n   * @param string       $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 965,
            "endLine": 999,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "createIndex",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unique",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates an index\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$unique"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$length"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates an index\n   *\n   * @param null|string  $table\n   * @param string|array $column\n   * @param bool         $unique\n   * @param null         $length\n   * @return bool\n   *\/"
        },
        "deleteIndex": {
            "name": "deleteIndex",
            "summary": "Deletes an index",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteIndex(string $table, string $key): bool\n  {\n    if (($this->tableFullName($table, 1)) && Str::checkName($key)) {\n      \/\/changed the row above because if the table has no rows query() returns 0\n      \/\/return (bool)$this->db->query(\"ALTER TABLE $table DROP INDEX `$key`\");\n      return $this->query('DROP INDEX IF EXISTS '.$key) !== false;\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "deleteIndex",
                "summary": "Deletes an index",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlEngines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlEngines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function deleteIndex(string $table, string $key): bool;",
                "parent": false,
                "trait": false,
                "startLine": 25,
                "endLine": 25,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "deleteIndex",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "key",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Deletes an index\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$key"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 1010,
            "endLine": 1019,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "deleteIndex",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes an index\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$key"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Deletes an index\n   *\n   * @param string $table\n   * @param string $key\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "getCharsets": {
            "name": "getCharsets",
            "summary": "Returns the SQL statement to get the list of charsets.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCharsets(): string\n  {\n    return \"SELECT \" . $this->escape(\"column1\") . \" AS \". $this->escape(\"charset\") . PHP_EOL .\n      \"FROM (VALUES('UTF-8'), ('UTF-16'), ('UTF-16le'), ('UTF-16be'))\";\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1027,
            "endLine": 1031,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCharsets",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the SQL statement to get the list of charsets.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the SQL statement to get the list of charsets.\n   *\n   * @return string\n   *\/"
        },
        "getCollations": {
            "name": "getCollations",
            "summary": "Returns the SQL statement to get the list of collations.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCollations(): string\n  {\n    return \"SELECT DISTINCT \" . $this->escape(\"name\"). \" AS \" . $this->escape(\"collation\") . PHP_EOL .\n      \"FROM \" . $this->escape(\"pragma_collation_list\") . \";\";\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1039,
            "endLine": 1043,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCollations",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the SQL statement to get the list of collations.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the SQL statement to get the list of collations.\n   *\n   * @return string\n   *\/"
        },
        "createDatabase": {
            "name": "createDatabase",
            "summary": "Creates a database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createDatabase(string $database, ?string $enc = null, ?string $collation = null): bool\n  {\n    return static::createDatabaseOnHost($database, $this->host);\n  }",
            "parent": {
                "name": "createDatabase",
                "summary": "Creates a database",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function createDatabase(string $database, ?string $enc = null, ?string $collation = null): bool\n  {\n    if ($sql = $this->getCreateDatabase($database, $enc, $collation)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 81,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "createDatabase",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "enc",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "collation",
                        "position": 2,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Creates a database\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database"
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$enc"
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$collation"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @param string|null $enc\n   * @param string|null $collation\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 1054,
            "endLine": 1057,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "createDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "enc",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "collation",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$enc"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$collation"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a database\n   *\n   * @param string $database\n   * @param string|null $enc\n   * @param string|null $collation\n   * @return bool\n   *\/"
        },
        "dropDatabase": {
            "name": "dropDatabase",
            "summary": "Drops the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dropDatabase(string $database): bool\n  {\n    if ($database = self::normalizeFilename($database)) {\n      if ($this->host.'\/'.$database === $this->cfg['originalHost'].'\/'.$this->cfg['originalDb']) {\n        throw new \\Exception(X::_('Cannot drop the currently open database!'));\n      }\n\n      return static::dropDatabaseOnHost($database, $this->host);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "dropDatabase",
                "summary": "Drops the given database",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function dropDatabase(string $database): bool\n  {\n    if ($this->check()) {\n      if (!Str::checkName($database)) {\n        throw new Exception(X::_(\"Wrong database name '%s'\", $database));\n      }\n\n      if ($database === $this->getCurrent()) {\n        throw new Exception(X::_('Cannot drop the currently open database!'));\n      }\n\n      if ($sql = $this->getDropDatabase($database)) {\n        try {\n          return (bool)$this->emulatePreparesAndQuery($sql);\n        }\n        catch (Exception $e) {\n          return false;\n        }\n      }\n    }\n\n    return $this->check();\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 98,
                "endLine": 120,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "dropDatabase",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Drops the given database\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Drops the given database\n   *\n   * @param string $database\n   * @return bool\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 1066,
            "endLine": 1077,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dropDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Drops the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Drops the given database\n   *\n   * @param string $database\n   * @return bool\n   *\/"
        },
        "renameDatabase": {
            "name": "renameDatabase",
            "summary": "Renames the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameDatabase(string $oldDatabase, string $newDatabase): bool\n  {\n    if (($oldDatabase = self::normalizeFilename($oldDatabase))\n      && ($newDatabase = self::normalizeFilename($newDatabase))\n    ) {\n      if ($this->host.'\/'.$oldDatabase === $this->cfg['originalHost'].'\/'.$this->cfg['originalDb']) {\n        throw new \\Exception(X::_('Cannot drop the currently open database!'));\n      }\n\n      return static::renameDatabaseOnHost($oldDatabase, $newDatabase, $this->host);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "renameDatabase",
                "summary": "Renames the given database",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function renameDatabase(string $oldName, string $newName): bool\n  {\n    if ($this->check()) {\n      if (!Str::checkName($oldName) || !Str::checkName($newName)) {\n        throw new Exception(X::_(\"Wrong database name '%s' or '%s'\", $oldName, $newName));\n      }\n\n      if ($oldName === $this->getCurrent()) {\n        throw new Exception(X::_('Cannot rename the currently open database!'));\n      }\n\n      if ($sql = $this->getRenameDatabase($oldName, $newName)) {\n        try {\n          return (bool)$this->emulatePreparesAndQuery($sql);\n        }\n        catch (Exception $e) {\n          return false;\n        }\n      }\n    }\n\n    return $this->check();\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 131,
                "endLine": 153,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "renameDatabase",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "oldName",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame"
                    },
                    {
                        "name": "newName",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame"
                    }
                ],
                "doc": {
                    "description": "Renames the given database\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$old",
                            "description": "ame"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$new",
                            "description": "ame"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Renames the given database\n   *\n   * @param string $oldName\n   * @param string $newName\n   * @return bool\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 1087,
            "endLine": 1100,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "oldDatabase",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "atabase"
                },
                {
                    "name": "newDatabase",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "atabase"
                }
            ],
            "doc": {
                "description": "Renames the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "atabase"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "atabase"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Renames the given database\n   *\n   * @param string $oldDatabase\n   * @param string $newDatabase\n   * @return bool\n   *\/"
        },
        "duplicateDatabase": {
            "name": "duplicateDatabase",
            "summary": "Duplicates the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function duplicateDatabase(string $oldDatabase, string $newDatabase): bool\n  {\n    return static::duplicateDatabaseOnHost($oldDatabase, $newDatabase, $this->host);\n  }",
            "parent": {
                "name": "duplicateDatabase",
                "summary": "Duplicates the given database",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function duplicateDatabase(string $source, string $target): bool\n  {\n    if ($this->check()) {\n      if (!Str::checkName($source) || !Str::checkName($target)) {\n        throw new Exception(X::_(\"Wrong database name '%s' or '%s'\", $source, $target));\n      }\n\n      if ($sql = $this->getDuplicateDatabase($source, $target)) {\n        try {\n          $this->disableKeys();\n          $res = (bool)$this->emulatePreparesAndQuery($sql);\n          $this->enableKeys();\n          return $res;\n        }\n        catch (Exception $e) {\n          return false;\n        }\n      }\n    }\n\n    return $this->check();\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 164,
                "endLine": 185,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "duplicateDatabase",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "source",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "target",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Duplicates the given database\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$source"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$target"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Duplicates the given database\n   *\n   * @param string $source\n   * @param string $target\n   * @return bool\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 1110,
            "endLine": 1113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "duplicateDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "oldDatabase",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "atabase"
                },
                {
                    "name": "newDatabase",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "atabase"
                }
            ],
            "doc": {
                "description": "Duplicates the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "atabase"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "atabase"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Duplicates the given database\n   *\n   * @param string $oldDatabase\n   * @param string $newDatabase\n   * @return bool\n   *\/"
        },
        "createUser": {
            "name": "createUser",
            "summary": "Creates a database user",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createUser(string|null $user = null, string|null $pass = null, string|null $db = null): bool\n  {\n    return true;\n  }",
            "parent": {
                "name": "createUser",
                "summary": "Creates a database user",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlEngines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlEngines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function createUser(string $user, string $pass, string|null $db = null): bool;",
                "parent": false,
                "trait": false,
                "startLine": 35,
                "endLine": 35,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "createUser",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "user",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "pass",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "db",
                        "position": 2,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Creates a database user\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$user"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$pass"
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$db"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Creates a database user\n   *\n   * @param string $user\n   * @param string $pass\n   * @param string|null $db\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 1124,
            "endLine": 1127,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "createUser",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "pass",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates a database user\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$user"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$pass"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates a database user\n   *\n   * @param string|null $user\n   * @param string|null $pass\n   * @param string|null $db\n   * @return bool\n   *\/"
        },
        "deleteUser": {
            "name": "deleteUser",
            "summary": "Deletes a database user",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteUser(string|null $user = null): bool\n  {\n    return true;\n  }",
            "parent": {
                "name": "deleteUser",
                "summary": "Deletes a database user",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlEngines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlEngines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function deleteUser(string $user): bool;",
                "parent": false,
                "trait": false,
                "startLine": 43,
                "endLine": 43,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "deleteUser",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "user",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Deletes a database user\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$user"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes a database user\n   *\n   * @param string $user\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 1136,
            "endLine": 1139,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "deleteUser",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a database user\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$user"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a database user\n   *\n   * @param string|null $user\n   * @return bool\n   *\/"
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUsers(string $user = '', string $host = ''): ?array\n  {\n    return [];\n  }",
            "parent": {
                "name": "getUsers",
                "summary": "Return an array including privileges of a specific db_user or all db_users.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlEngines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlEngines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getUsers(string $user = '', string $host = ''): ?array;",
                "parent": false,
                "trait": false,
                "startLine": 52,
                "endLine": 52,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 0,
                "shortName": "getUsers",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "user",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "host",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return an array including privileges of a specific db_user or all db_users.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$user"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$host"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return an array including privileges of a specific db_user or all db_users.\n   *\n   * @param string $user\n   * @param string $host\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 1147,
            "endLine": 1150,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "getUsers",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$user"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$host"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $user\n   * @param string $host\n   * @return array|null\n   *\/"
        },
        "renameTable": {
            "name": "renameTable",
            "summary": "Renames the given table to the new given name.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function renameTable(string $table, string $newName): bool\n  {\n    if ($this->check() && Str::checkName($table) && Str::checkName($newName)) {\n      $t1 = strpos($table, '.') ? $this->tableFullName($table, true) : $this->tableSimpleName($table, true);\n      $t2 = strpos($newName, '.') ? $this->tableFullName($newName, true) : $this->tableSimpleName($newName, true);\n\n      $res = $this->rawQuery(sprintf(\"ALTER TABLE %s RENAME TO %s\", $t1, $t2));\n      return (bool)$res;\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "renameTable",
                "summary": "Renames the given table to the new given name.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlEngines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlEngines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function renameTable(string $table, string $newName): bool;",
                "parent": false,
                "trait": false,
                "startLine": 61,
                "endLine": 61,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "renameTable",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The current table's name"
                    },
                    {
                        "name": "newName",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame The new name."
                    }
                ],
                "doc": {
                    "description": "Renames the given table to the new given name.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The current table's name"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$new",
                            "description": "ame The new name."
                        }
                    ],
                    "return": "True if it succeeded"
                },
                "comments": "  \/**\n   * Renames the given table to the new given name.\n   *\n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/"
            },
            "trait": false,
            "startLine": 1159,
            "endLine": 1170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "renameTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The current table's name"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The new name."
                }
            ],
            "doc": {
                "description": "Renames the given table to the new given name.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The current table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "ame The new name."
                    }
                ],
                "return": "True if it succeeded"
            },
            "comments": "  \/**\n   * Renames the given table to the new given name.\n   *\n   * @param string $table   The current table's name\n   * @param string $newName The new name.\n   * @return bool  True if it succeeded\n   *\/"
        },
        "getTableComment": {
            "name": "getTableComment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTableComment(string $table): string\n  {\n    return '';\n  }",
            "parent": {
                "name": "getTableComment",
                "summary": "Returns the comment (or an empty string if none) for a given table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlEngines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlEngines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getTableComment(string $table): string;",
                "parent": false,
                "trait": false,
                "startLine": 70,
                "endLine": 70,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getTableComment",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name"
                    }
                ],
                "doc": {
                    "description": "Returns the comment (or an empty string if none) for a given table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name"
                        }
                    ],
                    "return": "The table's comment"
                },
                "comments": "  \/**\n   * Returns the comment (or an empty string if none) for a given table.\n   *\n   * @param string $table The table's name\n   *\n   * @return string The table's comment\n   *\/"
            },
            "trait": false,
            "startLine": 1172,
            "endLine": 1175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTableComment",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbSize": {
            "name": "dbSize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dbSize(string $database = '', string $type = ''): int\n  {\n    if (!str_ends_with($database, '.sqlite')\n        && !str_ends_with($database, '.db')\n      ) {\n        $database .= '.sqlite';\n      }\n\n   return @filesize($this->host . $database) ?: 0;\n  }",
            "parent": {
                "name": "dbSize",
                "summary": "Gets the size of a database",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function dbSize(string $database = '', string $type = ''): int;",
                "parent": false,
                "trait": false,
                "startLine": 276,
                "endLine": 276,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 0,
                "shortName": "dbSize",
                "returns": [
                    "int"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "type",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the size of a database\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$type"
                        }
                    ],
                    "return": "Size in bytes"
                },
                "comments": "  \/**\n   * Gets the size of a database\n   *\n   * @param string $database\n   * @param string $type\n   * @return int Size in bytes\n   *\/"
            },
            "trait": false,
            "startLine": 1178,
            "endLine": 1187,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "dbSize",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableSize": {
            "name": "tableSize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function tableSize(string $table, string $type = ''): int\n  {\n    return $this->getOne(\n      'SELECT SUM(pgsize) FROM dbstat WHERE name = ?',\n      $table\n    ) ?: 0;\n  }",
            "parent": {
                "name": "tableSize",
                "summary": "Gets the size of a table",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function tableSize(string $table, string $type = ''): int;",
                "parent": false,
                "trait": false,
                "startLine": 286,
                "endLine": 286,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "tableSize",
                "returns": [
                    "int"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "type",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the size of a table\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$type"
                        }
                    ],
                    "return": "Size in bytes"
                },
                "comments": "  \/**\n   * Gets the size of a table\n   *\n   * @param string $table\n   * @param string $type\n   * @return int Size in bytes\n   *\/"
            },
            "trait": false,
            "startLine": 1190,
            "endLine": 1196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "tableSize",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "status": {
            "name": "status",
            "summary": "Gets the status of a table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function status(string $table = '', string $database = '')\n  {\n    $cur = null;\n    if ($database && ($this->getCurrent() !== $database)) {\n      $cur = $this->getCurrent();\n      $this->change($database);\n    }\n\n    $r = $this->getRow('SELECT * FROM dbstat WHERE name LIKE ?', $table);\n    if (null !== $cur) {\n      $this->change($cur);\n    }\n\n    return $r;\n  }",
            "parent": {
                "name": "status",
                "summary": "Gets the status of a table",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function status(string $table = '', string $database = '');",
                "parent": false,
                "trait": false,
                "startLine": 296,
                "endLine": 296,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 0,
                "shortName": "status",
                "returns": [],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "database",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the status of a table\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the status of a table\n   *\n   * @param string $table\n   * @param string $database\n   * @return mixed\n   *\/"
            },
            "trait": false,
            "startLine": 1207,
            "endLine": 1221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "status",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the status of a table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Gets the status of a table.\n   *\n   * @param string $table\n   * @param string $database\n   * @return array|false|null\n   * @throws Exception\n   *\/"
        },
        "getUid": {
            "name": "getUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUid(): string\n  {\n    return X::makeUid();\n  }",
            "parent": {
                "name": "getUid",
                "summary": "Returns a UUID",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getUid(): ?string;",
                "parent": false,
                "trait": false,
                "startLine": 304,
                "endLine": 304,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getUid",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns a UUID\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a UUID\n   *\n   * @return string|null\n   *\/"
            },
            "trait": false,
            "startLine": 1227,
            "endLine": 1230,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUid",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string\n   *\/"
        },
        "getCreateConstraintsOnly": {
            "name": "getCreateConstraintsOnly",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateConstraintsOnly(string $table, ?array $cfg = null): string\n  {\n    $st = '';\n    if (!$cfg) {\n      $cfg = $this->modelize($table);\n    }\n\n    if ($cfg && !empty($cfg['keys'])) {\n      $keys = array_values(array_filter(\n        $cfg['keys'],\n        fn($a) => !empty($a['columns'])\n          && !empty($a['constraint'])\n          && !empty($a['ref_table'])\n          && !empty($a['ref_column'])\n      ));\n      if (!empty($keys)) {\n        foreach ($keys as $i =>$k) {\n          $cols = implode(', ', array_map(fn($col) => $this->escape($col), $k['columns']));\n          $refCols = is_array($k['ref_column']) ?\n            implode(', ', array_map(fn($col) => $this->escape($col), $k['ref_column'])) :\n            $this->escape($k['ref_column']);\n          $st .= '  CONSTRAINT ' . $this->escape($k['constraint']) .\n            ' FOREIGN KEY (' . $cols . ') ' .\n            'REFERENCES ' . $this->escape($k['ref_table']) . '(' . $refCols . ') ' .\n            (!empty($k['delete']) ? ' ON DELETE ' . $k['delete'] : '') .\n            (!empty($k['update']) ? ' ON UPDATE ' . $k['update'] : '') .\n            (isset($keys[$i + 1]) ? ',' . PHP_EOL : '');\n        }\n      }\n    }\n\n    return $st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1238,
            "endLine": 1270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateConstraintsOnly",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return string\n   *\/"
        },
        "getCreateConstraints": {
            "name": "getCreateConstraints",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateConstraints(string $table, ?array $cfg = null): string\n  {\n    $st = '';\n    if (!$cfg) {\n      $cfg = $this->modelize($table);\n    }\n\n    if ($cfg && !empty($cfg['keys'])) {\n      $keys = array_values(\n        array_filter(\n          $cfg['keys'],\n          fn($a) => !empty($a['columns'])\n            && !empty($a['constraint'])\n            && !empty($a['ref_table'])\n            && !empty($a['ref_column'])\n        )\n      );\n      if (!empty($keys)) {\n        $tmpTable = Str::encodeFilename('_bbntmp_'.$table);\n        $st .= $this->getCreateTable($tmpTable, $cfg);\n        $st .= $this->getCreateKeys($tmpTable, $cfg);\n        $st .= 'INSERT INTO '.$this->escape($tmpTable).' SELECT * FROM '.$this->escape($table).';'.PHP_EOL;\n        $st .= 'DROP TABLE '.$this->escape($table).';'.PHP_EOL;\n        $st .= 'ALTER TABLE '.$this->escape($tmpTable).' RENAME TO '.$this->escape($table).';'.PHP_EOL;\n      }\n    }\n\n    return $st;\n  }",
            "parent": {
                "name": "getCreateConstraints",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\SqlFormatters",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/SqlFormatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getCreateConstraints(string $table, array|null $model = null): string;",
                "parent": false,
                "trait": false,
                "startLine": 132,
                "endLine": 132,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "getCreateConstraints",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "model",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$model"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param array|null $model\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 1278,
            "endLine": 1306,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateConstraints",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return string\n   *\/"
        },
        "getDropConstraint": {
            "name": "getDropConstraint",
            "summary": "Returns a string for dropping a constraint.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDropConstraint(string $table, string $constraint): string\n  {\n    $st = '';\n    if ($cfg = $this->modelize($table)) {\n      $cfg['keys'] = array_filter(\n        $cfg['keys'],\n        fn($a) => empty($a['constraint'])\n          && (strtolower($a['constraint']) !== strtolower($constraint))\n      );\n      $tmpTable = Str::encodeFilename('_bbntmp_'.$table);\n      $st = $this->getCreateTable($tmpTable, $cfg);\n      $st .= 'INSERT INTO '.$this->escape($tmpTable).' SELECT * FROM '.$this->escape($table).';'.PHP_EOL;\n      $st .= 'DROP TABLE '.$this->escape($table).';'.PHP_EOL;\n      $st .= 'ALTER TABLE '.$this->escape($tmpTable).' RENAME TO '.$this->escape($table).';'.PHP_EOL;\n    }\n\n    return $st;\n  }",
            "parent": {
                "name": "getDropConstraint",
                "summary": "Return the SQL statement to drop a constraint.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDropConstraint(string $table, string $constraint): string\n  {\n    if (($table = $this->tableFullName($table, true))\n      && Str::checkName($constraint)\n    ) {\n      return 'ALTER TABLE '.$this->escape($table).PHP_EOL.'  DROP FOREIGN KEY '.$this->escape($constraint).';';\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 291,
                "endLine": 300,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "getDropConstraint",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "constraint",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return the SQL statement to drop a constraint.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$constraint"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the SQL statement to drop a constraint.\n   * @param string $table\n   * @param string $constraint\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 1316,
            "endLine": 1333,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getDropConstraint",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "constraint",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string for dropping a constraint.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$constraint"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a string for dropping a constraint.\n   *\n   * @param string $table\n   * @param string $constraint\n   * @return string\n   *\/"
        },
        "getPrimary": {
            "name": "getPrimary",
            "summary": "Return primary keys of a table as a numeric array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPrimary(string $table): array\n  {\n    if (($keys = $this->getKeys($table)) && isset($keys['keys']['PRIMARY'])) {\n      return $keys['keys']['PRIMARY']['columns'];\n    }\n\n    return [];\n  }",
            "parent": {
                "name": "getPrimary",
                "summary": "Return primary keys of a table as a numeric array.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getPrimary(string $table): array\n  {\n    if (($keys = $this->getKeys($table)) && isset($keys['keys']['PRIMARY'])) {\n      return $keys['keys']['PRIMARY']['columns'];\n    }\n\n    return [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 796,
                "endLine": 803,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getPrimary",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name"
                    }
                ],
                "doc": {
                    "description": "Return primary keys of a table as a numeric array.\n\n```php\nX::dump($db-> get_primary('table_users'));\n\/\/ (array) [\"id\"]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * ```php\n   * X::dump($db-> get_primary('table_users'));\n   * \/\/ (array) [\"id\"]\n   * ```\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 1343,
            "endLine": 1350,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPrimary",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return primary keys of a table as a numeric array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return primary keys of a table as a numeric array.\n   *\n   * @param string $table\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfg(): array\n  {\n    return $this->cfg;\n  }",
            "parent": {
                "name": "getCfg",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getCfg(): array;",
                "parent": false,
                "trait": false,
                "startLine": 557,
                "endLine": 557,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getCfg",
                "returns": [
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 1353,
            "endLine": 1356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCfg",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "getHost": {
            "name": "getHost",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHost(): ?string\n  {\n    return $this->host;\n  }",
            "parent": {
                "name": "getHost",
                "summary": "Returns the host of the current connection.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getHost(): ?string;",
                "parent": false,
                "trait": false,
                "startLine": 603,
                "endLine": 603,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getHost",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the host of the current connection.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the host of the current connection.\n   *\n   * @return string|null\n   *\/"
            },
            "trait": false,
            "startLine": 1359,
            "endLine": 1362,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHost",
            "returns": [
                null,
                "string"
            ],
            "arguments": []
        },
        "getConnectionCode": {
            "name": "getConnectionCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getConnectionCode()\n  {\n    return $this->connection_code;\n  }",
            "parent": {
                "name": "getConnectionCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Engines",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Engines.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getConnectionCode();",
                "parent": false,
                "trait": false,
                "startLine": 608,
                "endLine": 608,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getConnectionCode",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 1365,
            "endLine": 1368,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getConnectionCode",
            "returns": [],
            "arguments": []
        },
        "__toString": {
            "name": "__toString",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __toString()\n  {\n    return 'sqlite';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1371,
            "endLine": 1374,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "__toString",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "getHostDatabases": {
            "name": "getHostDatabases",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getHostDatabases(string $host): array\n  {\n    $databases = [];\n    if (is_dir($host)) {\n      $fs = Dir::getFiles($host, false, false, ['sqlite', 'db']);\n      foreach ($fs as $f) {\n        if (is_file($f)) {\n          $databases[] = X::pathinfo($f, PATHINFO_FILENAME);\n        }\n      }\n    }\n\n    sort($databases);\n    return $databases;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1377,
            "endLine": 1391,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getHostDatabases",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createDatabaseOnHost": {
            "name": "createDatabaseOnHost",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function createDatabaseOnHost(string $database, string $host): bool\n  {\n    if (($database = self::normalizeFilename($database))\n      && ($path = self::getHostPath($host))\n      && !file_exists($path.$database)\n    ) {\n      file_put_contents($path.$database, '');\n      return file_exists($path.$database);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1394,
            "endLine": 1405,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "createDatabaseOnHost",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dropDatabaseOnHost": {
            "name": "dropDatabaseOnHost",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function dropDatabaseOnHost(string $database, string $host): bool\n  {\n    if (($database = self::normalizeFilename($database))\n      && ($path = self::getHostPath($host))\n      && file_exists($path.$database)\n    ) {\n      return unlink($path.$database);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1408,
            "endLine": 1418,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dropDatabaseOnHost",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "renameDatabaseOnHost": {
            "name": "renameDatabaseOnHost",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function renameDatabaseOnHost(string $oldDatabase, string $newDatabase, string $host): bool\n  {\n    if (($oldDatabase = self::normalizeFilename($oldDatabase))\n      && ($newDatabase = self::normalizeFilename($newDatabase))\n      && ($oldDatabase !== $newDatabase)\n      && ($path = self::getHostPath($host))\n      && file_exists($path.$oldDatabase)\n    ) {\n      return rename($path.$oldDatabase, $path.$newDatabase);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1421,
            "endLine": 1433,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "renameDatabaseOnHost",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "oldDatabase",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "newDatabase",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "duplicateDatabaseOnHost": {
            "name": "duplicateDatabaseOnHost",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function duplicateDatabaseOnHost(string $oldDatabase, string $newDatabase, string $host): bool\n  {\n    if (($oldDatabase = self::normalizeFilename($oldDatabase))\n      && ($newDatabase = self::normalizeFilename($newDatabase))\n      && ($oldDatabase !== $newDatabase)\n      && ($path = self::getHostPath($host))\n      && file_exists($path.$oldDatabase)\n    ) {\n      return copy($path.$oldDatabase, $path.$newDatabase);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1436,
            "endLine": 1448,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "duplicateDatabaseOnHost",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "oldDatabase",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "newDatabase",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "normalizeFilename": {
            "name": "normalizeFilename",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function normalizeFilename($filename): ?string\n  {\n    if (Str::checkFilename($filename)) {\n      if (!str_ends_with($filename, '.sqlite')\n        && !str_ends_with($filename, '.db')\n      ) {\n        $filename .= '.sqlite';\n      }\n\n      return $filename;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1451,
            "endLine": 1464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "normalizeFilename",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "filename",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getHostPath": {
            "name": "getHostPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function getHostPath(string $host): string\n  {\n    $path = $host;\n    if (Str::isUid($host)) {\n      $opt = Option::getInstance();\n      if ($code = $opt->code($host)) {\n        $path = $code;\n      }\n      else {\n        throw new Exception(X::_(\"Host '%s' not found\", $host));\n      }\n    }\n\n    $pbits = X::split($path, '\/');\n    foreach ($pbits as &$bit) {\n      if (str_starts_with($bit, 'BBN_') && defined($bit)) {\n        $bit = constant($bit);\n        if (str_ends_with($bit, '\/')) {\n          $bit = rtrim($bit, '\/');\n        }\n      }\n    }\n\n    return X::join($pbits, '\/').'\/';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1466,
            "endLine": 1490,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getHostPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "host",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getColumnDefinitionStatement": {
            "name": "getColumnDefinitionStatement",
            "summary": "Returns a statement for column definition.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sqlite",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sqlite.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getColumnDefinitionStatement(string $name, array $cfg, bool $includeColumnName = true): string\n  {\n    $st = '';\n    if ($includeColumnName) {\n      $st .= '  ' . $this->escape($name) . ' ';\n    }\n\n    if (!empty($cfg['type'])) {\n      if (!in_array(strtolower($cfg['type']), self::$types)) {\n        if (isset(self::$interoperability[strtolower($cfg['type'])])) {\n          $st .= self::$interoperability[strtolower($cfg['type'])];\n        }\n        \/\/ No error: no type is fine\n      }\n      else {\n        $st .= $cfg['type'];\n      }\n    }\n\n    if (!empty($cfg['maxlength'])) {\n      $st .= '('.$cfg['maxlength'].')';\n    }\n\n    if (empty($cfg['null'])) {\n      $st .= ' NOT NULL';\n    }\n\n    if (array_key_exists('default', $cfg)) {\n      if (!is_null($cfg['default'])\n        && ($cfg['default'] !== 'NULL')\n      ) {\n        $st .= \" DEFAULT \" . (is_numeric($cfg['default']) ? $cfg['default'] : \"'\".Str::escapeQuotes(trim((string)$cfg['default'])).\"'\");\n      }\n    }\n\n    return $st;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1502,
            "endLine": 1538,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getColumnDefinitionStatement",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "includeColumnName",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "olumnName"
                }
            ],
            "doc": {
                "description": "Returns a statement for column definition.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$include",
                        "description": "olumnName"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a statement for column definition.\n   *\n   * @param string $name\n   * @param array $cfg\n   * @param bool $includeColumnName\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "isAggregateFunction": {
            "name": "isAggregateFunction",
            "summary": "Returns true if the column name is an aggregate function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isAggregateFunction(string $f): bool\n  {\n    foreach (self::$aggr_functions as $a) {\n      if (preg_match('\/' . $a . '\\\\s*\\\\(\/i', $f)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "isAggregateFunction",
                "summary": "Returns true if the column name is an aggregate function",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": true,
                "visibility": "public",
                "final": false,
                "code": "  public static function isAggregateFunction(string $f): bool\n  {\n    foreach (self::$aggr_functions as $a) {\n      if (preg_match('\/' . $a . '\\\\s*\\\\(\/i', $f)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 288,
                "endLine": 297,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "isAggregateFunction",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "f",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The string to check"
                    }
                ],
                "doc": {
                    "description": "Returns true if the column name is an aggregate function\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$f",
                            "description": "The string to check"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns true if the column name is an aggregate function\n   *\n   * @param string $f The string to check\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 288,
            "endLine": 297,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isAggregateFunction",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to check"
                }
            ],
            "doc": {
                "description": "Returns true if the column name is an aggregate function\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$f",
                        "description": "The string to check"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the column name is an aggregate function\n   *\n   * @param string $f The string to check\n   * @return bool\n   *\/"
        },
        "__destruct": {
            "name": "__destruct",
            "summary": "Destructor; setting the property holding the PDO object to null will close the connection.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __destruct()\n  {\n    $this->close();\n  }",
            "parent": {
                "name": "__destruct",
                "summary": "Destructor; setting the property holding the PDO object to null will close the connection.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __destruct()\n  {\n    $this->close();\n  }",
                "parent": false,
                "trait": false,
                "startLine": 351,
                "endLine": 354,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "__destruct",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Destructor; setting the property holding the PDO object to null will close the connection.",
                    "tags": []
                },
                "comments": "  \/**\n   * Destructor; setting the property holding the PDO object to null will close the connection.\n   *\/"
            },
            "trait": false,
            "startLine": 351,
            "endLine": 354,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "__destruct",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Destructor; setting the property holding the PDO object to null will close the connection.",
                "tags": []
            },
            "comments": "  \/**\n   * Destructor; setting the property holding the PDO object to null will close the connection.\n   *\/"
        },
        "getOperators": {
            "name": "getOperators",
            "summary": "Returns the list of operators in the current language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOperators(): array\n  {\n    return self::$operators;\n  }",
            "parent": {
                "name": "getOperators",
                "summary": "Returns the list of operators in the current language",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getOperators(): array\n  {\n    return self::$operators;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 362,
                "endLine": 365,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getOperators",
                "returns": [
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the list of operators in the current language\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the list of operators in the current language\n   *\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 362,
            "endLine": 365,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOperators",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of operators in the current language\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of operators in the current language\n   *\n   * @return array\n   *\/"
        },
        "getTypes": {
            "name": "getTypes",
            "summary": "Returns the list of all types",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTypes(): array\n  {\n    return self::$types;\n  }",
            "parent": {
                "name": "getTypes",
                "summary": "Returns the list of all types",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getTypes(): array\n  {\n    return self::$types;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 373,
                "endLine": 376,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getTypes",
                "returns": [
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the list of all types\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the list of all types\n   *\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 373,
            "endLine": 376,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTypes",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of all types\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of all types\n   *\n   * @return array\n   *\/"
        },
        "getNumericTypes": {
            "name": "getNumericTypes",
            "summary": "Returns the list of numeric types in the current language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNumericTypes(): array\n  {\n    return self::$numeric_types;\n  }",
            "parent": {
                "name": "getNumericTypes",
                "summary": "Returns the list of numeric types in the current language",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getNumericTypes(): array\n  {\n    return self::$numeric_types;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 384,
                "endLine": 387,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getNumericTypes",
                "returns": [
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the list of numeric types in the current language\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the list of numeric types in the current language\n   *\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 384,
            "endLine": 387,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getNumericTypes",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of numeric types in the current language\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of numeric types in the current language\n   *\n   * @return array\n   *\/"
        },
        "getDateTypes": {
            "name": "getDateTypes",
            "summary": "Returns the list of date types in the current language",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDateTypes(): array\n  {\n    return self::$date_types;\n  }",
            "parent": {
                "name": "getDateTypes",
                "summary": "Returns the list of date types in the current language",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDateTypes(): array\n  {\n    return self::$date_types;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 395,
                "endLine": 398,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getDateTypes",
                "returns": [
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the list of date types in the current language\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the list of date types in the current language\n   *\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 395,
            "endLine": 398,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDateTypes",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of date types in the current language\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of date types in the current language\n   *\n   * @return array\n   *\/"
        },
        "close": {
            "name": "close",
            "summary": "Closes the connection definitely, making the object unusable.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function close()\n  {\n    if ($this->pdo) {\n      $this->pdo = null;\n    }\n  }",
            "parent": {
                "name": "close",
                "summary": "Closes the connection definitely, making the object unusable.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function close()\n  {\n    if ($this->pdo) {\n      $this->pdo = null;\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 404,
                "endLine": 409,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "close",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Closes the connection definitely, making the object unusable.",
                    "tags": []
                },
                "comments": "  \/**\n   * Closes the connection definitely, making the object unusable.\n   *\/"
            },
            "trait": false,
            "startLine": 404,
            "endLine": 409,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "close",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Closes the connection definitely, making the object unusable.",
                "tags": []
            },
            "comments": "  \/**\n   * Closes the connection definitely, making the object unusable.\n   *\/"
        },
        "initCache": {
            "name": "initCache",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function initCache()\n  {\n    $this->cache = [];\n  }",
            "parent": {
                "name": "initCache",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function initCache()\n  {\n    $this->cache = [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 412,
                "endLine": 415,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "initCache",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 412,
            "endLine": 415,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "initCache",
            "returns": [],
            "arguments": []
        },
        "getEngine": {
            "name": "getEngine",
            "summary": "Returns the engine class that extends the base Sql class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEngine()\n  {\n    $class = static::class;\n    return strtolower(X::basename(str_replace('\\\\', '\/', $class)));\n  }",
            "parent": {
                "name": "getEngine",
                "summary": "Returns the engine class that extends the base Sql class.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getEngine()\n  {\n    $class = static::class;\n    return strtolower(X::basename(str_replace('\\\\', '\/', $class)));\n  }",
                "parent": false,
                "trait": false,
                "startLine": 423,
                "endLine": 427,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getEngine",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Returns the engine class that extends the base Sql class.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the engine class that extends the base Sql class.\n   *\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 423,
            "endLine": 427,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getEngine",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the engine class that extends the base Sql class.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the engine class that extends the base Sql class.\n   *\n   * @return string\n   *\/"
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "Returns the current database selected by the current connection.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrent(): ?string\n  {\n    return $this->current;\n  }",
            "parent": {
                "name": "getCurrent",
                "summary": "Returns the current database selected by the current connection.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getCurrent(): ?string\n  {\n    return $this->current;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 435,
                "endLine": 438,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getCurrent",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the current database selected by the current connection.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/"
            },
            "trait": false,
            "startLine": 435,
            "endLine": 438,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrent",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the current database selected by the current connection.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current database selected by the current connection.\n   *\n   * @return string|null\n   *\/"
        },
        "getLastCfg": {
            "name": "getLastCfg",
            "summary": "Return the last config for this connection.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastCfg(): ?array\n  {\n    return $this->last_cfg;\n  }",
            "parent": {
                "name": "getLastCfg",
                "summary": "Return the last config for this connection.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getLastCfg(): ?array\n  {\n    return $this->last_cfg;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 446,
                "endLine": 449,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getLastCfg",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return the last config for this connection.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/"
            },
            "trait": false,
            "startLine": 446,
            "endLine": 449,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the last config for this connection.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the last config for this connection.\n   *\n   * @return array|null\n   *\/"
        },
        "escape": {
            "name": "escape",
            "summary": "Returns a database item expression escaped like database, table, column, key names",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function escape(string $item): string\n  {\n    $items = explode('.', str_replace($this->qte, '', $item));\n    $r     = [];\n\n    foreach ($items as $m) {\n      if (!Str::checkName($m)) {\n        throw new Exception(X::_(\"Illegal name %s for the column\", $m));\n      }\n\n      $r[] = $this->qte . $m . $this->qte;\n    }\n\n    return implode('.', $r);\n  }",
            "parent": {
                "name": "escape",
                "summary": "Returns a database item expression escaped like database, table, column, key names",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function escape(string $item): string\n  {\n    $items = explode('.', str_replace($this->qte, '', $item));\n    $r     = [];\n\n    foreach ($items as $m) {\n      if (!Str::checkName($m)) {\n        throw new Exception(X::_(\"Illegal name %s for the column\", $m));\n      }\n\n      $r[] = $this->qte . $m . $this->qte;\n    }\n\n    return implode('.', $r);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 475,
                "endLine": 489,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "escape",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "item",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The item's name (escaped or not)"
                    }
                ],
                "doc": {
                    "description": "Returns a database item expression escaped like database, table, column, key names\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$item",
                            "description": "The item's name (escaped or not)"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Returns a database item expression escaped like database, table, column, key names\n   *\n   * @param string $item The item's name (escaped or not)\n   * @return string\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 475,
            "endLine": 489,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "escape",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The item's name (escaped or not)"
                }
            ],
            "doc": {
                "description": "Returns a database item expression escaped like database, table, column, key names\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$item",
                        "description": "The item's name (escaped or not)"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a database item expression escaped like database, table, column, key names\n   *\n   * @param string $item The item's name (escaped or not)\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "colFullName": {
            "name": "colFullName",
            "summary": "Returns a column's full name i.e. table.column",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function colFullName(string $col, ?string $table = null, bool $escaped = false): ?string\n  {\n    if ($col = trim($col)) {\n      $bits = explode('.', $col);\n      $ok   = null;\n      $col  = trim(array_pop($bits), ' ' . $this->qte);\n      if ($table && ($table = $this->tableSimpleName($table))) {\n        $ok = 1;\n      } elseif (\\count($bits)) {\n        $table = trim(array_pop($bits), ' ' . $this->qte);\n        $ok    = 1;\n      }\n\n      if ((null !== $ok) && Str::checkName($table) && Str::checkName($col)) {\n        return $escaped\n          ? $this->escape(\"$table.$col\")\n          : \"$table.$col\";\n      }\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "colFullName",
                "summary": "Returns a column's full name i.e. table.column",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function colFullName(string $col, ?string $table = null, bool $escaped = false): ?string\n  {\n    if ($col = trim($col)) {\n      $bits = explode('.', $col);\n      $ok   = null;\n      $col  = trim(array_pop($bits), ' ' . $this->qte);\n      if ($table && ($table = $this->tableSimpleName($table))) {\n        $ok = 1;\n      } elseif (\\count($bits)) {\n        $table = trim(array_pop($bits), ' ' . $this->qte);\n        $ok    = 1;\n      }\n\n      if ((null !== $ok) && Str::checkName($table) && Str::checkName($col)) {\n        return $escaped\n          ? $this->escape(\"$table.$col\")\n          : \"$table.$col\";\n      }\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 560,
                "endLine": 581,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "colFullName",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "col",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The column's name (escaped or not)"
                    },
                    {
                        "name": "table",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "name": "escaped",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "doc": {
                    "description": "Returns a column's full name i.e. table.column\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$col",
                            "description": "The column's name (escaped or not)"
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$table",
                            "description": "The table's name (escaped or not)"
                        },
                        {
                            "tag": "param",
                            "type": "false",
                            "name": "$escaped",
                            "description": "If set to true the returned string will be escaped"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string $col The column's name (escaped or not)\n   * @param string|null $table The table's name (escaped or not)\n   * @param false $escaped If set to true the returned string will be escaped\n   * @return string|null\n   *\/"
            },
            "trait": false,
            "startLine": 560,
            "endLine": 581,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "colFullName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ],
            "doc": {
                "description": "Returns a column's full name i.e. table.column\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "false",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a column's full name i.e. table.column\n   *\n   * @param string $col The column's name (escaped or not)\n   * @param string|null $table The table's name (escaped or not)\n   * @param false $escaped If set to true the returned string will be escaped\n   * @return string|null\n   *\/"
        },
        "colSimpleName": {
            "name": "colSimpleName",
            "summary": "Returns a column's simple name i.e. column",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function colSimpleName(string $col, bool $escaped = false): ?string\n  {\n    if ($bits = explode('.', $col)) {\n      $col = trim(end($bits), ' ' . $this->qte);\n      if ($col && Str::checkName($col)) {\n        return $escaped ? $this->escape($col) : $col;\n      }\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "colSimpleName",
                "summary": "Returns a column's simple name i.e. column",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function colSimpleName(string $col, bool $escaped = false): ?string\n  {\n    if ($bits = explode('.', $col)) {\n      $col = trim(end($bits), ' ' . $this->qte);\n      if ($col && Str::checkName($col)) {\n        return $escaped ? $this->escape($col) : $col;\n      }\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 590,
                "endLine": 600,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "colSimpleName",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "col",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The column's name (escaped or not)"
                    },
                    {
                        "name": "escaped",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "doc": {
                    "description": "Returns a column's simple name i.e. column\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$col",
                            "description": "The column's name (escaped or not)"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$escaped",
                            "description": "If set to true the returned string will be escaped"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool $escaped   If set to true the returned string will be escaped\n   * @return string|null\n   *\/"
            },
            "trait": false,
            "startLine": 590,
            "endLine": 600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "colSimpleName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name (escaped or not)"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                }
            ],
            "doc": {
                "description": "Returns a column's simple name i.e. column\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name (escaped or not)"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$escaped",
                        "description": "If set to true the returned string will be escaped"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a column's simple name i.e. column\n   *\n   * @param string $col     The column's name (escaped or not)\n   * @param bool $escaped   If set to true the returned string will be escaped\n   * @return string|null\n   *\/"
        },
        "isTableFullName": {
            "name": "isTableFullName",
            "summary": "Returns true if the given string is the full name of a table ('database.table').",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isTableFullName(string $table): bool\n  {\n    return (bool)strpos($table, '.');\n  }",
            "parent": {
                "name": "isTableFullName",
                "summary": "Returns true if the given string is the full name of a table ('database.table').",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isTableFullName(string $table): bool\n  {\n    return (bool)strpos($table, '.');\n  }",
                "parent": false,
                "trait": false,
                "startLine": 608,
                "endLine": 611,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "isTableFullName",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns true if the given string is the full name of a table ('database.table').\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns true if the given string is the full name of a table ('database.table').\n   *\n   * @param string $table\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 608,
            "endLine": 611,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isTableFullName",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the given string is the full name of a table ('database.table').\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given string is the full name of a table ('database.table').\n   *\n   * @param string $table\n   * @return bool\n   *\/"
        },
        "isColFullName": {
            "name": "isColFullName",
            "summary": "Returns true if the given string is the full name of a column ('table.column').",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isColFullName(string $col): bool\n  {\n    return (bool)strpos($col, '.');\n  }",
            "parent": {
                "name": "isColFullName",
                "summary": "Returns true if the given string is the full name of a column ('table.column').",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isColFullName(string $col): bool\n  {\n    return (bool)strpos($col, '.');\n  }",
                "parent": false,
                "trait": false,
                "startLine": 619,
                "endLine": 622,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "isColFullName",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "col",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns true if the given string is the full name of a column ('table.column').\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$col"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns true if the given string is the full name of a column ('table.column').\n   *\n   * @param string $col\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 619,
            "endLine": 622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isColFullName",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns true if the given string is the full name of a column ('table.column').\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the given string is the full name of a column ('table.column').\n   *\n   * @param string $col\n   * @return bool\n   *\/"
        },
        "rawQuery": {
            "name": "rawQuery",
            "summary": "Executes the original PDO query function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rawQuery()\n  {\n    if ($this->_fancy) {\n      $this->stopFancyStuff();\n      $switch_to_fancy = true;\n    }\n\n    $result = $this->pdo->query(...func_get_args());\n\n    if (!empty($switch_to_fancy)) {\n      $this->startFancyStuff();\n    }\n\n    return $result;\n  }",
            "parent": {
                "name": "rawQuery",
                "summary": "Executes the original PDO query function",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function rawQuery()\n  {\n    if ($this->_fancy) {\n      $this->stopFancyStuff();\n      $switch_to_fancy = true;\n    }\n\n    $result = $this->pdo->query(...func_get_args());\n\n    if (!empty($switch_to_fancy)) {\n      $this->startFancyStuff();\n    }\n\n    return $result;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 629,
                "endLine": 643,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "rawQuery",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Executes the original PDO query function\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Executes the original PDO query function\n   *\n   * @return false|PDOStatement\n   *\/"
            },
            "trait": false,
            "startLine": 629,
            "endLine": 643,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "rawQuery",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Executes the original PDO query function\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Executes the original PDO query function\n   *\n   * @return false|PDOStatement\n   *\/"
        },
        "parseQuery": {
            "name": "parseQuery",
            "summary": "Parses an SQL query and return an array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function parseQuery(string $statement): ?array\n  {\n    if ($this->_parser === null) {\n      $this->_parser = new PHPSQLParser();\n    }\n\n    $done = false;\n    try {\n      $r    = $this->_parser->parse($statement);\n      $done = 1;\n    }\n    catch (Exception $e){\n      $this->log('Error while parsing the query '.$statement);\n    }\n\n    if ($done) {\n      if (!$r || !count($r)) {\n        if (($this->getEngine() === 'sqlite')\n          && str_starts_with($statement, 'PRAGMA')\n        ) {\n          return null;\n        }\n\n        $this->log('Impossible to parse the query '.$statement);\n        return null;\n      }\n\n      if (isset($r['BRACKET']) && (\\count($r) === 1)) {\n        \/** @todo Is it impossible to parse queries with brackets ? *\/\n        \/\/throw new Exception('Bracket in the query '.$statement);\n        return null;\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "parseQuery",
                "summary": "Parses an SQL query and return an array.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function parseQuery(string $statement): ?array\n  {\n    if ($this->_parser === null) {\n      $this->_parser = new PHPSQLParser();\n    }\n\n    $done = false;\n    try {\n      $r    = $this->_parser->parse($statement);\n      $done = 1;\n    }\n    catch (Exception $e){\n      $this->log('Error while parsing the query '.$statement);\n    }\n\n    if ($done) {\n      if (!$r || !count($r)) {\n        if (($this->getEngine() === 'sqlite')\n          && str_starts_with($statement, 'PRAGMA')\n        ) {\n          return null;\n        }\n\n        $this->log('Impossible to parse the query '.$statement);\n        return null;\n      }\n\n      if (isset($r['BRACKET']) && (\\count($r) === 1)) {\n        \/** @todo Is it impossible to parse queries with brackets ? *\/\n        \/\/throw new Exception('Bracket in the query '.$statement);\n        return null;\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 651,
                "endLine": 688,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "parseQuery",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "statement",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Parses an SQL query and return an array.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$statement"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Parses an SQL query and return an array.\n   *\n   * @param string $statement\n   * @return null|array\n   *\/"
            },
            "trait": false,
            "startLine": 651,
            "endLine": 688,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "parseQuery",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Parses an SQL query and return an array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$statement"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Parses an SQL query and return an array.\n   *\n   * @param string $statement\n   * @return null|array\n   *\/"
        },
        "getQueryValues": {
            "name": "getQueryValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getQueryValues(array $cfg): array\n  {\n    $res = [];\n    if (!empty($cfg['values'])) {\n      \/\/ Only for the insert \/ update part (at the start of the query), before the where (but not before the join in insert \/ update beware!)\n      $num_types = in_array($cfg['kind'], ['INSERT', 'UPDATE']) && !empty($cfg['values_types']) ? count($cfg['values_types']) : 0;\n      foreach ($cfg['values'] as $i => $v) {\n        if (!isset($cfg['values_desc'][$i])) {\n          X::log([$i, $cfg['values_desc'], $v], 'no_desc_in_sql');\n        }\n        if ($num_types && ($i < $num_types) && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n          continue;\n        }\n        \/\/ Transforming the values if needed\n        if (($cfg['values_desc'][$i]['type'] === 'binary')\n          && ($cfg['values_desc'][$i]['maxlength'] === 16)\n          && Str::isUid($v)\n        ) {\n          $res[] = hex2bin($v);\n        }\n        elseif (is_string($v)\n          && ((($cfg['values_desc'][$i]['type'] === 'date') && (\\strlen($v) < 10))\n            || (($cfg['values_desc'][$i]['type'] === 'time') && (\\strlen($v) < 8))\n            || (($cfg['values_desc'][$i]['type'] === 'datetime') && (\\strlen($v) < 19)))\n          && (!isset($cfg['values_desc'][$i]['operator'])\n            || (($cfg['values_desc'][$i]['operator'] !== 'gten')\n              && ($cfg['values_desc'][$i]['operator'] !== 'gtn')\n              && ($cfg['values_desc'][$i]['operator'] !== 'lten')\n              && ($cfg['values_desc'][$i]['operator'] !== 'ltn')))\n        ) {\n          $res[] = $v.'%';\n        }\n        elseif (!empty($cfg['values_desc'][$i]['operator'])) {\n          switch ($cfg['values_desc'][$i]['operator']){\n            case 'contains':\n            case 'doesnotcontain':\n              $res[] = '%'.$v.'%';\n              break;\n            case 'startswith':\n              $res[] = $v.'%';\n              break;\n            case 'endswith':\n              $res[] = '%'.$v;\n              break;\n            default:\n              $res[] = $v;\n          }\n        }\n        else{\n          $res[] = $v;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getQueryValues",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getQueryValues(array $cfg): array\n  {\n    $res = [];\n    if (!empty($cfg['values'])) {\n      \/\/ Only for the insert \/ update part (at the start of the query), before the where (but not before the join in insert \/ update beware!)\n      $num_types = in_array($cfg['kind'], ['INSERT', 'UPDATE']) && !empty($cfg['values_types']) ? count($cfg['values_types']) : 0;\n      foreach ($cfg['values'] as $i => $v) {\n        if (!isset($cfg['values_desc'][$i])) {\n          X::log([$i, $cfg['values_desc'], $v], 'no_desc_in_sql');\n        }\n        if ($num_types && ($i < $num_types) && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n          continue;\n        }\n        \/\/ Transforming the values if needed\n        if (($cfg['values_desc'][$i]['type'] === 'binary')\n          && ($cfg['values_desc'][$i]['maxlength'] === 16)\n          && Str::isUid($v)\n        ) {\n          $res[] = hex2bin($v);\n        }\n        elseif (is_string($v)\n          && ((($cfg['values_desc'][$i]['type'] === 'date') && (\\strlen($v) < 10))\n            || (($cfg['values_desc'][$i]['type'] === 'time') && (\\strlen($v) < 8))\n            || (($cfg['values_desc'][$i]['type'] === 'datetime') && (\\strlen($v) < 19)))\n          && (!isset($cfg['values_desc'][$i]['operator'])\n            || (($cfg['values_desc'][$i]['operator'] !== 'gten')\n              && ($cfg['values_desc'][$i]['operator'] !== 'gtn')\n              && ($cfg['values_desc'][$i]['operator'] !== 'lten')\n              && ($cfg['values_desc'][$i]['operator'] !== 'ltn')))\n        ) {\n          $res[] = $v.'%';\n        }\n        elseif (!empty($cfg['values_desc'][$i]['operator'])) {\n          switch ($cfg['values_desc'][$i]['operator']){\n            case 'contains':\n            case 'doesnotcontain':\n              $res[] = '%'.$v.'%';\n              break;\n            case 'startswith':\n              $res[] = $v.'%';\n              break;\n            case 'endswith':\n              $res[] = '%'.$v;\n              break;\n            default:\n              $res[] = $v;\n          }\n        }\n        else{\n          $res[] = $v;\n        }\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 694,
                "endLine": 749,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getQueryValues",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array $cfg\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 694,
            "endLine": 749,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getQueryValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $cfg\n   * @return array\n   *\/"
        },
        "getFieldsList": {
            "name": "getFieldsList",
            "summary": "Returns an array of fields for the given table(s).",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getFieldsList(\"table_users\"));\n\/\/ (array) ['table_users.username', 'table_users.name']"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFieldsList($tables): array\n  {\n    $res = [];\n    if (!is_array($tables)) {\n      $tables = [$tables];\n    }\n\n    foreach ($tables as $t){\n      $model = $this->getColumns($t);\n      if (!is_array($model)) {\n        $this->error('Impossible to find the table '.$t);\n        throw new Exception(X::_('Impossible to find the table ').$t);\n      }\n\n      foreach (array_keys($model) as $f){\n        $res[] = $this->colFullName($f, $t);\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getFieldsList",
                "summary": "Returns an array of fields for the given table(s).",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getFieldsList(\"table_users\"));\n\/\/ (array) ['table_users.username', 'table_users.name']"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getFieldsList($tables): array\n  {\n    $res = [];\n    if (!is_array($tables)) {\n      $tables = [$tables];\n    }\n\n    foreach ($tables as $t){\n      $model = $this->getColumns($t);\n      if (!is_array($model)) {\n        $this->error('Impossible to find the table '.$t);\n        throw new Exception(X::_('Impossible to find the table ').$t);\n      }\n\n      foreach (array_keys($model) as $f){\n        $res[] = $this->colFullName($f, $t);\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 763,
                "endLine": 783,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getFieldsList",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "tables",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns an array of fields for the given table(s).\n\n```php\nX::dump($db->getFieldsList(\"table_users\"));\n\/\/ (array) ['table_users.username', 'table_users.name']\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$tables"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Returns an array of fields for the given table(s).\n   *\n   * ```php\n   * X::dump($db->getFieldsList(\"table_users\"));\n   * \/\/ (array) ['table_users.username', 'table_users.name']\n   * ```\n   *\n   * @param $tables\n   * @return array\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 763,
            "endLine": 783,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFieldsList",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "tables",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of fields for the given table(s).\n\n```php\nX::dump($db->getFieldsList(\"table_users\"));\n\/\/ (array) ['table_users.username', 'table_users.name']\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$tables"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns an array of fields for the given table(s).\n   *\n   * ```php\n   * X::dump($db->getFieldsList(\"table_users\"));\n   * \/\/ (array) ['table_users.username', 'table_users.name']\n   * ```\n   *\n   * @param $tables\n   * @return array\n   * @throws Exception\n   *\/"
        },
        "getUniquePrimary": {
            "name": "getUniquePrimary",
            "summary": "Return the unique primary key of the given table.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUniquePrimary(string $table): ?string\n  {\n    if (($keys = $this->getKeys($table))\n      && isset($keys['keys']['PRIMARY'])\n      && (\\count($keys['keys']['PRIMARY']['columns']) === 1)\n    ) {\n      return $keys['keys']['PRIMARY']['columns'][0];\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getUniquePrimary",
                "summary": "Return the unique primary key of the given table.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getUniquePrimary(string $table): ?string\n  {\n    if (($keys = $this->getKeys($table))\n      && isset($keys['keys']['PRIMARY'])\n      && (\\count($keys['keys']['PRIMARY']['columns']) === 1)\n    ) {\n      return $keys['keys']['PRIMARY']['columns'][0];\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 816,
                "endLine": 826,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getUniquePrimary",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name"
                    }
                ],
                "doc": {
                    "description": "Return the unique primary key of the given table.\n\n```php\nX::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the unique primary key of the given table.\n   *\n   * ```php\n   * X::dump($db->getUniquePrimary('table_users'));\n   * \/\/ (string) id\n   * ```\n   *\n   * @param string $table The table's name\n   * @return null|string\n   *\/"
            },
            "trait": false,
            "startLine": 816,
            "endLine": 826,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUniquePrimary",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return the unique primary key of the given table.\n\n```php\nX::dump($db->getUniquePrimary('table_users'));\n\/\/ (string) id\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the unique primary key of the given table.\n   *\n   * ```php\n   * X::dump($db->getUniquePrimary('table_users'));\n   * \/\/ (string) id\n   * ```\n   *\n   * @param string $table The table's name\n   * @return null|string\n   *\/"
        },
        "getUniqueKeys": {
            "name": "getUniqueKeys",
            "summary": "Return the unique keys of a table as a numeric array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUniqueKeys(string $table): array\n  {\n    if ($ks = $this->getKeys($table)) {\n      foreach ($ks['keys'] as $k){\n        if ($k['unique']) {\n          return $k['columns'];\n        }\n      }\n    }\n\n    return [];\n  }",
            "parent": {
                "name": "getUniqueKeys",
                "summary": "Return the unique keys of a table as a numeric array.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getUniqueKeys(string $table): array\n  {\n    if ($ks = $this->getKeys($table)) {\n      foreach ($ks['keys'] as $k){\n        if ($k['unique']) {\n          return $k['columns'];\n        }\n      }\n    }\n\n    return [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 839,
                "endLine": 850,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getUniqueKeys",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name"
                    }
                ],
                "doc": {
                    "description": "Return the unique keys of a table as a numeric array.\n\n```php\nX::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the unique keys of a table as a numeric array.\n   *\n   * ```php\n   * X::dump($db->getUniqueKeys('table_users'));\n   * \/\/ (array) [\"userid\", \"userdataid\"]\n   * ```\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 839,
            "endLine": 850,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUniqueKeys",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return the unique keys of a table as a numeric array.\n\n```php\nX::dump($db->getUniqueKeys('table_users'));\n\/\/ (array) [\"userid\", \"userdataid\"]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the unique keys of a table as a numeric array.\n   *\n   * ```php\n   * X::dump($db->getUniqueKeys('table_users'));\n   * \/\/ (array) [\"userid\", \"userdataid\"]\n   * ```\n   *\n   * @param string $table The table's name\n   * @return array\n   *\/"
        },
        "arrangeConditions": {
            "name": "arrangeConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function arrangeConditions(array &$conditions, array $cfg): void\n  {\n    if (!empty($cfg['available_fields']) && isset($conditions['conditions'])) {\n      foreach ($conditions['conditions'] as &$c){\n        if (array_key_exists('conditions', $c) && is_array($c['conditions'])) {\n          $this->arrangeConditions($c, $cfg);\n        }\n        elseif (isset($c['field']) && empty($cfg['available_fields'][$c['field']]) && !$this->isColFullName($c['field'])) {\n          foreach ($cfg['tables'] as $t => $o){\n            if (isset($cfg['available_fields'][$this->colFullName($c['field'], $t)])) {\n              $c['field'] = $this->colFullName($c['field'], $t);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }",
            "parent": {
                "name": "arrangeConditions",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function arrangeConditions(array &$conditions, array $cfg): void\n  {\n    if (!empty($cfg['available_fields']) && isset($conditions['conditions'])) {\n      foreach ($conditions['conditions'] as &$c){\n        if (array_key_exists('conditions', $c) && is_array($c['conditions'])) {\n          $this->arrangeConditions($c, $cfg);\n        }\n        elseif (isset($c['field']) && empty($cfg['available_fields'][$c['field']]) && !$this->isColFullName($c['field'])) {\n          foreach ($cfg['tables'] as $t => $o){\n            if (isset($cfg['available_fields'][$this->colFullName($c['field'], $t)])) {\n              $c['field'] = $this->colFullName($c['field'], $t);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 856,
                "endLine": 873,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "arrangeConditions",
                "returns": [
                    "void"
                ],
                "arguments": [
                    {
                        "name": "conditions",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": true,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$conditions"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array $conditions\n   * @param array $cfg\n   *\/"
            },
            "trait": false,
            "startLine": 856,
            "endLine": 873,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "arrangeConditions",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$conditions"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $conditions\n   * @param array $cfg\n   *\/"
        },
        "removeVirtual": {
            "name": "removeVirtual",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function removeVirtual(array $res): array\n  {\n    if (isset($res['fields'])) {\n      $to_remove = [];\n      foreach ($res['fields'] as $i => $f) {\n        if (!empty($res['available_fields'][$f])) {\n          $model = $this->modelize($res['available_fields'][$f]);\n          if (isset($model['fields'][$this->colSimpleName($f)])\n            && !empty($model['fields'][$this->colSimpleName($f)]['virtual'])\n          ) {\n            array_unshift($to_remove, $i);\n          }\n        }\n      }\n\n      $res['removed_virtual'] = $to_remove;\n      foreach ($to_remove as $i) {\n        array_splice($res['fields'], $i, 1);\n        array_splice($res['values'], $i, 1);\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "removeVirtual",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function removeVirtual(array $res): array\n  {\n    if (isset($res['fields'])) {\n      $to_remove = [];\n      foreach ($res['fields'] as $i => $f) {\n        if (!empty($res['available_fields'][$f])) {\n          $model = $this->modelize($res['available_fields'][$f]);\n          if (isset($model['fields'][$this->colSimpleName($f)])\n            && !empty($model['fields'][$this->colSimpleName($f)]['virtual'])\n          ) {\n            array_unshift($to_remove, $i);\n          }\n        }\n      }\n\n      $res['removed_virtual'] = $to_remove;\n      foreach ($to_remove as $i) {\n        array_splice($res['fields'], $i, 1);\n        array_splice($res['values'], $i, 1);\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 879,
                "endLine": 902,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "removeVirtual",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "res",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$res"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array $res\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 879,
            "endLine": 902,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeVirtual",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "res",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$res"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $res\n   * @return array\n   *\/"
        },
        "getValuesDesc": {
            "name": "getValuesDesc",
            "summary": "Returns a linear array",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getValuesDesc(array $where, array $cfg, &$others = []): array\n  {\n    if (!empty($where['conditions'])) {\n      foreach ($where['conditions'] as &$f){\n        \/\/ It's an imbricated condition\n        if (isset($f['logic'], $f['conditions']) && is_array($f['conditions'])) {\n          $this->getValuesDesc($f, $cfg, $others);\n        }\n        \/\/ Value is set\n        elseif (array_key_exists('value', $f)) {\n          $desc = [\n            'primary' => false,\n            'type' => null,\n            'maxlength' => null,\n            'operator' => $f['operator'] ?? null\n          ];\n          if (isset($f['field'], $cfg['available_fields'][$f['field']])) {\n            $t = $cfg['available_fields'][$f['field']];\n            if (isset($f['field'], $cfg['tables_full'][$t])\n              && ($model = $this->modelize($cfg['tables_full'][$t]))\n              && ($fname = $this->colSimpleName($f['field']))\n            ) {\n              $desc['name'] = $fname;\n              if (!empty($model['fields'][$fname]['type'])) {\n                $desc['type'] = $model['fields'][$fname]['type'];\n                $desc['maxlength'] = $model['fields'][$fname]['maxlength'] ?? null;\n                $desc['operator'] = $f['operator'] ?? null;\n              }\n              \/\/ Fixing filters using alias\n              elseif (isset($cfg['fields'][$f['field']])\n                && ($fname = $this->colSimpleName($cfg['fields'][$f['field']]))\n                && !empty($model['fields'][$fname]['type'])\n              ) {\n                $desc['type'] = $model['fields'][$fname]['type'];\n                $desc['maxlength'] = $model['fields'][$fname]['maxlength'] ?? null;\n                $desc['operator'] = $f['operator'] ?? null;\n              }\n\n              if (!empty($desc['type'])\n                && isset($model['keys']['PRIMARY'])\n                && (count($model['keys']['PRIMARY']['columns']) === 1)\n                && ($model['keys']['PRIMARY']['columns'][0] === $fname)\n              ) {\n                $desc['primary'] = true;\n              }\n            }\n          }\n\n          $others[] = $desc;\n        }\n      }\n    }\n\n    return $others;\n  }",
            "parent": {
                "name": "getValuesDesc",
                "summary": "Returns a linear array",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getValuesDesc(array $where, array $cfg, &$others = []): array\n  {\n    if (!empty($where['conditions'])) {\n      foreach ($where['conditions'] as &$f){\n        \/\/ It's an imbricated condition\n        if (isset($f['logic'], $f['conditions']) && is_array($f['conditions'])) {\n          $this->getValuesDesc($f, $cfg, $others);\n        }\n        \/\/ Value is set\n        elseif (array_key_exists('value', $f)) {\n          $desc = [\n            'primary' => false,\n            'type' => null,\n            'maxlength' => null,\n            'operator' => $f['operator'] ?? null\n          ];\n          if (isset($f['field'], $cfg['available_fields'][$f['field']])) {\n            $t = $cfg['available_fields'][$f['field']];\n            if (isset($f['field'], $cfg['tables_full'][$t])\n              && ($model = $this->modelize($cfg['tables_full'][$t]))\n              && ($fname = $this->colSimpleName($f['field']))\n            ) {\n              $desc['name'] = $fname;\n              if (!empty($model['fields'][$fname]['type'])) {\n                $desc['type'] = $model['fields'][$fname]['type'];\n                $desc['maxlength'] = $model['fields'][$fname]['maxlength'] ?? null;\n                $desc['operator'] = $f['operator'] ?? null;\n              }\n              \/\/ Fixing filters using alias\n              elseif (isset($cfg['fields'][$f['field']])\n                && ($fname = $this->colSimpleName($cfg['fields'][$f['field']]))\n                && !empty($model['fields'][$fname]['type'])\n              ) {\n                $desc['type'] = $model['fields'][$fname]['type'];\n                $desc['maxlength'] = $model['fields'][$fname]['maxlength'] ?? null;\n                $desc['operator'] = $f['operator'] ?? null;\n              }\n\n              if (!empty($desc['type'])\n                && isset($model['keys']['PRIMARY'])\n                && (count($model['keys']['PRIMARY']['columns']) === 1)\n                && ($model['keys']['PRIMARY']['columns'][0] === $fname)\n              ) {\n                $desc['primary'] = true;\n              }\n            }\n          }\n\n          $others[] = $desc;\n        }\n      }\n    }\n\n    return $others;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 910,
                "endLine": 964,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "getValuesDesc",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "where",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "others",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": true,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns a linear array\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a linear array \n   * @param array $where\n   * @param array $cfg\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 910,
            "endLine": 964,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getValuesDesc",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "others",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": true,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a linear array\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a linear array \n   * @param array $where\n   * @param array $cfg\n   * @return array\n   *\/"
        },
        "getConditions": {
            "name": "getConditions",
            "summary": "Returns a string with the conditions for the ON, WHERE, or HAVING part of the query if there is, empty otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string\n  {\n    $res = '';\n    if (isset($conditions['conditions'], $conditions['logic'])) {\n      $logic = isset($conditions['logic']) && ($conditions['logic'] === 'OR') ? 'OR' : 'AND';\n      foreach ($conditions['conditions'] as $key => $f) {\n        if (is_array($f) && isset($f['logic']) && isset($f['conditions'])) {\n          if ($tmp = $this->getConditions($f, $cfg, $is_having, $indent + 2)) {\n            $res .= (empty($res) ? '(' : PHP_EOL . str_repeat(' ', $indent) . \"$logic (\") .\n              $tmp . PHP_EOL . str_repeat(' ', $indent) . \")\";\n          }\n        }\n        elseif (isset($f['operator'], $f['field'])) {\n          $field = $f['field'];\n          if (!array_key_exists('value', $f)) {\n            $f['value'] = false;\n          }\n\n          $is_number = false;\n          $is_null   = true;\n          $is_uid    = false;\n          $is_date   = false;\n          $is_bool   = false;\n          $model     = null;\n          if ($is_having) {\n            $res .= PHP_EOL . str_repeat(' ', $indent) . (empty($res) ? '' : \"$logic \") . $field . ' ';\n          }\n          elseif (isset($cfg['available_fields'][$field])) {\n            $realField = $cfg['fields'][$field] ?? $field;\n            $isFunction = strpos($realField, '(') !== false;\n            $table  = $cfg['tables_full'][$cfg['available_fields'][$realField]] ?? false;\n            if ($isFunction) {\n              $res .= PHP_EOL . str_repeat(' ', $indent) . (empty($res) ? '' : \"$logic \") . $realField . ' ';\n            }\n            else {\n              if (!$table) {\n                X::ddump($cfg['tables_full'], $cfg['available_fields'][$field], $field, $cfg['fields']);\n                throw new Exception(X::_(\"Impossible to find the table for the field %s\", $field));\n              }\n  \n              $column = $this->colSimpleName($cfg['fields'][$field] ?? $field);\n              $model  = $this->modelize($table);\n              if (!$model || !array_key_exists('fields', $model)) {\n                throw new Exception(X::_(\"Impossible to modelize the table %s\", $table));\n              }\n              else {\n                $model = $model['fields'];\n                $model = array_key_exists($column, $model) ? $model[$column] : null;\n              }\n  \n              if ($table && $column && $model) {\n                $res  .= PHP_EOL . \n                    str_repeat(' ', $indent) . \n                    (empty($res) ? '' : \"$logic \") .\n                    (\n                      !empty($cfg['available_fields'][$field]) ?\n                        $this->colFullName(\n                          $cfg['fields'][$field] ?? $field,\n                          $cfg['available_fields'][$field],\n                          true\n                        )\n                        : $this->colSimpleName($column, true)\n                  ) . ' ';\n              }\n              else {\n                \/\/ Remove the alias from where and join but not in having except if it's a count\n                if (!$is_having && empty($table) && isset($cfg['fields'][$field])) {\n                  $field = $cfg['fields'][$field];\n                  \/\/ Same for exp in case it's an alias\n                  if (!empty($f['exp']) && isset($cfg['fields'][$f['exp']])) {\n                    $f['exp'] = $cfg['fields'][$f['exp']];\n                  }\n                }\n  \n                $res .= (empty($res) ? '' : PHP_EOL . str_repeat(' ', $indent) . $logic . ' ') . $field . ' ';\n              }\n            }\n\n            if (!empty($model)) {\n              $is_null = (bool)$model['null'];\n              if ($model['type'] === 'binary') {\n                $is_number = true;\n                if (($model['maxlength'] === 16) && !empty($model['key'])) {\n                  $is_uid = true;\n                }\n              }\n              elseif (\\in_array($model['type'], self::$numeric_types, true)) {\n                $is_number = true;\n              }\n              elseif (\\in_array($model['type'], self::$date_types, true)) {\n                $is_date = true;\n              }\n            }\n            elseif ($f['value'] && Str::isUid($f['value'])) {\n              $is_uid = true;\n            }\n            elseif (\\is_int($f['value']) || \\is_float($f['value'])) {\n              $is_number = true;\n            }\n          }\n          else {\n            $res .= (empty($res) ? '' : PHP_EOL . str_repeat(' ', $indent) . $logic . ' ') . $field . ' ';\n          }\n\n          if (empty($f['exp']) && isset($f['value']) && in_array($f['value'], [1, 0, true, false], true)) {\n            \/\/ Always use LIKE as booleans and 1 and 0 are interpreted badly by MySQL\n            $is_bool = true;\n          }\n\n          switch (strtolower($f['operator'])) {\n            case '=':\n              if ($is_uid || $is_bool || $is_number|| $is_date) {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : '= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? 'LIKE ' . $f['exp'] : 'LIKE ?';\n              }\n              break;\n            case '!=':\n              if (isset($f['exp'])) {\n                $res .= '!= ' . $f['exp'];\n              }\n              else {\n                $res .= '!= ?';\n              }\n              break;\n            case 'like':\n              if (isset($f['exp'])) {\n                $res .= 'LIKE ' . $f['exp'];\n              }\n              else {\n                $res .= 'LIKE ?';\n              }\n              break;\n            case 'not like':\n              if (isset($f['exp'])) {\n                $res .= 'NOT LIKE ' . $f['exp'];\n              }\n              else {\n                $res .= 'NOT LIKE ?';\n              }\n              break;\n            case 'eq':\n            case 'is':\n              if ($is_uid && $is_bool) {\n                $res .= isset($f['exp']) ? 'LIKE ' . $f['exp'] : 'LIKE ?';\n              }\n              elseif ($is_uid) {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : '= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : ($is_number ? '= ?' : 'LIKE ?');\n              }\n              break;\n            case 'neq':\n            case 'isnot':\n              if ($is_uid) {\n                $res .= isset($f['exp']) ? '!= ' . $f['exp'] : '!= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '!= ' . $f['exp'] : ($is_number ? '!= ?' : 'NOT LIKE ?');\n              }\n              break;\n\n            case 'doesnotcontains':\n            case 'doesnotcontain':\n              $res .= ($is_number ? '!= ' : 'NOT LIKE ') . ($f['exp'] ?? '?');\n              break;\n\n            case 'endswith':\n            case 'startswith':\n            case 'contains':\n              $res .= 'LIKE ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gte':\n            case '>=':\n              $res .= '>= ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gten':\n              $res .= '>= DATE_ADD(NOW(), INTERVAL ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gt':\n            case '>':\n              $res .= '> ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gtn':\n              $res .= '> DATE_ADD(NOW(), INTERVAL '.($f['exp'] ?? '?').')';\n              break;\n\n            case 'lte':\n            case '<=':\n              $res .= '<= ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'lten':\n              $res .= '<= DATE_SUB(NOW(), INTERVAL '.($f['exp'] ?? '?').')';\n              break;\n\n            case 'lt':\n            case '<':\n              $res .= '< ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'ltn':\n              $res .= '< DATE_SUB(NOW(), INTERVAL '.($f['exp'] ?? '?').')';\n              break;\n\n            \/** @todo Check if it is working with an array *\/\n            case 'isnull':\n              $res .= 'IS NULL';\n              break;\n\n            case 'isnotnull':\n              $res .= 'IS NOT NULL';\n              break;\n\n            case 'isempty':\n              $res .= $is_number ? '= 0' : \"LIKE ''\";\n              break;\n\n            case 'isnotempty':\n              $res .= $is_number ? '!= 0' : \"NOT LIKE ''\";\n              break;\n\n            default:\n              $res .= $is_uid || $is_bool || $is_number|| $is_date ? '= ?' : 'LIKE ?';\n              break;\n          }\n        }\n      }\n    }\n\n    if (!empty($res)) {\n      return str_replace(PHP_EOL . PHP_EOL, PHP_EOL, $res . PHP_EOL);\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getConditions",
                "summary": "Returns a string with the conditions for the ON, WHERE, or HAVING part of the query if there is, empty otherwise.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getConditions(array $conditions, array $cfg = [], bool $is_having = false, int $indent = 0): string\n  {\n    $res = '';\n    if (isset($conditions['conditions'], $conditions['logic'])) {\n      $logic = isset($conditions['logic']) && ($conditions['logic'] === 'OR') ? 'OR' : 'AND';\n      foreach ($conditions['conditions'] as $key => $f) {\n        if (is_array($f) && isset($f['logic']) && isset($f['conditions'])) {\n          if ($tmp = $this->getConditions($f, $cfg, $is_having, $indent + 2)) {\n            $res .= (empty($res) ? '(' : PHP_EOL . str_repeat(' ', $indent) . \"$logic (\") .\n              $tmp . PHP_EOL . str_repeat(' ', $indent) . \")\";\n          }\n        }\n        elseif (isset($f['operator'], $f['field'])) {\n          $field = $f['field'];\n          if (!array_key_exists('value', $f)) {\n            $f['value'] = false;\n          }\n\n          $is_number = false;\n          $is_null   = true;\n          $is_uid    = false;\n          $is_date   = false;\n          $is_bool   = false;\n          $model     = null;\n          if ($is_having) {\n            $res .= PHP_EOL . str_repeat(' ', $indent) . (empty($res) ? '' : \"$logic \") . $field . ' ';\n          }\n          elseif (isset($cfg['available_fields'][$field])) {\n            $realField = $cfg['fields'][$field] ?? $field;\n            $isFunction = strpos($realField, '(') !== false;\n            $table  = $cfg['tables_full'][$cfg['available_fields'][$realField]] ?? false;\n            if ($isFunction) {\n              $res .= PHP_EOL . str_repeat(' ', $indent) . (empty($res) ? '' : \"$logic \") . $realField . ' ';\n            }\n            else {\n              if (!$table) {\n                X::ddump($cfg['tables_full'], $cfg['available_fields'][$field], $field, $cfg['fields']);\n                throw new Exception(X::_(\"Impossible to find the table for the field %s\", $field));\n              }\n  \n              $column = $this->colSimpleName($cfg['fields'][$field] ?? $field);\n              $model  = $this->modelize($table);\n              if (!$model || !array_key_exists('fields', $model)) {\n                throw new Exception(X::_(\"Impossible to modelize the table %s\", $table));\n              }\n              else {\n                $model = $model['fields'];\n                $model = array_key_exists($column, $model) ? $model[$column] : null;\n              }\n  \n              if ($table && $column && $model) {\n                $res  .= PHP_EOL . \n                    str_repeat(' ', $indent) . \n                    (empty($res) ? '' : \"$logic \") .\n                    (\n                      !empty($cfg['available_fields'][$field]) ?\n                        $this->colFullName(\n                          $cfg['fields'][$field] ?? $field,\n                          $cfg['available_fields'][$field],\n                          true\n                        )\n                        : $this->colSimpleName($column, true)\n                  ) . ' ';\n              }\n              else {\n                \/\/ Remove the alias from where and join but not in having except if it's a count\n                if (!$is_having && empty($table) && isset($cfg['fields'][$field])) {\n                  $field = $cfg['fields'][$field];\n                  \/\/ Same for exp in case it's an alias\n                  if (!empty($f['exp']) && isset($cfg['fields'][$f['exp']])) {\n                    $f['exp'] = $cfg['fields'][$f['exp']];\n                  }\n                }\n  \n                $res .= (empty($res) ? '' : PHP_EOL . str_repeat(' ', $indent) . $logic . ' ') . $field . ' ';\n              }\n            }\n\n            if (!empty($model)) {\n              $is_null = (bool)$model['null'];\n              if ($model['type'] === 'binary') {\n                $is_number = true;\n                if (($model['maxlength'] === 16) && !empty($model['key'])) {\n                  $is_uid = true;\n                }\n              }\n              elseif (\\in_array($model['type'], self::$numeric_types, true)) {\n                $is_number = true;\n              }\n              elseif (\\in_array($model['type'], self::$date_types, true)) {\n                $is_date = true;\n              }\n            }\n            elseif ($f['value'] && Str::isUid($f['value'])) {\n              $is_uid = true;\n            }\n            elseif (\\is_int($f['value']) || \\is_float($f['value'])) {\n              $is_number = true;\n            }\n          }\n          else {\n            $res .= (empty($res) ? '' : PHP_EOL . str_repeat(' ', $indent) . $logic . ' ') . $field . ' ';\n          }\n\n          if (empty($f['exp']) && isset($f['value']) && in_array($f['value'], [1, 0, true, false], true)) {\n            \/\/ Always use LIKE as booleans and 1 and 0 are interpreted badly by MySQL\n            $is_bool = true;\n          }\n\n          switch (strtolower($f['operator'])) {\n            case '=':\n              if ($is_uid || $is_bool || $is_number|| $is_date) {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : '= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? 'LIKE ' . $f['exp'] : 'LIKE ?';\n              }\n              break;\n            case '!=':\n              if (isset($f['exp'])) {\n                $res .= '!= ' . $f['exp'];\n              }\n              else {\n                $res .= '!= ?';\n              }\n              break;\n            case 'like':\n              if (isset($f['exp'])) {\n                $res .= 'LIKE ' . $f['exp'];\n              }\n              else {\n                $res .= 'LIKE ?';\n              }\n              break;\n            case 'not like':\n              if (isset($f['exp'])) {\n                $res .= 'NOT LIKE ' . $f['exp'];\n              }\n              else {\n                $res .= 'NOT LIKE ?';\n              }\n              break;\n            case 'eq':\n            case 'is':\n              if ($is_uid && $is_bool) {\n                $res .= isset($f['exp']) ? 'LIKE ' . $f['exp'] : 'LIKE ?';\n              }\n              elseif ($is_uid) {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : '= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : ($is_number ? '= ?' : 'LIKE ?');\n              }\n              break;\n            case 'neq':\n            case 'isnot':\n              if ($is_uid) {\n                $res .= isset($f['exp']) ? '!= ' . $f['exp'] : '!= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '!= ' . $f['exp'] : ($is_number ? '!= ?' : 'NOT LIKE ?');\n              }\n              break;\n\n            case 'doesnotcontains':\n            case 'doesnotcontain':\n              $res .= ($is_number ? '!= ' : 'NOT LIKE ') . ($f['exp'] ?? '?');\n              break;\n\n            case 'endswith':\n            case 'startswith':\n            case 'contains':\n              $res .= 'LIKE ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gte':\n            case '>=':\n              $res .= '>= ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gten':\n              $res .= '>= DATE_ADD(NOW(), INTERVAL ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gt':\n            case '>':\n              $res .= '> ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gtn':\n              $res .= '> DATE_ADD(NOW(), INTERVAL '.($f['exp'] ?? '?').')';\n              break;\n\n            case 'lte':\n            case '<=':\n              $res .= '<= ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'lten':\n              $res .= '<= DATE_SUB(NOW(), INTERVAL '.($f['exp'] ?? '?').')';\n              break;\n\n            case 'lt':\n            case '<':\n              $res .= '< ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'ltn':\n              $res .= '< DATE_SUB(NOW(), INTERVAL '.($f['exp'] ?? '?').')';\n              break;\n\n            \/** @todo Check if it is working with an array *\/\n            case 'isnull':\n              $res .= 'IS NULL';\n              break;\n\n            case 'isnotnull':\n              $res .= 'IS NOT NULL';\n              break;\n\n            case 'isempty':\n              $res .= $is_number ? '= 0' : \"LIKE ''\";\n              break;\n\n            case 'isnotempty':\n              $res .= $is_number ? '!= 0' : \"NOT LIKE ''\";\n              break;\n\n            default:\n              $res .= $is_uid || $is_bool || $is_number|| $is_date ? '= ?' : 'LIKE ?';\n              break;\n          }\n        }\n      }\n    }\n\n    if (!empty($res)) {\n      return str_replace(PHP_EOL . PHP_EOL, PHP_EOL, $res . PHP_EOL);\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 976,
                "endLine": 1217,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "getConditions",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "conditions",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "is_having",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "having"
                    },
                    {
                        "name": "indent",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns a string with the conditions for the ON, WHERE, or HAVING part of the query if there is, empty otherwise.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$conditions"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$is",
                            "description": "having"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$indent"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a string with the conditions for the ON, WHERE, or HAVING part of the query if there is, empty otherwise.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 976,
            "endLine": 1217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "getConditions",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the conditions for the ON, WHERE, or HAVING part of the query if there is, empty otherwise.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$conditions"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$is",
                        "description": "having"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$indent"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a string with the conditions for the ON, WHERE, or HAVING part of the query if there is, empty otherwise.\n   *\n   * @param array $conditions\n   * @param array $cfg\n   * @param bool $is_having\n   * @param int $indent\n   * @return string\n   *\/"
        },
        "getSelect": {
            "name": "getSelect",
            "summary": "Generates a string starting with SELECT ... FROM with corresponding parameters",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSelect(array $cfg): string\n  {\n    $res = '';\n    if (is_array($cfg['tables']) && !empty($cfg['tables'])) {\n      $res = 'SELECT ';\n      if (!empty($cfg['count'])) {\n        if (!empty($cfg['group_by'])) {\n          $indexes = [];\n          $idxs    = [];\n          foreach ($cfg['group_by'] as $g) {\n            \/\/ Alias\n            if (isset($cfg['fields'][$g])) {\n              $g = $cfg['fields'][$g];\n            }\n\n            if ((!empty($cfg['available_fields'][$g]) && $t = $cfg['available_fields'][$g])\n              && ($cfn = $this->colFullName($g, $t))\n            ) {\n              $indexes[] = $cfn;\n              \/\/$idxs[] = $this->colSimpleName($g, true);\n              \/\/ Changed by Mirko\n              $idxs[] = $this->colSimpleName($cfg['aliases'][$g] ?? $g, true);\n            } else {\n              $indexes[] = $g;\n              $idxs[] = $cfg['aliases'][$g] ?? $g;\n            }\n          }\n\n          if (!empty($cfg['having'])) {\n            if (count($indexes) === count($cfg['group_by'])) {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n              $tmp  = [];\n              if ($extracted_fields = $this->extractFields($cfg, $cfg['having']['conditions'])) {\n                \/\/die(var_dump($extracted_fields));\n                foreach ($extracted_fields as $ef) {\n                  if (!in_array($ef, $indexes)) {\n                    if (!empty($cfg['fields'][$ef])) {\n                      $tmp[$ef] = $cfg['fields'][$ef];\n                    } else {\n                      $tmp[] = $ef;\n                    }\n                  }\n                }\n              }\n\n              $cfg['fields'] = $indexes;\n              foreach ($tmp as $k => $v) {\n                if (is_string($k)) {\n                  $cfg['fields'][$k] = $v;\n                } else {\n                  $cfg['fields'][] = $v;\n                }\n              }\n            } else {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n            }\n          } else {\n            if (count($indexes) === count($cfg['group_by'])) {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n              \/\/$cfg['fields'] = $indexes;\n              \/\/ Changed by Mirko\n              $cfg['fields'] = array_combine($idxs, $indexes);\n            } else {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n            }\n          }\n        } else {\n          $res          .= 'COUNT(*)';\n          $cfg['fields'] = [];\n        }\n      }\n\n      if (!empty($cfg['fields'])) {\n        $fields_to_put = [];\n        \/\/ Checking the selected fields\n        foreach ($cfg['fields'] as $alias => $f) {\n          $is_distinct = false;\n          $f           = trim($f);\n          $bits        = explode(' ', $f);\n          if ((count($bits) > 1) && (strtolower($bits[0]) === 'distinct')) {\n            $is_distinct = true;\n            array_shift($bits);\n            $f = implode(' ', $bits);\n          }\n\n          \/\/ Adding the alias in $fields\n          if (strpos($f, '(')) {\n            $fields_to_put[] = ($is_distinct ? 'DISTINCT ' : '') . $f . (is_string($alias) ? ' AS ' . $this->escape($alias) : '');\n          }\n          elseif (is_string($alias) && ((strpos($f, \"'\") === 0) || (strpos($f, '\"') === 0))) {\n            $fields_to_put[] = $f . ' AS ' . $this->escape($alias);\n          }\n          elseif (isset($cfg['available_fields']) && array_key_exists($f, $cfg['available_fields'])) {\n            $idx    = $cfg['available_fields'][$f];\n            if ($idx && isset($cfg['tables_full'][$idx])) {\n              $idx = $cfg['tables_full'][$idx];\n            }\n\n            $csn    = $this->colSimpleName($f);\n            $is_uid = false;\n            \/\/die(var_dump($idx, $f, $tables[$idx]));\n            $model = $this->modelize($idx);\n            if (($idx !== false) && isset($model['fields'][$csn])) {\n              $column = $model['fields'][$csn];\n              if (($column['type'] === 'binary') && ($column['maxlength'] === 16)) {\n                $is_uid = true;\n                if (!is_string($alias)) {\n                  $alias = $csn;\n                }\n              }\n            }\n\n            \/\/$res['fields'][$alias] = $this->cfn($f, $fields[$f]);\n            if ($is_uid) {\n              if (method_exists($this, 'getHexStatement')) {\n                $st = 'LOWER(' . $this->getHexStatement($this->colFullName($csn, $cfg['available_fields'][$f], true)) . ')';\n              }\n              else {\n                $st = 'LOWER(HEX(' . $this->colFullName($csn, $cfg['available_fields'][$f], true) . '))';\n              }\n            }\n            \/\/ For JSON fields\n            elseif ($cfg['available_fields'][$f] === false) {\n              $st = $f;\n            }\n            else {\n              $st = $this->colFullName($csn, $cfg['available_fields'][$f], true);\n            }\n\n            if (is_string($alias)) {\n              $st .= ' AS ' . $this->escape($alias);\n            }\n\n            $fields_to_put[] = ($is_distinct ? 'DISTINCT ' : '') . $st;\n          } elseif (isset($cfg['available_fields'][$f]) && ($cfg['available_fields'][$f] === false)) {\n            $this->error(\"Error! The column '$f' exists on several tables in '\" . implode(', ', $cfg['tables']), false);\n          } else {\n            $this->error(\"Error! The column '$f' doesn't exist in '\" . implode(', ', $cfg['tables']), false);\n          }\n        }\n\n        $res .= implode(', ', $fields_to_put);\n      }\n\n      $res          .= PHP_EOL;\n      $tables_to_put = [];\n      foreach ($cfg['tables'] as $alias => $tfn) {\n        $st = $this->tableFullName($tfn, true);\n        if (is_string($alias) && $alias !== $tfn) {\n          $st .= ' AS ' . $this->escape($alias);\n        }\n\n        $tables_to_put[] = $st;\n      }\n\n      $res .= 'FROM ' . implode(', ', $tables_to_put) . PHP_EOL;\n      return $res;\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getSelect",
                "summary": "Generates a string starting with SELECT ... FROM with corresponding parameters",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getSelect(array $cfg): string\n  {\n    $res = '';\n    if (is_array($cfg['tables']) && !empty($cfg['tables'])) {\n      $res = 'SELECT ';\n      if (!empty($cfg['count'])) {\n        if (!empty($cfg['group_by'])) {\n          $indexes = [];\n          $idxs    = [];\n          foreach ($cfg['group_by'] as $g) {\n            \/\/ Alias\n            if (isset($cfg['fields'][$g])) {\n              $g = $cfg['fields'][$g];\n            }\n\n            if ((!empty($cfg['available_fields'][$g]) && $t = $cfg['available_fields'][$g])\n              && ($cfn = $this->colFullName($g, $t))\n            ) {\n              $indexes[] = $cfn;\n              \/\/$idxs[] = $this->colSimpleName($g, true);\n              \/\/ Changed by Mirko\n              $idxs[] = $this->colSimpleName($cfg['aliases'][$g] ?? $g, true);\n            } else {\n              $indexes[] = $g;\n              $idxs[] = $cfg['aliases'][$g] ?? $g;\n            }\n          }\n\n          if (!empty($cfg['having'])) {\n            if (count($indexes) === count($cfg['group_by'])) {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n              $tmp  = [];\n              if ($extracted_fields = $this->extractFields($cfg, $cfg['having']['conditions'])) {\n                \/\/die(var_dump($extracted_fields));\n                foreach ($extracted_fields as $ef) {\n                  if (!in_array($ef, $indexes)) {\n                    if (!empty($cfg['fields'][$ef])) {\n                      $tmp[$ef] = $cfg['fields'][$ef];\n                    } else {\n                      $tmp[] = $ef;\n                    }\n                  }\n                }\n              }\n\n              $cfg['fields'] = $indexes;\n              foreach ($tmp as $k => $v) {\n                if (is_string($k)) {\n                  $cfg['fields'][$k] = $v;\n                } else {\n                  $cfg['fields'][] = $v;\n                }\n              }\n            } else {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n            }\n          } else {\n            if (count($indexes) === count($cfg['group_by'])) {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n              \/\/$cfg['fields'] = $indexes;\n              \/\/ Changed by Mirko\n              $cfg['fields'] = array_combine($idxs, $indexes);\n            } else {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n            }\n          }\n        } else {\n          $res          .= 'COUNT(*)';\n          $cfg['fields'] = [];\n        }\n      }\n\n      if (!empty($cfg['fields'])) {\n        $fields_to_put = [];\n        \/\/ Checking the selected fields\n        foreach ($cfg['fields'] as $alias => $f) {\n          $is_distinct = false;\n          $f           = trim($f);\n          $bits        = explode(' ', $f);\n          if ((count($bits) > 1) && (strtolower($bits[0]) === 'distinct')) {\n            $is_distinct = true;\n            array_shift($bits);\n            $f = implode(' ', $bits);\n          }\n\n          \/\/ Adding the alias in $fields\n          if (strpos($f, '(')) {\n            $fields_to_put[] = ($is_distinct ? 'DISTINCT ' : '') . $f . (is_string($alias) ? ' AS ' . $this->escape($alias) : '');\n          }\n          elseif (is_string($alias) && ((strpos($f, \"'\") === 0) || (strpos($f, '\"') === 0))) {\n            $fields_to_put[] = $f . ' AS ' . $this->escape($alias);\n          }\n          elseif (isset($cfg['available_fields']) && array_key_exists($f, $cfg['available_fields'])) {\n            $idx    = $cfg['available_fields'][$f];\n            if ($idx && isset($cfg['tables_full'][$idx])) {\n              $idx = $cfg['tables_full'][$idx];\n            }\n\n            $csn    = $this->colSimpleName($f);\n            $is_uid = false;\n            \/\/die(var_dump($idx, $f, $tables[$idx]));\n            $model = $this->modelize($idx);\n            if (($idx !== false) && isset($model['fields'][$csn])) {\n              $column = $model['fields'][$csn];\n              if (($column['type'] === 'binary') && ($column['maxlength'] === 16)) {\n                $is_uid = true;\n                if (!is_string($alias)) {\n                  $alias = $csn;\n                }\n              }\n            }\n\n            \/\/$res['fields'][$alias] = $this->cfn($f, $fields[$f]);\n            if ($is_uid) {\n              if (method_exists($this, 'getHexStatement')) {\n                $st = 'LOWER(' . $this->getHexStatement($this->colFullName($csn, $cfg['available_fields'][$f], true)) . ')';\n              }\n              else {\n                $st = 'LOWER(HEX(' . $this->colFullName($csn, $cfg['available_fields'][$f], true) . '))';\n              }\n            }\n            \/\/ For JSON fields\n            elseif ($cfg['available_fields'][$f] === false) {\n              $st = $f;\n            }\n            else {\n              $st = $this->colFullName($csn, $cfg['available_fields'][$f], true);\n            }\n\n            if (is_string($alias)) {\n              $st .= ' AS ' . $this->escape($alias);\n            }\n\n            $fields_to_put[] = ($is_distinct ? 'DISTINCT ' : '') . $st;\n          } elseif (isset($cfg['available_fields'][$f]) && ($cfg['available_fields'][$f] === false)) {\n            $this->error(\"Error! The column '$f' exists on several tables in '\" . implode(', ', $cfg['tables']), false);\n          } else {\n            $this->error(\"Error! The column '$f' doesn't exist in '\" . implode(', ', $cfg['tables']), false);\n          }\n        }\n\n        $res .= implode(', ', $fields_to_put);\n      }\n\n      $res          .= PHP_EOL;\n      $tables_to_put = [];\n      foreach ($cfg['tables'] as $alias => $tfn) {\n        $st = $this->tableFullName($tfn, true);\n        if (is_string($alias) && $alias !== $tfn) {\n          $st .= ' AS ' . $this->escape($alias);\n        }\n\n        $tables_to_put[] = $st;\n      }\n\n      $res .= 'FROM ' . implode(', ', $tables_to_put) . PHP_EOL;\n      return $res;\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1227,
                "endLine": 1387,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getSelect",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The configuration array"
                    }
                ],
                "doc": {
                    "description": "Generates a string starting with SELECT ... FROM with corresponding parameters\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg",
                            "description": "The configuration array"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 1227,
            "endLine": 1387,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getSelect",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ],
            "doc": {
                "description": "Generates a string starting with SELECT ... FROM with corresponding parameters\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Generates a string starting with SELECT ... FROM with corresponding parameters\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getUnion": {
            "name": "getUnion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUnion(array $cfg): string\n  {\n    $sql  = 'SELECT ';\n    if (empty($cfg['fields'])) {\n      $sql .= '* ';\n    }\n    else{\n      foreach ($cfg['fields'] as $i => $f){\n        if ($i) {\n          $sql .= ', ';\n        }\n\n        $sql .= strpos($f, '(') === false ? $this->colSimpleName($f, true) : $f;\n      }\n    }\n\n    $sql .= ' FROM (('.PHP_EOL;\n    $vals = [];\n    $i    = 0;\n    foreach ($cfg['union'] as $u) {\n      $subcfg = $this->processCfg($u);\n      if ($subcfg && $subcfg['sql']) {\n        \/** @todo From here needs to analyze the where array to the light of the tables' config *\/\n        if (!empty($where)) {\n          if (empty($fields)) {\n            $fields = $subcfg['fields'];\n          }\n\n          foreach ($fields as $k => $f){\n            if (!empty($subcfg['available_fields'][$f])) {\n              $model = $this->modelize($subcfg['available_fields'][$f]);\n              if ($model) {\n                throw new Exception(\"Impossible to create the where in union for the following request: \".PHP_EOL.$subcfg['sql']);\n                \/\/die(var_dump($t['fields'][$cfg['fields'][$f] ?? $this->csn($f)]));\n              }\n            }\n          }\n        }\n\n        if ($i) {\n          $sql .= PHP_EOL.') UNION ('.PHP_EOL;\n        }\n\n        $sql .= $subcfg['sql'];\n        array_push($vals, ...$subcfg['values']);\n        $i++;\n      }\n    }\n\n    $sql .= PHP_EOL.')) AS t' . PHP_EOL;\n    return $sql;\n  }",
            "parent": {
                "name": "getUnion",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getUnion(array $cfg): string\n  {\n    $sql  = 'SELECT ';\n    if (empty($cfg['fields'])) {\n      $sql .= '* ';\n    }\n    else{\n      foreach ($cfg['fields'] as $i => $f){\n        if ($i) {\n          $sql .= ', ';\n        }\n\n        $sql .= strpos($f, '(') === false ? $this->colSimpleName($f, true) : $f;\n      }\n    }\n\n    $sql .= ' FROM (('.PHP_EOL;\n    $vals = [];\n    $i    = 0;\n    foreach ($cfg['union'] as $u) {\n      $subcfg = $this->processCfg($u);\n      if ($subcfg && $subcfg['sql']) {\n        \/** @todo From here needs to analyze the where array to the light of the tables' config *\/\n        if (!empty($where)) {\n          if (empty($fields)) {\n            $fields = $subcfg['fields'];\n          }\n\n          foreach ($fields as $k => $f){\n            if (!empty($subcfg['available_fields'][$f])) {\n              $model = $this->modelize($subcfg['available_fields'][$f]);\n              if ($model) {\n                throw new Exception(\"Impossible to create the where in union for the following request: \".PHP_EOL.$subcfg['sql']);\n                \/\/die(var_dump($t['fields'][$cfg['fields'][$f] ?? $this->csn($f)]));\n              }\n            }\n          }\n        }\n\n        if ($i) {\n          $sql .= PHP_EOL.') UNION ('.PHP_EOL;\n        }\n\n        $sql .= $subcfg['sql'];\n        array_push($vals, ...$subcfg['values']);\n        $i++;\n      }\n    }\n\n    $sql .= PHP_EOL.')) AS t' . PHP_EOL;\n    return $sql;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1390,
                "endLine": 1441,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getUnion",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 1390,
            "endLine": 1441,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUnion",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInsert": {
            "name": "getInsert",
            "summary": "Generates a string for the insert from a cfg array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getInsert(array $cfg): string\n  {\n    $fields_to_put = [\n      'values' => [],\n      'fields' => [],\n    ];\n    $i             = 0;\n    foreach ($cfg['fields'] as $i => $f) {\n      if (!empty($cfg['available_fields'][$f])) {\n        $model  = $this->modelize($cfg['available_fields'][$f]);\n        $csn    = $this->colSimpleName($f);\n        if (isset($model['fields'][$csn])) {\n\n          $fields_to_put['fields'][] = $this->colSimpleName($f, true);\n          if ($cfg['values_desc'][$i] && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n            $fields_to_put['values'][] = $cfg['values'][$i][1];\n          }\n          else {\n            $fields_to_put['values'][] = '?';\n          }\n        }\n        else {\n          $this->error(X::_(\"Error! Impossible to find the model for %s\", implode(', ', $cfg['tables'])), false);\n        }\n      } else {\n        $this->error(X::_(\"Error! The column '%s' doesn't exist in %s\", $f, implode(', ', $cfg['tables'])), false);\n      }\n\n      $i++;\n    }\n\n    if (count($fields_to_put['fields']) && (count($cfg['tables']) === 1)) {\n      return 'INSERT ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') . 'INTO ' . $this->tableFullName(current($cfg['tables']), true) . PHP_EOL .\n        '(' . implode(', ', $fields_to_put['fields']) . ')' . PHP_EOL . ' VALUES (' .\n        implode(', ', $fields_to_put['values']) . ')' . PHP_EOL;\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getInsert",
                "summary": "Generates a string for the insert from a cfg array.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getInsert(array $cfg): string\n  {\n    $fields_to_put = [\n      'values' => [],\n      'fields' => [],\n    ];\n    $i             = 0;\n    foreach ($cfg['fields'] as $i => $f) {\n      if (!empty($cfg['available_fields'][$f])) {\n        $model  = $this->modelize($cfg['available_fields'][$f]);\n        $csn    = $this->colSimpleName($f);\n        if (isset($model['fields'][$csn])) {\n\n          $fields_to_put['fields'][] = $this->colSimpleName($f, true);\n          if ($cfg['values_desc'][$i] && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n            $fields_to_put['values'][] = $cfg['values'][$i][1];\n          }\n          else {\n            $fields_to_put['values'][] = '?';\n          }\n        }\n        else {\n          $this->error(X::_(\"Error! Impossible to find the model for %s\", implode(', ', $cfg['tables'])), false);\n        }\n      } else {\n        $this->error(X::_(\"Error! The column '%s' doesn't exist in %s\", $f, implode(', ', $cfg['tables'])), false);\n      }\n\n      $i++;\n    }\n\n    if (count($fields_to_put['fields']) && (count($cfg['tables']) === 1)) {\n      return 'INSERT ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') . 'INTO ' . $this->tableFullName(current($cfg['tables']), true) . PHP_EOL .\n        '(' . implode(', ', $fields_to_put['fields']) . ')' . PHP_EOL . ' VALUES (' .\n        implode(', ', $fields_to_put['values']) . ')' . PHP_EOL;\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1450,
                "endLine": 1488,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getInsert",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The configuration array"
                    }
                ],
                "doc": {
                    "description": "Generates a string for the insert from a cfg array.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg",
                            "description": "The configuration array"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Generates a string for the insert from a cfg array.\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 1450,
            "endLine": 1488,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getInsert",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ],
            "doc": {
                "description": "Generates a string for the insert from a cfg array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Generates a string for the insert from a cfg array.\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getUpdate": {
            "name": "getUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUpdate(array $cfg): string\n  {\n    $res           = '';\n    $fields_to_put = [\n      'values' => [],\n      'fields' => [],\n    ];\n    foreach ($cfg['fields'] as $i => $f) {\n      if (!empty($cfg['available_fields'][$f])) {\n        $model  = $this->modelize($cfg['available_fields'][$f]);\n        $csn    = $this->colSimpleName($f);\n        if (isset($model['fields'][$csn])) {\n          $fields_to_put['fields'][] = $this->colSimpleName($f, true);\n          if ($cfg['values_desc'][$i] && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n            $fields_to_put['values'][] = $cfg['values'][$i][1];\n          }\n          else {\n            $fields_to_put['values'][] = '?';\n          }\n        }\n        else {\n          $this->error(X::_(\"Impossible to retrieve the column %s\", $f), false);\n        }\n      }\n      else {\n        $this->error(X::_(\"The column '%s' doesn't exist in %s\", $f, implode(', ', $cfg['tables'])), false);\n      }\n    }\n\n    if (count($fields_to_put['fields']) && (count($cfg['tables']) === 1)) {\n      $res .= 'UPDATE ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') . $this->tableFullName(current($cfg['tables']), true) . ' SET ';\n      $last = count($fields_to_put['fields']) - 1;\n      foreach ($fields_to_put['fields'] as $i => $f) {\n        $res .= $f . ' = ' . $fields_to_put['values'][$i];\n        if ($i < $last) {\n          $res .= ',';\n        }\n\n        $res .= PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getUpdate",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getUpdate(array $cfg): string\n  {\n    $res           = '';\n    $fields_to_put = [\n      'values' => [],\n      'fields' => [],\n    ];\n    foreach ($cfg['fields'] as $i => $f) {\n      if (!empty($cfg['available_fields'][$f])) {\n        $model  = $this->modelize($cfg['available_fields'][$f]);\n        $csn    = $this->colSimpleName($f);\n        if (isset($model['fields'][$csn])) {\n          $fields_to_put['fields'][] = $this->colSimpleName($f, true);\n          if ($cfg['values_desc'][$i] && ($cfg['values_desc'][$i]['type'] === 'exp')) {\n            $fields_to_put['values'][] = $cfg['values'][$i][1];\n          }\n          else {\n            $fields_to_put['values'][] = '?';\n          }\n        }\n        else {\n          $this->error(X::_(\"Impossible to retrieve the column %s\", $f), false);\n        }\n      }\n      else {\n        $this->error(X::_(\"The column '%s' doesn't exist in %s\", $f, implode(', ', $cfg['tables'])), false);\n      }\n    }\n\n    if (count($fields_to_put['fields']) && (count($cfg['tables']) === 1)) {\n      $res .= 'UPDATE ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') . $this->tableFullName(current($cfg['tables']), true) . ' SET ';\n      $last = count($fields_to_put['fields']) - 1;\n      foreach ($fields_to_put['fields'] as $i => $f) {\n        $res .= $f . ' = ' . $fields_to_put['values'][$i];\n        if ($i < $last) {\n          $res .= ',';\n        }\n\n        $res .= PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1496,
                "endLine": 1539,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getUpdate",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The configuration array"
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg",
                            "description": "The configuration array"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 1496,
            "endLine": 1539,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getUpdate",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param array $cfg The configuration array\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getDelete": {
            "name": "getDelete",
            "summary": "Return SQL code for row(s) DELETE.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getDelete(['tables' => 'users']);\n\/\/ (string) DELETE FROM `db_example`.`table_users`"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDelete(array $cfg): string\n  {\n    $res = '';\n    if (count($cfg['tables']) === 1) {\n      $res = 'DELETE ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') .\n        (count($cfg['join'] ?? []) ? current($cfg['tables']) . ' ' : '') .\n        'FROM ' . $this->tableFullName(current($cfg['tables']), true) . PHP_EOL;\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getDelete",
                "summary": "Return SQL code for row(s) DELETE.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getDelete(['tables' => 'users']);\n\/\/ (string) DELETE FROM `db_example`.`table_users`"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDelete(array $cfg): string\n  {\n    $res = '';\n    if (count($cfg['tables']) === 1) {\n      $res = 'DELETE ' . (!empty($cfg['ignore']) ? $this->getIgnore() : '') .\n        (count($cfg['join'] ?? []) ? current($cfg['tables']) . ' ' : '') .\n        'FROM ' . $this->tableFullName(current($cfg['tables']), true) . PHP_EOL;\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1554,
                "endLine": 1564,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getDelete",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The configuration array"
                    }
                ],
                "doc": {
                    "description": "Return SQL code for row(s) DELETE.\n\n```php\nX::dump($db->getDelete(['tables' => 'users']);\n\/\/ (string) DELETE FROM `db_example`.`table_users`\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg",
                            "description": "The configuration array"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return SQL code for row(s) DELETE.\n   *\n   * ```php\n   * X::dump($db->getDelete(['tables' => 'users']);\n   * \/\/ (string) DELETE FROM `db_example`.`table_users`\n   * ```\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\n   *\/"
            },
            "trait": false,
            "startLine": 1554,
            "endLine": 1564,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDelete",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ],
            "doc": {
                "description": "Return SQL code for row(s) DELETE.\n\n```php\nX::dump($db->getDelete(['tables' => 'users']);\n\/\/ (string) DELETE FROM `db_example`.`table_users`\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The configuration array"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return SQL code for row(s) DELETE.\n   *\n   * ```php\n   * X::dump($db->getDelete(['tables' => 'users']);\n   * \/\/ (string) DELETE FROM `db_example`.`table_users`\n   * ```\n   *\n   * @param array $cfg The configuration array\n   * @return string\n   *\n   *\/"
        },
        "getJoin": {
            "name": "getJoin",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getJoin(array $cfg, array|null $joins = null): string\n  {\n    $res = '';\n    if (!$joins) {\n      $joins = $cfg['join'];\n    }\n\n    if (!empty($joins)) {\n      foreach ($joins as $join) {\n        if (isset($join['table'], $join['on']) && ($cond = $this->getConditions($join['on'], $cfg, false, 4))) {\n          $res .= '  ' .\n            (isset($join['type']) && (strtolower($join['type']) === 'left') ? 'LEFT ' : '') .\n            'JOIN ';\n          if (isset($join['join'])) {\n            $res .= '(';\n          }\n\n          $res .= $this->tableFullName($join['table'], true) .\n          (!empty($join['alias']) ? ' AS ' . $this->escape($join['alias']) : '');\n\n          if (isset($join['join'])) {\n            $res .= $this->getJoin($cfg, $join['join']);\n            $res .= ')';\n          }\n\n          $res .= PHP_EOL . '    ON ' . $cond;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getJoin",
                "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getJoin(array $cfg, array|null $joins = null): string\n  {\n    $res = '';\n    if (!$joins) {\n      $joins = $cfg['join'];\n    }\n\n    if (!empty($joins)) {\n      foreach ($joins as $join) {\n        if (isset($join['table'], $join['on']) && ($cond = $this->getConditions($join['on'], $cfg, false, 4))) {\n          $res .= '  ' .\n            (isset($join['type']) && (strtolower($join['type']) === 'left') ? 'LEFT ' : '') .\n            'JOIN ';\n          if (isset($join['join'])) {\n            $res .= '(';\n          }\n\n          $res .= $this->tableFullName($join['table'], true) .\n          (!empty($join['alias']) ? ' AS ' . $this->escape($join['alias']) : '');\n\n          if (isset($join['join'])) {\n            $res .= $this->getJoin($cfg, $join['join']);\n            $res .= ')';\n          }\n\n          $res .= PHP_EOL . '    ON ' . $cond;\n        }\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1574,
                "endLine": 1605,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "getJoin",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "joins",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns a string with the JOIN part of the query if there is, empty otherwise\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 1574,
            "endLine": 1605,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getJoin",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "joins",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the JOIN part of the query if there is, empty otherwise\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a string with the JOIN part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getWhere": {
            "name": "getWhere",
            "summary": "Returns a string with the WHERE part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getWhere(array $cfg): string\n  {\n    $res = $this->getConditions($cfg['filters'] ?? [], $cfg);\n    if (!empty($res)) {\n      $res = 'WHERE ' . $res;\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getWhere",
                "summary": "Returns a string with the WHERE part of the query if there is, empty otherwise",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getWhere(array $cfg): string\n  {\n    $res = $this->getConditions($cfg['filters'] ?? [], $cfg);\n    if (!empty($res)) {\n      $res = 'WHERE ' . $res;\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1614,
                "endLine": 1622,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getWhere",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns a string with the WHERE part of the query if there is, empty otherwise\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a string with the WHERE part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 1614,
            "endLine": 1622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getWhere",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the WHERE part of the query if there is, empty otherwise\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a string with the WHERE part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/"
        },
        "getGroupBy": {
            "name": "getGroupBy",
            "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGroupBy(array $cfg): string\n  {\n    $res          = '';\n    $group_to_put = [];\n    if (!empty($cfg['group_by'])) {\n      foreach ($cfg['group_by'] as $g) {\n        if (isset($cfg['available_fields'][$g])) {\n          $group_to_put[] = $this->escape($g);\n        } else {\n          $this->error(\"Error! The column '$g' doesn't exist for group by \" . print_r($cfg, true), false);\n        }\n      }\n\n      if (count($group_to_put)) {\n        $res .= 'GROUP BY ' . implode(', ', $group_to_put) . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getGroupBy",
                "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getGroupBy(array $cfg): string\n  {\n    $res          = '';\n    $group_to_put = [];\n    if (!empty($cfg['group_by'])) {\n      foreach ($cfg['group_by'] as $g) {\n        if (isset($cfg['available_fields'][$g])) {\n          $group_to_put[] = $this->escape($g);\n        } else {\n          $this->error(\"Error! The column '$g' doesn't exist for group by \" . print_r($cfg, true), false);\n        }\n      }\n\n      if (count($group_to_put)) {\n        $res .= 'GROUP BY ' . implode(', ', $group_to_put) . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1631,
                "endLine": 1650,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getGroupBy",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns a string with the GROUP BY part of the query if there is, empty otherwise\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 1631,
            "endLine": 1650,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getGroupBy",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the GROUP BY part of the query if there is, empty otherwise\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns a string with the GROUP BY part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   * @throws Exception\n   *\/"
        },
        "getHaving": {
            "name": "getHaving",
            "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHaving(array $cfg): string\n  {\n    $res = '';\n    if (!empty($cfg['having'])\n      && ($cond = $this->getConditions($cfg['having'], $cfg, true, 2))\n    ) {\n      if (!empty($cfg['count'])) {\n        $res .= ' WHERE ' . $cond . PHP_EOL;\n      } else {\n        $res .= '  HAVING ' . $cond . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getHaving",
                "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getHaving(array $cfg): string\n  {\n    $res = '';\n    if (!empty($cfg['having'])\n      && ($cond = $this->getConditions($cfg['having'], $cfg, true, 2))\n    ) {\n      if (!empty($cfg['count'])) {\n        $res .= ' WHERE ' . $cond . PHP_EOL;\n      } else {\n        $res .= '  HAVING ' . $cond . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1659,
                "endLine": 1673,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getHaving",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns a string with the HAVING part of the query if there is, empty otherwise\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 1659,
            "endLine": 1673,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getHaving",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a string with the HAVING part of the query if there is, empty otherwise\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a string with the HAVING part of the query if there is, empty otherwise\n   *\n   * @param array $cfg\n   * @return string\n   *\/"
        },
        "getLimit": {
            "name": "getLimit",
            "summary": "Get a string starting with LIMIT with corresponding parameters to $where",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLimit(array $cfg): string\n  {\n    $res = '';\n    if (!empty($cfg['limit']) && Str::isInteger($cfg['limit'])) {\n      $res .= 'LIMIT ' . (!empty($cfg['start']) && Str::isInteger($cfg['start']) ? (string)$cfg['start'] : '0') . ', ' . $cfg['limit'];\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getLimit",
                "summary": "Get a string starting with LIMIT with corresponding parameters to $where",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getLimit(array $cfg): string\n  {\n    $res = '';\n    if (!empty($cfg['limit']) && Str::isInteger($cfg['limit'])) {\n      $res .= 'LIMIT ' . (!empty($cfg['start']) && Str::isInteger($cfg['start']) ? (string)$cfg['start'] : '0') . ', ' . $cfg['limit'];\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1721,
                "endLine": 1729,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getLimit",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Get a string starting with LIMIT with corresponding parameters to $where\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 1721,
            "endLine": 1729,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getLimit",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Get a string starting with LIMIT with corresponding parameters to $where\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Get a string starting with LIMIT with corresponding parameters to $where\n   *\n   * @param array $cfg\n   * @return string\n   *\/"
        },
        "treatConditions": {
            "name": "treatConditions",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function treatConditions(array $where, bool $full = true)\n  {\n    if (!isset($where['conditions'])) {\n      $where['conditions'] = $where;\n    }\n\n    if (isset($where['conditions']) && is_array($where['conditions'])) {\n      if (!isset($where['logic']) || (strtoupper($where['logic']) !== 'OR')) {\n        $where['logic'] = 'AND';\n      }\n\n      $res = [\n        'conditions' => [],\n        'logic' => $where['logic']\n      ];\n      foreach ($where['conditions'] as $key => $f){\n        $is_array = is_array($f);\n        if ($is_array\n          && array_key_exists('conditions', $f)\n          && is_array($f['conditions'])\n        ) {\n          $res['conditions'][] = $this->treatConditions($f, false);\n        }\n        else {\n          if (is_string($key)) {\n            \/\/ 'id_user' => [1, 2] Will do OR\n            if (!$is_array) {\n              if (null === $f) {\n                $f = [\n                  'field' => $key,\n                  'operator' => 'isnull'\n                ];\n              }\n              else{\n                $f = [\n                  'field' => $key,\n                  'operator' => is_string($f) && !Str::isUid($f) && !Str::isNumber($f) ? 'LIKE' : '=',\n                  'value' => $f\n                ];\n              }\n            }\n            elseif (isset($f[0])) {\n              $tmp = [\n                'conditions' => [],\n                'logic' => 'OR'\n              ];\n              foreach ($f as $v){\n                if (null === $v) {\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => 'isnull'\n                  ];\n                }\n                else{\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => is_string($f) && !Str::isUid($f) ? 'LIKE' : '=',\n                    'value' => $v\n                  ];\n                }\n              }\n\n              $res['conditions'][] = $tmp;\n            }\n          }\n          elseif ($is_array && !X::isAssoc($f) && count($f) >= 2) {\n            $tmp = [\n              'field' => $f[0],\n              'operator' => $f[1]\n            ];\n            if (isset($f[3])) {\n              $tmp['exp'] = $f[3];\n            }\n            elseif (array_key_exists(2, $f)) {\n              if (is_array($f[2])) {\n                $tmp = [\n                  'conditions' => [],\n                  'logic' => 'AND'\n                ];\n                foreach ($f[2] as $v){\n                  if (null === $v) {\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => 'isnotnull'\n                    ];\n                  }\n                  else{\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => $f[1],\n                      'value' => $v\n                    ];\n                  }\n                }\n\n                $res['conditions'][] = $tmp;\n              }\n              elseif ($f[2] === null) {\n                $tmp['operator'] = $f[2] === '!=' ? 'isnotnull' : 'isnull';\n              }\n              else{\n                $tmp['value'] = $f[2];\n              }\n            }\n\n            $f = $tmp;\n          }\n\n          if (isset($f['field'])) {\n            if (!isset($f['operator'])) {\n              $f['operator'] = 'eq';\n            }\n\n            $res['conditions'][] = $f;\n          }\n        }\n      }\n\n      if ($full) {\n        $tmp = $this->_remove_conditions_value($res);\n        $res = [\n          'hashed' => $tmp['hashed'],\n          'values' => $tmp['values'],\n          'where' => $res\n        ];\n      }\n\n      return $res;\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "treatConditions",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function treatConditions(array $where, bool $full = true)\n  {\n    if (!isset($where['conditions'])) {\n      $where['conditions'] = $where;\n    }\n\n    if (isset($where['conditions']) && is_array($where['conditions'])) {\n      if (!isset($where['logic']) || (strtoupper($where['logic']) !== 'OR')) {\n        $where['logic'] = 'AND';\n      }\n\n      $res = [\n        'conditions' => [],\n        'logic' => $where['logic']\n      ];\n      foreach ($where['conditions'] as $key => $f){\n        $is_array = is_array($f);\n        if ($is_array\n          && array_key_exists('conditions', $f)\n          && is_array($f['conditions'])\n        ) {\n          $res['conditions'][] = $this->treatConditions($f, false);\n        }\n        else {\n          if (is_string($key)) {\n            \/\/ 'id_user' => [1, 2] Will do OR\n            if (!$is_array) {\n              if (null === $f) {\n                $f = [\n                  'field' => $key,\n                  'operator' => 'isnull'\n                ];\n              }\n              else{\n                $f = [\n                  'field' => $key,\n                  'operator' => is_string($f) && !Str::isUid($f) && !Str::isNumber($f) ? 'LIKE' : '=',\n                  'value' => $f\n                ];\n              }\n            }\n            elseif (isset($f[0])) {\n              $tmp = [\n                'conditions' => [],\n                'logic' => 'OR'\n              ];\n              foreach ($f as $v){\n                if (null === $v) {\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => 'isnull'\n                  ];\n                }\n                else{\n                  $tmp['conditions'][] = [\n                    'field' => $key,\n                    'operator' => is_string($f) && !Str::isUid($f) ? 'LIKE' : '=',\n                    'value' => $v\n                  ];\n                }\n              }\n\n              $res['conditions'][] = $tmp;\n            }\n          }\n          elseif ($is_array && !X::isAssoc($f) && count($f) >= 2) {\n            $tmp = [\n              'field' => $f[0],\n              'operator' => $f[1]\n            ];\n            if (isset($f[3])) {\n              $tmp['exp'] = $f[3];\n            }\n            elseif (array_key_exists(2, $f)) {\n              if (is_array($f[2])) {\n                $tmp = [\n                  'conditions' => [],\n                  'logic' => 'AND'\n                ];\n                foreach ($f[2] as $v){\n                  if (null === $v) {\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => 'isnotnull'\n                    ];\n                  }\n                  else{\n                    $tmp['conditions'][] = [\n                      'field' => $f[0],\n                      'operator' => $f[1],\n                      'value' => $v\n                    ];\n                  }\n                }\n\n                $res['conditions'][] = $tmp;\n              }\n              elseif ($f[2] === null) {\n                $tmp['operator'] = $f[2] === '!=' ? 'isnotnull' : 'isnull';\n              }\n              else{\n                $tmp['value'] = $f[2];\n              }\n            }\n\n            $f = $tmp;\n          }\n\n          if (isset($f['field'])) {\n            if (!isset($f['operator'])) {\n              $f['operator'] = 'eq';\n            }\n\n            $res['conditions'][] = $f;\n          }\n        }\n      }\n\n      if ($full) {\n        $tmp = $this->_remove_conditions_value($res);\n        $res = [\n          'hashed' => $tmp['hashed'],\n          'values' => $tmp['values'],\n          'where' => $res\n        ];\n      }\n\n      return $res;\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1745,
                "endLine": 1876,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "treatConditions",
                "returns": [],
                "arguments": [
                    {
                        "name": "where",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "full",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": true,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$full"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/"
            },
            "trait": false,
            "startLine": 1745,
            "endLine": 1876,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "treatConditions",
            "returns": [],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $where\n   * @param bool  $full\n   * @return array|bool\n   *\/"
        },
        "findReferences": {
            "name": "findReferences",
            "summary": "find_references",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findReferences($column, string $db = ''): ?array\n  {\n    $changed = false;\n    if ($db && ($db !== $this->getCurrent())) {\n      $changed = $this->getCurrent();\n      $this->change($db);\n    }\n\n    $column = $this->colFullName($column);\n    $bits   = explode('.', $column);\n    if (\\count($bits) === 2) {\n      array_unshift($bits, $this->getCurrent());\n    }\n\n    if (\\count($bits) !== 3) {\n      return null;\n    }\n\n    $refs   = [];\n    $schema = $this->modelize();\n    $test   = fn($key) => ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    foreach ($schema as $table => $cfg){\n      foreach ($cfg['keys'] as $k){\n        if ($test($k)) {\n          $refs[] = $table.'.'.$k['columns'][0];\n        }\n      }\n    }\n\n    if ($changed) {\n      $this->change($changed);\n    }\n\n    return $refs;\n  }",
            "parent": {
                "name": "findReferences",
                "summary": "find_references",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function findReferences($column, string $db = ''): ?array\n  {\n    $changed = false;\n    if ($db && ($db !== $this->getCurrent())) {\n      $changed = $this->getCurrent();\n      $this->change($db);\n    }\n\n    $column = $this->colFullName($column);\n    $bits   = explode('.', $column);\n    if (\\count($bits) === 2) {\n      array_unshift($bits, $this->getCurrent());\n    }\n\n    if (\\count($bits) !== 3) {\n      return null;\n    }\n\n    $refs   = [];\n    $schema = $this->modelize();\n    $test   = fn($key) => ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n    foreach ($schema as $table => $cfg){\n      foreach ($cfg['keys'] as $k){\n        if ($test($k)) {\n          $refs[] = $table.'.'.$k['columns'][0];\n        }\n      }\n    }\n\n    if ($changed) {\n      $this->change($changed);\n    }\n\n    return $refs;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1915,
                "endLine": 1949,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "findReferences",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "column",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "db",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "find_references\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$column"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$db"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * find_references\n   *\n   * @param $column\n   * @param string $db\n   * @return array|null\n   *\n   *\/"
            },
            "trait": false,
            "startLine": 1915,
            "endLine": 1949,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "findReferences",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "find_references\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * find_references\n   *\n   * @param $column\n   * @param string $db\n   * @return array|null\n   *\n   *\/"
        },
        "findRelations": {
            "name": "findRelations",
            "summary": "find_relations",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function findRelations($column, string $db = ''): ?array\n  {\n    $changed = false;\n    if ($db && ($db !== $this->getCurrent())) {\n      $changed = $this->getCurrent();\n      $this->change($db);\n    }\n\n    $column = $this->colFullName($column);\n    $bits   = explode('.', $column);\n    if (\\count($bits) === 2) {\n      array_unshift($bits, $db ?: $this->current);\n    }\n\n    if (\\count($bits) !== 3) {\n      return null;\n    }\n\n    $table = $bits[1];\n    if ($schema = $this->modelize()) {\n      $refs = [];\n      $test = fn($key) => ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n      foreach ($schema as $tf => $cfg) {\n        $t = $this->tableSimpleName($tf);\n        if ($t !== $table) {\n          foreach ($cfg['keys'] as $k) {\n            if ($test($k)) {\n              foreach ($cfg['keys'] as $k2) {\n                \/\/ Is not the same table\n                if (!$test($k2)\n                  \/\/ Has a reference\n                  && !empty($k2['ref_column'])\n                  \/\/ and refers to a single column\n                  && (\\count($k['columns']) === 1)\n                  \/\/ A unique reference\n                  && (\\count($k2['columns']) === 1)\n                  \/\/ To a table with a primary\n                  && isset($schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']])\n                  \/\/ which is a sole column\n                  && (\\count($schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']]) === 1)\n                  \/\/ We retrieve the key name\n                  && ($key_name = $schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']][0])\n                  \/\/ which is unique\n                  && !empty($schema[$this->tableFullName($k2['ref_table'])]['keys'][$key_name]['unique'])\n                ) {\n                  if (!isset($refs[$t])) {\n                    $refs[$t] = ['column' => $k['columns'][0], 'refs' => []];\n                  }\n\n                  $refs[$t]['refs'][$k2['columns'][0]] = $k2['ref_table'].'.'.$k2['ref_column'];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if ($changed) {\n        $this->change($changed);\n      }\n\n      return $refs;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "findRelations",
                "summary": "find_relations",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function findRelations($column, string $db = ''): ?array\n  {\n    $changed = false;\n    if ($db && ($db !== $this->getCurrent())) {\n      $changed = $this->getCurrent();\n      $this->change($db);\n    }\n\n    $column = $this->colFullName($column);\n    $bits   = explode('.', $column);\n    if (\\count($bits) === 2) {\n      array_unshift($bits, $db ?: $this->current);\n    }\n\n    if (\\count($bits) !== 3) {\n      return null;\n    }\n\n    $table = $bits[1];\n    if ($schema = $this->modelize()) {\n      $refs = [];\n      $test = fn($key) => ($key['ref_db'] === $bits[0]) && ($key['ref_table'] === $bits[1]) && ($key['ref_column'] === $bits[2]);\n      foreach ($schema as $tf => $cfg) {\n        $t = $this->tableSimpleName($tf);\n        if ($t !== $table) {\n          foreach ($cfg['keys'] as $k) {\n            if ($test($k)) {\n              foreach ($cfg['keys'] as $k2) {\n                \/\/ Is not the same table\n                if (!$test($k2)\n                  \/\/ Has a reference\n                  && !empty($k2['ref_column'])\n                  \/\/ and refers to a single column\n                  && (\\count($k['columns']) === 1)\n                  \/\/ A unique reference\n                  && (\\count($k2['columns']) === 1)\n                  \/\/ To a table with a primary\n                  && isset($schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']])\n                  \/\/ which is a sole column\n                  && (\\count($schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']]) === 1)\n                  \/\/ We retrieve the key name\n                  && ($key_name = $schema[$this->tableFullName($k2['ref_table'])]['cols'][$k2['ref_column']][0])\n                  \/\/ which is unique\n                  && !empty($schema[$this->tableFullName($k2['ref_table'])]['keys'][$key_name]['unique'])\n                ) {\n                  if (!isset($refs[$t])) {\n                    $refs[$t] = ['column' => $k['columns'][0], 'refs' => []];\n                  }\n\n                  $refs[$t]['refs'][$k2['columns'][0]] = $k2['ref_table'].'.'.$k2['ref_column'];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if ($changed) {\n        $this->change($changed);\n      }\n\n      return $refs;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 1958,
                "endLine": 2023,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "findRelations",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "column",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "db",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "find_relations\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$column"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$db"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/"
            },
            "trait": false,
            "startLine": 1958,
            "endLine": 2023,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "findRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "column",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "find_relations\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$db"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * find_relations\n   *\n   * @param $column\n   * @param string $db\n   * @return array|bool\n   *\/"
        },
        "query": {
            "name": "query",
            "summary": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function query($statement)\n  {\n    if (!$this->pdo) {\n      return null;\n    }\n\n    $args = func_get_args();\n    \/\/ If fancy is false we just use the regular PDO query function\n    if (!$this->_fancy) {\n      return $this->pdo->query(...$args);\n    }\n\n    \/\/ The function can be called directly with func_get_args()\n    while ((\\count($args) === 1) && is_array($args[0])){\n      $args = $args[0];\n    }\n\n    if (!empty($args[0]) && is_string($args[0])) {\n      \/\/ The first argument is the statement\n      $statement = trim(array_shift($args));\n\n      \/\/ Sending a hash as second argument from helper functions will bind it to the saved statement\n      if (count($args)\n        && is_string($args[0])\n        && isset($this->queries[$args[0]])\n      ) {\n        $hash      = is_string($this->queries[$args[0]]) ? $this->queries[$args[0]] : $args[0];\n        $hash_sent = array_shift($args);\n      }\n      else {\n        $hash = $this->makeHash($statement);\n      }\n\n      $driver_options = [];\n      if (count($args)\n        && is_array($args[0])\n      ) {\n        \/\/ Case where drivers are arguments\n        if (!array_key_exists(0, $args[0])) {\n          $driver_options = array_shift($args);\n        }\n        \/\/ Case where values are in a single argument\n        elseif (\\count($args) === 1) {\n          $args = $args[0];\n        }\n      }\n\n      \/** @var array $params Will become the property last_params each time a query is executed *\/\n      $params     = [\n        'statement' => $statement,\n        'values' => [],\n        'last' => microtime(true)\n      ];\n      $num_values = 0;\n      foreach ($args as $i => $arg){\n        if (!is_array($arg)) {\n          $params['values'][] = $arg;\n          $num_values++;\n        }\n        elseif (isset($arg[2])) {\n          $params['values'][] = $arg[2];\n          $num_values++;\n        }\n      }\n\n      if (!isset($this->queries[$hash])) {\n        \/** @var int $placeholders The number of placeholders in the statement *\/\n        $placeholders = 0;\n        if ($sequences = $this->parseQuery($statement)) {\n          \/* Or looking for question marks *\/\n          $sequences = array_keys($sequences);\n          preg_match_all('\/(\\?)\/', $statement, $exp);\n          $placeholders = isset($exp[1]) && is_array($exp[1]) ? \\count($exp[1]) : 0;\n          while ($sequences[0] === 'OPTIONS'){\n            array_shift($sequences);\n          }\n\n          $params['kind']      = $sequences[0];\n          $params['union']     = isset($sequences['UNION']);\n          $params['write']     = !\\in_array($params['kind'], self::$read_kinds, true);\n          $params['structure'] = \\in_array($params['kind'], self::$structure_kinds, true);\n        }\n        elseif (($this->getEngine() === 'sqlite') && str_starts_with($statement, 'PRAGMA')) {\n          $params['kind'] = 'PRAGMA';\n        }\n        else {\n          throw new Exception(\n            \\defined('BBN_IS_DEV') && BBN_IS_DEV\n              ? \"Impossible to parse the query $statement\"\n              : 'Impossible to parse the query'\n          );\n        }\n\n        \/\/ This will add to the queries array\n        $this->_add_query(\n          $hash,\n          $statement,\n          $params['kind'],\n          $placeholders,\n          $driver_options\n        );\n        if (!empty($hash_sent)) {\n          $this->queries[$hash_sent] = $hash;\n        }\n      }\n      \/\/ The hash of the hash for retrieving a query based on the helper's config's hash\n      elseif (is_string($this->queries[$hash])) {\n        $hash = $this->queries[$hash];\n      }\n\n      $this->_update_query($hash);\n      $q =& $this->queries[$hash];\n      \/* If the number of values is inferior to the number of placeholders we fill the values with the last given value *\/\n      if (!empty($params['values']) && ($num_values < $q['placeholders'])) {\n        $this->error(X::_(\"Placeholders and values don't match\"), false);\n        $params['values'] = array_merge(\n          $params['values'],\n          array_fill($num_values, $q['placeholders'] - $num_values, end($params['values']))\n        );\n        $num_values       = \\count($params['values']);\n      }\n\n      \/* The number of values must match the number of placeholders to bind *\/\n      if ($num_values !== $q['placeholders']) {\n        $this->error(\n          X::_('Incorrect arguments count (your values: %u, in the statement: %u)', $num_values, $q['placeholders']).\"\\n\\n\"\n            . $statement.\"\\n\\n\".'Number of values'.count($params['values']).'Arguments:'\n            . print_r(func_get_args(), true)\n            . print_r($q, true),\n          false\n        );\n        exit;\n      }\n\n      if ($q['exe_time'] === 0) {\n        $time = $q['last'];\n      }\n\n      \/\/ That will always contain the parameters of the last query done\n\n      $this->addStatement($q['sql'], $params);\n      \/\/ If the statement is a structure modifier we need to clear the cache\n      if ($q['structure']) {\n        $tmp                = $q;\n        $this->queries      = [$hash => $tmp];\n        $this->list_queries = [[\n          'hash' => $hash,\n          'last' => $tmp['last']\n        ]];\n        unset($tmp);\n        \/** @todo Clear the cache *\/\n      }\n\n      try{\n        \/\/ This is a writing statement, it will execute the statement and return the number of affected rows\n        if ($q['write']) {\n          \/\/ A prepared query already exists for the writing\n          \/** @var \\bbn\\Db\\Query *\/\n          if ($q['prepared']) {\n            $r = $q['prepared']->init($params['values'])->execute();\n          }\n          \/\/ If there are no values we can assume the statement doesn't need to be prepared and is just executed\n          elseif ($num_values === 0) {\n            \/\/ Native PDO function which returns the number of affected rows\n            $r = $this->pdo->exec($q['sql']);\n          }\n          \/\/ Preparing the query\n          else{\n            \/\/ Native PDO function which will use Db\\Query as base class\n            \/** @var \\bbn\\Db\\Query *\/\n            $q['prepared'] = $this->pdo->prepare($q['sql'], $q['options']);\n            $r             = $q['prepared']->execute();\n          }\n        }\n        \/\/ This is a reading statement, it will prepare the statement and return a query object\n        else {\n          if (!$q['prepared']) {\n            \/\/ Native PDO function which will use Db\\Query as base class\n            $q['prepared'] = $this->pdo->prepare($q['sql'], $driver_options);\n          }\n          else {\n            \/\/ Returns the same Db\\Query object\n            $q['prepared']->init($params['values']);\n          }\n        }\n\n        if (!empty($time) && ($q['exe_time'] === 0)) {\n          $q['exe_time'] = microtime(true) - $time;\n        }\n      }\n      catch (PDOException $e) {\n        $this->error($e);\n      }\n\n      if ($this->check()) {\n        \/\/ So if read statement returns the query object\n        if (!$q['write']) {\n          return $q['prepared'];\n        }\n\n        \/\/ If it is a write statement returns the number of affected rows\n        if ($q['prepared'] && $q['write']) {\n          $r = $q['prepared']->rowCount();\n        }\n\n        \/\/ If it is an insert statement we (try to) set the last inserted ID\n        if (($q['kind'] === 'INSERT') && $r) {\n          $this->setLastInsertId();\n        }\n\n        if (!isset($r)) {\n          X::log($q, 'no_r_in_sql');\n          return false;\n        }\n\n        return $r ?: false;\n      }\n    }\n  }",
            "parent": {
                "name": "query",
                "summary": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function query($statement)\n  {\n    if (!$this->pdo) {\n      return null;\n    }\n\n    $args = func_get_args();\n    \/\/ If fancy is false we just use the regular PDO query function\n    if (!$this->_fancy) {\n      return $this->pdo->query(...$args);\n    }\n\n    \/\/ The function can be called directly with func_get_args()\n    while ((\\count($args) === 1) && is_array($args[0])){\n      $args = $args[0];\n    }\n\n    if (!empty($args[0]) && is_string($args[0])) {\n      \/\/ The first argument is the statement\n      $statement = trim(array_shift($args));\n\n      \/\/ Sending a hash as second argument from helper functions will bind it to the saved statement\n      if (count($args)\n        && is_string($args[0])\n        && isset($this->queries[$args[0]])\n      ) {\n        $hash      = is_string($this->queries[$args[0]]) ? $this->queries[$args[0]] : $args[0];\n        $hash_sent = array_shift($args);\n      }\n      else {\n        $hash = $this->makeHash($statement);\n      }\n\n      $driver_options = [];\n      if (count($args)\n        && is_array($args[0])\n      ) {\n        \/\/ Case where drivers are arguments\n        if (!array_key_exists(0, $args[0])) {\n          $driver_options = array_shift($args);\n        }\n        \/\/ Case where values are in a single argument\n        elseif (\\count($args) === 1) {\n          $args = $args[0];\n        }\n      }\n\n      \/** @var array $params Will become the property last_params each time a query is executed *\/\n      $params     = [\n        'statement' => $statement,\n        'values' => [],\n        'last' => microtime(true)\n      ];\n      $num_values = 0;\n      foreach ($args as $i => $arg){\n        if (!is_array($arg)) {\n          $params['values'][] = $arg;\n          $num_values++;\n        }\n        elseif (isset($arg[2])) {\n          $params['values'][] = $arg[2];\n          $num_values++;\n        }\n      }\n\n      if (!isset($this->queries[$hash])) {\n        \/** @var int $placeholders The number of placeholders in the statement *\/\n        $placeholders = 0;\n        if ($sequences = $this->parseQuery($statement)) {\n          \/* Or looking for question marks *\/\n          $sequences = array_keys($sequences);\n          preg_match_all('\/(\\?)\/', $statement, $exp);\n          $placeholders = isset($exp[1]) && is_array($exp[1]) ? \\count($exp[1]) : 0;\n          while ($sequences[0] === 'OPTIONS'){\n            array_shift($sequences);\n          }\n\n          $params['kind']      = $sequences[0];\n          $params['union']     = isset($sequences['UNION']);\n          $params['write']     = !\\in_array($params['kind'], self::$read_kinds, true);\n          $params['structure'] = \\in_array($params['kind'], self::$structure_kinds, true);\n        }\n        elseif (($this->getEngine() === 'sqlite') && str_starts_with($statement, 'PRAGMA')) {\n          $params['kind'] = 'PRAGMA';\n        }\n        else {\n          throw new Exception(\n            \\defined('BBN_IS_DEV') && BBN_IS_DEV\n              ? \"Impossible to parse the query $statement\"\n              : 'Impossible to parse the query'\n          );\n        }\n\n        \/\/ This will add to the queries array\n        $this->_add_query(\n          $hash,\n          $statement,\n          $params['kind'],\n          $placeholders,\n          $driver_options\n        );\n        if (!empty($hash_sent)) {\n          $this->queries[$hash_sent] = $hash;\n        }\n      }\n      \/\/ The hash of the hash for retrieving a query based on the helper's config's hash\n      elseif (is_string($this->queries[$hash])) {\n        $hash = $this->queries[$hash];\n      }\n\n      $this->_update_query($hash);\n      $q =& $this->queries[$hash];\n      \/* If the number of values is inferior to the number of placeholders we fill the values with the last given value *\/\n      if (!empty($params['values']) && ($num_values < $q['placeholders'])) {\n        $this->error(X::_(\"Placeholders and values don't match\"), false);\n        $params['values'] = array_merge(\n          $params['values'],\n          array_fill($num_values, $q['placeholders'] - $num_values, end($params['values']))\n        );\n        $num_values       = \\count($params['values']);\n      }\n\n      \/* The number of values must match the number of placeholders to bind *\/\n      if ($num_values !== $q['placeholders']) {\n        $this->error(\n          X::_('Incorrect arguments count (your values: %u, in the statement: %u)', $num_values, $q['placeholders']).\"\\n\\n\"\n            . $statement.\"\\n\\n\".'Number of values'.count($params['values']).'Arguments:'\n            . print_r(func_get_args(), true)\n            . print_r($q, true),\n          false\n        );\n        exit;\n      }\n\n      if ($q['exe_time'] === 0) {\n        $time = $q['last'];\n      }\n\n      \/\/ That will always contain the parameters of the last query done\n\n      $this->addStatement($q['sql'], $params);\n      \/\/ If the statement is a structure modifier we need to clear the cache\n      if ($q['structure']) {\n        $tmp                = $q;\n        $this->queries      = [$hash => $tmp];\n        $this->list_queries = [[\n          'hash' => $hash,\n          'last' => $tmp['last']\n        ]];\n        unset($tmp);\n        \/** @todo Clear the cache *\/\n      }\n\n      try{\n        \/\/ This is a writing statement, it will execute the statement and return the number of affected rows\n        if ($q['write']) {\n          \/\/ A prepared query already exists for the writing\n          \/** @var \\bbn\\Db\\Query *\/\n          if ($q['prepared']) {\n            $r = $q['prepared']->init($params['values'])->execute();\n          }\n          \/\/ If there are no values we can assume the statement doesn't need to be prepared and is just executed\n          elseif ($num_values === 0) {\n            \/\/ Native PDO function which returns the number of affected rows\n            $r = $this->pdo->exec($q['sql']);\n          }\n          \/\/ Preparing the query\n          else{\n            \/\/ Native PDO function which will use Db\\Query as base class\n            \/** @var \\bbn\\Db\\Query *\/\n            $q['prepared'] = $this->pdo->prepare($q['sql'], $q['options']);\n            $r             = $q['prepared']->execute();\n          }\n        }\n        \/\/ This is a reading statement, it will prepare the statement and return a query object\n        else {\n          if (!$q['prepared']) {\n            \/\/ Native PDO function which will use Db\\Query as base class\n            $q['prepared'] = $this->pdo->prepare($q['sql'], $driver_options);\n          }\n          else {\n            \/\/ Returns the same Db\\Query object\n            $q['prepared']->init($params['values']);\n          }\n        }\n\n        if (!empty($time) && ($q['exe_time'] === 0)) {\n          $q['exe_time'] = microtime(true) - $time;\n        }\n      }\n      catch (PDOException $e) {\n        $this->error($e);\n      }\n\n      if ($this->check()) {\n        \/\/ So if read statement returns the query object\n        if (!$q['write']) {\n          return $q['prepared'];\n        }\n\n        \/\/ If it is a write statement returns the number of affected rows\n        if ($q['prepared'] && $q['write']) {\n          $r = $q['prepared']->rowCount();\n        }\n\n        \/\/ If it is an insert statement we (try to) set the last inserted ID\n        if (($q['kind'] === 'INSERT') && $r) {\n          $this->setLastInsertId();\n        }\n\n        if (!isset($r)) {\n          X::log($q, 'no_r_in_sql');\n          return false;\n        }\n\n        return $r ?: false;\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2032,
                "endLine": 2250,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "query",
                "returns": [],
                "arguments": [
                    {
                        "name": "statement",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$statement"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Executes a writing statement and return the number of affected rows or return a query object for the reading * statement\n   *\n   * @param $statement\n   * @return false|PDOStatement\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 2032,
            "endLine": 2250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "query",
            "returns": [],
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Executes a writing statement and return the number of affected rows or return a query object for the reading * statement\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$statement"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Executes a writing statement and return the number of affected rows or return a query object for the reading * statement\n   *\n   * @param $statement\n   * @return false|PDOStatement\n   * @throws Exception\n   *\/"
        },
        "executeStatement": {
            "name": "executeStatement",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function executeStatement($statement)\n  {\n    return $this->pdo->exec($statement);\n  }",
            "parent": {
                "name": "executeStatement",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function executeStatement($statement)\n  {\n    return $this->pdo->exec($statement);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2253,
                "endLine": 2256,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "executeStatement",
                "returns": [],
                "arguments": [
                    {
                        "name": "statement",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 2253,
            "endLine": 2256,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "executeStatement",
            "returns": [],
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "correctTypes": {
            "name": "correctTypes",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function correctTypes($st)\n  {\n    if (is_string($st)) {\n      if (Str::isBuid($st)) {\n        $st = \\bin2hex($st);\n      }\n      else{\n        if (Str::isJson($st)) {\n          if (\\strpos($st, '\": ') && ($json = \\json_decode($st))) {\n            return \\json_encode($json);\n          }\n\n          return $st;\n        }\n\n        $st = \\trim(\\trim($st, \" \"), \"\\t\");\n        if (Str::isInteger($st)\n            && ((substr((string)$st, 0, 1) !== '0') || ($st === '0'))\n        ) {\n          $tmp = (int)$st;\n          if (($tmp < PHP_INT_MAX) && ($tmp > -PHP_INT_MAX)) {\n            return $tmp;\n          }\n        }\n        \/\/ If it is a decimal, not starting or ending with a zero\n        elseif (Str::isDecimal($st)) {\n          return (float)$st;\n        }\n\n        return \\normalizer_normalize($st);\n      }\n    }\n    elseif (is_array($st)) {\n      foreach ($st as $k => $v) {\n        $st[$k] = $this->correctTypes($v);\n      }\n    }\n    elseif (\\is_object($st)) {\n      $vs = get_object_vars($st);\n      foreach ($vs as $k => $v) {\n        $st->$k = $this->correctTypes($v);\n      }\n    }\n\n    return $st;\n  }",
            "parent": {
                "name": "correctTypes",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function correctTypes($st)\n  {\n    if (is_string($st)) {\n      if (Str::isBuid($st)) {\n        $st = \\bin2hex($st);\n      }\n      else{\n        if (Str::isJson($st)) {\n          if (\\strpos($st, '\": ') && ($json = \\json_decode($st))) {\n            return \\json_encode($json);\n          }\n\n          return $st;\n        }\n\n        $st = \\trim(\\trim($st, \" \"), \"\\t\");\n        if (Str::isInteger($st)\n            && ((substr((string)$st, 0, 1) !== '0') || ($st === '0'))\n        ) {\n          $tmp = (int)$st;\n          if (($tmp < PHP_INT_MAX) && ($tmp > -PHP_INT_MAX)) {\n            return $tmp;\n          }\n        }\n        \/\/ If it is a decimal, not starting or ending with a zero\n        elseif (Str::isDecimal($st)) {\n          return (float)$st;\n        }\n\n        return \\normalizer_normalize($st);\n      }\n    }\n    elseif (is_array($st)) {\n      foreach ($st as $k => $v) {\n        $st[$k] = $this->correctTypes($v);\n      }\n    }\n    elseif (\\is_object($st)) {\n      $vs = get_object_vars($st);\n      foreach ($vs as $k => $v) {\n        $st->$k = $this->correctTypes($v);\n      }\n    }\n\n    return $st;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2259,
                "endLine": 2304,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "correctTypes",
                "returns": [],
                "arguments": [
                    {
                        "name": "st",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 2259,
            "endLine": 2304,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "correctTypes",
            "returns": [],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "modelize": {
            "name": "modelize",
            "summary": "Return the table's structure as an indexed array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function modelize($table = null, bool $force = false): ?array\n  {\n    $r      = [];\n    $tables = false;\n    $single = false;\n    if (empty($table) || ($table === '*')) {\n      $tables = $this->getTables();\n    }\n    elseif (is_string($table)) {\n      $single = true;\n      $tables = [$table];\n    }\n    elseif (is_array($table)) {\n      $tables = $table;\n    }\n\n    if (is_array($tables)) {\n      foreach ($tables as $t) {\n        if ($full = $this->tableFullName($t)) {\n          $r[$full] = $this->_get_cache($full, 'columns', $force);\n        }\n      }\n\n      if ($single) {\n        return end($r);\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "modelize",
                "summary": "Return the table's structure as an indexed array.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function modelize($table = null, bool $force = false): ?array\n  {\n    $r      = [];\n    $tables = false;\n    $single = false;\n    if (empty($table) || ($table === '*')) {\n      $tables = $this->getTables();\n    }\n    elseif (is_string($table)) {\n      $single = true;\n      $tables = [$table];\n    }\n    elseif (is_array($table)) {\n      $tables = $table;\n    }\n\n    if (is_array($tables)) {\n      foreach ($tables as $t) {\n        if ($full = $this->tableFullName($t)) {\n          $r[$full] = $this->_get_cache($full, 'columns', $force);\n        }\n      }\n\n      if ($single) {\n        return end($r);\n      }\n\n      return $r;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2508,
                "endLine": 2539,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 0,
                "shortName": "modelize",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The table's name"
                    },
                    {
                        "name": "force",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "If set to true will force the modernization to re-perform even if the cache exists"
                    }
                ],
                "doc": {
                    "description": "Return the table's structure as an indexed array.\n\n```php\nX::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "null|array|string",
                            "name": "$table",
                            "description": "The table's name"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$force",
                            "description": "If set to true will force the modernization to re-perform even if the cache exists"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * ```php\n   * X::dump($db->modelize(\"table_users\"));\n   * \/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n   * ```\n   *\n   * @param null|array|string $table The table's name\n   * @param bool $force If set to true will force the modernization to re-perform even if the cache exists\n   * @return null|array\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 2508,
            "endLine": 2539,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "modelize",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will force the modernization to re-perform even if the cache exists"
                }
            ],
            "doc": {
                "description": "Return the table's structure as an indexed array.\n\n```php\nX::dump($db->modelize(\"table_users\"));\n\/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|array|string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force",
                        "description": "If set to true will force the modernization to re-perform even if the cache exists"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return the table's structure as an indexed array.\n   *\n   * ```php\n   * X::dump($db->modelize(\"table_users\"));\n   * \/\/ (array) [keys] => Array ( [PRIMARY] => Array ( [columns] => Array ( [0] => userid [1] => userdataid ) [ref_db] => [ref_table] => [ref_column] => [unique] => 1 )     [table_users_userId_userdataId_info] => Array ( [columns] => Array ( [0] => userid [1] => userdataid [2] => info ) [ref_db] => [ref_table] => [ref_column] =>     [unique] => 0 ) ) [cols] => Array ( [userid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [userdataid] => Array ( [0] => PRIMARY [1] => table_users_userId_userdataId_info ) [info] => Array ( [0] => table_users_userId_userdataId_info ) ) [fields] => Array ( [userid] => Array ( [position] => 1 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [userdataid] => Array ( [position] => 2 [null] => 0 [key] => PRI [default] => [extra] => [signed] => 1 [maxlength] => 11 [type] => int ) [info] => Array ( [position] => 3 [null] => 1 [key] => [default] => NULL [extra] => [signed] => 0 [maxlength] => 200 [type] => varchar ) )\n   * ```\n   *\n   * @param null|array|string $table The table's name\n   * @param bool $force If set to true will force the modernization to re-perform even if the cache exists\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "enableTrigger": {
            "name": "enableTrigger",
            "summary": "Enable the triggers' functions",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function enableTrigger(): self\n  {\n    $this->_triggers_disabled = false;\n    return $this;\n  }",
            "parent": {
                "name": "enableTrigger",
                "summary": "Enable the triggers' functions",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function enableTrigger(): self\n  {\n    $this->_triggers_disabled = false;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2555,
                "endLine": 2559,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "enableTrigger",
                "returns": [
                    "self"
                ],
                "arguments": [],
                "doc": {
                    "description": "Enable the triggers' functions\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 2555,
            "endLine": 2559,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enableTrigger",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Enable the triggers' functions\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Enable the triggers' functions\n   *\n   * @return self\n   *\/"
        },
        "disableTrigger": {
            "name": "disableTrigger",
            "summary": "Disable the triggers' functions",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function disableTrigger(): self\n  {\n    $this->_triggers_disabled = true;\n    return $this;\n  }",
            "parent": {
                "name": "disableTrigger",
                "summary": "Disable the triggers' functions",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function disableTrigger(): self\n  {\n    $this->_triggers_disabled = true;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2567,
                "endLine": 2571,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "disableTrigger",
                "returns": [
                    "self"
                ],
                "arguments": [],
                "doc": {
                    "description": "Disable the triggers' functions\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Disable the triggers' functions\n   *\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 2567,
            "endLine": 2571,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disableTrigger",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Disable the triggers' functions\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Disable the triggers' functions\n   *\n   * @return self\n   *\/"
        },
        "isTriggerEnabled": {
            "name": "isTriggerEnabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isTriggerEnabled(): bool\n  {\n    return !$this->_triggers_disabled;\n  }",
            "parent": {
                "name": "isTriggerEnabled",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isTriggerEnabled(): bool\n  {\n    return !$this->_triggers_disabled;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2574,
                "endLine": 2577,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isTriggerEnabled",
                "returns": [
                    "bool"
                ],
                "arguments": []
            },
            "trait": false,
            "startLine": 2574,
            "endLine": 2577,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isTriggerEnabled",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "isTriggerDisabled": {
            "name": "isTriggerDisabled",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isTriggerDisabled(): bool\n  {\n    return $this->_triggers_disabled;\n  }",
            "parent": {
                "name": "isTriggerDisabled",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isTriggerDisabled(): bool\n  {\n    return $this->_triggers_disabled;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2580,
                "endLine": 2583,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isTriggerDisabled",
                "returns": [
                    "bool"
                ],
                "arguments": []
            },
            "trait": false,
            "startLine": 2580,
            "endLine": 2583,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isTriggerDisabled",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "setTrigger": {
            "name": "setTrigger",
            "summary": "Apply a function each time the methods $kind are used",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self\n  {\n    $kinds   = ['SELECT', 'INSERT', 'UPDATE', 'DELETE'];\n    $moments = ['before', 'after'];\n    if (empty($kind)) {\n      $kind = $kinds;\n    }\n    elseif (!is_array($kind)) {\n      $kind = (array)strtoupper($kind);\n    }\n    else{\n      $kind = array_map('strtoupper', $kind);\n    }\n\n    if (empty($moment)) {\n      $moment = $moments;\n    }\n    else {\n      $moment = !is_array($moment) ? (array)strtolower($moment) : array_map('strtolower', $moment);\n    }\n\n    foreach ($kind as $k){\n      if (\\in_array($k, $kinds, true)) {\n        foreach ($moment as $m){\n          if (array_key_exists($m, $this->_triggers[$k]) && \\in_array($m, $moments, true)) {\n            if ($tables === '*') {\n              $tables = $this->getTables();\n            }\n            elseif (Str::checkName($tables)) {\n              $tables = [$tables];\n            }\n\n            if (is_array($tables)) {\n              foreach ($tables as $table){\n                $t = $this->tableFullName($table);\n                if (!isset($this->_triggers[$k][$m][$t])) {\n                  $this->_triggers[$k][$m][$t] = [];\n                }\n\n                $this->_triggers[$k][$m][$t][] = $function;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
            "parent": {
                "name": "setTrigger",
                "summary": "Apply a function each time the methods $kind are used",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setTrigger(callable $function, $kind = null, $moment = null, $tables = '*' ): self\n  {\n    $kinds   = ['SELECT', 'INSERT', 'UPDATE', 'DELETE'];\n    $moments = ['before', 'after'];\n    if (empty($kind)) {\n      $kind = $kinds;\n    }\n    elseif (!is_array($kind)) {\n      $kind = (array)strtoupper($kind);\n    }\n    else{\n      $kind = array_map('strtoupper', $kind);\n    }\n\n    if (empty($moment)) {\n      $moment = $moments;\n    }\n    else {\n      $moment = !is_array($moment) ? (array)strtolower($moment) : array_map('strtolower', $moment);\n    }\n\n    foreach ($kind as $k){\n      if (\\in_array($k, $kinds, true)) {\n        foreach ($moment as $m){\n          if (array_key_exists($m, $this->_triggers[$k]) && \\in_array($m, $moments, true)) {\n            if ($tables === '*') {\n              $tables = $this->getTables();\n            }\n            elseif (Str::checkName($tables)) {\n              $tables = [$tables];\n            }\n\n            if (is_array($tables)) {\n              foreach ($tables as $table){\n                $t = $this->tableFullName($table);\n                if (!isset($this->_triggers[$k][$m][$t])) {\n                  $this->_triggers[$k][$m][$t] = [];\n                }\n\n                $this->_triggers[$k][$m][$t][] = $function;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2595,
                "endLine": 2643,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "setTrigger",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "function",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "kind",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "select|insert|update|delete"
                    },
                    {
                        "name": "moment",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "before|after"
                    },
                    {
                        "name": "tables",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "*",
                        "default_name": "",
                        "description": "database's table(s) name(s)"
                    }
                ],
                "doc": {
                    "description": "Apply a function each time the methods $kind are used\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "callable",
                            "name": "$function"
                        },
                        {
                            "tag": "param",
                            "type": "array|string|null",
                            "name": "$kind",
                            "description": "select|insert|update|delete"
                        },
                        {
                            "tag": "param",
                            "type": "array|string|null",
                            "name": "$moment",
                            "description": "before|after"
                        },
                        {
                            "tag": "param",
                            "type": "null|string|array",
                            "name": "$tables",
                            "description": "database's table(s) name(s)"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Apply a function each time the methods $kind are used\n   *\n   * @param callable            $function\n   * @param array|string|null   $kind     select|insert|update|delete\n   * @param array|string|null   $moment   before|after\n   * @param null|string|array   $tables   database's table(s) name(s)\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 2595,
            "endLine": 2643,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "setTrigger",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "kind",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "select|insert|update|delete"
                },
                {
                    "name": "moment",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "before|after"
                },
                {
                    "name": "tables",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "*",
                    "default_name": "",
                    "description": "database's table(s) name(s)"
                }
            ],
            "doc": {
                "description": "Apply a function each time the methods $kind are used\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$function"
                    },
                    {
                        "tag": "param",
                        "type": "array|string|null",
                        "name": "$kind",
                        "description": "select|insert|update|delete"
                    },
                    {
                        "tag": "param",
                        "type": "array|string|null",
                        "name": "$moment",
                        "description": "before|after"
                    },
                    {
                        "tag": "param",
                        "type": "null|string|array",
                        "name": "$tables",
                        "description": "database's table(s) name(s)"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Apply a function each time the methods $kind are used\n   *\n   * @param callable            $function\n   * @param array|string|null   $kind     select|insert|update|delete\n   * @param array|string|null   $moment   before|after\n   * @param null|string|array   $tables   database's table(s) name(s)\n   * @return self\n   *\/"
        },
        "getTriggers": {
            "name": "getTriggers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTriggers(): array\n  {\n    return $this->_triggers;\n  }",
            "parent": {
                "name": "getTriggers",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getTriggers(): array\n  {\n    return $this->_triggers;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2649,
                "endLine": 2652,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getTriggers",
                "returns": [
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 2649,
            "endLine": 2652,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTriggers",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return array\n   *\/"
        },
        "_trigger": {
            "name": "_trigger",
            "summary": "Launches a function before or after",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _trigger(array $cfg): array\n  {\n    if ($this->_triggers_disabled) {\n      if ($cfg['moment'] === 'after') {\n        return $cfg;\n      }\n\n      $cfg['run']  = 1;\n      $cfg['trig'] = 1;\n      return $cfg;\n    }\n\n    if (!isset($cfg['trig'])) {\n      $cfg['trig'] = 1;\n    }\n\n    if (!isset($cfg['run'])) {\n      $cfg['run'] = 1;\n    }\n\n    if (!empty($cfg['tables']) && !empty($this->_triggers[$cfg['kind']][$cfg['moment']])) {\n      $table = $this->tableFullName(is_array($cfg['tables']) ? current($cfg['tables']) : $cfg['tables']);\n      \/\/ Specific to a table\n      if (isset($this->_triggers[$cfg['kind']][$cfg['moment']][$table])) {\n        foreach ($this->_triggers[$cfg['kind']][$cfg['moment']][$table] as $i => $f){\n          if ($f && \\is_callable($f)) {\n            if (!($tmp = $f($cfg))) {\n              $cfg['run']  = false;\n              $cfg['trig'] = false;\n            }\n            else{\n              $cfg = $tmp;\n            }\n          }\n        }\n      }\n    }\n\n    return $cfg;\n  }",
            "parent": {
                "name": "_trigger",
                "summary": "Launches a function before or after",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _trigger(array $cfg): array\n  {\n    if ($this->_triggers_disabled) {\n      if ($cfg['moment'] === 'after') {\n        return $cfg;\n      }\n\n      $cfg['run']  = 1;\n      $cfg['trig'] = 1;\n      return $cfg;\n    }\n\n    if (!isset($cfg['trig'])) {\n      $cfg['trig'] = 1;\n    }\n\n    if (!isset($cfg['run'])) {\n      $cfg['run'] = 1;\n    }\n\n    if (!empty($cfg['tables']) && !empty($this->_triggers[$cfg['kind']][$cfg['moment']])) {\n      $table = $this->tableFullName(is_array($cfg['tables']) ? current($cfg['tables']) : $cfg['tables']);\n      \/\/ Specific to a table\n      if (isset($this->_triggers[$cfg['kind']][$cfg['moment']][$table])) {\n        foreach ($this->_triggers[$cfg['kind']][$cfg['moment']][$table] as $i => $f){\n          if ($f && \\is_callable($f)) {\n            if (!($tmp = $f($cfg))) {\n              $cfg['run']  = false;\n              $cfg['trig'] = false;\n            }\n            else{\n              $cfg = $tmp;\n            }\n          }\n        }\n      }\n    }\n\n    return $cfg;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2660,
                "endLine": 2699,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "_trigger",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Launches a function before or after\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Launches a function before or after\n   *\n   * @param array $cfg\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 2660,
            "endLine": 2699,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_trigger",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Launches a function before or after\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Launches a function before or after\n   *\n   * @param array $cfg\n   * @return array\n   *\/"
        },
        "_add_kind": {
            "name": "_add_kind",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _add_kind(array $args, string $kind = 'SELECT'): ?array\n  {\n    $kind = strtoupper($kind);\n    if (!isset($args[0])) {\n      return null;\n    }\n\n    if (!is_array($args[0])) {\n      array_unshift($args, $kind);\n    }\n    else {\n      $args[0]['kind'] = $kind;\n    }\n\n    return $args;\n  }",
            "parent": {
                "name": "_add_kind",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _add_kind(array $args, string $kind = 'SELECT'): ?array\n  {\n    $kind = strtoupper($kind);\n    if (!isset($args[0])) {\n      return null;\n    }\n\n    if (!is_array($args[0])) {\n      array_unshift($args, $kind);\n    }\n    else {\n      $args[0]['kind'] = $kind;\n    }\n\n    return $args;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2706,
                "endLine": 2721,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "_add_kind",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "args",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "kind",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "SELECT",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$args"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$kind"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array  $args\n   * @param string $kind\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 2706,
            "endLine": 2721,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_add_kind",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "kind",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "SELECT",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$kind"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array  $args\n   * @param string $kind\n   * @return array\n   *\/"
        },
        "_add_primary": {
            "name": "_add_primary",
            "summary": "Adds a random primary value when it is absent from the set and present in the fields",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _add_primary(array &$cfg): void\n  {\n    \/\/ Inserting a row without primary when primary is needed and no auto-increment\n    if (!empty($cfg['primary'])\n      && empty($cfg['auto_increment'])\n      && (($idx = array_search($cfg['primary'], $cfg['fields'], true)) > -1)\n      && (count($cfg['values']) === (count($cfg['fields']) - 1))\n    ) {\n      $val = false;\n      switch ($cfg['primary_type']){\n        case 'int':\n          $val = random_int(\n            ceil(10 ** ($cfg['primary_length'] > 3 ? $cfg['primary_length'] - 3 : 1) \/ 2),\n            ceil(10 ** ($cfg['primary_length'] > 3 ? $cfg['primary_length'] : 1) \/ 2)\n          );\n          break;\n        case 'binary':\n          if ($cfg['primary_length'] === 16) {\n            $val = $this->getUid();\n          }\n          break;\n      }\n\n      if ($val) {\n        array_splice($cfg['values'], $idx, 0, $val);\n        $this->setLastInsertId($val);\n      }\n    }\n  }",
            "parent": {
                "name": "_add_primary",
                "summary": "Adds a random primary value when it is absent from the set and present in the fields",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _add_primary(array &$cfg): void\n  {\n    \/\/ Inserting a row without primary when primary is needed and no auto-increment\n    if (!empty($cfg['primary'])\n      && empty($cfg['auto_increment'])\n      && (($idx = array_search($cfg['primary'], $cfg['fields'], true)) > -1)\n      && (count($cfg['values']) === (count($cfg['fields']) - 1))\n    ) {\n      $val = false;\n      switch ($cfg['primary_type']){\n        case 'int':\n          $val = random_int(\n            ceil(10 ** ($cfg['primary_length'] > 3 ? $cfg['primary_length'] - 3 : 1) \/ 2),\n            ceil(10 ** ($cfg['primary_length'] > 3 ? $cfg['primary_length'] : 1) \/ 2)\n          );\n          break;\n        case 'binary':\n          if ($cfg['primary_length'] === 16) {\n            $val = $this->getUid();\n          }\n          break;\n      }\n\n      if ($val) {\n        array_splice($cfg['values'], $idx, 0, $val);\n        $this->setLastInsertId($val);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2729,
                "endLine": 2757,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "_add_primary",
                "returns": [
                    "void"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": true,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Adds a random primary value when it is absent from the set and present in the fields\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Adds a random primary value when it is absent from the set and present in the fields\n   *\n   * @param array $cfg\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 2729,
            "endLine": 2757,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_add_primary",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a random primary value when it is absent from the set and present in the fields\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a random primary value when it is absent from the set and present in the fields\n   *\n   * @param array $cfg\n   * @return void\n   *\/"
        },
        "_exec": {
            "name": "_exec",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _exec()\n  {\n    if ($this->pdo\n      && $this->check()\n      && ($cfg = $this->processCfg(func_get_args()))\n      && !empty($cfg['sql'])\n    ) {\n      \/\/die(var_dump('0exec cfg', $cfg, func_get_args()));\n      $cfg['moment'] = 'before';\n      $cfg['trig']   = null;\n      if ($cfg['kind'] === 'INSERT') {\n        \/\/ Add generated primary when inserting a row without primary when primary is needed and no auto-increment\n        $this->_add_primary($cfg);\n      }\n\n      if (count($cfg['values']) !== count($cfg['values_desc'])) {\n        $this->error(X::_('Database error in values count'));\n      }\n\n      \/\/ Launching the trigger BEFORE execution\n      if ($cfg = $this->_trigger($cfg)) {\n        if (!empty($cfg['run'])) {\n          \/\/$this->log([\"TRIGGER OK\", $cfg['run'], $cfg['fields']]);\n          \/\/ Executing the query\n          \/** @todo Put hash back! *\/\n          \/\/$cfg['run'] = $this->query($cfg['sql'], $cfg['hash'], $cfg['values'] ?? []);\n          \/** @var \\bbn\\Db\\Query *\/\n\n          $cfg['run'] = $this->query($cfg['sql'], $this->getQueryValues($cfg));\n        }\n\n        if (!empty($cfg['force'])) {\n          $cfg['trig'] = 1;\n        }\n        elseif (null === $cfg['trig']) {\n          $cfg['trig'] = (bool)$cfg['run'];\n        }\n\n        if ($cfg['trig']) {\n          $cfg['moment'] = 'after';\n          $cfg           = $this->_trigger($cfg);\n        }\n\n        $this->last_cfg = $cfg;\n        if (!\\in_array($cfg['kind'], self::$write_kinds, true)) {\n          return $cfg['run'] ?? null;\n        }\n\n        if (isset($cfg['value'])) {\n          return $cfg['value'];\n        }\n\n        if (isset($cfg['run'])) {\n          return $cfg['run'];\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "_exec",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _exec()\n  {\n    if ($this->pdo\n      && $this->check()\n      && ($cfg = $this->processCfg(func_get_args()))\n      && !empty($cfg['sql'])\n    ) {\n      \/\/die(var_dump('0exec cfg', $cfg, func_get_args()));\n      $cfg['moment'] = 'before';\n      $cfg['trig']   = null;\n      if ($cfg['kind'] === 'INSERT') {\n        \/\/ Add generated primary when inserting a row without primary when primary is needed and no auto-increment\n        $this->_add_primary($cfg);\n      }\n\n      if (count($cfg['values']) !== count($cfg['values_desc'])) {\n        $this->error(X::_('Database error in values count'));\n      }\n\n      \/\/ Launching the trigger BEFORE execution\n      if ($cfg = $this->_trigger($cfg)) {\n        if (!empty($cfg['run'])) {\n          \/\/$this->log([\"TRIGGER OK\", $cfg['run'], $cfg['fields']]);\n          \/\/ Executing the query\n          \/** @todo Put hash back! *\/\n          \/\/$cfg['run'] = $this->query($cfg['sql'], $cfg['hash'], $cfg['values'] ?? []);\n          \/** @var \\bbn\\Db\\Query *\/\n\n          $cfg['run'] = $this->query($cfg['sql'], $this->getQueryValues($cfg));\n        }\n\n        if (!empty($cfg['force'])) {\n          $cfg['trig'] = 1;\n        }\n        elseif (null === $cfg['trig']) {\n          $cfg['trig'] = (bool)$cfg['run'];\n        }\n\n        if ($cfg['trig']) {\n          $cfg['moment'] = 'after';\n          $cfg           = $this->_trigger($cfg);\n        }\n\n        $this->last_cfg = $cfg;\n        if (!\\in_array($cfg['kind'], self::$write_kinds, true)) {\n          return $cfg['run'] ?? null;\n        }\n\n        if (isset($cfg['value'])) {\n          return $cfg['value'];\n        }\n\n        if (isset($cfg['run'])) {\n          return $cfg['run'];\n        }\n      }\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2762,
                "endLine": 2821,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "_exec",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": "",
                    "returns": {
                        "tag": "returns",
                        "type": "null|\\bbn\\Db\\Query|int",
                        "description": "A selection query or the number of affected rows by a writing query"
                    }
                },
                "comments": "  \/**\n   * @returns null|\\bbn\\Db\\Query|int A selection query or the number of affected rows by a writing query\n   *\/"
            },
            "trait": false,
            "startLine": 2762,
            "endLine": 2821,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_exec",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "",
                "returns": {
                    "tag": "returns",
                    "type": "null|\\bbn\\Db\\Query|int",
                    "description": "A selection query or the number of affected rows by a writing query"
                }
            },
            "comments": "  \/**\n   * @returns null|\\bbn\\Db\\Query|int A selection query or the number of affected rows by a writing query\n   *\/"
        },
        "processCfg": {
            "name": "processCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function processCfg(array $args, bool $force = false): ?array\n  {\n    \/\/ Avoid confusion when\n    while (isset($args[0]) && is_array($args[0])) {\n      $args = $args[0];\n    }\n\n    if (!empty($args['bbn_db_processed'])) {\n      return $args;\n    }\n\n    if (empty($args['bbn_db_treated'])) {\n      $args = $this->_treat_arguments($args);\n    }\n\n    if (isset($args['hash'])) {\n      if (isset($this->cfgs[$args['hash']])) {\n        $fromHash = array_merge(\n          $this->cfgs[$args['hash']], [\n            'values' => $args['values'] ?? [],\n            'where' => $args['where'] ?? [],\n            'filters' => $args['filters'] ?? []\n          ]\n        );\n        if (!empty($fromHash['values'])\n          && !empty($fromHash['removed_virtual'])\n          &&(($fromHash['kind'] === 'INSERT')\n            || ($fromHash['kind'] === 'UPDATE'))\n        ) {\n          foreach ($fromHash['removed_virtual'] as $i) {\n            array_splice($fromHash['values'], $i, 1);\n          }\n        }\n\n        return $fromHash;\n      }\n\n      $tables_full = [];\n      $res         = array_merge(\n        $args, [\n          'tables' => [],\n          'values_desc' => [],\n          'bbn_db_processed' => true,\n          'available_fields' => [],\n          'generate_id' => false\n        ]\n      );\n      $models      = [];\n\n      if (!empty($args['tables'])) {\n        foreach ($args['tables'] as $key => $tab) {\n          if (empty($tab)) {\n            $this->log(\\debug_backtrace());\n            throw new Exception(\"$key is not defined\");\n          }\n\n          $tfn = $this->tableFullName($tab);\n\n          \/\/ 2 tables in the same statement can't have the same idx\n          $idx = is_string($key) ? $key : $tfn;\n          \/\/ Error if they do\n          if (isset($tables_full[$idx])) {\n            $this->error('You cannot use twice the same table with the same alias'.PHP_EOL.X::getDump($args['tables']), false);\n            return null;\n          }\n\n          $tables_full[$idx]   = $tfn;\n          $res['tables'][$idx] = $tfn;\n          if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n            $models[$tfn] = $model;\n          }\n        }\n\n        if ((\\count($res['tables']) === 1)\n          && ($tfn = array_values($res['tables'])[0])\n          && isset($models[$tfn]['keys']['PRIMARY'])\n          && (\\count($models[$tfn]['keys']['PRIMARY']['columns']) === 1)\n          && ($res['primary'] = $models[$tfn]['keys']['PRIMARY']['columns'][0])\n        ) {\n          $p                     = $models[$tfn]['fields'][$res['primary']];\n          $res['auto_increment'] = isset($p['extra']) && ($p['extra'] === 'auto_increment');\n          $res['primary_length'] = $p['maxlength'] ?? null;\n          $res['primary_type']   = $p['type'];\n          if (($res['kind'] === 'INSERT')\n            && !$res['auto_increment']\n            && !\\in_array($this->colSimpleName($res['primary']), $res['fields'], true)\n          ) {\n            $res['generate_id'] = true;\n            $res['fields'][]    = $res['primary'];\n          }\n        }\n\n        foreach ($args['join'] as $key => $join){\n          if (!empty($join['table'])) {\n            $tfn = $this->tableFullName($join['table']);\n            if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n              $models[$tfn] = $model;\n            }\n\n            $idx               = $join['alias'] ?? $tfn;\n            $tables_full[$idx] = $tfn;\n            if (isset($join['join'])) {\n              foreach ($join['join'] as $j){\n                if (!empty($j['table'])) {\n                  $tfn = $this->tableFullName($j['table']);\n                  if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n                    $models[$tfn] = $model;\n                  }\n                  $idx               = $j['alias'] ?? $tfn;\n                  $tables_full[$idx] = $tfn;\n                }\n              }\n            }\n          }\n          else{\n            $this->error('Error! The join array must have on and table defined'.PHP_EOL.X::getDump($join), false);\n          }\n        }\n\n        foreach ($tables_full as $idx => $tfn){\n          foreach ($models[$tfn]['fields'] as $col => $cfg){\n            $res['available_fields'][$this->colFullName($col, $idx)] = $idx;\n            $csn                                             = $this->colSimpleName($col);\n            if (!isset($res['available_fields'][$csn])) {\n              \/*\n              $res['available_fields'][$csn] = false;\n              }\n              else{\n              *\/\n              $res['available_fields'][$csn] = $idx;\n            }\n          }\n        }\n      }\n\n      foreach ($res['fields'] as $idx => &$col){\n        if (!empty($res['union'])\n          || strpos($col, '(')\n          || strpos($col, '-')\n          || strpos($col, \"+\")\n          || strpos($col, '*')\n          || strpos($col, \"\/\")\n          \/*\n        strpos($col, '->\"$.')  ||\n        strpos($col, \"->'$.\") ||\n        strpos($col, '->>\"$.')  ||\n        strpos($col, \"->>'$.\") ||\n        *\/\n          \/\/ string as value\n          || preg_match('\/^[\\\\\\'\\\"]{1}[^\\\\\\'\\\"]*[\\\\\\'\\\"]{1}$\/', $col)\n        ) {\n          $res['available_fields'][$col] = false;\n        }\n\n        if (is_string($idx)) {\n          if (!isset($res['available_fields'][$col])) {\n            \/\/$this->log($res);\n            \/\/$this->log(json_encode($res['available_fields'], JSON_PRETTY_PRINT));\n            $this->error(\"Impossible to find the column $col\", false);\n            return null;\n          }\n\n          $res['available_fields'][$idx] = $res['available_fields'][$col];\n        }\n      }\n\n      \/\/ From here the available fields are defined\n      if (!empty($res['filters'])) {\n        $this->arrangeConditions($res['filters'], $res);\n      }\n\n      unset($col);\n\n      $res['tables_full'] = $tables_full;\n\n      if (($res['kind'] === 'SELECT') && empty($res['fields'])) {\n        foreach (array_keys($res['available_fields']) as $f){\n          if ($this->isColFullName($f)) {\n            $res['fields'][] = $f;\n          }\n        }\n      }\n\n      if (!empty($res['union'])) {\n        $res['values'] = [];\n        foreach ($res['union'] as $i => $u) {\n          $res['union'][$i] = $this->processCfg($u);\n          foreach ($res['union'][$i]['join'] as $j){\n            if (!empty($j['on'])) {\n              $this->getValuesDesc($j['on'], $res['union'][$i], $res['values_desc']);\n            }\n          }\n          $this->getValuesDesc($res['union'][$i]['filters'], $res['union'][$i], $res['values_desc']);\n          $this->getValuesDesc($res['union'][$i]['having'], $res['union'][$i], $res['values_desc']);\n          array_push($res['values'], ...$res['union'][$i]['values']);\n        }\n      }\n\n      if (in_array($res['kind'], ['INSERT', 'UPDATE'])) {\n        $res = $this->removeVirtual($res);\n        foreach ($res['fields'] as $i => $name) {\n          $desc = [\n            'name' => $name\n          ];\n          if (isset($models, $res['available_fields'][$name])) {\n            $t = $res['available_fields'][$name];\n            if (isset($tables_full[$t])\n              && ($model = $models[$tables_full[$t]]['fields'])\n              && ($fname = $this->colSimpleName($name))\n              && !empty($model[$fname]['type'])\n            ) {\n              $desc['type']      = $model[$fname]['type'];\n              $desc['maxlength'] = $model[$fname]['maxlength'] ?? null;\n            }\n          }\n          if (isset($res['values'][$i]) && is_array($res['values'][$i])) {\n            if ((count($res['values'][$i]) !== 2) || !$res['values'][$i][1]) {\n              X::log([$res['tables'], $res['values']], 'arrays_in_db_write');\n              throw new Exception(X::_(\"Using an array for insert\/update value is allowed only for expressions with a 2 value array, the second value being the expression\"));\n            }\n\n            $desc['type'] = 'exp';\n          }\n\n          $res['values_desc'][] = $desc;\n        }\n      }\n\n      foreach ($res['join'] as $r){\n        if (!empty($r['join'])) {\n          foreach ($r['join'] as $j){\n            if (!empty($j['on'])) {\n              $this->getValuesDesc($j['on'], $res, $res['values_desc']);\n            }\n          }\n        }\n\n        if (!empty($r['on'])) {\n          $this->getValuesDesc($r['on'], $res, $res['values_desc']);\n        }\n      }\n\n      $this->getValuesDesc($res['filters'], $res, $res['values_desc']);\n      $this->getValuesDesc($res['having'], $res, $res['values_desc']);\n\n      switch ($res['kind']){\n        case 'SELECT':\n          if (!empty($res['union'])) {\n            $res['select_st'] = $this->getUnion($res);\n            $res['sql'] = $res['select_st'];\n            \/\/die(json_encode([$res, $this->processCfg(['kind' => 'select', 'table' => 'bbn_users', 'fields' => [], 'where' => ['id' => 2]])]));\n          }\n          elseif ($res['select_st'] = $this->getSelect($res)) {\n            $res['sql'] = $res['select_st'];\n          }\n          break;\n        case 'INSERT':\n          if ($res['insert_st'] = $this->getInsert($res)) {\n            $res['sql'] = $res['insert_st'];\n          }\n\n          \/\/var_dump($res);\n          break;\n        case 'UPDATE':\n          if ($res['update_st'] = $this->getUpdate($res)) {\n            $res['sql'] = $res['update_st'];\n          }\n          break;\n        case 'DELETE':\n          if ($res['delete_st'] = $this->getDelete($res)) {\n            $res['sql'] = $res['delete_st'];\n          }\n          break;\n      }\n\n      $res['join_st']   = $this->getJoin($res);\n      $res['where_st']  = $this->getWhere($res);\n      $res['group_st']  = $this->getGroupBy($res);\n      $res['having_st'] = $this->getHaving($res);\n\n      if (empty($res['count'])\n        && (count($res['fields']) === 1)\n        && (self::isAggregateFunction(reset($res['fields'])))\n      ) {\n        $res['order_st'] = '';\n        $res['limit_st'] = '';\n      }\n      else {\n        $res['order_st'] = $res['count'] ? '' : $this->getOrder($res);\n        $res['limit_st'] = $res['count'] ? '' : $this->getLimit($res);\n      }\n\n      if (!empty($res['sql'])) {\n        $res['sql'] .= $res['join_st'].$res['where_st'].$res['group_st'];\n        if ($res['count'] && $res['group_by']) {\n          $res['sql'] .= ') AS t '.PHP_EOL;\n        }\n\n        $res['sql']           .= $res['having_st'].$res['order_st'].$res['limit_st'];\n        $res['statement_hash'] = $this->makeHash($res['sql']);\n        $this->cfgs[$res['hash']] = $res;\n      }\n\n      return $res;\n    }\n\n    $this->error('Impossible to process the config (no hash)'.PHP_EOL.print_r($args, true), false);\n    return null;\n  }",
            "parent": {
                "name": "processCfg",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function processCfg(array $args, bool $force = false): ?array\n  {\n    \/\/ Avoid confusion when\n    while (isset($args[0]) && is_array($args[0])) {\n      $args = $args[0];\n    }\n\n    if (!empty($args['bbn_db_processed'])) {\n      return $args;\n    }\n\n    if (empty($args['bbn_db_treated'])) {\n      $args = $this->_treat_arguments($args);\n    }\n\n    if (isset($args['hash'])) {\n      if (isset($this->cfgs[$args['hash']])) {\n        $fromHash = array_merge(\n          $this->cfgs[$args['hash']], [\n            'values' => $args['values'] ?? [],\n            'where' => $args['where'] ?? [],\n            'filters' => $args['filters'] ?? []\n          ]\n        );\n        if (!empty($fromHash['values'])\n          && !empty($fromHash['removed_virtual'])\n          &&(($fromHash['kind'] === 'INSERT')\n            || ($fromHash['kind'] === 'UPDATE'))\n        ) {\n          foreach ($fromHash['removed_virtual'] as $i) {\n            array_splice($fromHash['values'], $i, 1);\n          }\n        }\n\n        return $fromHash;\n      }\n\n      $tables_full = [];\n      $res         = array_merge(\n        $args, [\n          'tables' => [],\n          'values_desc' => [],\n          'bbn_db_processed' => true,\n          'available_fields' => [],\n          'generate_id' => false\n        ]\n      );\n      $models      = [];\n\n      if (!empty($args['tables'])) {\n        foreach ($args['tables'] as $key => $tab) {\n          if (empty($tab)) {\n            $this->log(\\debug_backtrace());\n            throw new Exception(\"$key is not defined\");\n          }\n\n          $tfn = $this->tableFullName($tab);\n\n          \/\/ 2 tables in the same statement can't have the same idx\n          $idx = is_string($key) ? $key : $tfn;\n          \/\/ Error if they do\n          if (isset($tables_full[$idx])) {\n            $this->error('You cannot use twice the same table with the same alias'.PHP_EOL.X::getDump($args['tables']), false);\n            return null;\n          }\n\n          $tables_full[$idx]   = $tfn;\n          $res['tables'][$idx] = $tfn;\n          if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n            $models[$tfn] = $model;\n          }\n        }\n\n        if ((\\count($res['tables']) === 1)\n          && ($tfn = array_values($res['tables'])[0])\n          && isset($models[$tfn]['keys']['PRIMARY'])\n          && (\\count($models[$tfn]['keys']['PRIMARY']['columns']) === 1)\n          && ($res['primary'] = $models[$tfn]['keys']['PRIMARY']['columns'][0])\n        ) {\n          $p                     = $models[$tfn]['fields'][$res['primary']];\n          $res['auto_increment'] = isset($p['extra']) && ($p['extra'] === 'auto_increment');\n          $res['primary_length'] = $p['maxlength'] ?? null;\n          $res['primary_type']   = $p['type'];\n          if (($res['kind'] === 'INSERT')\n            && !$res['auto_increment']\n            && !\\in_array($this->colSimpleName($res['primary']), $res['fields'], true)\n          ) {\n            $res['generate_id'] = true;\n            $res['fields'][]    = $res['primary'];\n          }\n        }\n\n        foreach ($args['join'] as $key => $join){\n          if (!empty($join['table'])) {\n            $tfn = $this->tableFullName($join['table']);\n            if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n              $models[$tfn] = $model;\n            }\n\n            $idx               = $join['alias'] ?? $tfn;\n            $tables_full[$idx] = $tfn;\n            if (isset($join['join'])) {\n              foreach ($join['join'] as $j){\n                if (!empty($j['table'])) {\n                  $tfn = $this->tableFullName($j['table']);\n                  if (!isset($models[$tfn]) && ($model = $this->modelize($tfn))) {\n                    $models[$tfn] = $model;\n                  }\n                  $idx               = $j['alias'] ?? $tfn;\n                  $tables_full[$idx] = $tfn;\n                }\n              }\n            }\n          }\n          else{\n            $this->error('Error! The join array must have on and table defined'.PHP_EOL.X::getDump($join), false);\n          }\n        }\n\n        foreach ($tables_full as $idx => $tfn){\n          foreach ($models[$tfn]['fields'] as $col => $cfg){\n            $res['available_fields'][$this->colFullName($col, $idx)] = $idx;\n            $csn                                             = $this->colSimpleName($col);\n            if (!isset($res['available_fields'][$csn])) {\n              \/*\n              $res['available_fields'][$csn] = false;\n              }\n              else{\n              *\/\n              $res['available_fields'][$csn] = $idx;\n            }\n          }\n        }\n      }\n\n      foreach ($res['fields'] as $idx => &$col){\n        if (!empty($res['union'])\n          || strpos($col, '(')\n          || strpos($col, '-')\n          || strpos($col, \"+\")\n          || strpos($col, '*')\n          || strpos($col, \"\/\")\n          \/*\n        strpos($col, '->\"$.')  ||\n        strpos($col, \"->'$.\") ||\n        strpos($col, '->>\"$.')  ||\n        strpos($col, \"->>'$.\") ||\n        *\/\n          \/\/ string as value\n          || preg_match('\/^[\\\\\\'\\\"]{1}[^\\\\\\'\\\"]*[\\\\\\'\\\"]{1}$\/', $col)\n        ) {\n          $res['available_fields'][$col] = false;\n        }\n\n        if (is_string($idx)) {\n          if (!isset($res['available_fields'][$col])) {\n            \/\/$this->log($res);\n            \/\/$this->log(json_encode($res['available_fields'], JSON_PRETTY_PRINT));\n            $this->error(\"Impossible to find the column $col\", false);\n            return null;\n          }\n\n          $res['available_fields'][$idx] = $res['available_fields'][$col];\n        }\n      }\n\n      \/\/ From here the available fields are defined\n      if (!empty($res['filters'])) {\n        $this->arrangeConditions($res['filters'], $res);\n      }\n\n      unset($col);\n\n      $res['tables_full'] = $tables_full;\n\n      if (($res['kind'] === 'SELECT') && empty($res['fields'])) {\n        foreach (array_keys($res['available_fields']) as $f){\n          if ($this->isColFullName($f)) {\n            $res['fields'][] = $f;\n          }\n        }\n      }\n\n      if (!empty($res['union'])) {\n        $res['values'] = [];\n        foreach ($res['union'] as $i => $u) {\n          $res['union'][$i] = $this->processCfg($u);\n          foreach ($res['union'][$i]['join'] as $j){\n            if (!empty($j['on'])) {\n              $this->getValuesDesc($j['on'], $res['union'][$i], $res['values_desc']);\n            }\n          }\n          $this->getValuesDesc($res['union'][$i]['filters'], $res['union'][$i], $res['values_desc']);\n          $this->getValuesDesc($res['union'][$i]['having'], $res['union'][$i], $res['values_desc']);\n          array_push($res['values'], ...$res['union'][$i]['values']);\n        }\n      }\n\n      if (in_array($res['kind'], ['INSERT', 'UPDATE'])) {\n        $res = $this->removeVirtual($res);\n        foreach ($res['fields'] as $i => $name) {\n          $desc = [\n            'name' => $name\n          ];\n          if (isset($models, $res['available_fields'][$name])) {\n            $t = $res['available_fields'][$name];\n            if (isset($tables_full[$t])\n              && ($model = $models[$tables_full[$t]]['fields'])\n              && ($fname = $this->colSimpleName($name))\n              && !empty($model[$fname]['type'])\n            ) {\n              $desc['type']      = $model[$fname]['type'];\n              $desc['maxlength'] = $model[$fname]['maxlength'] ?? null;\n            }\n          }\n          if (isset($res['values'][$i]) && is_array($res['values'][$i])) {\n            if ((count($res['values'][$i]) !== 2) || !$res['values'][$i][1]) {\n              X::log([$res['tables'], $res['values']], 'arrays_in_db_write');\n              throw new Exception(X::_(\"Using an array for insert\/update value is allowed only for expressions with a 2 value array, the second value being the expression\"));\n            }\n\n            $desc['type'] = 'exp';\n          }\n\n          $res['values_desc'][] = $desc;\n        }\n      }\n\n      foreach ($res['join'] as $r){\n        if (!empty($r['join'])) {\n          foreach ($r['join'] as $j){\n            if (!empty($j['on'])) {\n              $this->getValuesDesc($j['on'], $res, $res['values_desc']);\n            }\n          }\n        }\n\n        if (!empty($r['on'])) {\n          $this->getValuesDesc($r['on'], $res, $res['values_desc']);\n        }\n      }\n\n      $this->getValuesDesc($res['filters'], $res, $res['values_desc']);\n      $this->getValuesDesc($res['having'], $res, $res['values_desc']);\n\n      switch ($res['kind']){\n        case 'SELECT':\n          if (!empty($res['union'])) {\n            $res['select_st'] = $this->getUnion($res);\n            $res['sql'] = $res['select_st'];\n            \/\/die(json_encode([$res, $this->processCfg(['kind' => 'select', 'table' => 'bbn_users', 'fields' => [], 'where' => ['id' => 2]])]));\n          }\n          elseif ($res['select_st'] = $this->getSelect($res)) {\n            $res['sql'] = $res['select_st'];\n          }\n          break;\n        case 'INSERT':\n          if ($res['insert_st'] = $this->getInsert($res)) {\n            $res['sql'] = $res['insert_st'];\n          }\n\n          \/\/var_dump($res);\n          break;\n        case 'UPDATE':\n          if ($res['update_st'] = $this->getUpdate($res)) {\n            $res['sql'] = $res['update_st'];\n          }\n          break;\n        case 'DELETE':\n          if ($res['delete_st'] = $this->getDelete($res)) {\n            $res['sql'] = $res['delete_st'];\n          }\n          break;\n      }\n\n      $res['join_st']   = $this->getJoin($res);\n      $res['where_st']  = $this->getWhere($res);\n      $res['group_st']  = $this->getGroupBy($res);\n      $res['having_st'] = $this->getHaving($res);\n\n      if (empty($res['count'])\n        && (count($res['fields']) === 1)\n        && (self::isAggregateFunction(reset($res['fields'])))\n      ) {\n        $res['order_st'] = '';\n        $res['limit_st'] = '';\n      }\n      else {\n        $res['order_st'] = $res['count'] ? '' : $this->getOrder($res);\n        $res['limit_st'] = $res['count'] ? '' : $this->getLimit($res);\n      }\n\n      if (!empty($res['sql'])) {\n        $res['sql'] .= $res['join_st'].$res['where_st'].$res['group_st'];\n        if ($res['count'] && $res['group_by']) {\n          $res['sql'] .= ') AS t '.PHP_EOL;\n        }\n\n        $res['sql']           .= $res['having_st'].$res['order_st'].$res['limit_st'];\n        $res['statement_hash'] = $this->makeHash($res['sql']);\n        $this->cfgs[$res['hash']] = $res;\n      }\n\n      return $res;\n    }\n\n    $this->error('Impossible to process the config (no hash)'.PHP_EOL.print_r($args, true), false);\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 2830,
                "endLine": 3138,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "processCfg",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "args",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "force",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$args"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$force"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   *\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 2830,
            "endLine": 3138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "processCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   *\n   * @param array $args\n   * @param bool $force\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "reprocessCfg": {
            "name": "reprocessCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function reprocessCfg(array $cfg): ?array\n  {\n    unset($cfg['bbn_db_processed']);\n    unset($cfg['bbn_db_treated']);\n\n    if (isset($cfg['hash'])) {\n      unset($this->cfgs[$cfg['hash']]);\n    }\n\n    $tmp = $this->processCfg($cfg, true);\n\n    if (!empty($cfg['values']) && (count($cfg['values']) === count($tmp['values']))) {\n      $tmp = array_merge($tmp, ['values' => $cfg['values']]);\n    }\n\n    return $tmp;\n  }",
            "parent": {
                "name": "reprocessCfg",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function reprocessCfg(array $cfg): ?array\n  {\n    unset($cfg['bbn_db_processed']);\n    unset($cfg['bbn_db_treated']);\n\n    if (isset($cfg['hash'])) {\n      unset($this->cfgs[$cfg['hash']]);\n    }\n\n    $tmp = $this->processCfg($cfg, true);\n\n    if (!empty($cfg['values']) && (count($cfg['values']) === count($tmp['values']))) {\n      $tmp = array_merge($tmp, ['values' => $cfg['values']]);\n    }\n\n    return $tmp;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3145,
                "endLine": 3161,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "reprocessCfg",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * @param array $cfg\n   * @return array|null\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 3145,
            "endLine": 3161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "reprocessCfg",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param array $cfg\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "_treat_arguments": {
            "name": "_treat_arguments",
            "summary": "Normalizes arguments by making it a uniform array.",
            "description": "<ul><h3>The array will have the following indexes:<\/h3>\n<li>fields<\/li>\n<li>where<\/li>\n<li>filters<\/li>\n<li>order<\/li>\n<li>limit<\/li>\n<li>start<\/li>\n<li>join<\/li>\n<li>group_by<\/li>\n<li>having<\/li>\n<li>values<\/li>\n<li>hashed_join<\/li>\n<li>hashed_where<\/li>\n<li>hashed_having<\/li>\n<li>php<\/li>\n<li>done<\/li>\n<\/ul>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<ul><h3>The array will have the following indexes:<\/h3>\n<li>fields<\/li>\n<li>where<\/li>\n<li>filters<\/li>\n<li>order<\/li>\n<li>limit<\/li>\n<li>start<\/li>\n<li>join<\/li>\n<li>group_by<\/li>\n<li>having<\/li>\n<li>values<\/li>\n<li>hashed_join<\/li>\n<li>hashed_where<\/li>\n<li>hashed_having<\/li>\n<li>php<\/li>\n<li>done<\/li>\n<\/ul>"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _treat_arguments($cfg): array\n  {\n    while (isset($cfg[0]) && is_array($cfg[0])){\n      $cfg = $cfg[0];\n    }\n\n    if (is_array($cfg)\n      && array_key_exists('bbn_db_treated', $cfg)\n      && ($cfg['bbn_db_treated'] === true)\n    ) {\n      return $cfg;\n    }\n\n    $res = [\n      'kind' => 'SELECT',\n      'fields' => [],\n      'where' => [],\n      'order' => [],\n      'limit' => 0,\n      'start' => 0,\n      'group_by' => [],\n      'having' => [],\n    ];\n\n    if (X::isAssoc($cfg)) {\n      if (isset($cfg['table']) && !isset($cfg['tables'])) {\n        $cfg['tables'] = [$cfg['table']];\n        unset($cfg['table']);\n      }\n      if (isset($cfg['field']) && !isset($cfg['fields'])) {\n        $cfg['fields'] = [$cfg['field']];\n        unset($cfg['field']);\n      }\n\n      $res = array_merge($res, $cfg);\n    }\n    elseif (count($cfg) > 1) {\n      $res['kind']   = strtoupper($cfg[0]);\n      $res['tables'] = $cfg[1];\n      if (isset($cfg[2])) {\n        $res['fields'] = $cfg[2];\n      }\n\n      if (isset($cfg[3])) {\n        $res['where'] = $cfg[3];\n      }\n\n      if (isset($cfg[4])) {\n        $res['order'] = is_string($cfg[4]) ? [$cfg[4] => 'ASC'] : $cfg[4];\n      }\n\n      if (isset($cfg[5]) && Str::isInteger($cfg[5])) {\n        $res['limit'] = $cfg[5];\n      }\n\n      if (isset($cfg[6]) && !empty($res['limit'])) {\n        $res['start'] = $cfg[6];\n      }\n    }\n\n    $res           = array_merge(\n      $res, [\n        'aliases' => [],\n        'values' => [],\n        'filters' => [],\n        'join' => [],\n        'hashed_join' => [],\n        'hashed_where' => [],\n        'hashed_having' => [],\n        'bbn_db_treated' => true\n      ]\n    );\n    $res['kind']   = strtoupper($res['kind']);\n    $res['write']  = \\in_array($res['kind'], self::$write_kinds, true);\n    $res['ignore'] = $res['write'] && !empty($res['ignore']);\n    $res['count']  = !$res['write'] && !empty($res['count']);\n\n    \n    if (!empty($res['tables'])) {\n      if (!is_array($res['tables'])) {\n        $res['tables'] = is_string($res['tables']) ? [$res['tables']] : [];\n      }\n\n      foreach ($res['tables'] as $i => $t){\n        if (!is_string($t)) {\n          X::log([$cfg, debug_backtrace()], 'db_explained');\n          throw new Exception(\"Impossible to identify the tables, check the log\");\n        }\n\n        $res['tables'][$i] = $this->tableFullName($t);\n      }\n    }\n    elseif (empty($res['union'])) {\n      throw new \\Error(X::_('No table given'));\n    }\n\n    if (!empty($res['fields'])) {\n      if (is_string($res['fields'])) {\n        $res['fields'] = [$res['fields']];\n      }\n    }\n    elseif (!empty($res['columns'])) {\n      $res['fields'] = (array)$res['columns'];\n    }\n    elseif (!empty($res['field'])) {\n      $res['fields'] = is_string($res['field']) ? [$res['field']] : $res['field'];\n    }\n\n    if (!empty($res['fields'])) {\n      if ($res['kind'] === 'SELECT') {\n        foreach ($res['fields'] as $k => $col) {\n          if (is_string($k)) {\n            $res['aliases'][$col] = $k;\n          }\n        }\n      }\n      elseif ((($res['kind'] === 'INSERT') || ($res['kind'] === 'UPDATE'))\n        && is_string(array_keys($res['fields'])[0])\n      ) {\n        $res['values'] = array_values($res['fields']);\n        $res['fields'] = array_keys($res['fields']);\n      }\n    }\n\n    if (!is_array($res['group_by'])) {\n      $res['group_by'] = empty($res['group_by']) ? [] : [$res['group_by']];\n    }\n\n    if (!is_array($res['where'])) {\n      $res['where'] = [];\n    }\n\n    if (!is_array($res['order'])) {\n      $res['order'] = is_string($res['order']) ? [$res['order'] => 'ASC'] : [];\n    }\n\n    if (!Str::isInteger($res['limit'])) {\n      unset($res['limit']);\n    }\n\n    if (!Str::isInteger($res['start'])) {\n      unset($res['start']);\n    }\n\n    if (!empty($cfg['join'])) {\n      foreach ($cfg['join'] as $k => $join){\n        if (is_array($join)) {\n          if (is_string($k)) {\n            if (empty($join['table'])) {\n              $join['table'] = $k;\n            }\n            elseif (empty($join['alias'])) {\n              $join['alias'] = $k;\n            }\n          }\n\n          if (!isset($join['type'])) {\n            $join['type'] = 'right';\n          }\n\n          if (isset($join['table'], $join['on']) && ($tmp = $this->treatConditions($join['on'], false))) {\n\n            $res['join'][] = array_merge($join, ['on' => $tmp]);\n          }\n        }\n      }\n    }\n\n    if ($tmp = $this->treatConditions($res['where'], false)) {\n      $res['filters'] = $tmp;\n    }\n\n    if (!empty($res['having']) && ($tmp = $this->treatConditions($res['having'], false))) {\n      $res['having'] = $tmp;\n    }\n\n    if (!empty($res['group_by'])) {\n      $this->_adapt_filters($res);\n    }\n\n    if (!empty($res['join'])) {\n      $new_join = [];\n      foreach ($res['join'] as $k => $join ){\n        $new_item = $join;\n        if (!empty($join['join'])) {\n          $new_join2 = [];\n          foreach ($join['join'] as $join2 ){\n            if ($tmp = $this->treatConditions($join2['on'])) {\n              $new_item2 = $join2;\n              $new_item2['on']       = $tmp['where'];\n              $res['hashed_join'][] = $tmp['hashed'];\n              if (!empty($tmp['values'])) {\n                foreach ($tmp['values'] as $v){\n                  $res['values'][] = $v;\n                }\n              }\n    \n              $new_join2[] = $new_item2;\n            }\n          }\n\n          $new_item['join'] = $new_join2;\n        }\n\n        if ($tmp = $this->treatConditions($new_item['on'])) {\n          $new_item['on']       = $tmp['where'];\n          $res['hashed_join'][] = $tmp['hashed'];\n          if (!empty($tmp['values'])) {\n            foreach ($tmp['values'] as $v){\n              $res['values'][] = $v;\n            }\n          }\n\n          $new_join[] = $new_item;\n        }\n      }\n\n      $res['join'] = $new_join;\n    }\n\n    if (!empty($res['filters']) && ($tmp = $this->treatConditions($res['filters']))) {\n      $res['filters']      = $tmp['where'];\n      $res['hashed_where'] = $tmp['hashed'];\n      if (is_array($tmp) && isset($tmp['values'])) {\n        foreach ($tmp['values'] as $v){\n          $res['values'][] = $v;\n        }\n      }\n    }\n\n    if (!empty($res['having']) && ($tmp = $this->treatConditions($res['having']))) {\n      $res['having']        = $tmp['where'];\n      $res['hashed_having'] = $tmp['hashed'];\n      foreach ($tmp['values'] as $v){\n        $res['values'][] = $v;\n      }\n    }\n\n    $res['hash'] = $cfg['hash'] ?? $this->makeHash(\n        $res['kind'],\n        $res['ignore'],\n        $res['count'],\n        $res['tables'] ?? [],\n        $res['fields'],\n        $res['hashed_join'],\n        $res['hashed_where'],\n        $res['hashed_having'],\n        $res['group_by'],\n        $res['order'],\n        $res['limit'] ?? 0,\n        $res['start'] ?? 0\n      );\n    return $res;\n  }",
            "parent": {
                "name": "_treat_arguments",
                "summary": "Normalizes arguments by making it a uniform array.",
                "description": "<ul><h3>The array will have the following indexes:<\/h3>\n<li>fields<\/li>\n<li>where<\/li>\n<li>filters<\/li>\n<li>order<\/li>\n<li>limit<\/li>\n<li>start<\/li>\n<li>join<\/li>\n<li>group_by<\/li>\n<li>having<\/li>\n<li>values<\/li>\n<li>hashed_join<\/li>\n<li>hashed_where<\/li>\n<li>hashed_having<\/li>\n<li>php<\/li>\n<li>done<\/li>\n<\/ul>",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "<ul><h3>The array will have the following indexes:<\/h3>\n<li>fields<\/li>\n<li>where<\/li>\n<li>filters<\/li>\n<li>order<\/li>\n<li>limit<\/li>\n<li>start<\/li>\n<li>join<\/li>\n<li>group_by<\/li>\n<li>having<\/li>\n<li>values<\/li>\n<li>hashed_join<\/li>\n<li>hashed_where<\/li>\n<li>hashed_having<\/li>\n<li>php<\/li>\n<li>done<\/li>\n<\/ul>"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _treat_arguments($cfg): array\n  {\n    while (isset($cfg[0]) && is_array($cfg[0])){\n      $cfg = $cfg[0];\n    }\n\n    if (is_array($cfg)\n      && array_key_exists('bbn_db_treated', $cfg)\n      && ($cfg['bbn_db_treated'] === true)\n    ) {\n      return $cfg;\n    }\n\n    $res = [\n      'kind' => 'SELECT',\n      'fields' => [],\n      'where' => [],\n      'order' => [],\n      'limit' => 0,\n      'start' => 0,\n      'group_by' => [],\n      'having' => [],\n    ];\n\n    if (X::isAssoc($cfg)) {\n      if (isset($cfg['table']) && !isset($cfg['tables'])) {\n        $cfg['tables'] = [$cfg['table']];\n        unset($cfg['table']);\n      }\n      if (isset($cfg['field']) && !isset($cfg['fields'])) {\n        $cfg['fields'] = [$cfg['field']];\n        unset($cfg['field']);\n      }\n\n      $res = array_merge($res, $cfg);\n    }\n    elseif (count($cfg) > 1) {\n      $res['kind']   = strtoupper($cfg[0]);\n      $res['tables'] = $cfg[1];\n      if (isset($cfg[2])) {\n        $res['fields'] = $cfg[2];\n      }\n\n      if (isset($cfg[3])) {\n        $res['where'] = $cfg[3];\n      }\n\n      if (isset($cfg[4])) {\n        $res['order'] = is_string($cfg[4]) ? [$cfg[4] => 'ASC'] : $cfg[4];\n      }\n\n      if (isset($cfg[5]) && Str::isInteger($cfg[5])) {\n        $res['limit'] = $cfg[5];\n      }\n\n      if (isset($cfg[6]) && !empty($res['limit'])) {\n        $res['start'] = $cfg[6];\n      }\n    }\n\n    $res           = array_merge(\n      $res, [\n        'aliases' => [],\n        'values' => [],\n        'filters' => [],\n        'join' => [],\n        'hashed_join' => [],\n        'hashed_where' => [],\n        'hashed_having' => [],\n        'bbn_db_treated' => true\n      ]\n    );\n    $res['kind']   = strtoupper($res['kind']);\n    $res['write']  = \\in_array($res['kind'], self::$write_kinds, true);\n    $res['ignore'] = $res['write'] && !empty($res['ignore']);\n    $res['count']  = !$res['write'] && !empty($res['count']);\n\n    \n    if (!empty($res['tables'])) {\n      if (!is_array($res['tables'])) {\n        $res['tables'] = is_string($res['tables']) ? [$res['tables']] : [];\n      }\n\n      foreach ($res['tables'] as $i => $t){\n        if (!is_string($t)) {\n          X::log([$cfg, debug_backtrace()], 'db_explained');\n          throw new Exception(\"Impossible to identify the tables, check the log\");\n        }\n\n        $res['tables'][$i] = $this->tableFullName($t);\n      }\n    }\n    elseif (empty($res['union'])) {\n      throw new \\Error(X::_('No table given'));\n    }\n\n    if (!empty($res['fields'])) {\n      if (is_string($res['fields'])) {\n        $res['fields'] = [$res['fields']];\n      }\n    }\n    elseif (!empty($res['columns'])) {\n      $res['fields'] = (array)$res['columns'];\n    }\n    elseif (!empty($res['field'])) {\n      $res['fields'] = is_string($res['field']) ? [$res['field']] : $res['field'];\n    }\n\n    if (!empty($res['fields'])) {\n      if ($res['kind'] === 'SELECT') {\n        foreach ($res['fields'] as $k => $col) {\n          if (is_string($k)) {\n            $res['aliases'][$col] = $k;\n          }\n        }\n      }\n      elseif ((($res['kind'] === 'INSERT') || ($res['kind'] === 'UPDATE'))\n        && is_string(array_keys($res['fields'])[0])\n      ) {\n        $res['values'] = array_values($res['fields']);\n        $res['fields'] = array_keys($res['fields']);\n      }\n    }\n\n    if (!is_array($res['group_by'])) {\n      $res['group_by'] = empty($res['group_by']) ? [] : [$res['group_by']];\n    }\n\n    if (!is_array($res['where'])) {\n      $res['where'] = [];\n    }\n\n    if (!is_array($res['order'])) {\n      $res['order'] = is_string($res['order']) ? [$res['order'] => 'ASC'] : [];\n    }\n\n    if (!Str::isInteger($res['limit'])) {\n      unset($res['limit']);\n    }\n\n    if (!Str::isInteger($res['start'])) {\n      unset($res['start']);\n    }\n\n    if (!empty($cfg['join'])) {\n      foreach ($cfg['join'] as $k => $join){\n        if (is_array($join)) {\n          if (is_string($k)) {\n            if (empty($join['table'])) {\n              $join['table'] = $k;\n            }\n            elseif (empty($join['alias'])) {\n              $join['alias'] = $k;\n            }\n          }\n\n          if (!isset($join['type'])) {\n            $join['type'] = 'right';\n          }\n\n          if (isset($join['table'], $join['on']) && ($tmp = $this->treatConditions($join['on'], false))) {\n\n            $res['join'][] = array_merge($join, ['on' => $tmp]);\n          }\n        }\n      }\n    }\n\n    if ($tmp = $this->treatConditions($res['where'], false)) {\n      $res['filters'] = $tmp;\n    }\n\n    if (!empty($res['having']) && ($tmp = $this->treatConditions($res['having'], false))) {\n      $res['having'] = $tmp;\n    }\n\n    if (!empty($res['group_by'])) {\n      $this->_adapt_filters($res);\n    }\n\n    if (!empty($res['join'])) {\n      $new_join = [];\n      foreach ($res['join'] as $k => $join ){\n        $new_item = $join;\n        if (!empty($join['join'])) {\n          $new_join2 = [];\n          foreach ($join['join'] as $join2 ){\n            if ($tmp = $this->treatConditions($join2['on'])) {\n              $new_item2 = $join2;\n              $new_item2['on']       = $tmp['where'];\n              $res['hashed_join'][] = $tmp['hashed'];\n              if (!empty($tmp['values'])) {\n                foreach ($tmp['values'] as $v){\n                  $res['values'][] = $v;\n                }\n              }\n    \n              $new_join2[] = $new_item2;\n            }\n          }\n\n          $new_item['join'] = $new_join2;\n        }\n\n        if ($tmp = $this->treatConditions($new_item['on'])) {\n          $new_item['on']       = $tmp['where'];\n          $res['hashed_join'][] = $tmp['hashed'];\n          if (!empty($tmp['values'])) {\n            foreach ($tmp['values'] as $v){\n              $res['values'][] = $v;\n            }\n          }\n\n          $new_join[] = $new_item;\n        }\n      }\n\n      $res['join'] = $new_join;\n    }\n\n    if (!empty($res['filters']) && ($tmp = $this->treatConditions($res['filters']))) {\n      $res['filters']      = $tmp['where'];\n      $res['hashed_where'] = $tmp['hashed'];\n      if (is_array($tmp) && isset($tmp['values'])) {\n        foreach ($tmp['values'] as $v){\n          $res['values'][] = $v;\n        }\n      }\n    }\n\n    if (!empty($res['having']) && ($tmp = $this->treatConditions($res['having']))) {\n      $res['having']        = $tmp['where'];\n      $res['hashed_having'] = $tmp['hashed'];\n      foreach ($tmp['values'] as $v){\n        $res['values'][] = $v;\n      }\n    }\n\n    $res['hash'] = $cfg['hash'] ?? $this->makeHash(\n        $res['kind'],\n        $res['ignore'],\n        $res['count'],\n        $res['tables'] ?? [],\n        $res['fields'],\n        $res['hashed_join'],\n        $res['hashed_where'],\n        $res['hashed_having'],\n        $res['group_by'],\n        $res['order'],\n        $res['limit'] ?? 0,\n        $res['start'] ?? 0\n      );\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3189,
                "endLine": 3442,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "_treat_arguments",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Normalizes arguments by making it a uniform array.\n\n<ul><h3>The array will have the following indexes:<\/h3>\n<li>fields<\/li>\n<li>where<\/li>\n<li>filters<\/li>\n<li>order<\/li>\n<li>limit<\/li>\n<li>start<\/li>\n<li>join<\/li>\n<li>group_by<\/li>\n<li>having<\/li>\n<li>values<\/li>\n<li>hashed_join<\/li>\n<li>hashed_where<\/li>\n<li>hashed_having<\/li>\n<li>php<\/li>\n<li>done<\/li>\n<\/ul>\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$cfg"
                        }
                    ],
                    "return": "",
                    "todo": {
                        "tag": "todo",
                        "text": "Check for the tables and column names legality!"
                    }
                },
                "comments": "  \/**\n   * Normalizes arguments by making it a uniform array.\n   *\n   * <ul><h3>The array will have the following indexes:<\/h3>\n   * <li>fields<\/li>\n   * <li>where<\/li>\n   * <li>filters<\/li>\n   * <li>order<\/li>\n   * <li>limit<\/li>\n   * <li>start<\/li>\n   * <li>join<\/li>\n   * <li>group_by<\/li>\n   * <li>having<\/li>\n   * <li>values<\/li>\n   * <li>hashed_join<\/li>\n   * <li>hashed_where<\/li>\n   * <li>hashed_having<\/li>\n   * <li>php<\/li>\n   * <li>done<\/li>\n   * <\/ul>\n   *\n   * @todo Check for the tables and column names legality!\n   *\n   * @param $cfg\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 3189,
            "endLine": 3442,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_treat_arguments",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Normalizes arguments by making it a uniform array.\n\n<ul><h3>The array will have the following indexes:<\/h3>\n<li>fields<\/li>\n<li>where<\/li>\n<li>filters<\/li>\n<li>order<\/li>\n<li>limit<\/li>\n<li>start<\/li>\n<li>join<\/li>\n<li>group_by<\/li>\n<li>having<\/li>\n<li>values<\/li>\n<li>hashed_join<\/li>\n<li>hashed_where<\/li>\n<li>hashed_having<\/li>\n<li>php<\/li>\n<li>done<\/li>\n<\/ul>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$cfg"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Check for the tables and column names legality!"
                }
            },
            "comments": "  \/**\n   * Normalizes arguments by making it a uniform array.\n   *\n   * <ul><h3>The array will have the following indexes:<\/h3>\n   * <li>fields<\/li>\n   * <li>where<\/li>\n   * <li>filters<\/li>\n   * <li>order<\/li>\n   * <li>limit<\/li>\n   * <li>start<\/li>\n   * <li>join<\/li>\n   * <li>group_by<\/li>\n   * <li>having<\/li>\n   * <li>values<\/li>\n   * <li>hashed_join<\/li>\n   * <li>hashed_where<\/li>\n   * <li>hashed_having<\/li>\n   * <li>php<\/li>\n   * <li>done<\/li>\n   * <\/ul>\n   *\n   * @todo Check for the tables and column names legality!\n   *\n   * @param $cfg\n   * @return array\n   *\/"
        },
        "_adapt_filters": {
            "name": "_adapt_filters",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _adapt_filters(&$cfg): void\n  {\n    if (!empty($cfg['filters'])) {\n      [$cfg['filters'], $having] = $this->_adapt_bit($cfg, $cfg['filters']);\n      if (empty($cfg['having']['conditions'])) {\n        $cfg['having'] = $having;\n      }\n      else {\n        $cfg['having'] = [\n          'logic' => 'AND',\n          'conditions' => [\n            $cfg['having'],\n            $having\n          ]\n        ];\n      }\n    }\n  }",
            "parent": {
                "name": "_adapt_filters",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _adapt_filters(&$cfg): void\n  {\n    if (!empty($cfg['filters'])) {\n      [$cfg['filters'], $having] = $this->_adapt_bit($cfg, $cfg['filters']);\n      if (empty($cfg['having']['conditions'])) {\n        $cfg['having'] = $having;\n      }\n      else {\n        $cfg['having'] = [\n          'logic' => 'AND',\n          'conditions' => [\n            $cfg['having'],\n            $having\n          ]\n        ];\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3448,
                "endLine": 3465,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "_adapt_filters",
                "returns": [
                    "void"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": true,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param $cfg\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 3448,
            "endLine": 3465,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_adapt_filters",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $cfg\n   * @return void\n   *\/"
        },
        "_adapt_bit": {
            "name": "_adapt_bit",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _adapt_bit($cfg, $where, array $having = [])\n  {\n    if (X::hasProps($where, ['logic', 'conditions'])) {\n      $new = [\n        'logic' => $where['logic'],\n        'conditions' => []\n      ];\n      foreach ($where['conditions'] as $c) {\n        $is_aggregate = false;\n        if (isset($c['field'])) {\n          $is_aggregate = self::isAggregateFunction($c['field']);\n          if (!$is_aggregate && isset($cfg['fields'][$c['field']])) {\n            $is_aggregate = self::isAggregateFunction($cfg['fields'][$c['field']]);\n          }\n        }\n\n        if (!$is_aggregate && isset($c['exp'])) {\n          $is_aggregate = self::isAggregateFunction($c['exp']);\n          if (!$is_aggregate && isset($cfg['fields'][$c['exp']])) {\n            $is_aggregate = self::isAggregateFunction($cfg['fields'][$c['exp']]);\n          }\n        }\n\n        if (!$is_aggregate) {\n          if (X::hasProps($c, ['conditions', 'logic'])) {\n            $tmp = $this->_adapt_bit($cfg, $c, $having);\n            if (!empty($tmp[0]['conditions'])) {\n              $new['conditions'][] = $tmp[0];\n            }\n\n            if (!empty($tmp[1]['conditions'])) {\n              $having = $tmp[1];\n            }\n\n          }\n          else {\n            $new['conditions'][] = $c;\n          }\n        }\n        else {\n          if (!isset($having['conditions'])) {\n            $having = [\n              'logic' => $where['logic'],\n              'conditions' => []\n            ];\n          }\n\n          if (isset($cfg['aliases'][$c['field']])) {\n            $c['field'] = $cfg['aliases'][$c['field']];\n          }\n          elseif (isset($c['exp'], $cfg['aliases'][$c['exp']])) {\n            $c['exp'] = $cfg['aliases'][$c['exp']];\n          }\n\n          $having['conditions'][] = $c;\n        }\n      }\n\n      return [$new, $having];\n    }\n  }",
            "parent": {
                "name": "_adapt_bit",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _adapt_bit($cfg, $where, array $having = [])\n  {\n    if (X::hasProps($where, ['logic', 'conditions'])) {\n      $new = [\n        'logic' => $where['logic'],\n        'conditions' => []\n      ];\n      foreach ($where['conditions'] as $c) {\n        $is_aggregate = false;\n        if (isset($c['field'])) {\n          $is_aggregate = self::isAggregateFunction($c['field']);\n          if (!$is_aggregate && isset($cfg['fields'][$c['field']])) {\n            $is_aggregate = self::isAggregateFunction($cfg['fields'][$c['field']]);\n          }\n        }\n\n        if (!$is_aggregate && isset($c['exp'])) {\n          $is_aggregate = self::isAggregateFunction($c['exp']);\n          if (!$is_aggregate && isset($cfg['fields'][$c['exp']])) {\n            $is_aggregate = self::isAggregateFunction($cfg['fields'][$c['exp']]);\n          }\n        }\n\n        if (!$is_aggregate) {\n          if (X::hasProps($c, ['conditions', 'logic'])) {\n            $tmp = $this->_adapt_bit($cfg, $c, $having);\n            if (!empty($tmp[0]['conditions'])) {\n              $new['conditions'][] = $tmp[0];\n            }\n\n            if (!empty($tmp[1]['conditions'])) {\n              $having = $tmp[1];\n            }\n\n          }\n          else {\n            $new['conditions'][] = $c;\n          }\n        }\n        else {\n          if (!isset($having['conditions'])) {\n            $having = [\n              'logic' => $where['logic'],\n              'conditions' => []\n            ];\n          }\n\n          if (isset($cfg['aliases'][$c['field']])) {\n            $c['field'] = $cfg['aliases'][$c['field']];\n          }\n          elseif (isset($c['exp'], $cfg['aliases'][$c['exp']])) {\n            $c['exp'] = $cfg['aliases'][$c['exp']];\n          }\n\n          $having['conditions'][] = $c;\n        }\n      }\n\n      return [$new, $having];\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3473,
                "endLine": 3533,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "_adapt_bit",
                "returns": [],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "where",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "having",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$cfg"
                        },
                        {
                            "tag": "param",
                            "type": "$where"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$having"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param $cfg\n   * @param $where\n   * @param array $having\n   * @return array|void\n   *\/"
            },
            "trait": false,
            "startLine": 3473,
            "endLine": 3533,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "_adapt_bit",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "having",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "$where"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$having"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $cfg\n   * @param $where\n   * @param array $having\n   * @return array|void\n   *\/"
        },
        "_set_limit_1": {
            "name": "_set_limit_1",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _set_limit_1(array $args): array\n  {\n    if (is_array($args[0])\n      && (isset($args[0]['tables']) || isset($args[0]['table']))\n    ) {\n      $args[0]['limit'] = 1;\n    }\n    else {\n      $start = $args[4] ?? 0;\n      $num   = count($args);\n      \/\/ Adding fields\n      if ($num === 1) {\n        $args[] = [];\n        $num++;\n      }\n\n      \/\/ Adding where\n      if ($num === 2) {\n        $args[] = [];\n        $num++;\n      }\n\n      \/\/ Adding order\n      if ($num === 3) {\n        $args[] = [];\n        $num++;\n      }\n\n      if ($num === 4) {\n        $args[] = 1;\n        $num++;\n      }\n\n      $args   = array_slice($args, 0, 5);\n      $args[] = $start;\n    }\n\n    return $args;\n  }",
            "parent": {
                "name": "_set_limit_1",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _set_limit_1(array $args): array\n  {\n    if (is_array($args[0])\n      && (isset($args[0]['tables']) || isset($args[0]['table']))\n    ) {\n      $args[0]['limit'] = 1;\n    }\n    else {\n      $start = $args[4] ?? 0;\n      $num   = count($args);\n      \/\/ Adding fields\n      if ($num === 1) {\n        $args[] = [];\n        $num++;\n      }\n\n      \/\/ Adding where\n      if ($num === 2) {\n        $args[] = [];\n        $num++;\n      }\n\n      \/\/ Adding order\n      if ($num === 3) {\n        $args[] = [];\n        $num++;\n      }\n\n      if ($num === 4) {\n        $args[] = 1;\n        $num++;\n      }\n\n      $args   = array_slice($args, 0, 5);\n      $args[] = $start;\n    }\n\n    return $args;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3539,
                "endLine": 3577,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "_set_limit_1",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "args",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$args"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array $args\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 3539,
            "endLine": 3577,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_limit_1",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $args\n   * @return array\n   *\/"
        },
        "addStatement": {
            "name": "addStatement",
            "summary": "Return an object with all the properties of the statement and where it is carried out.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->addStatement('SELECT name FROM table_users'));\n\/\/ (self)"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function addStatement(string $statement, $params): self\n  {\n    $this->last_real_query  = $statement;\n    $this->last_real_params = $params;\n\n    if ($this->_last_enabled) {\n      $this->last_query  = $statement;\n      $this->last_params = $params;\n    }\n\n    return $this;\n  }",
            "parent": {
                "name": "addStatement",
                "summary": "Return an object with all the properties of the statement and where it is carried out.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->addStatement('SELECT name FROM table_users'));\n\/\/ (self)"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function addStatement(string $statement, $params): self\n  {\n    $this->last_real_query  = $statement;\n    $this->last_real_params = $params;\n\n    if ($this->_last_enabled) {\n      $this->last_query  = $statement;\n      $this->last_params = $params;\n    }\n\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3591,
                "endLine": 3602,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "addStatement",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "statement",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "params",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return an object with all the properties of the statement and where it is carried out.\n\n```php\nX::dump($db->addStatement('SELECT name FROM table_users'));\n\/\/ (self)\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$statement"
                        },
                        {
                            "tag": "param",
                            "type": "$params"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return an object with all the properties of the statement and where it is carried out.\n   *\n   * ```php\n   * X::dump($db->addStatement('SELECT name FROM table_users'));\n   * \/\/ (self)\n   * ```\n   *\n   * @param string $statement\n   * @param $params\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 3591,
            "endLine": 3602,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "addStatement",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "statement",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return an object with all the properties of the statement and where it is carried out.\n\n```php\nX::dump($db->addStatement('SELECT name FROM table_users'));\n\/\/ (self)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$statement"
                    },
                    {
                        "tag": "param",
                        "type": "$params"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an object with all the properties of the statement and where it is carried out.\n   *\n   * ```php\n   * X::dump($db->addStatement('SELECT name FROM table_users'));\n   * \/\/ (self)\n   * ```\n   *\n   * @param string $statement\n   * @param $params\n   * @return self\n   *\/"
        },
        "getRealLastParams": {
            "name": "getRealLastParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRealLastParams(): array\n  {\n    return $this->last_real_params;\n  }",
            "parent": {
                "name": "getRealLastParams",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getRealLastParams(): array\n  {\n    return $this->last_real_params;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3604,
                "endLine": 3607,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getRealLastParams",
                "returns": [
                    "array"
                ],
                "arguments": []
            },
            "trait": false,
            "startLine": 3604,
            "endLine": 3607,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRealLastParams",
            "returns": [
                "array"
            ],
            "arguments": []
        },
        "realLast": {
            "name": "realLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function realLast(): ?string\n  {\n    return $this->last_real_query;\n  }",
            "parent": {
                "name": "realLast",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function realLast(): ?string\n  {\n    return $this->last_real_query;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3612,
                "endLine": 3615,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "realLast",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return string|null\n   *\/"
            },
            "trait": false,
            "startLine": 3612,
            "endLine": 3615,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "realLast",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string|null\n   *\/"
        },
        "getLastValues": {
            "name": "getLastValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastValues(): ?array\n  {\n    return $this->last_params ? $this->last_params['values'] : null;\n  }",
            "parent": {
                "name": "getLastValues",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getLastValues(): ?array\n  {\n    return $this->last_params ? $this->last_params['values'] : null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3617,
                "endLine": 3620,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getLastValues",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": []
            },
            "trait": false,
            "startLine": 3617,
            "endLine": 3620,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastValues",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "getLastParams": {
            "name": "getLastParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastParams(): ?array\n  {\n    return $this->last_params;\n  }",
            "parent": {
                "name": "getLastParams",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getLastParams(): ?array\n  {\n    return $this->last_params;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3622,
                "endLine": 3625,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getLastParams",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": []
            },
            "trait": false,
            "startLine": 3622,
            "endLine": 3625,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastParams",
            "returns": [
                null,
                "array"
            ],
            "arguments": []
        },
        "enableLast": {
            "name": "enableLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function enableLast()\n  {\n    $this->_last_enabled = true;\n  }",
            "parent": {
                "name": "enableLast",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function enableLast()\n  {\n    $this->_last_enabled = true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3630,
                "endLine": 3633,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "enableLast",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 3630,
            "endLine": 3633,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "enableLast",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "disableLast": {
            "name": "disableLast",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function disableLast()\n  {\n    $this->_last_enabled = false;\n  }",
            "parent": {
                "name": "disableLast",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function disableLast()\n  {\n    $this->_last_enabled = false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3638,
                "endLine": 3641,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "disableLast",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 3638,
            "endLine": 3641,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "disableLast",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return void\n   *\/"
        },
        "setLastInsertId": {
            "name": "setLastInsertId",
            "summary": "Changes the value of last_insert_id (used by history).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setLastInsertId($id = ''): self\n  {\n    if ($id === '') {\n      if ($this->id_just_inserted) {\n        $id                     = $this->id_just_inserted;\n        $this->id_just_inserted = null;\n      }\n      else{\n        $id = $this->pdo->lastInsertId();\n        if (is_string($id) && Str::isInteger($id) && ((int)$id != PHP_INT_MAX)) {\n          $id = (int)$id;\n        }\n      }\n    }\n    else{\n      $this->id_just_inserted = $id;\n    }\n\n    $this->last_insert_id = $id;\n    return $this;\n  }",
            "parent": {
                "name": "setLastInsertId",
                "summary": "Changes the value of last_insert_id (used by history).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setLastInsertId($id = ''): self\n  {\n    if ($id === '') {\n      if ($this->id_just_inserted) {\n        $id                     = $this->id_just_inserted;\n        $this->id_just_inserted = null;\n      }\n      else{\n        $id = $this->pdo->lastInsertId();\n        if (is_string($id) && Str::isInteger($id) && ((int)$id != PHP_INT_MAX)) {\n          $id = (int)$id;\n        }\n      }\n    }\n    else{\n      $this->id_just_inserted = $id;\n    }\n\n    $this->last_insert_id = $id;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3657,
                "endLine": 3677,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "setLastInsertId",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "id",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Changes the value of last_insert_id (used by history).\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$id"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Changes the value of last_insert_id (used by history).\n   *\n   * @param string $id\n   * @return $this\n   *\/"
            },
            "trait": false,
            "startLine": 3657,
            "endLine": 3677,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "setLastInsertId",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the value of last_insert_id (used by history).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the value of last_insert_id (used by history).\n   *\n   * @param string $id\n   * @return $this\n   *\/"
        },
        "lastId": {
            "name": "lastId",
            "summary": "Return the last inserted ID.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function lastId()\n  {\n    if ($this->last_insert_id) {\n      return Str::isBuid($this->last_insert_id) ? bin2hex($this->last_insert_id) : $this->last_insert_id;\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "lastId",
                "summary": "Return the last inserted ID.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function lastId()\n  {\n    if ($this->last_insert_id) {\n      return Str::isBuid($this->last_insert_id) ? bin2hex($this->last_insert_id) : $this->last_insert_id;\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3684,
                "endLine": 3691,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "lastId",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Return the last inserted ID.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the last inserted ID.\n   *\n   * @return false|mixed|string\n   *\/"
            },
            "trait": false,
            "startLine": 3684,
            "endLine": 3691,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "lastId",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Return the last inserted ID.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the last inserted ID.\n   *\n   * @return false|mixed|string\n   *\/"
        },
        "last": {
            "name": "last",
            "summary": "Return the last query for this connection.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function last(): ?string\n  {\n    return $this->last_query;\n  }",
            "parent": {
                "name": "last",
                "summary": "Return the last query for this connection.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function last(): ?string\n  {\n    return $this->last_query;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3703,
                "endLine": 3706,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "last",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return the last query for this connection.\n\n```php\nX::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the last query for this connection.\n   *\n   * ```php\n   * X::dump($db->last());\n   * \/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n   * ```\n   *\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 3703,
            "endLine": 3706,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "last",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the last query for this connection.\n\n```php\nX::dump($db->last());\n\/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the last query for this connection.\n   *\n   * ```php\n   * X::dump($db->last());\n   * \/\/ (string) INSERT INTO `db_example.table_user` (`name`) VALUES (?)\n   * ```\n   *\n   * @return string\n   *\/"
        },
        "countQueries": {
            "name": "countQueries",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countQueries(): int\n  {\n    return \\count($this->queries);\n  }",
            "parent": {
                "name": "countQueries",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function countQueries(): int\n  {\n    return \\count($this->queries);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3711,
                "endLine": 3714,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "countQueries",
                "returns": [
                    "int"
                ],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return int\n   *\/"
            },
            "trait": false,
            "startLine": 3711,
            "endLine": 3714,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "countQueries",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return int\n   *\/"
        },
        "flush": {
            "name": "flush",
            "summary": "Deletes all the queries recorded and returns their (ex) number.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function flush(): int\n  {\n    $num                = \\count($this->queries);\n    $this->queries      = [];\n    $this->list_queries = [];\n    return $num;\n  }",
            "parent": {
                "name": "flush",
                "summary": "Deletes all the queries recorded and returns their (ex) number.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function flush(): int\n  {\n    $num                = \\count($this->queries);\n    $this->queries      = [];\n    $this->list_queries = [];\n    return $num;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3721,
                "endLine": 3727,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "flush",
                "returns": [
                    "int"
                ],
                "arguments": [],
                "doc": {
                    "description": "Deletes all the queries recorded and returns their (ex) number.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/"
            },
            "trait": false,
            "startLine": 3721,
            "endLine": 3727,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "flush",
            "returns": [
                "int"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the queries recorded and returns their (ex) number.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the queries recorded and returns their (ex) number.\n   *\n   * @return int\n   *\/"
        },
        "makeHash": {
            "name": "makeHash",
            "summary": "Makes a string that will be the id of the request.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function makeHash(): string\n  {\n    $args = func_get_args();\n    if ((\\count($args) === 1) && is_array($args[0])) {\n      $args = $args[0];\n    }\n\n    array_unshift($args, $this->getCurrent());\n    $st = '';\n    foreach ($args as $a){\n      $st .= is_array($a) ? serialize($a) : '--'.$a.'--';\n    }\n\n    return $this->hash_contour.md5($st).$this->hash_contour;\n  }",
            "parent": {
                "name": "makeHash",
                "summary": "Makes a string that will be the id of the request.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function makeHash(): string\n  {\n    $args = func_get_args();\n    if ((\\count($args) === 1) && is_array($args[0])) {\n      $args = $args[0];\n    }\n\n    array_unshift($args, $this->getCurrent());\n    $st = '';\n    foreach ($args as $a){\n      $st .= is_array($a) ? serialize($a) : '--'.$a.'--';\n    }\n\n    return $this->hash_contour.md5($st).$this->hash_contour;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3743,
                "endLine": 3757,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "makeHash",
                "returns": [
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Makes a string that will be the id of the request.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Makes a string that will be the id of the request.\n   *\n   * @return string\n   *\n   *\/"
            },
            "trait": false,
            "startLine": 3743,
            "endLine": 3757,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeHash",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Makes a string that will be the id of the request.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Makes a string that will be the id of the request.\n   *\n   * @return string\n   *\n   *\/"
        },
        "setHash": {
            "name": "setHash",
            "summary": "Makes and sets the hash.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setHash()\n  {\n    $this->hash = $this->makeHash(...func_get_args());\n  }",
            "parent": {
                "name": "setHash",
                "summary": "Makes and sets the hash.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setHash()\n  {\n    $this->hash = $this->makeHash(...func_get_args());\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3764,
                "endLine": 3767,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "setHash",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Makes and sets the hash.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Makes and sets the hash.\n   *\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 3764,
            "endLine": 3767,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setHash",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Makes and sets the hash.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Makes and sets the hash.\n   *\n   * @return void\n   *\/"
        },
        "getHash": {
            "name": "getHash",
            "summary": "Gets the created hash.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHash(): string\n  {\n    return $this->hash;\n  }",
            "parent": {
                "name": "getHash",
                "summary": "Gets the created hash.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getHash(): string\n  {\n    return $this->hash;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3778,
                "endLine": 3781,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getHash",
                "returns": [
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Gets the created hash.\n\n```php\nX::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the created hash.\n   *\n   * ```php\n   * X::dump($db->getHash());\n   * \/\/ (string) 3819056v431b210daf45f9b5dc2\n   * ```\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 3778,
            "endLine": 3781,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHash",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the created hash.\n\n```php\nX::dump($db->getHash());\n\/\/ (string) 3819056v431b210daf45f9b5dc2\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the created hash.\n   *\n   * ```php\n   * X::dump($db->getHash());\n   * \/\/ (string) 3819056v431b210daf45f9b5dc2\n   * ```\n   * @return string\n   *\/"
        },
        "startFancyStuff": {
            "name": "startFancyStuff",
            "summary": "Starts fancy stuff.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->startFancyStuff();\n\/\/ (self)"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function startFancyStuff(): self\n  {\n    $this->pdo->setAttribute(PDO::ATTR_STATEMENT_CLASS, [\\bbn\\Db\\Query::class, [$this]]);\n    $this->_fancy = 1;\n\n    return $this;\n  }",
            "parent": {
                "name": "startFancyStuff",
                "summary": "Starts fancy stuff.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$db->startFancyStuff();\n\/\/ (self)"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function startFancyStuff(): self\n  {\n    $this->pdo->setAttribute(PDO::ATTR_STATEMENT_CLASS, [\\bbn\\Db\\Query::class, [$this]]);\n    $this->_fancy = 1;\n\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3792,
                "endLine": 3798,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "startFancyStuff",
                "returns": [
                    "self"
                ],
                "arguments": [],
                "doc": {
                    "description": "Starts fancy stuff.\n\n```php\n$db->startFancyStuff();\n\/\/ (self)\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Starts fancy stuff.\n   *\n   * ```php\n   * $db->startFancyStuff();\n   * \/\/ (self)\n   * ```\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 3792,
            "endLine": 3798,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "startFancyStuff",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Starts fancy stuff.\n\n```php\n$db->startFancyStuff();\n\/\/ (self)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Starts fancy stuff.\n   *\n   * ```php\n   * $db->startFancyStuff();\n   * \/\/ (self)\n   * ```\n   * @return self\n   *\/"
        },
        "stopFancyStuff": {
            "name": "stopFancyStuff",
            "summary": "Stops fancy stuff.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->stopFancyStuff();\n\/\/ (self)"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function stopFancyStuff(): self\n  {\n    $this->pdo->setAttribute(PDO::ATTR_STATEMENT_CLASS, [PDOStatement::class]);\n    $this->_fancy = false;\n\n    return $this;\n  }",
            "parent": {
                "name": "stopFancyStuff",
                "summary": "Stops fancy stuff.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$db->stopFancyStuff();\n\/\/ (self)"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function stopFancyStuff(): self\n  {\n    $this->pdo->setAttribute(PDO::ATTR_STATEMENT_CLASS, [PDOStatement::class]);\n    $this->_fancy = false;\n\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3810,
                "endLine": 3816,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "stopFancyStuff",
                "returns": [
                    "self"
                ],
                "arguments": [],
                "doc": {
                    "description": "Stops fancy stuff.\n\n```php\n $db->stopFancyStuff();\n\/\/ (self)\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Stops fancy stuff.\n   *\n   * ```php\n   *  $db->stopFancyStuff();\n   * \/\/ (self)\n   * ```\n   *\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 3810,
            "endLine": 3816,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "stopFancyStuff",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Stops fancy stuff.\n\n```php\n $db->stopFancyStuff();\n\/\/ (self)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Stops fancy stuff.\n   *\n   * ```php\n   *  $db->stopFancyStuff();\n   * \/\/ (self)\n   * ```\n   *\n   * @return self\n   *\/"
        },
        "_set_start": {
            "name": "_set_start",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _set_start(array $args, int $start): array\n  {\n    if (is_array($args[0])\n      && (isset($args[0]['tables']) || isset($args[0]['table']))\n    ) {\n      $args[0]['start'] = $start;\n    }\n    else {\n      if (isset($args[5])) {\n        $args[5] = $start;\n      }\n      else{\n        while (count($args) < 6){\n          switch (count($args)){\n            case 1:\n            case 2:\n            case 3:\n              $args[] = [];\n              break;\n            case 4:\n              $args[] = 1;\n              break;\n            case 5:\n              $args[] = $start;\n              break;\n          }\n        }\n      }\n    }\n\n    return $args;\n  }",
            "parent": {
                "name": "_set_start",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _set_start(array $args, int $start): array\n  {\n    if (is_array($args[0])\n      && (isset($args[0]['tables']) || isset($args[0]['table']))\n    ) {\n      $args[0]['start'] = $start;\n    }\n    else {\n      if (isset($args[5])) {\n        $args[5] = $start;\n      }\n      else{\n        while (count($args) < 6){\n          switch (count($args)){\n            case 1:\n            case 2:\n            case 3:\n              $args[] = [];\n              break;\n            case 4:\n              $args[] = 1;\n              break;\n            case 5:\n              $args[] = $start;\n              break;\n          }\n        }\n      }\n    }\n\n    return $args;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3823,
                "endLine": 3854,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "_set_start",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "args",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 1,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$args"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array $args\n   * @param int $start\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 3823,
            "endLine": 3854,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_set_start",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "args",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$args"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $args\n   * @param int $start\n   * @return array\n   *\/"
        },
        "retrieveQuery": {
            "name": "retrieveQuery",
            "summary": "Retrieves a query array based on its hash.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function retrieveQuery(string $hash): ?array\n  {\n    if (isset($this->queries[$hash])) {\n      if (is_string($this->queries[$hash])) {\n        $hash = $this->queries[$hash];\n      }\n\n      return $this->queries[$hash];\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "retrieveQuery",
                "summary": "Retrieves a query array based on its hash.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function retrieveQuery(string $hash): ?array\n  {\n    if (isset($this->queries[$hash])) {\n      if (is_string($this->queries[$hash])) {\n        $hash = $this->queries[$hash];\n      }\n\n      return $this->queries[$hash];\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3862,
                "endLine": 3873,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "retrieveQuery",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "hash",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Retrieves a query array based on its hash.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$hash"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Retrieves a query array based on its hash.\n   *\n   * @param string $hash\n   * @return array|null\n   *\/"
            },
            "trait": false,
            "startLine": 3862,
            "endLine": 3873,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieveQuery",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "hash",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a query array based on its hash.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$hash"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a query array based on its hash.\n   *\n   * @param string $hash\n   * @return array|null\n   *\/"
        },
        "extractFields": {
            "name": "extractFields",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function extractFields(array $cfg, array $conditions, ?array &$res = null)\n  {\n    if (null === $res) {\n      $res = [];\n    }\n\n    if (isset($conditions['conditions'])) {\n      $conditions = $conditions['conditions'];\n    }\n\n    foreach ($conditions as $c) {\n      if (isset($c['conditions'])) {\n        $this->extractFields($cfg, $c['conditions'], $res);\n      }\n      else {\n        if (isset($c['field'], $cfg['available_fields'][$c['field']])) {\n          $res[] = $cfg['available_fields'][$c['field']] ? $this->colFullName($c['field'], $cfg['available_fields'][$c['field']]) : $c['field'];\n        }\n\n        if (isset($c['exp'], $cfg['available_fields'][$c['exp']])) {\n          $res[] = $cfg['available_fields'][$c['exp']] ? $this->colFullName($c['exp'], $cfg['available_fields'][$c['exp']]) : $c['exp'];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "extractFields",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function extractFields(array $cfg, array $conditions, ?array &$res = null)\n  {\n    if (null === $res) {\n      $res = [];\n    }\n\n    if (isset($conditions['conditions'])) {\n      $conditions = $conditions['conditions'];\n    }\n\n    foreach ($conditions as $c) {\n      if (isset($c['conditions'])) {\n        $this->extractFields($cfg, $c['conditions'], $res);\n      }\n      else {\n        if (isset($c['field'], $cfg['available_fields'][$c['field']])) {\n          $res[] = $cfg['available_fields'][$c['field']] ? $this->colFullName($c['field'], $cfg['available_fields'][$c['field']]) : $c['field'];\n        }\n\n        if (isset($c['exp'], $cfg['available_fields'][$c['exp']])) {\n          $res[] = $cfg['available_fields'][$c['exp']] ? $this->colFullName($c['exp'], $cfg['available_fields'][$c['exp']]) : $c['exp'];\n        }\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3881,
                "endLine": 3907,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "extractFields",
                "returns": [],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "conditions",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "res",
                        "position": 2,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": true,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$conditions"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$res"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array $cfg\n   * @param array $conditions\n   * @param array|null $res\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 3881,
            "endLine": 3907,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "extractFields",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "conditions",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "res",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$conditions"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$res"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $cfg\n   * @param array $conditions\n   * @param array|null $res\n   * @return array\n   *\/"
        },
        "filterFilters": {
            "name": "filterFilters",
            "summary": "Retrieve an array of specific filters among the existing ones.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function filterFilters(array $cfg, $field, $operator = null): ?array\n  {\n    if (isset($cfg['filters'])) {\n      $f = function ($cond, &$res = []) use (&$f, $field, $operator) {\n        foreach ($cond as $c){\n          if (isset($c['conditions'])) {\n            $f($c['conditions'], $res);\n          }\n          elseif (($c['field'] === $field) && (!$operator || ($operator === $c['operator']))) {\n            $res[] = $c;\n          }\n        }\n\n        return $res;\n      };\n      return isset($cfg['filters']['conditions']) ? $f($cfg['filters']['conditions']) : [];\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "filterFilters",
                "summary": "Retrieve an array of specific filters among the existing ones.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function filterFilters(array $cfg, $field, $operator = null): ?array\n  {\n    if (isset($cfg['filters'])) {\n      $f = function ($cond, &$res = []) use (&$f, $field, $operator) {\n        foreach ($cond as $c){\n          if (isset($c['conditions'])) {\n            $f($c['conditions'], $res);\n          }\n          elseif (($c['field'] === $field) && (!$operator || ($operator === $c['operator']))) {\n            $res[] = $c;\n          }\n        }\n\n        return $res;\n      };\n      return isset($cfg['filters']['conditions']) ? $f($cfg['filters']['conditions']) : [];\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3917,
                "endLine": 3936,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "filterFilters",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "field",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "operator",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Retrieve an array of specific filters among the existing ones.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        },
                        {
                            "tag": "param",
                            "type": "$field"
                        },
                        {
                            "tag": "param",
                            "type": "null",
                            "name": "$operator"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Retrieve an array of specific filters among the existing ones.\n   *\n   * @param array $cfg\n   * @param $field\n   * @param null  $operator\n   * @return array|null\n   *\/"
            },
            "trait": false,
            "startLine": 3917,
            "endLine": 3936,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "filterFilters",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "operator",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieve an array of specific filters among the existing ones.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "$field"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$operator"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieve an array of specific filters among the existing ones.\n   *\n   * @param array $cfg\n   * @param $field\n   * @param null  $operator\n   * @return array|null\n   *\/"
        },
        "getOne": {
            "name": "getOne",
            "summary": "Executes the given query with given vars, and extracts the first cell's result.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOne()\n  {\n    \/** @var \\bbn\\Db\\Query $r *\/\n    if ($r = $this->query(...func_get_args())) {\n      return $r->fetchColumn(0);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "getOne",
                "summary": "Executes the given query with given vars, and extracts the first cell's result.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getOne()\n  {\n    \/** @var \\bbn\\Db\\Query $r *\/\n    if ($r = $this->query(...func_get_args())) {\n      return $r->fetchColumn(0);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3958,
                "endLine": 3966,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getOne",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Executes the given query with given vars, and extracts the first cell's result.\n\n```php\nX::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "description": "query"
                        },
                        {
                            "tag": "param",
                            "type": "mixed",
                            "description": "values"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * ```php\n   * X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n   * \/\/ (string) John\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return mixed\n   *\/"
            },
            "trait": false,
            "startLine": 3958,
            "endLine": 3966,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getOne",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Executes the given query with given vars, and extracts the first cell's result.\n\n```php\nX::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n\/\/ (string) John\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Executes the given query with given vars, and extracts the first cell's result.\n   *\n   * ```php\n   * X::dump($db->getOne(\"SELECT name FROM table_users WHERE id>?\", 138));\n   * \/\/ (string) John\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return mixed\n   *\/"
        },
        "getKeyVal": {
            "name": "getKeyVal",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "The value will be an array if the request has more than two fields."
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getKeyVal(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      if ($rows = $r->getRows()) {\n        return X::indexByFirstVal($rows);\n      }\n\n      return [];\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getKeyVal",
                "summary": "Return an array indexed on the first field of the request.",
                "description": "The value will be an array if the request has more than two fields.",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "The value will be an array if the request has more than two fields."
                    },
                    {
                        "type": "code",
                        "content": "X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getKeyVal(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      if ($rows = $r->getRows()) {\n        return X::indexByFirstVal($rows);\n      }\n\n      return [];\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 3999,
                "endLine": 4011,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getKeyVal",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\n\n```php\nX::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "description": "query"
                        },
                        {
                            "tag": "param",
                            "type": "mixed",
                            "description": "values"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * ```php\n   * X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n   * \/*\n   * (array)[\n   *      \"John\" => 1,\n   *      \"Michael\" => 1,\n   *      \"Barbara\" => 1\n   *        ]\n   *\n   * X::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n   * \/*\n   * (array)[\n   *         \"John\" => [\n   *          \"surname\" => \"Brown\",\n   *          \"id\" => 3\n   *         ],\n   *         \"Michael\" => [\n   *          \"surname\" => \"Smith\",\n   *          \"id\" => 4\n   *         ]\n   *        ]\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return null|array\n   *\/"
            },
            "trait": false,
            "startLine": 3999,
            "endLine": 4011,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getKeyVal",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\n\n```php\nX::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n\/*\n(array)[\n     \"John\" => 1,\n     \"Michael\" => 1,\n     \"Barbara\" => 1\n       ]\n\nX::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n\/*\n(array)[\n        \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n        ],\n        \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n        ]\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   *\n   * ```php\n   * X::dump($db->getKeyVal(\"SELECT name,id_group FROM table_users\"));\n   * \/*\n   * (array)[\n   *      \"John\" => 1,\n   *      \"Michael\" => 1,\n   *      \"Barbara\" => 1\n   *        ]\n   *\n   * X::dump($db->getKeyVal(\"SELECT name, surname, id FROM table_users WHERE id > 2 \"));\n   * \/*\n   * (array)[\n   *         \"John\" => [\n   *          \"surname\" => \"Brown\",\n   *          \"id\" => 3\n   *         ],\n   *         \"Michael\" => [\n   *          \"surname\" => \"Smith\",\n   *          \"id\" => 4\n   *         ]\n   *        ]\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return null|array\n   *\/"
        },
        "getColArray": {
            "name": "getColArray",
            "summary": "Return an array with the values of single field resulting from the query.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColArray(): array\n  {\n    if ($r = $this->getByColumns(...func_get_args())) {\n      return array_values(current($r));\n    }\n\n    return [];\n  }",
            "parent": {
                "name": "getColArray",
                "summary": "Return an array with the values of single field resulting from the query.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getColArray(): array\n  {\n    if ($r = $this->getByColumns(...func_get_args())) {\n      return array_values(current($r));\n    }\n\n    return [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4026,
                "endLine": 4033,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getColArray",
                "returns": [
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return an array with the values of single field resulting from the query.\n\n```php\nX::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "description": "query"
                        },
                        {
                            "tag": "param",
                            "type": "mixed",
                            "description": "values"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * ```php\n   * X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n   * \/*\n   * (array)[1, 2, 3, 4]\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 4026,
            "endLine": 4033,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getColArray",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array with the values of single field resulting from the query.\n\n```php\nX::dump($db->getColArray(\"SELECT id FROM table_users\"));\n\/*\n(array)[1, 2, 3, 4]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "description": "values"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array with the values of single field resulting from the query.\n   *\n   * ```php\n   * X::dump($db->getColArray(\"SELECT id FROM table_users\"));\n   * \/*\n   * (array)[1, 2, 3, 4]\n   * ```\n   *\n   * @param string query\n   * @param mixed values\n   * @return array\n   *\/"
        },
        "select": {
            "name": "select",
            "summary": "Returns the first row resulting from the query as an object.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function select($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?\\stdClass\n  {\n    $args = $this->_add_kind($this->_set_limit_1(func_get_args()));\n    if ($r = $this->_exec(...$args)) {\n      if (!is_object($r)) {\n        $this->log([$args, $this->processCfg($args)]);\n      }\n      else{\n        return $r->getObject();\n      }\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "select",
                "summary": "Returns the first row resulting from the query as an object.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function select($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?\\stdClass\n  {\n    $args = $this->_add_kind($this->_set_limit_1(func_get_args()));\n    if ($r = $this->_exec(...$args)) {\n      if (!is_object($r)) {\n        $this->log([$args, $this->processCfg($args)]);\n      }\n      else{\n        return $r->getObject();\n      }\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4063,
                "endLine": 4076,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 1,
                "shortName": "select",
                "returns": [
                    null,
                    "stdClass"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The fields' name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "name": "start",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "doc": {
                    "description": "Returns the first row resulting from the query as an object.\n\n```php\nX::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$fields",
                            "description": "The fields' name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition, default: false"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start",
                            "description": "The \"start\" condition, default: 0"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Returns the first row resulting from the query as an object.\n   *\n   * ```php\n   * X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n   * \/*\n   * (object){\n   *   \"name\": \"John\",\n   *   \"surname\": \"Smith\",\n   * }\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $start The \"start\" condition, default: 0\n   * @return null|\\stdClass\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4063,
            "endLine": 4076,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "select",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Returns the first row resulting from the query as an object.\n\n```php\nX::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n\/*\n(object){\n  \"name\": \"John\",\n  \"surname\": \"Smith\",\n}\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns the first row resulting from the query as an object.\n   *\n   * ```php\n   * X::dump($db->select('table_users', ['name', 'surname'], [['id','>','2']]));\n   * \/*\n   * (object){\n   *   \"name\": \"John\",\n   *   \"surname\": \"Smith\",\n   * }\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $start The \"start\" condition, default: 0\n   * @return null|\\stdClass\n   * @throws Exception\n   *\/"
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Return table's rows resulting from the query as an array of objects.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function selectAll($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind(func_get_args()))) {\n      return $r->getObjects();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "selectAll",
                "summary": "Return table's rows resulting from the query as an array of objects.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function selectAll($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind(func_get_args()))) {\n      return $r->getObjects();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4107,
                "endLine": 4114,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "selectAll",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The fields' name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "doc": {
                    "description": "Return table's rows resulting from the query as an array of objects.\n\n```php\nX::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$fields",
                            "description": "The fields' name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition, default: false"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$limit",
                            "description": "The \"limit\" condition, default: 0"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start",
                            "description": "The \"start\" condition, default: 0"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return table's rows resulting from the query as an array of objects.\n   *\n   * ```php\n   * X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array)[\n   *        Object stdClass: df {\n   *          \"id\" => 2,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\",\n   *          },\n   *        Object stdClass: df {\n   *          \"id\" => 3,\n   *          \"name\" => \"Thomas\",\n   *          \"surname\" => \"Jones\",\n   *         }\n   *        ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n   * @return null|array\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4107,
            "endLine": 4114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "selectAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return table's rows resulting from the query as an array of objects.\n\n```php\nX::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n       Object stdClass: df {\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         },\n       Object stdClass: df {\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n        }\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return table's rows resulting from the query as an array of objects.\n   *\n   * ```php\n   * X::dump($db->selectAll(\"tab_users\", [\"id\", \"name\", \"surname\"],[[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array)[\n   *        Object stdClass: df {\n   *          \"id\" => 2,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\",\n   *          },\n   *        Object stdClass: df {\n   *          \"id\" => 3,\n   *          \"name\" => \"Thomas\",\n   *          \"surname\" => \"Jones\",\n   *         }\n   *        ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "iselect": {
            "name": "iselect",
            "summary": "Return the first row resulting from the query as a numeric array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function iselect($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(func_get_args())))) {\n      return $r->getIrow();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "iselect",
                "summary": "Return the first row resulting from the query as a numeric array.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function iselect($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(func_get_args())))) {\n      return $r->getIrow();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4137,
                "endLine": 4144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 1,
                "shortName": "iselect",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The fields' name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "name": "start",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "doc": {
                    "description": "Return the first row resulting from the query as a numeric array.\n\n```php\nX::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$fields",
                            "description": "The fields' name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition, default: false"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start",
                            "description": "The \"start\" condition, default: 0"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return the first row resulting from the query as a numeric array.\n   *\n   * ```php\n   * X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array)[\n   *          4,\n   *         \"Jack\",\n   *          \"Stewart\"\n   *        ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $start The \"start\" condition, default: 0\n   * @return array|null\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4137,
            "endLine": 4144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "iselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return the first row resulting from the query as a numeric array.\n\n```php\nX::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array)[\n         4,\n        \"Jack\",\n         \"Stewart\"\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as a numeric array.\n   *\n   * ```php\n   * X::dump($db->iselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array)[\n   *          4,\n   *         \"Jack\",\n   *          \"Stewart\"\n   *        ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $start The \"start\" condition, default: 0\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "iselectAll": {
            "name": "iselectAll",
            "summary": "Return the searched rows as an array of numeric arrays.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function iselectAll($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind(func_get_args()))) {\n      return $r->getIrows();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "iselectAll",
                "summary": "Return the searched rows as an array of numeric arrays.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function iselectAll($table, $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind(func_get_args()))) {\n      return $r->getIrows();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4176,
                "endLine": 4183,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "iselectAll",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The fields's name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "doc": {
                    "description": "Return the searched rows as an array of numeric arrays.\n\n```php\nX::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$fields",
                            "description": "The fields's name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition, default: false"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$limit",
                            "description": "The \"limit\" condition, default: 0"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start",
                            "description": "The \"start\" condition, default: 0"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return the searched rows as an array of numeric arrays.\n   *\n   * ```php\n   * X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n   * \/*\n   * (array)[\n   *          [\n   *            2,\n   *            \"John\",\n   *            \"Smith\",\n   *          ],\n   *          [\n   *            3,\n   *            \"Thomas\",\n   *            \"Jones\",\n   *          ]\n   *        ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n   * @return array|null\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4176,
            "endLine": 4183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "iselectAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return the searched rows as an array of numeric arrays.\n\n```php\nX::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n\/*\n(array)[\n         [\n           2,\n           \"John\",\n           \"Smith\",\n         ],\n         [\n           3,\n           \"Thomas\",\n           \"Jones\",\n         ]\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return the searched rows as an array of numeric arrays.\n   *\n   * ```php\n   * X::dump($db->iselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]],[\"id\" => \"ASC\"],2));\n   * \/*\n   * (array)[\n   *          [\n   *            2,\n   *            \"John\",\n   *            \"Smith\",\n   *          ],\n   *          [\n   *            3,\n   *            \"Thomas\",\n   *            \"Jones\",\n   *          ]\n   *        ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "countUnion": {
            "name": "countUnion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countUnion(array $union, array $where = []): ?int\n  {\n    if (!X::isAssoc($union)) {\n      $union = [\n        'kind' => 'SELECT',\n        'union' => $union,\n        'where' => $where,\n        'fields' => ['COUNT(*)']\n      ];\n    }\n\n    if (!empty($union['union']) && is_object($r = $this->_exec($union))) {\n      $a = $r->getIrow();\n      return $a ? (int)$a[0] : null;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "countUnion",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function countUnion(array $union, array $where = []): ?int\n  {\n    if (!X::isAssoc($union)) {\n      $union = [\n        'kind' => 'SELECT',\n        'union' => $union,\n        'where' => $where,\n        'fields' => ['COUNT(*)']\n      ];\n    }\n\n    if (!empty($union['union']) && is_object($r = $this->_exec($union))) {\n      $a = $r->getIrow();\n      return $a ? (int)$a[0] : null;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4185,
                "endLine": 4202,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "countUnion",
                "returns": [
                    null,
                    "int"
                ],
                "arguments": [
                    {
                        "name": "union",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "where",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 4185,
            "endLine": 4202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "countUnion",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "selectUnion": {
            "name": "selectUnion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function selectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    if ($r = $this->_exec($this->adaptUnionParams($union, $fields, $where, $order, $limit, $start))) {\n      return $r->getObjects();\n    }\n\n    return [];\n  }",
            "parent": {
                "name": "selectUnion",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function selectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    if ($r = $this->_exec($this->adaptUnionParams($union, $fields, $where, $order, $limit, $start))) {\n      return $r->getObjects();\n    }\n\n    return [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4204,
                "endLine": 4211,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "selectUnion",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "union",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 4204,
            "endLine": 4211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "selectUnion",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "iselectUnion": {
            "name": "iselectUnion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function iselectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    if ($r = $this->_exec($this->adaptUnionParams($union, $fields, $where, $order, $limit, $start))) {\n      return $r->getIrows();\n    }\n\n    return [];\n  }",
            "parent": {
                "name": "iselectUnion",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function iselectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    if ($r = $this->_exec($this->adaptUnionParams($union, $fields, $where, $order, $limit, $start))) {\n      return $r->getIrows();\n    }\n\n    return [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4213,
                "endLine": 4220,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "iselectUnion",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "union",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 4213,
            "endLine": 4220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "iselectUnion",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "rselectUnion": {
            "name": "rselectUnion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rselectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    if ($r = $this->_exec($this->adaptUnionParams($union, $fields, $where, $order, $limit, $start))) {\n      return $r->getRows();\n    }\n\n    return [];\n  }",
            "parent": {
                "name": "rselectUnion",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function rselectUnion(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    if ($r = $this->_exec($this->adaptUnionParams($union, $fields, $where, $order, $limit, $start))) {\n      return $r->getRows();\n    }\n\n    return [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4222,
                "endLine": 4229,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "rselectUnion",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "union",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 4222,
            "endLine": 4229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "rselectUnion",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "adaptUnionParams": {
            "name": "adaptUnionParams",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function adaptUnionParams(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if (!X::isAssoc($union)) {\n      $union = [\n        'kind' => 'SELECT',\n        'union' => $union,\n        'fields' => $fields,\n        'where' => $where,\n        'order' => $order,\n        'limit' => $limit,\n        'start' => $start\n      ];\n    }\n\n    if (!empty($union['union'])) {\n      return $union;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "adaptUnionParams",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function adaptUnionParams(array $union, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0)\n  {\n    if (!X::isAssoc($union)) {\n      $union = [\n        'kind' => 'SELECT',\n        'union' => $union,\n        'fields' => $fields,\n        'where' => $where,\n        'order' => $order,\n        'limit' => $limit,\n        'start' => $start\n      ];\n    }\n\n    if (!empty($union['union'])) {\n      return $union;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4231,
                "endLine": 4250,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "adaptUnionParams",
                "returns": [],
                "arguments": [
                    {
                        "name": "union",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 4231,
            "endLine": 4250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "adaptUnionParams",
            "returns": [],
            "arguments": [
                {
                    "name": "union",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "rselect": {
            "name": "rselect",
            "summary": "Return the first row resulting from the query as an indexed array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rselect($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(func_get_args())))) {\n      return $r->getRow();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "rselect",
                "summary": "Return the first row resulting from the query as an indexed array.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function rselect($table, $fields = [], array $where = [], array $order = [], int $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(func_get_args())))) {\n      return $r->getRow();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4274,
                "endLine": 4281,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 1,
                "shortName": "rselect",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The fields' name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "name": "start",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "doc": {
                    "description": "Return the first row resulting from the query as an indexed array.\n\n```php\nX::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$fields",
                            "description": "The fields' name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition, default: false"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start",
                            "description": "The \"start\" condition, default: 0"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return the first row resulting from the query as an indexed array.\n   *\n   * ```php\n   * X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array) [\n   *          \"id\" => 4,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\"\n   *         ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $start The \"start\" condition, default: 0\n   * @return null|array\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4274,
            "endLine": 4281,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "rselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return the first row resulting from the query as an indexed array.\n\n```php\nX::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         \"id\" => 4,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\"\n        ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as an indexed array.\n   *\n   * ```php\n   * X::dump($db->rselect(\"tab_users\", [\"id\", \"name\", \"surname\"], [\"id\", \">\", 1], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array) [\n   *          \"id\" => 4,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\"\n   *         ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $start The \"start\" condition, default: 0\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "rselectAll": {
            "name": "rselectAll",
            "summary": "Return table's rows as an array of indexed arrays.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rselectAll($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind(func_get_args()))) {\n      return $r->getRows();\n    }\n\n    return [];\n  }",
            "parent": {
                "name": "rselectAll",
                "summary": "Return table's rows as an array of indexed arrays.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function rselectAll($table, $fields = [], array $where = [], array $order = [], $limit = 0, $start = 0): ?array\n  {\n    if ($r = $this->_exec(...$this->_add_kind(func_get_args()))) {\n      return $r->getRows();\n    }\n\n    return [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4312,
                "endLine": 4319,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "rselectAll",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The fields' name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "condition, default: false"
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "doc": {
                    "description": "Return table's rows as an array of indexed arrays.\n\n```php\nX::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$fields",
                            "description": "The fields' name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "condition, default: false"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$limit",
                            "description": "The \"limit\" condition, default: 0"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start",
                            "description": "The \"start\" condition, default: 0"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return table's rows as an array of indexed arrays.\n   *\n   * ```php\n   * X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array) [\n   *          [\n   *          \"id\" => 2,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\",\n   *          ],\n   *          [\n   *          \"id\" => 3,\n   *          \"name\" => \"Thomas\",\n   *          \"surname\" => \"Jones\",\n   *          ]\n   *        ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n   * @return null|array\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4312,
            "endLine": 4319,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "rselectAll",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields' name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "condition, default: false"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"limit\" condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return table's rows as an array of indexed arrays.\n\n```php\nX::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n\/*\n(array) [\n         [\n         \"id\" => 2,\n         \"name\" => \"John\",\n         \"surname\" => \"Smith\",\n         ],\n         [\n         \"id\" => 3,\n         \"name\" => \"Thomas\",\n         \"surname\" => \"Jones\",\n         ]\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields' name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The \"limit\" condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return table's rows as an array of indexed arrays.\n   *\n   * ```php\n   * X::dump($db->rselectAll(\"tab_users\", [\"id\", \"name\", \"surname\"], [[\"id\", \">\", 1]], [\"id\" => \"ASC\"], 2));\n   * \/*\n   * (array) [\n   *          [\n   *          \"id\" => 2,\n   *          \"name\" => \"John\",\n   *          \"surname\" => \"Smith\",\n   *          ],\n   *          [\n   *          \"id\" => 3,\n   *          \"name\" => \"Thomas\",\n   *          \"surname\" => \"Jones\",\n   *          ]\n   *        ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields' name\n   * @param array $where The \"where\" condition\n   * @param array $order condition, default: false\n   * @param int $limit The \"limit\" condition, default: 0\n   * @param int $start The \"start\" condition, default: 0\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "selectOne": {
            "name": "selectOne",
            "summary": "Return a single value",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function selectOne($table, $field = null, array $where = [], array $order = [], int $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(func_get_args())))) {\n      if (method_exists($r, 'getIrow')) {\n        return ($a = $r->getIrow()) ? $a[0] : false;\n      }\n\n      $this->log('ERROR IN SELECT_ONE', $this->last_cfg, $r, $this->_add_kind($this->_set_limit_1(func_get_args())));\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "selectOne",
                "summary": "Return a single value",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function selectOne($table, $field = null, array $where = [], array $order = [], int $start = 0)\n  {\n    if ($r = $this->_exec(...$this->_add_kind($this->_set_limit_1(func_get_args())))) {\n      if (method_exists($r, 'getIrow')) {\n        return ($a = $r->getIrow()) ? $a[0] : false;\n      }\n\n      $this->log('ERROR IN SELECT_ONE', $this->last_cfg, $r, $this->_add_kind($this->_set_limit_1(func_get_args())));\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4338,
                "endLine": 4349,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 1,
                "shortName": "selectOne",
                "returns": [],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "field",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The field's name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "name": "start",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "doc": {
                    "description": "Return a single value\n\n```php\nX::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "null",
                            "name": "$field",
                            "description": "The field's name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition, default: false"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start",
                            "description": "The \"start\" condition, default: 0"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return a single value\n   *\n   * ```php\n   * X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n   *  (string) 'Michael'\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $start The \"start\" condition, default: 0\n   * @return mixed\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4338,
            "endLine": 4349,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "selectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition, default: false"
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The \"start\" condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return a single value\n\n```php\nX::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n (string) 'Michael'\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "null",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition, default: false"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The \"start\" condition, default: 0"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return a single value\n   *\n   * ```php\n   * X::dump($db->selectOne(\"tab_users\", \"name\", [[\"id\", \">\", 1]], [\"id\" => \"DESC\"], 2));\n   *  (string) 'Michael'\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition, default: false\n   * @param int $start The \"start\" condition, default: 0\n   * @return mixed\n   * @throws Exception\n   *\/"
        },
        "count": {
            "name": "count",
            "summary": "Return the number of records in the table corresponding to the $where condition (non mandatory).",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function count($table, array $where = []): ?int\n  {\n    $args          = is_array($table) && (isset($table['tables']) || isset($table['table'])) ? $table : [\n      'tables' => [$table],\n      'where' => $where\n    ];\n    $args['count'] = true;\n    if (!empty($args['bbn_db_processed'])) {\n      unset($args['bbn_db_processed']);\n    }\n\n    if (\\is_object($r = $this->_exec($args))) {\n      $a = $r->getIrow();\n      return $a ? (int)$a[0] : null;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "count",
                "summary": "Return the number of records in the table corresponding to the $where condition (non mandatory).",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function count($table, array $where = []): ?int\n  {\n    $args          = is_array($table) && (isset($table['tables']) || isset($table['table'])) ? $table : [\n      'tables' => [$table],\n      'where' => $where\n    ];\n    $args['count'] = true;\n    if (!empty($args['bbn_db_processed'])) {\n      unset($args['bbn_db_processed']);\n    }\n\n    if (\\is_object($r = $this->_exec($args))) {\n      $a = $r->getIrow();\n      return $a ? (int)$a[0] : null;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4364,
                "endLine": 4381,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "count",
                "returns": [
                    null,
                    "int"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "where",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    }
                ],
                "doc": {
                    "description": "Return the number of records in the table corresponding to the $where condition (non mandatory).\n\n```php\nX::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the number of records in the table corresponding to the $where condition (non mandatory).\n   *\n   * ```php\n   * X::dump($db->count('table_users', ['name' => 'John']));\n   * \/\/ (int) 2\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array        $where The \"where\" condition\n   * @return int|null\n   *\/"
            },
            "trait": false,
            "startLine": 4364,
            "endLine": 4381,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "count",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                }
            ],
            "doc": {
                "description": "Return the number of records in the table corresponding to the $where condition (non mandatory).\n\n```php\nX::dump($db->count('table_users', ['name' => 'John']));\n\/\/ (int) 2\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return the number of records in the table corresponding to the $where condition (non mandatory).\n   *\n   * ```php\n   * X::dump($db->count('table_users', ['name' => 'John']));\n   * \/\/ (int) 2\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array        $where The \"where\" condition\n   * @return int|null\n   *\/"
        },
        "selectAllByKeys": {
            "name": "selectAllByKeys",
            "summary": "Return an array indexed on the first field of the request.",
            "description": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".",
            "description_parts": [
                {
                    "type": "text",
                    "content": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\"."
                },
                {
                    "type": "code",
                    "content": "X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function selectAllByKeys($table, array $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    if ($rows = $this->rselectAll($table, $fields, $where, $order, $limit, $start)) {\n      return X::indexByFirstVal($rows);\n    }\n\n    return $this->check() ? [] : null;\n  }",
            "parent": {
                "name": "selectAllByKeys",
                "summary": "Return an array indexed on the first field of the request.",
                "description": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "The value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\"."
                    },
                    {
                        "type": "code",
                        "content": "X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function selectAllByKeys($table, array $fields = [], array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    if ($rows = $this->rselectAll($table, $fields, $where, $order, $limit, $start)) {\n      return X::indexByFirstVal($rows);\n    }\n\n    return $this->check() ? [] : null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4412,
                "endLine": 4419,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "selectAllByKeys",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "fields",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The fields's name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition"
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The $limit condition, default: 0"
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": "",
                        "description": "The $limit condition, default: 0"
                    }
                ],
                "doc": {
                    "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n\n```php\nX::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$fields",
                            "description": "The fields's name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$limit",
                            "description": "The $limit condition, default: 0"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start",
                            "description": "The $limit condition, default: 0"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   * Return the same value as \"get_key_val\".\n   *\n   * ```php\n   * X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n   * \/*\n   * (array)[\n   *        \"John\" => [\n   *          \"surname\" => \"Brown\",\n   *          \"id\" => 3\n   *          ],\n   *        \"Michael\" => [\n   *          \"surname\" => \"Smith\",\n   *          \"id\" => 4\n   *        ]\n   *      ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit The $limit condition, default: 0\n   * @param int $start The $limit condition, default: 0\n   * @return array|null\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4412,
            "endLine": 4419,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "selectAllByKeys",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "fields",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The fields's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The $limit condition, default: 0"
                }
            ],
            "doc": {
                "description": "Return an array indexed on the first field of the request.\nThe value will be an array if the request has more than two fields.\nReturn the same value as \"get_key_val\".\n\n```php\nX::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n\/*\n(array)[\n       \"John\" => [\n         \"surname\" => \"Brown\",\n         \"id\" => 3\n         ],\n       \"Michael\" => [\n         \"surname\" => \"Smith\",\n         \"id\" => 4\n       ]\n     ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "The fields's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "The $limit condition, default: 0"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "The $limit condition, default: 0"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return an array indexed on the first field of the request.\n   * The value will be an array if the request has more than two fields.\n   * Return the same value as \"get_key_val\".\n   *\n   * ```php\n   * X::dump($db->selectAllByKeys(\"table_users\", [\"name\",\"id\",\"surname\"], [[\"id\", \">\", \"1\"]], [\"id\" => \"ASC\"]);\n   * \/*\n   * (array)[\n   *        \"John\" => [\n   *          \"surname\" => \"Brown\",\n   *          \"id\" => 3\n   *          ],\n   *        \"Michael\" => [\n   *          \"surname\" => \"Smith\",\n   *          \"id\" => 4\n   *        ]\n   *      ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param array $fields The fields's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit The $limit condition, default: 0\n   * @param int $start The $limit condition, default: 0\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "stat": {
            "name": "stat",
            "summary": "Return an array with the count of values corresponding to the where conditions.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function stat(string $table, string $column, array $where = [], array $order = []): ?array\n  {\n    if ($this->check()) {\n      return $this->rselectAll(\n        [\n          'tables' => [$table],\n          'fields' => [\n            $column,\n            'num' => 'COUNT(*)'\n          ],\n          'where' => $where,\n          'order' => $order,\n          'group_by' => [$column]\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "stat",
                "summary": "Return an array with the count of values corresponding to the where conditions.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function stat(string $table, string $column, array $where = [], array $order = []): ?array\n  {\n    if ($this->check()) {\n      return $this->rselectAll(\n        [\n          'tables' => [$table],\n          'fields' => [\n            $column,\n            'num' => 'COUNT(*)'\n          ],\n          'where' => $where,\n          'order' => $order,\n          'group_by' => [$column]\n        ]\n      );\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4446,
                "endLine": 4464,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "stat",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array."
                    },
                    {
                        "name": "column",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The field's name."
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition."
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition."
                    }
                ],
                "doc": {
                    "description": "Return an array with the count of values corresponding to the where conditions.\n\n```php\nX::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name or a configuration array."
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$column",
                            "description": "The field's name."
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition."
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition."
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return an array with the count of values corresponding to the where conditions.\n   *\n   * ```php\n   * X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n   * \/* (array)\n   * [\n   *  [\n   *      \"num\" => 1,\n   *      \"name\" => \"alan\",\n   *  ], [\n   *      \"num\" => 1,\n   *      \"name\" => \"karen\",\n   *  ],\n   * ]\n   * ```\n   *\n   * @param string $table The table's name or a configuration array.\n   * @param string $column The field's name.\n   * @param array $where The \"where\" condition.\n   * @param array $order The \"order\" condition.\n   * @return array|null\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4446,
            "endLine": 4464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "stat",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array."
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The field's name."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition."
                }
            ],
            "doc": {
                "description": "Return an array with the count of values corresponding to the where conditions.\n\n```php\nX::dump($db->stat('table_user', 'name', ['name' => '%n']));\n\/* (array)\n[\n [\n     \"num\" => 1,\n     \"name\" => \"alan\",\n ], [\n     \"num\" => 1,\n     \"name\" => \"karen\",\n ],\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name or a configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column",
                        "description": "The field's name."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition."
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return an array with the count of values corresponding to the where conditions.\n   *\n   * ```php\n   * X::dump($db->stat('table_user', 'name', ['name' => '%n']));\n   * \/* (array)\n   * [\n   *  [\n   *      \"num\" => 1,\n   *      \"name\" => \"alan\",\n   *  ], [\n   *      \"num\" => 1,\n   *      \"name\" => \"karen\",\n   *  ],\n   * ]\n   * ```\n   *\n   * @param string $table The table's name or a configuration array.\n   * @param string $column The field's name.\n   * @param array $where The \"where\" condition.\n   * @param array $order The \"order\" condition.\n   * @return array|null\n   * @throws Exception\n   *\/"
        },
        "countFieldValues": {
            "name": "countFieldValues",
            "summary": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function countFieldValues($table, string|null $field = null, array $where = [], array $order = []): ?array\n  {\n    if (is_array($table) && is_array($table['fields']) && count($table['fields'])) {\n      $args  = $table;\n      $field = array_values($table['fields'])[0];\n    }\n    else{\n      $args = [\n        'tables' => [$table],\n        'where' => $where,\n        'order' => $order\n      ];\n    }\n\n    $args = array_merge(\n      $args, [\n        'kind' => 'SELECT',\n        'fields' => [\n          'val' => $field,\n          'num' => 'COUNT(*)'\n        ],\n        'group_by' => [$field]\n      ]\n    );\n    return $this->rselectAll($args);\n  }",
            "parent": {
                "name": "countFieldValues",
                "summary": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function countFieldValues($table, string|null $field = null, array $where = [], array $order = []): ?array\n  {\n    if (is_array($table) && is_array($table['fields']) && count($table['fields'])) {\n      $args  = $table;\n      $field = array_values($table['fields'])[0];\n    }\n    else{\n      $args = [\n        'tables' => [$table],\n        'where' => $where,\n        'order' => $order\n      ];\n    }\n\n    $args = array_merge(\n      $args, [\n        'kind' => 'SELECT',\n        'fields' => [\n          'val' => $field,\n          'num' => 'COUNT(*)'\n        ],\n        'group_by' => [$field]\n      ]\n    );\n    return $this->rselectAll($args);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4480,
                "endLine": 4505,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "countFieldValues",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "field",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The field's name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition"
                    }
                ],
                "doc": {
                    "description": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n\n```php\nX::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "null|string",
                            "name": "$field",
                            "description": "The field's name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * ```php\n   * X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n   * \/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param null|string  $field The field's name\n   * @param array        $where The \"where\" condition\n   * @param array        $order The \"order\" condition\n   * @return array|null\n   *\/"
            },
            "trait": false,
            "startLine": 4480,
            "endLine": 4505,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "countFieldValues",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                }
            ],
            "doc": {
                "description": "Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n\n```php\nX::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n\/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return a count of identical values in a field as array, Reporting a structure type 'num' - 'val'.\n   *\n   * ```php\n   * X::dump($db->countFieldValues('table_users','surname',[['name','=','John']]));\n   * \/\/ (array) [\"num\" => 2, \"val\" => \"John\"]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param null|string  $field The field's name\n   * @param array        $where The \"where\" condition\n   * @param array        $order The \"order\" condition\n   * @return array|null\n   *\/"
        },
        "getColumnValues": {
            "name": "getColumnValues",
            "summary": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getColumnValues($table, string|null $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = [];\n      if (is_array($table) && isset($table['fields']) && is_array($table['fields']) && !empty($table['fields'][0])) {\n        array_splice($table['fields'], 0, 1, 'DISTINCT '.(string)$table['fields'][0]);\n      }\n      elseif (is_string($table) && is_string($field) && (stripos($field, 'DISTINCT') !== 0)) {\n        $field = 'DISTINCT '.$field;\n      }\n\n      if ($rows = $this->iselectAll($table, $field, $where, $order, $limit, $start)) {\n        foreach ($rows as $row){\n          $res[] = $row[0];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getColumnValues",
                "summary": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getColumnValues($table, string|null $field = null,  array $where = [], array $order = [], int $limit = 0, int $start = 0): ?array\n  {\n    $res = null;\n    if ($this->check()) {\n      $res = [];\n      if (is_array($table) && isset($table['fields']) && is_array($table['fields']) && !empty($table['fields'][0])) {\n        array_splice($table['fields'], 0, 1, 'DISTINCT '.(string)$table['fields'][0]);\n      }\n      elseif (is_string($table) && is_string($field) && (stripos($field, 'DISTINCT') !== 0)) {\n        $field = 'DISTINCT '.$field;\n      }\n\n      if ($rows = $this->iselectAll($table, $field, $where, $order, $limit, $start)) {\n        foreach ($rows as $row){\n          $res[] = $row[0];\n        }\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4529,
                "endLine": 4549,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 6,
                "numberOfRequiredParameters": 1,
                "shortName": "getColumnValues",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "name": "field",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The field's name"
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"where\" condition"
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": "",
                        "description": "The \"order\" condition"
                    },
                    {
                        "name": "limit",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 5,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n\n```php\nX::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table's name or a configuration array"
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$field",
                            "description": "The field's name"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$where",
                            "description": "The \"where\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order",
                            "description": "The \"order\" condition"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$limit"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 4529,
            "endLine": 4549,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 1,
            "shortName": "getColumnValues",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name or a configuration array"
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The field's name"
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"where\" condition"
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The \"order\" condition"
                },
                {
                    "name": "limit",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n\n```php\nX::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n\/*\narray [\n   \"Smith\",\n   \"Jones\",\n   \"Williams\",\n   \"Taylor\"\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table's name or a configuration array"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$field",
                        "description": "The field's name"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where",
                        "description": "The \"where\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "The \"order\" condition"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return a numeric indexed array with the values of the unique column ($field) from the selected $table\n   *\n   * ```php\n   * X::dump($db->getColumnValues('table_users','surname',['id','>',1]));\n   * \/*\n   * array [\n   *    \"Smith\",\n   *    \"Jones\",\n   *    \"Williams\",\n   *    \"Taylor\"\n   * ]\n   * ```\n   *\n   * @param string|array $table The table's name or a configuration array\n   * @param string|null $field The field's name\n   * @param array $where The \"where\" condition\n   * @param array $order The \"order\" condition\n   * @param int $limit\n   * @param int $start\n   * @return array\n   *\/"
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts row(s) in a table.",
            "description": "<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert($table, array|null $values = null, bool $ignore = false): ?int\n  {\n    if (empty($table)) {\n      throw new Exception(X::_('Table name is not specified'));\n    }\n\n    if (is_array($table) && isset($table['values'])) {\n      $values = $table['values'];\n    }\n\n    \/\/ Array of arrays\n    if (is_array($values)\n      && count($values)\n      && !X::isAssoc($values)\n      && is_array($values[0])\n    ) {\n      $res = 0;\n\n      foreach ($values as $v){\n        $res += $this->insert(\n          is_array($table)\n            ? ($table['tables'][0] ?? '')\n            : $table,\n          $v,\n          is_array($table)\n            ? ($table['ignore'] ?? $ignore)\n            : $ignore\n        );\n      }\n\n      return $res;\n    }\n\n    $cfg         = is_array($table) ? $table : [\n      'tables' => [$table],\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'INSERT';\n    return $this->_exec($cfg);\n  }",
            "parent": {
                "name": "insert",
                "summary": "Inserts row(s) in a table.",
                "description": "<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function insert($table, array|null $values = null, bool $ignore = false): ?int\n  {\n    if (empty($table)) {\n      throw new Exception(X::_('Table name is not specified'));\n    }\n\n    if (is_array($table) && isset($table['values'])) {\n      $values = $table['values'];\n    }\n\n    \/\/ Array of arrays\n    if (is_array($values)\n      && count($values)\n      && !X::isAssoc($values)\n      && is_array($values[0])\n    ) {\n      $res = 0;\n\n      foreach ($values as $v){\n        $res += $this->insert(\n          is_array($table)\n            ? ($table['tables'][0] ?? '')\n            : $table,\n          $v,\n          is_array($table)\n            ? ($table['ignore'] ?? $ignore)\n            : $ignore\n        );\n      }\n\n      return $res;\n    }\n\n    $cfg         = is_array($table) ? $table : [\n      'tables' => [$table],\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'INSERT';\n    return $this->_exec($cfg);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4591,
                "endLine": 4631,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "insert",
                "returns": [
                    null,
                    "int"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "name": "values",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The values to insert."
                    },
                    {
                        "name": "ignore",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "If true, controls if the row is already existing and ignores it."
                    }
                ],
                "doc": {
                    "description": "Inserts row(s) in a table.\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table name or the configuration array."
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$values",
                            "description": "The values to insert."
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$ignore",
                            "description": "If true, controls if the row is already existing and ignores it."
                        }
                    ],
                    "return": "Number affected rows.",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Inserts row(s) in a table.\n   *\n   * <code>\n   * $db->insert(\"table_users\", [\n   *    [\"name\" => \"Ted\"],\n   *    [\"surname\" => \"McLow\"]\n   *  ]);\n   * <\/code>\n   *\n   * <code>\n   * $db->insert(\"table_users\", [\n   *    [\"name\" => \"July\"],\n   *    [\"surname\" => \"O'neill\"]\n   *  ], [\n   *    [\"name\" => \"Peter\"],\n   *    [\"surname\" => \"Griffin\"]\n   *  ], [\n   *    [\"name\" => \"Marge\"],\n   *    [\"surname\" => \"Simpson\"]\n   *  ]);\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The values to insert.\n   * @param bool $ignore If true, controls if the row is already existing and ignores it.\n   *\n   * @return int|null Number affected rows.\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4591,
            "endLine": 4631,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "insert",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true, controls if the row is already existing and ignores it."
                }
            ],
            "doc": {
                "description": "Inserts row(s) in a table.\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"Ted\"],\n   [\"surname\" => \"McLow\"]\n ]);\n<\/code>\n\n<code>\n$db->insert(\"table_users\", [\n   [\"name\" => \"July\"],\n   [\"surname\" => \"O'neill\"]\n ], [\n   [\"name\" => \"Peter\"],\n   [\"surname\" => \"Griffin\"]\n ], [\n   [\"name\" => \"Marge\"],\n   [\"surname\" => \"Simpson\"]\n ]);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$values",
                        "description": "The values to insert."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$ignore",
                        "description": "If true, controls if the row is already existing and ignores it."
                    }
                ],
                "return": "Number affected rows.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Inserts row(s) in a table.\n   *\n   * <code>\n   * $db->insert(\"table_users\", [\n   *    [\"name\" => \"Ted\"],\n   *    [\"surname\" => \"McLow\"]\n   *  ]);\n   * <\/code>\n   *\n   * <code>\n   * $db->insert(\"table_users\", [\n   *    [\"name\" => \"July\"],\n   *    [\"surname\" => \"O'neill\"]\n   *  ], [\n   *    [\"name\" => \"Peter\"],\n   *    [\"surname\" => \"Griffin\"]\n   *  ], [\n   *    [\"name\" => \"Marge\"],\n   *    [\"surname\" => \"Simpson\"]\n   *  ]);\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The values to insert.\n   * @param bool $ignore If true, controls if the row is already existing and ignores it.\n   *\n   * @return int|null Number affected rows.\n   * @throws Exception\n   *\/"
        },
        "insertUpdate": {
            "name": "insertUpdate",
            "summary": "If not exist inserts row(s) in a table, else update.",
            "description": "<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insertUpdate($table, array|null $values = null): ?int\n  {\n    if (empty($table)) {\n      throw new Exception(X::_('Table name is not specified'));\n    }\n    \/\/ Twice the arguments\n    if (is_array($table) && isset($table['values'])) {\n      $values = $table['values'];\n    }\n\n    if (!X::isAssoc($values)) {\n      $res = 0;\n      foreach ($values as $v){\n        $res += $this->insertUpdate(\n          is_array($table)\n            ? ($table['tables'][0] ?? $table['table'][0] ?? '')\n            : $table,\n          $v\n        );\n      }\n\n      return $res;\n    }\n\n    $keys   = $this->getKeys($table);\n    $unique = [];\n    foreach ($keys['keys'] as $k){\n      \/\/ Checking each unique key\n      if ($k['unique']) {\n        $i = 0;\n        foreach ($k['columns'] as $c){\n          if (isset($values[$c])) {\n            $unique[$c] = $values[$c];\n            $i++;\n          }\n        }\n\n        \/\/ Only if the number of known field values matches the number of columns\n        \/\/ which are parts of the unique key\n        \/\/ If a value is null it won't pass isset and so won't be used\n        if (($i === \\count($k['columns'])) && $this->count($table, $unique)) {\n          \/\/ Removing unique matching fields from the values (as it is the where)\n          foreach ($unique as $f => $v){\n            unset($values[$f]);\n          }\n\n          \/\/ For updating\n          return $this->update($table, $values, $unique);\n        }\n      }\n    }\n\n    \/\/ No need to update, inserting\n    return $this->insert($table, $values);\n  }",
            "parent": {
                "name": "insertUpdate",
                "summary": "If not exist inserts row(s) in a table, else update.",
                "description": "<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function insertUpdate($table, array|null $values = null): ?int\n  {\n    if (empty($table)) {\n      throw new Exception(X::_('Table name is not specified'));\n    }\n    \/\/ Twice the arguments\n    if (is_array($table) && isset($table['values'])) {\n      $values = $table['values'];\n    }\n\n    if (!X::isAssoc($values)) {\n      $res = 0;\n      foreach ($values as $v){\n        $res += $this->insertUpdate(\n          is_array($table)\n            ? ($table['tables'][0] ?? $table['table'][0] ?? '')\n            : $table,\n          $v\n        );\n      }\n\n      return $res;\n    }\n\n    $keys   = $this->getKeys($table);\n    $unique = [];\n    foreach ($keys['keys'] as $k){\n      \/\/ Checking each unique key\n      if ($k['unique']) {\n        $i = 0;\n        foreach ($k['columns'] as $c){\n          if (isset($values[$c])) {\n            $unique[$c] = $values[$c];\n            $i++;\n          }\n        }\n\n        \/\/ Only if the number of known field values matches the number of columns\n        \/\/ which are parts of the unique key\n        \/\/ If a value is null it won't pass isset and so won't be used\n        if (($i === \\count($k['columns'])) && $this->count($table, $unique)) {\n          \/\/ Removing unique matching fields from the values (as it is the where)\n          foreach ($unique as $f => $v){\n            unset($values[$f]);\n          }\n\n          \/\/ For updating\n          return $this->update($table, $values, $unique);\n        }\n      }\n    }\n\n    \/\/ No need to update, inserting\n    return $this->insert($table, $values);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4653,
                "endLine": 4707,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "insertUpdate",
                "returns": [
                    null,
                    "int"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "name": "values",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The values to insert."
                    }
                ],
                "doc": {
                    "description": "If not exist inserts row(s) in a table, else update.\n\n<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table name or the configuration array."
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$values",
                            "description": "The values to insert."
                        }
                    ],
                    "return": "The number of rows inserted or updated.",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * If not exist inserts row(s) in a table, else update.\n   *\n   * <code>\n   * $db->insertUpdate(\n   *  \"table_users\",\n   *  [\n   *    'id' => '12',\n   *    'name' => 'Frank'\n   *  ]\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The values to insert.\n   *\n   * @return int|null The number of rows inserted or updated.\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4653,
            "endLine": 4707,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "insertUpdate",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The values to insert."
                }
            ],
            "doc": {
                "description": "If not exist inserts row(s) in a table, else update.\n\n<code>\n$db->insertUpdate(\n \"table_users\",\n [\n   'id' => '12',\n   'name' => 'Frank'\n ]\n);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$values",
                        "description": "The values to insert."
                    }
                ],
                "return": "The number of rows inserted or updated.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * If not exist inserts row(s) in a table, else update.\n   *\n   * <code>\n   * $db->insertUpdate(\n   *  \"table_users\",\n   *  [\n   *    'id' => '12',\n   *    'name' => 'Frank'\n   *  ]\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The values to insert.\n   *\n   * @return int|null The number of rows inserted or updated.\n   * @throws Exception\n   *\/"
        },
        "update": {
            "name": "update",
            "summary": "Updates row(s) in a table.",
            "description": "<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function update($table, array|null $values = null, array|null $where = null, bool $ignore = false): ?int\n  {\n    $cfg         = is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'UPDATE';\n    return $this->_exec($cfg);\n  }",
            "parent": {
                "name": "update",
                "summary": "Updates row(s) in a table.",
                "description": "<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function update($table, array|null $values = null, array|null $where = null, bool $ignore = false): ?int\n  {\n    $cfg         = is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'fields' => $values,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'UPDATE';\n    return $this->_exec($cfg);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4731,
                "endLine": 4741,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "update",
                "returns": [
                    null,
                    "int"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "name": "values",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The new value(s)."
                    },
                    {
                        "name": "where",
                        "position": 2,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The \"where\" condition."
                    },
                    {
                        "name": "ignore",
                        "position": 3,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "If IGNORE should be added to the statement"
                    }
                ],
                "doc": {
                    "description": "Updates row(s) in a table.\n\n<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table name or the configuration array."
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$values",
                            "description": "The new value(s)."
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$where",
                            "description": "The \"where\" condition."
                        },
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$ignore",
                            "description": "If IGNORE should be added to the statement"
                        }
                    ],
                    "return": "The number of rows updated.",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Updates row(s) in a table.\n   *\n   * <code>\n   * $db->update(\n   *  \"table_users\",\n   *  [\n   *    ['name' => 'Frank'],\n   *    ['surname' => 'Red']\n   *  ],\n   *  ['id' => '127']\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The new value(s).\n   * @param array|null $where The \"where\" condition.\n   * @param boolean $ignore If IGNORE should be added to the statement\n   *\n   * @return int|null The number of rows updated.\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4731,
            "endLine": 4741,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "update",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "values",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new value(s)."
                },
                {
                    "name": "where",
                    "position": 2,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If IGNORE should be added to the statement"
                }
            ],
            "doc": {
                "description": "Updates row(s) in a table.\n\n<code>\n$db->update(\n \"table_users\",\n [\n   ['name' => 'Frank'],\n   ['surname' => 'Red']\n ],\n ['id' => '127']\n);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$values",
                        "description": "The new value(s)."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$ignore",
                        "description": "If IGNORE should be added to the statement"
                    }
                ],
                "return": "The number of rows updated.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Updates row(s) in a table.\n   *\n   * <code>\n   * $db->update(\n   *  \"table_users\",\n   *  [\n   *    ['name' => 'Frank'],\n   *    ['surname' => 'Red']\n   *  ],\n   *  ['id' => '127']\n   * );\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $values The new value(s).\n   * @param array|null $where The \"where\" condition.\n   * @param boolean $ignore If IGNORE should be added to the statement\n   *\n   * @return int|null The number of rows updated.\n   * @throws Exception\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes row(s) in a table.",
            "description": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete($table, array|null $where = null, bool $ignore = false): ?int\n  {\n    $cfg         = is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'DELETE';\n    return $this->_exec($cfg);\n  }",
            "parent": {
                "name": "delete",
                "summary": "Deletes row(s) in a table.",
                "description": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function delete($table, array|null $where = null, bool $ignore = false): ?int\n  {\n    $cfg         = is_array($table) ? $table : [\n      'tables' => [$table],\n      'where' => $where,\n      'ignore' => $ignore\n    ];\n    $cfg['kind'] = 'DELETE';\n    return $this->_exec($cfg);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4757,
                "endLine": 4766,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "delete",
                "returns": [
                    null,
                    "int"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "name": "where",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The \"where\" condition."
                    },
                    {
                        "name": "ignore",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": "",
                        "description": "default: false."
                    }
                ],
                "doc": {
                    "description": "Deletes row(s) in a table.\n\n<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$table",
                            "description": "The table name or the configuration array."
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$where",
                            "description": "The \"where\" condition."
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$ignore",
                            "description": "default: false."
                        }
                    ],
                    "return": "The number of rows deleted.",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Deletes row(s) in a table.\n   *\n   * <code>\n   * $db->delete(\"table_users\", ['id' => '32']);\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $where The \"where\" condition.\n   * @param bool $ignore default: false.\n   *\n   * @return int|null The number of rows deleted.\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4757,
            "endLine": 4766,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table name or the configuration array."
                },
                {
                    "name": "where",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The \"where\" condition."
                },
                {
                    "name": "ignore",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "default: false."
                }
            ],
            "doc": {
                "description": "Deletes row(s) in a table.\n\n<code>\n$db->delete(\"table_users\", ['id' => '32']);\n<\/code>\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$table",
                        "description": "The table name or the configuration array."
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$where",
                        "description": "The \"where\" condition."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$ignore",
                        "description": "default: false."
                    }
                ],
                "return": "The number of rows deleted.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Deletes row(s) in a table.\n   *\n   * <code>\n   * $db->delete(\"table_users\", ['id' => '32']);\n   * <\/code>\n   *\n   * @param string|array $table The table name or the configuration array.\n   * @param array|null $where The \"where\" condition.\n   * @param bool $ignore default: false.\n   *\n   * @return int|null The number of rows deleted.\n   * @throws Exception\n   *\/"
        },
        "fetch": {
            "name": "fetch",
            "summary": "Return an indexed array with the first result of the query or false if there are no results.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetch(string $query)\n  {\n    if ($r = $this->query(...func_get_args())) {\n      return $r->fetch();\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "fetch",
                "summary": "Return an indexed array with the first result of the query or false if there are no results.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function fetch(string $query)\n  {\n    if ($r = $this->query(...func_get_args())) {\n      return $r->fetch();\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4791,
                "endLine": 4798,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "fetch",
                "returns": [],
                "arguments": [
                    {
                        "name": "query",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return an indexed array with the first result of the query or false if there are no results.\n\n```php\nX::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$query"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * ```php\n   * X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n   * \/* (array)\n   * [\n   *  \"name\" => \"john\",\n   *  0 => \"john\",\n   * ]\n   * ```\n   *\n   * @param string $query\n   * @return array|false\n   *\/"
            },
            "trait": false,
            "startLine": 4791,
            "endLine": 4798,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fetch",
            "returns": [],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return an indexed array with the first result of the query or false if there are no results.\n\n```php\nX::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n\/* (array)\n[\n \"name\" => \"john\",\n 0 => \"john\",\n]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an indexed array with the first result of the query or false if there are no results.\n   *\n   * ```php\n   * X::dump($db->fetch(\"SELECT name FROM users WHERE id = 10\"));\n   * \/* (array)\n   * [\n   *  \"name\" => \"john\",\n   *  0 => \"john\",\n   * ]\n   * ```\n   *\n   * @param string $query\n   * @return array|false\n   *\/"
        },
        "fetchAll": {
            "name": "fetchAll",
            "summary": "Return an array of indexed array with all results of the query or empty array if there are no results.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchAll(string $query)\n  {\n    if ($r = $this->query(...func_get_args())) {\n      return $this->fetchAllResults($r);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "fetchAll",
                "summary": "Return an array of indexed array with all results of the query or empty array if there are no results.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function fetchAll(string $query)\n  {\n    if ($r = $this->query(...func_get_args())) {\n      return $this->fetchAllResults($r);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4830,
                "endLine": 4837,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "fetchAll",
                "returns": [],
                "arguments": [
                    {
                        "name": "query",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return an array of indexed array with all results of the query or empty array if there are no results.\n\n```php\nX::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$query"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return an array of indexed array with all results of the query or empty array if there are no results.\n   *\n   * ```php\n   * X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n   * \/* (array)\n   *  [\n   *    [\n   *    \"surname\" => \"White\",\n   *    0 => \"White\",\n   *    \"name\" => \"Michael\",\n   *    1 => \"Michael\",\n   *    \"id\"  => 1,\n   *    2 => 1,\n   *    ],\n   *    [\n   *    \"surname\" => \"Smith\",\n   *    0 => \"Smith\",\n   *    \"name\" => \"John\",\n   *    1  =>  \"John\",\n   *    \"id\" => 2,\n   *    2 => 2,\n   *    ],\n   *  ]\n   * ```\n   *\n   * @param string $query\n   * @return array|false\n   *\/"
            },
            "trait": false,
            "startLine": 4830,
            "endLine": 4837,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fetchAll",
            "returns": [],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return an array of indexed array with all results of the query or empty array if there are no results.\n\n```php\nX::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n\/* (array)\n [\n   [\n   \"surname\" => \"White\",\n   0 => \"White\",\n   \"name\" => \"Michael\",\n   1 => \"Michael\",\n   \"id\"  => 1,\n   2 => 1,\n   ],\n   [\n   \"surname\" => \"Smith\",\n   0 => \"Smith\",\n   \"name\" => \"John\",\n   1  =>  \"John\",\n   \"id\" => 2,\n   2 => 2,\n   ],\n ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return an array of indexed array with all results of the query or empty array if there are no results.\n   *\n   * ```php\n   * X::dump($db->fetchAll(\"SELECT 'surname', 'name', 'id' FROM users WHERE name = 'john'\"));\n   * \/* (array)\n   *  [\n   *    [\n   *    \"surname\" => \"White\",\n   *    0 => \"White\",\n   *    \"name\" => \"Michael\",\n   *    1 => \"Michael\",\n   *    \"id\"  => 1,\n   *    2 => 1,\n   *    ],\n   *    [\n   *    \"surname\" => \"Smith\",\n   *    0 => \"Smith\",\n   *    \"name\" => \"John\",\n   *    1  =>  \"John\",\n   *    \"id\" => 2,\n   *    2 => 2,\n   *    ],\n   *  ]\n   * ```\n   *\n   * @param string $query\n   * @return array|false\n   *\/"
        },
        "fetchColumn": {
            "name": "fetchColumn",
            "summary": "Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchColumn(\"SELECT `name`, `id` FROM users WHERE name = ?\", 0, 'john'));\n\/\/ (string) \"john\"\n\nX::dump($db->fetchColumn(\"SELECT `name`, `email` FROM users WHERE name = ?\", 1, 'john'));\n\/\/ (string) \"john@mail.com\""
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchColumn($query, int $num = 0)\n  {\n    $args = func_get_args();\n\n    if (isset($args[1])) {\n      unset($args[1]);\n    }\n\n    if ($r = $this->query(...$args)) {\n      return $r->fetchColumn($num);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "fetchColumn",
                "summary": "Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->fetchColumn(\"SELECT `name`, `id` FROM users WHERE name = ?\", 0, 'john'));\n\/\/ (string) \"john\"\n\nX::dump($db->fetchColumn(\"SELECT `name`, `email` FROM users WHERE name = ?\", 1, 'john'));\n\/\/ (string) \"john@mail.com\""
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function fetchColumn($query, int $num = 0)\n  {\n    $args = func_get_args();\n\n    if (isset($args[1])) {\n      unset($args[1]);\n    }\n\n    if ($r = $this->query(...$args)) {\n      return $r->fetchColumn($num);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4855,
                "endLine": 4868,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "fetchColumn",
                "returns": [],
                "arguments": [
                    {
                        "name": "query",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "num",
                        "position": 1,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result\n\n```php\nX::dump($db->fetchColumn(\"SELECT `name`, `id` FROM users WHERE name = ?\", 0, 'john'));\n\/\/ (string) \"john\"\n\nX::dump($db->fetchColumn(\"SELECT `name`, `email` FROM users WHERE name = ?\", 1, 'john'));\n\/\/ (string) \"john@mail.com\"\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$query"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$num"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result\n   *\n   * ```php\n   * X::dump($db->fetchColumn(\"SELECT `name`, `id` FROM users WHERE name = ?\", 0, 'john'));\n   * \/\/ (string) \"john\"\n   *\n   * X::dump($db->fetchColumn(\"SELECT `name`, `email` FROM users WHERE name = ?\", 1, 'john'));\n   * \/\/ (string) \"john@mail.com\"\n   * ```\n   *\n   * @param $query\n   * @param int   $num\n   * @return mixed\n   *\/"
            },
            "trait": false,
            "startLine": 4855,
            "endLine": 4868,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fetchColumn",
            "returns": [],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "num",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result\n\n```php\nX::dump($db->fetchColumn(\"SELECT `name`, `id` FROM users WHERE name = ?\", 0, 'john'));\n\/\/ (string) \"john\"\n\nX::dump($db->fetchColumn(\"SELECT `name`, `email` FROM users WHERE name = ?\", 1, 'john'));\n\/\/ (string) \"john@mail.com\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$query"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$num"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Transposition of the original fetchColumn method, but with the query included. Return an array or false if no result\n   *\n   * ```php\n   * X::dump($db->fetchColumn(\"SELECT `name`, `id` FROM users WHERE name = ?\", 0, 'john'));\n   * \/\/ (string) \"john\"\n   *\n   * X::dump($db->fetchColumn(\"SELECT `name`, `email` FROM users WHERE name = ?\", 1, 'john'));\n   * \/\/ (string) \"john@mail.com\"\n   * ```\n   *\n   * @param $query\n   * @param int   $num\n   * @return mixed\n   *\/"
        },
        "fetchObject": {
            "name": "fetchObject",
            "summary": "Return stdClass object or false if no result.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchObject($query)\n  {\n    if ($r = $this->query(...func_get_args())) {\n      return $r->fetchObject();\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "fetchObject",
                "summary": "Return stdClass object or false if no result.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function fetchObject($query)\n  {\n    if ($r = $this->query(...func_get_args())) {\n      return $r->fetchObject();\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4885,
                "endLine": 4892,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "fetchObject",
                "returns": [],
                "arguments": [
                    {
                        "name": "query",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Return stdClass object or false if no result.\n\n```php\nX::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$query"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return stdClass object or false if no result.\n   *\n   * ```php\n   * X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n   * \/\/ stdClass Object {\n   *                    \"id\"  =>  1,\n   *                    \"name\"  =>  \"John\",\n   *                    \"surname\"  =>  \"Smith\",\n   *                    }\n   * ```\n   *\n   * @param string $query\n   * @return bool|\\stdClass\n   *\/"
            },
            "trait": false,
            "startLine": 4885,
            "endLine": 4892,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fetchObject",
            "returns": [],
            "arguments": [
                {
                    "name": "query",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Return stdClass object or false if no result.\n\n```php\nX::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n\/\/ stdClass Object {\n                   \"id\"  =>  1,\n                   \"name\"  =>  \"John\",\n                   \"surname\"  =>  \"Smith\",\n                   }\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$query"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return stdClass object or false if no result.\n   *\n   * ```php\n   * X::dump($db->fetchObject(\"SELECT * FROM table_users WHERE name = 'john'\"));\n   * \/\/ stdClass Object {\n   *                    \"id\"  =>  1,\n   *                    \"name\"  =>  \"John\",\n   *                    \"surname\"  =>  \"Smith\",\n   *                    }\n   * ```\n   *\n   * @param string $query\n   * @return bool|\\stdClass\n   *\/"
        },
        "getRows": {
            "name": "getRows",
            "summary": "Return an array that includes indexed arrays for every row resultant from the query.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRows(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getRows();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getRows",
                "summary": "Return an array that includes indexed arrays for every row resultant from the query.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getRows(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getRows();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4916,
                "endLine": 4924,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getRows",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return an array that includes indexed arrays for every row resultant from the query.\n\n```php\nX::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "description": "The var ? value"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * ```php\n   * X::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n   * \/* (array)[\n   *            [\n   *            \"id\" => 3,\n   *            \"name\" => \"john\",\n   *            ],\n   *            [\n   *            \"id\" => 4,\n   *            \"name\" => \"barbara\",\n   *            ],\n   *          ]\n   * ```\n   *\n   * @param string\n   * @param int The var ? value\n   * @return array|false\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4916,
            "endLine": 4924,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRows",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array that includes indexed arrays for every row resultant from the query.\n\n```php\nX::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n\/* (array)[\n           [\n           \"id\" => 3,\n           \"name\" => \"john\",\n           ],\n           [\n           \"id\" => 4,\n           \"name\" => \"barbara\",\n           ],\n         ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return an array that includes indexed arrays for every row resultant from the query.\n   *\n   * ```php\n   * X::dump($db->getRows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2));\n   * \/* (array)[\n   *            [\n   *            \"id\" => 3,\n   *            \"name\" => \"john\",\n   *            ],\n   *            [\n   *            \"id\" => 4,\n   *            \"name\" => \"barbara\",\n   *            ],\n   *          ]\n   * ```\n   *\n   * @param string\n   * @param int The var ? value\n   * @return array|false\n   * @throws Exception\n   *\/"
        },
        "getRow": {
            "name": "getRow",
            "summary": "Return the first row resulting from the query as an array indexed with the fields' name.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRow(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getRow();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getRow",
                "summary": "Return the first row resulting from the query as an array indexed with the fields' name.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getRow(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getRow();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4943,
                "endLine": 4951,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getRow",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return the first row resulting from the query as an array indexed with the fields' name.\n\n```php\nX::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "description": "query."
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "description": "The var ? value."
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * ```php\n   * X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n   *\n   * \/* (array)[\n   *        \"id\" => 3,\n   *        \"name\" => \"thomas\",\n   *        ]\n   * ```\n   *\n   * @param string query.\n   * @param int The var ? value.\n   * @return array|false\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4943,
            "endLine": 4951,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRow",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the first row resulting from the query as an array indexed with the fields' name.\n\n```php\nX::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n\n\/* (array)[\n       \"id\" => 3,\n       \"name\" => \"thomas\",\n       ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value."
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as an array indexed with the fields' name.\n   *\n   * ```php\n   * X::dump($db->getRow(\"SELECT id, name FROM table_users WHERE id > ? \", 2));;\n   *\n   * \/* (array)[\n   *        \"id\" => 3,\n   *        \"name\" => \"thomas\",\n   *        ]\n   * ```\n   *\n   * @param string query.\n   * @param int The var ? value.\n   * @return array|false\n   * @throws Exception\n   *\/"
        },
        "getIrow": {
            "name": "getIrow",
            "summary": "Return a row as a numeric indexed array.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIrow(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getIrow();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getIrow",
                "summary": "Return a row as a numeric indexed array.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getIrow(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getIrow();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 4970,
                "endLine": 4978,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getIrow",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return a row as a numeric indexed array.\n\n```php\nX::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "description": "query"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "description": "The var ? value"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * ```php\n   * X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n   * \/* (array) [\n   *              3,\n   *              \"john\",\n   *              \"brown\",\n   *             ]\n   * ```\n   *\n   * @param string query\n   * @param int The var ? value\n   * @return array|false\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 4970,
            "endLine": 4978,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getIrow",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return a row as a numeric indexed array.\n\n```php\nX::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n\/* (array) [\n             3,\n             \"john\",\n             \"brown\",\n            ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "description": "The var ? value"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return a row as a numeric indexed array.\n   *\n   * ```php\n   * X::dump($db->getIrow(\"SELECT id, name, surname FROM table_users WHERE id > ?\", 2));\n   * \/* (array) [\n   *              3,\n   *              \"john\",\n   *              \"brown\",\n   *             ]\n   * ```\n   *\n   * @param string query\n   * @param int The var ? value\n   * @return array|false\n   * @throws Exception\n   *\/"
        },
        "getIrows": {
            "name": "getIrows",
            "summary": "Return an array of numeric indexed rows.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIrows(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getIrows();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getIrows",
                "summary": "Return an array of numeric indexed rows.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getIrows(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getIrows();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 5001,
                "endLine": 5009,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getIrows",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return an array of numeric indexed rows.\n\n```php\nX::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]\n```\n",
                    "params": [],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * ```php\n   * X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n   * \/*\n   * (array)[\n   *         [\n   *          3,\n   *         \"john\"\n   *         ],\n   *         [\n   *         4,\n   *         \"barbara\"\n   *        ]\n   *       ]\n   * ```\n   *\n   * @return null|array\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 5001,
            "endLine": 5009,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getIrows",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array of numeric indexed rows.\n\n```php\nX::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n\/*\n(array)[\n        [\n         3,\n        \"john\"\n        ],\n        [\n        4,\n        \"barbara\"\n       ]\n      ]\n```\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return an array of numeric indexed rows.\n   *\n   * ```php\n   * X::dump($db->getIrows(\"SELECT id, name FROM table_users WHERE id > ? LIMIT ?\", 2, 2));\n   * \/*\n   * (array)[\n   *         [\n   *          3,\n   *         \"john\"\n   *         ],\n   *         [\n   *         4,\n   *         \"barbara\"\n   *        ]\n   *       ]\n   * ```\n   *\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "getByColumns": {
            "name": "getByColumns",
            "summary": "Return an array indexed on the searched field's in which there are all the values of the column.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getByColumns(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getByColumns();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getByColumns",
                "summary": "Return an array indexed on the searched field's in which there are all the values of the column.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getByColumns(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getByColumns();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 5033,
                "endLine": 5041,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getByColumns",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return an array indexed on the searched field's in which there are all the values of the column.\n\n```php\nX::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "description": "query"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * ```php\n   * X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n   * \/*\n   * (array) [\n   *      \"name\" => [\n   *       \"John\",\n   *       \"Michael\"\n   *      ],\n   *      \"surname\" => [\n   *        \"Brown\",\n   *        \"Smith\"\n   *      ]\n   *     ]\n   * ```\n   *\n   * @param string query\n   * @return null|array\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 5033,
            "endLine": 5041,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getByColumns",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array indexed on the searched field's in which there are all the values of the column.\n\n```php\nX::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n\/*\n(array) [\n     \"name\" => [\n      \"John\",\n      \"Michael\"\n     ],\n     \"surname\" => [\n       \"Brown\",\n       \"Smith\"\n     ]\n    ]\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "description": "query"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return an array indexed on the searched field's in which there are all the values of the column.\n   *\n   * ```php\n   * X::dump($db->getByColumns(\"SELECT name, surname FROM table_users WHERE id > 2\"));\n   * \/*\n   * (array) [\n   *      \"name\" => [\n   *       \"John\",\n   *       \"Michael\"\n   *      ],\n   *      \"surname\" => [\n   *        \"Brown\",\n   *        \"Smith\"\n   *      ]\n   *     ]\n   * ```\n   *\n   * @param string query\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "getObject": {
            "name": "getObject",
            "summary": "Return the first row resulting from the query as an object.",
            "description": "Synonym of get_obj.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Synonym of get_obj."
                },
                {
                    "type": "code",
                    "content": "X::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObject(): ?\\stdClass\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getObject();\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getObject",
                "summary": "Return the first row resulting from the query as an object.",
                "description": "Synonym of get_obj.",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "Synonym of get_obj."
                    },
                    {
                        "type": "code",
                        "content": "X::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getObject(): ?\\stdClass\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getObject();\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 5058,
                "endLine": 5066,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getObject",
                "returns": [
                    null,
                    "stdClass"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return the first row resulting from the query as an object.\nSynonym of get_obj.\n\n```php\nX::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }\n```\n",
                    "params": [],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return the first row resulting from the query as an object.\n   * Synonym of get_obj.\n   *\n   * ```php\n   * X::dump($db->getObject(\"SELECT name FROM table_users\"));\n   * \/*\n   * (obj){\n   *       \"name\" => \"John\"\n   *       }\n   * ```\n   *\n   * @return null|\\stdClass\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 5058,
            "endLine": 5066,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObject",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [],
            "doc": {
                "description": "Return the first row resulting from the query as an object.\nSynonym of get_obj.\n\n```php\nX::dump($db->getObject(\"SELECT name FROM table_users\"));\n\/*\n(obj){\n      \"name\" => \"John\"\n      }\n```\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return the first row resulting from the query as an object.\n   * Synonym of get_obj.\n   *\n   * ```php\n   * X::dump($db->getObject(\"SELECT name FROM table_users\"));\n   * \/*\n   * (obj){\n   *       \"name\" => \"John\"\n   *       }\n   * ```\n   *\n   * @return null|\\stdClass\n   * @throws Exception\n   *\/"
        },
        "getObjects": {
            "name": "getObjects",
            "summary": "Return an array of stdClass objects.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObjects(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getObjects();\n    }\n\n    return [];\n  }",
            "parent": {
                "name": "getObjects",
                "summary": "Return an array of stdClass objects.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getObjects(): ?array\n  {\n    if ($r = $this->query(...func_get_args())) {\n      \/** @var Query $r *\/\n      return $r->getObjects();\n    }\n\n    return [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 5098,
                "endLine": 5106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getObjects",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Return an array of stdClass objects.\n\n```php\nX::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]\n```\n",
                    "params": [],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Return an array of stdClass objects.\n   *\n   * ```php\n   * X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n   *\n   * \/*\n   * (array) [\n   *          Object stdClass: df {\n   *            \"name\" => \"John\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Michael\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Thomas\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"William\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Jake\",\n   *          },\n   *         ]\n   * ```\n   *\n   * @return null|array\n   * @throws Exception\n   *\/"
            },
            "trait": false,
            "startLine": 5098,
            "endLine": 5106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObjects",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Return an array of stdClass objects.\n\n```php\nX::dump($db->getObjects(\"SELECT name FROM table_users\"));\n\n\/*\n(array) [\n         Object stdClass: df {\n           \"name\" => \"John\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Michael\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Thomas\",\n         },\n         Object stdClass: df {\n           \"name\" => \"William\",\n         },\n         Object stdClass: df {\n           \"name\" => \"Jake\",\n         },\n        ]\n```\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Return an array of stdClass objects.\n   *\n   * ```php\n   * X::dump($db->getObjects(\"SELECT name FROM table_users\"));\n   *\n   * \/*\n   * (array) [\n   *          Object stdClass: df {\n   *            \"name\" => \"John\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Michael\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Thomas\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"William\",\n   *          },\n   *          Object stdClass: df {\n   *            \"name\" => \"Jake\",\n   *          },\n   *         ]\n   * ```\n   *\n   * @return null|array\n   * @throws Exception\n   *\/"
        },
        "getForeignKeys": {
            "name": "getForeignKeys",
            "summary": "Return an array with tables and fields related to the searched foreign key.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getForeignKeys(string $col, string $table, string|null $db = null): array\n  {\n    if (!$db) {\n      $db = $this->getCurrent();\n    }\n\n    $res   = [];\n    $model = $this->modelize();\n    foreach ($model as $tn => $m){\n      foreach ($m['keys'] as $k => $t){\n        if (($t['ref_table'] === $table)\n          && ($t['ref_column'] === $col)\n          && ($t['ref_db'] === $db)\n          && (\\count($t['columns']) === 1)\n        ) {\n          if (!isset($res[$tn])) {\n            $res[$tn] = [$t['columns'][0]];\n          }\n          else{\n            $res[$tn][] = $t['columns'][0];\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "getForeignKeys",
                "summary": "Return an array with tables and fields related to the searched foreign key.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getForeignKeys(string $col, string $table, string|null $db = null): array\n  {\n    if (!$db) {\n      $db = $this->getCurrent();\n    }\n\n    $res   = [];\n    $model = $this->modelize();\n    foreach ($model as $tn => $m){\n      foreach ($m['keys'] as $k => $t){\n        if (($t['ref_table'] === $table)\n          && ($t['ref_column'] === $col)\n          && ($t['ref_db'] === $db)\n          && (\\count($t['columns']) === 1)\n        ) {\n          if (!isset($res[$tn])) {\n            $res[$tn] = [$t['columns'][0]];\n          }\n          else{\n            $res[$tn][] = $t['columns'][0];\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 5121,
                "endLine": 5147,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "getForeignKeys",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "col",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The column's name"
                    },
                    {
                        "name": "table",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name"
                    },
                    {
                        "name": "db",
                        "position": 2,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The database name if different from the current one"
                    }
                ],
                "doc": {
                    "description": "Return an array with tables and fields related to the searched foreign key.\n\n```php\nX::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$col",
                            "description": "The column's name"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name"
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$db",
                            "description": "The database name if different from the current one"
                        }
                    ],
                    "return": "with tables and fields related to the searched foreign key"
                },
                "comments": "  \/**\n   * Return an array with tables and fields related to the searched foreign key.\n   *\n   * ```php\n   * X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n   * \/\/ (Array)\n   * ```\n   *\n   * @param string $col The column's name\n   * @param string $table The table's name\n   * @param string|null $db The database name if different from the current one\n   * @return array with tables and fields related to the searched foreign key\n   *\/"
            },
            "trait": false,
            "startLine": 5121,
            "endLine": 5147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getForeignKeys",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The column's name"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The database name if different from the current one"
                }
            ],
            "doc": {
                "description": "Return an array with tables and fields related to the searched foreign key.\n\n```php\nX::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n\/\/ (Array)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$col",
                        "description": "The column's name"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$db",
                        "description": "The database name if different from the current one"
                    }
                ],
                "return": "with tables and fields related to the searched foreign key"
            },
            "comments": "  \/**\n   * Return an array with tables and fields related to the searched foreign key.\n   *\n   * ```php\n   * X::dump($db->getForeignKeys('id', 'table_users', 'db_example'));\n   * \/\/ (Array)\n   * ```\n   *\n   * @param string $col The column's name\n   * @param string $table The table's name\n   * @param string|null $db The database name if different from the current one\n   * @return array with tables and fields related to the searched foreign key\n   *\/"
        },
        "hasIdIncrement": {
            "name": "hasIdIncrement",
            "summary": "Return true if in the table there are fields with auto-increment.",
            "description": "Working only on mysql.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "Working only on mysql."
                },
                {
                    "type": "code",
                    "content": "X::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasIdIncrement(string $table): bool\n  {\n    return ($model = $this->modelize($table)) &&\n      isset($model['keys']['PRIMARY']) &&\n      (\\count($model['keys']['PRIMARY']['columns']) === 1) &&\n      ($model['fields'][$model['keys']['PRIMARY']['columns'][0]]['extra'] === 'auto_increment');\n  }",
            "parent": {
                "name": "hasIdIncrement",
                "summary": "Return true if in the table there are fields with auto-increment.",
                "description": "Working only on mysql.",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "Working only on mysql."
                    },
                    {
                        "type": "code",
                        "content": "X::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function hasIdIncrement(string $table): bool\n  {\n    return ($model = $this->modelize($table)) &&\n      isset($model['keys']['PRIMARY']) &&\n      (\\count($model['keys']['PRIMARY']['columns']) === 1) &&\n      ($model['fields'][$model['keys']['PRIMARY']['columns'][0]]['extra'] === 'auto_increment');\n  }",
                "parent": false,
                "trait": false,
                "startLine": 5161,
                "endLine": 5167,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "hasIdIncrement",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The table's name"
                    }
                ],
                "doc": {
                    "description": "Return true if in the table there are fields with auto-increment.\nWorking only on mysql.\n\n```php\nX::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The table's name"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Return true if in the table there are fields with auto-increment.\n   * Working only on mysql.\n   *\n   * ```php\n   * X::dump($db->hasIdIncrement('table_users'));\n   * \/\/ (bool) 1\n   * ```\n   *\n   * @param string $table The table's name\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 5161,
            "endLine": 5167,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasIdIncrement",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ],
            "doc": {
                "description": "Return true if in the table there are fields with auto-increment.\nWorking only on mysql.\n\n```php\nX::dump($db->hasIdIncrement('table_users'));\n\/\/ (bool) 1\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The table's name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Return true if in the table there are fields with auto-increment.\n   * Working only on mysql.\n   *\n   * ```php\n   * X::dump($db->hasIdIncrement('table_users'));\n   * \/\/ (bool) 1\n   * ```\n   *\n   * @param string $table The table's name\n   * @return bool\n   *\/"
        },
        "fmodelize": {
            "name": "fmodelize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fmodelize(string $table = '', bool $force = false): ?array\n  {\n    if ($res = $this->modelize(...func_get_args())) {\n      foreach ($res['fields'] as $n => $f){\n        $res['fields'][$n]['name'] = $n;\n        $res['fields'][$n]['keys'] = [];\n        if (isset($res['cols'][$n])) {\n          foreach ($res['cols'][$n] as $key){\n            $res['fields'][$n]['keys'][$key] = $res['keys'][$key];\n          }\n        }\n      }\n\n      return $res['fields'];\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "fmodelize",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function fmodelize(string $table = '', bool $force = false): ?array\n  {\n    if ($res = $this->modelize(...func_get_args())) {\n      foreach ($res['fields'] as $n => $f){\n        $res['fields'][$n]['name'] = $n;\n        $res['fields'][$n]['keys'] = [];\n        if (isset($res['cols'][$n])) {\n          foreach ($res['cols'][$n] as $key){\n            $res['fields'][$n]['keys'][$key] = $res['keys'][$key];\n          }\n        }\n      }\n\n      return $res['fields'];\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 5175,
                "endLine": 5192,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 0,
                "shortName": "fmodelize",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "force",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$force"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param bool   $force\n   * @return null|array\n   *\/"
            },
            "trait": false,
            "startLine": 5175,
            "endLine": 5192,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "fmodelize",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param bool   $force\n   * @return null|array\n   *\/"
        },
        "fetchAllResults": {
            "name": "fetchAllResults",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fetchAllResults(PDOStatement $PDOStatement, ...$args)\n  {\n    if (method_exists($PDOStatement, '_fetchAll')) {\n      \/** @var Query $PDOStatement *\/\n      return $PDOStatement->_fetchAll(...$args);\n    }\n\n    return $PDOStatement->fetchAll(...$args);\n  }",
            "parent": {
                "name": "fetchAllResults",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Sql.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function fetchAllResults(PDOStatement $PDOStatement, ...$args)\n  {\n    if (method_exists($PDOStatement, '_fetchAll')) {\n      \/** @var Query $PDOStatement *\/\n      return $PDOStatement->_fetchAll(...$args);\n    }\n\n    return $PDOStatement->fetchAll(...$args);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 5199,
                "endLine": 5207,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": true,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "fetchAllResults",
                "returns": [],
                "arguments": [
                    {
                        "name": "PDOStatement",
                        "position": 0,
                        "type": "PDOStatement",
                        "type_arr": [
                            "PDOStatement"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "$PDOStatement"
                    },
                    {
                        "name": "args",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": true,
                        "reference": false,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "PDOStatement",
                            "description": "$PDOStatement"
                        },
                        {
                            "tag": "param",
                            "type": "...$args"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param PDOStatement $PDOStatement\n   * @param ...$args\n   * @return bool|array\n   *\/"
            },
            "trait": false,
            "startLine": 5199,
            "endLine": 5207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fetchAllResults",
            "returns": [],
            "arguments": [
                {
                    "name": "PDOStatement",
                    "position": 0,
                    "type": "PDOStatement",
                    "type_arr": [
                        "PDOStatement"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "$PDOStatement"
                },
                {
                    "name": "args",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "PDOStatement",
                        "description": "$PDOStatement"
                    },
                    {
                        "tag": "param",
                        "type": "...$args"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param PDOStatement $PDOStatement\n   * @param ...$args\n   * @return bool|array\n   *\/"
        },
        "error": {
            "name": "error",
            "summary": "Set an error and acts appropriately based oon the error mode",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function error($e, bool $show_last = true, bool $show_backtrace = true): void\n  {\n    $this->_has_error = true;\n    self::_set_has_error_all();\n    $msg = [\n      self::$LINE,\n      self::getLogLine('ERROR DB!'),\n      self::$LINE\n    ];\n    if (\\is_string($e)) {\n      $msg[] = self::getLogLine('USER MESSAGE');\n      $msg[] = $e;\n    }\n    elseif (method_exists($e, 'getMessage')) {\n      $msg[] = self::getLogLine('DB MESSAGE');\n      $msg[] = $e->getMessage();\n    }\n\n    $this->last_error = end($msg);\n\n    if ($show_last) {\n      $msg[]            = self::getLogLine('QUERY');\n      $msg[]            = $this->last();\n\n      if (($last_real_params = $this->getRealLastParams()) && !empty($last_real_params['values'])) {\n        $msg[] = self::getLogLine('VALUES');\n        foreach ($last_real_params['values'] as $v){\n          if ($v === null) {\n            $msg[] = 'NULL';\n          }\n          elseif (\\is_bool($v)) {\n            $msg[] = $v ? 'TRUE' : 'FALSE';\n          }\n          elseif (\\is_string($v)) {\n            $msg[] = Str::isBuid($v) ? bin2hex($v) : Str::cut($v, 30);\n          }\n          else{\n            $msg[] = $v;\n          }\n        }\n      }\n    }\n\n    if ($show_backtrace) {\n      $msg[] = self::getLogLine('BACKTRACE');\n      $last = '';\n      $i = 0;\n      $btr = array_map(function($a) use (&$last, &$i) {\n        $r = [\n          'dfile' => X::basename(\n            X::dirname($a['file'])).'\/'.\n            X::basename($a['file']\n          ),\n          'good' => false\n        ];\n        if (($last === 'bbn\/Db.php') && ($r['dfile'] !== $last)) {\n          $r['good'] = true;\n        }\n\n        $last = $r['dfile'];\n        $r['msg'] = \"{$a['function']}  (\".\n          $r['dfile'] . \":{$a['line']})\";\n        $i++;\n        return $r;\n      }, debug_backtrace());\n      $dbt = array_reverse($btr);\n      array_walk(\n        $dbt,\n        function ($a, $i) use (&$msg) {\n          if (isset($a['dfile'])) {\n            $msg[] = str_repeat($a['good'] ? '!' : ' ', $i).\n            ($i ? '->' : '').$a['msg'];\n          }\n        }\n      );\n    }\n\n    $this->log(implode(PHP_EOL, $msg));\n    if ($this->on_error === Errors::E_EXCEPTION) {\n      throw new \\Exception(X::join($msg, PHP_EOL));\n    }\n\n    elseif ($this->on_error === Errors::E_DIE) {\n      throw new \\Exception(X::join($msg, PHP_EOL));\n      die();\n    }\n  }",
            "parent": {
                "name": "error",
                "summary": "Set an error and acts appropriately based oon the error mode",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function error($e, bool $show_last = true, bool $show_backtrace = true): void\n  {\n    $this->_has_error = true;\n    self::_set_has_error_all();\n    $msg = [\n      self::$LINE,\n      self::getLogLine('ERROR DB!'),\n      self::$LINE\n    ];\n    if (\\is_string($e)) {\n      $msg[] = self::getLogLine('USER MESSAGE');\n      $msg[] = $e;\n    }\n    elseif (method_exists($e, 'getMessage')) {\n      $msg[] = self::getLogLine('DB MESSAGE');\n      $msg[] = $e->getMessage();\n    }\n\n    $this->last_error = end($msg);\n\n    if ($show_last) {\n      $msg[]            = self::getLogLine('QUERY');\n      $msg[]            = $this->last();\n\n      if (($last_real_params = $this->getRealLastParams()) && !empty($last_real_params['values'])) {\n        $msg[] = self::getLogLine('VALUES');\n        foreach ($last_real_params['values'] as $v){\n          if ($v === null) {\n            $msg[] = 'NULL';\n          }\n          elseif (\\is_bool($v)) {\n            $msg[] = $v ? 'TRUE' : 'FALSE';\n          }\n          elseif (\\is_string($v)) {\n            $msg[] = Str::isBuid($v) ? bin2hex($v) : Str::cut($v, 30);\n          }\n          else{\n            $msg[] = $v;\n          }\n        }\n      }\n    }\n\n    if ($show_backtrace) {\n      $msg[] = self::getLogLine('BACKTRACE');\n      $last = '';\n      $i = 0;\n      $btr = array_map(function($a) use (&$last, &$i) {\n        $r = [\n          'dfile' => X::basename(\n            X::dirname($a['file'])).'\/'.\n            X::basename($a['file']\n          ),\n          'good' => false\n        ];\n        if (($last === 'bbn\/Db.php') && ($r['dfile'] !== $last)) {\n          $r['good'] = true;\n        }\n\n        $last = $r['dfile'];\n        $r['msg'] = \"{$a['function']}  (\".\n          $r['dfile'] . \":{$a['line']})\";\n        $i++;\n        return $r;\n      }, debug_backtrace());\n      $dbt = array_reverse($btr);\n      array_walk(\n        $dbt,\n        function ($a, $i) use (&$msg) {\n          if (isset($a['dfile'])) {\n            $msg[] = str_repeat($a['good'] ? '!' : ' ', $i).\n            ($i ? '->' : '').$a['msg'];\n          }\n        }\n      );\n    }\n\n    $this->log(implode(PHP_EOL, $msg));\n    if ($this->on_error === Errors::E_EXCEPTION) {\n      throw new \\Exception(X::join($msg, PHP_EOL));\n    }\n\n    elseif ($this->on_error === Errors::E_DIE) {\n      throw new \\Exception(X::join($msg, PHP_EOL));\n      die();\n    }\n  }",
                "parent": false,
                "trait": "bbn\\Db\\HasError",
                "startLine": 51,
                "endLine": 137,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "error",
                "returns": [
                    "void"
                ],
                "arguments": [
                    {
                        "name": "e",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "show_last",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": true,
                        "default_name": "",
                        "description": "last"
                    },
                    {
                        "name": "show_backtrace",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": true,
                        "default_name": "",
                        "description": "backtrace"
                    }
                ],
                "doc": {
                    "description": "Set an error and acts appropriately based oon the error mode\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "$e"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$show",
                            "description": "last"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$show",
                            "description": "backtrace"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "\\Exception"
                    }
                },
                "comments": "  \/**\n   * Set an error and acts appropriately based oon the error mode\n   *\n   * @param $e\n   * @param bool $show_last\n   * @param bool $show_backtrace\n   * @return void\n   * @throws \\Exception\n   *\/"
            },
            "trait": "bbn\\Db\\HasError",
            "startLine": 51,
            "endLine": 137,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "error",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "e",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "show_last",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "last"
                },
                {
                    "name": "show_backtrace",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "backtrace"
                }
            ],
            "doc": {
                "description": "Set an error and acts appropriately based oon the error mode\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$e"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$show",
                        "description": "last"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$show",
                        "description": "backtrace"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * Set an error and acts appropriately based oon the error mode\n   *\n   * @param $e\n   * @param bool $show_last\n   * @param bool $show_backtrace\n   * @return void\n   * @throws \\Exception\n   *\/"
        },
        "getLogLine": {
            "name": "getLogLine",
            "summary": "Returns a string with the given text in the middle of a \"line\" of logs.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getLogLine(string $text = '')\n  {\n    if ($text) {\n      $text = ' '.$text.' ';\n    }\n\n    $tot  = \\strlen(self::$LINE) - \\strlen($text);\n    $char = \\substr(self::$LINE, 0, 1);\n    return \\str_repeat($char, floor($tot \/ 2)).$text.\\str_repeat($char, ceil($tot \/ 2));\n  }",
            "parent": {
                "name": "getLogLine",
                "summary": "Returns a string with the given text in the middle of a \"line\" of logs.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
                "static": true,
                "visibility": "public",
                "final": false,
                "code": "  public static function getLogLine(string $text = '')\n  {\n    if ($text) {\n      $text = ' '.$text.' ';\n    }\n\n    $tot  = \\strlen(self::$LINE) - \\strlen($text);\n    $char = \\substr(self::$LINE, 0, 1);\n    return \\str_repeat($char, floor($tot \/ 2)).$text.\\str_repeat($char, ceil($tot \/ 2));\n  }",
                "parent": false,
                "trait": "bbn\\Db\\HasError",
                "startLine": 155,
                "endLine": 164,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "getLogLine",
                "returns": [],
                "arguments": [
                    {
                        "name": "text",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": "",
                        "description": "The text to write"
                    }
                ],
                "doc": {
                    "description": "Returns a string with the given text in the middle of a \"line\" of logs.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$text",
                            "description": "The text to write"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns a string with the given text in the middle of a \"line\" of logs.\n   *\n   * @param string $text The text to write\n   * @return string\n   *\/"
            },
            "trait": "bbn\\Db\\HasError",
            "startLine": 155,
            "endLine": 164,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getLogLine",
            "returns": [],
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The text to write"
                }
            ],
            "doc": {
                "description": "Returns a string with the given text in the middle of a \"line\" of logs.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$text",
                        "description": "The text to write"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a string with the given text in the middle of a \"line\" of logs.\n   *\n   * @param string $text The text to write\n   * @return string\n   *\/"
        },
        "log": {
            "name": "log",
            "summary": "Writes in data\/logs\/db.log.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->$db->log('test');"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log($st): self\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      X::log($a, 'db');\n    }\n\n    return $this;\n  }",
            "parent": {
                "name": "log",
                "summary": "Writes in data\/logs\/db.log.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$db->$db->log('test');"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log($st): self\n  {\n    $args = \\func_get_args();\n    foreach ($args as $a){\n      X::log($a, 'db');\n    }\n\n    return $this;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\HasError",
                "startLine": 175,
                "endLine": 183,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "log",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "st",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Writes in data\/logs\/db.log.\n\n```php\n$db->$db->log('test');\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "mixed",
                            "name": "$st"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Writes in data\/logs\/db.log.\n   *\n   * ```php\n   * $db->$db->log('test');\n   * ```\n   * @param mixed $st\n   * @return self\n   *\/"
            },
            "trait": "bbn\\Db\\HasError",
            "startLine": 175,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "log",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Writes in data\/logs\/db.log.\n\n```php\n$db->$db->log('test');\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Writes in data\/logs\/db.log.\n   *\n   * ```php\n   * $db->$db->log('test');\n   * ```\n   * @param mixed $st\n   * @return self\n   *\/"
        },
        "setErrorMode": {
            "name": "setErrorMode",
            "summary": "Sets the error mode.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setErrorMode(string $mode)\n  {\n    $this->on_error = $mode;\n    return $this;\n  }",
            "parent": {
                "name": "setErrorMode",
                "summary": "Sets the error mode.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setErrorMode(string $mode)\n  {\n    $this->on_error = $mode;\n    return $this;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\HasError",
                "startLine": 196,
                "endLine": 200,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setErrorMode",
                "returns": [],
                "arguments": [
                    {
                        "name": "mode",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                    }
                ],
                "doc": {
                    "description": "Sets the error mode.\n\n```php\n$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$mode",
                            "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Sets the error mode.\n   *\n   * ```php\n   * $db->setErrorMode('continue'|'die'|'stop_all|'stop');\n   * \/\/ (self)\n   * ```\n   *\n   * @param string $mode The error mode: \"continue\", \"die\", \"stop\", \"stop_all\".\n   * @return self\n   *\/"
            },
            "trait": "bbn\\Db\\HasError",
            "startLine": 196,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setErrorMode",
            "returns": [],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                }
            ],
            "doc": {
                "description": "Sets the error mode.\n\n```php\n$db->setErrorMode('continue'|'die'|'stop_all|'stop');\n\/\/ (self)\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The error mode: \"continue\", \"die\", \"stop\", \"stop_all\"."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the error mode.\n   *\n   * ```php\n   * $db->setErrorMode('continue'|'die'|'stop_all|'stop');\n   * \/\/ (self)\n   * ```\n   *\n   * @param string $mode The error mode: \"continue\", \"die\", \"stop\", \"stop_all\".\n   * @return self\n   *\/"
        },
        "getErrorMode": {
            "name": "getErrorMode",
            "summary": "Gets the error mode.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::dump($db->getErrorMode());\n\/\/ (string) stop_all"
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorMode(): string\n  {\n    return $this->on_error;\n  }",
            "parent": {
                "name": "getErrorMode",
                "summary": "Gets the error mode.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::dump($db->getErrorMode());\n\/\/ (string) stop_all"
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorMode(): string\n  {\n    return $this->on_error;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\HasError",
                "startLine": 211,
                "endLine": 214,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorMode",
                "returns": [
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Gets the error mode.\n\n```php\nX::dump($db->getErrorMode());\n\/\/ (string) stop_all\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the error mode.\n   *\n   * ```php\n   * X::dump($db->getErrorMode());\n   * \/\/ (string) stop_all\n   * ```\n   * @return string\n   *\/"
            },
            "trait": "bbn\\Db\\HasError",
            "startLine": 211,
            "endLine": 214,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorMode",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Gets the error mode.\n\n```php\nX::dump($db->getErrorMode());\n\/\/ (string) stop_all\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the error mode.\n   *\n   * ```php\n   * X::dump($db->getErrorMode());\n   * \/\/ (string) stop_all\n   * ```\n   * @return string\n   *\/"
        },
        "getLastError": {
            "name": "getLastError",
            "summary": "Returns the last error.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getLastError(): ?string\n  {\n    return $this->last_error;\n  }",
            "parent": {
                "name": "getLastError",
                "summary": "Returns the last error.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getLastError(): ?string\n  {\n    return $this->last_error;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\HasError",
                "startLine": 221,
                "endLine": 224,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getLastError",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the last error.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/"
            },
            "trait": "bbn\\Db\\HasError",
            "startLine": 221,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getLastError",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the last error.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the last error.\n   *\n   * @return string|null\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks if the database is ready to process a query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check(): bool\n  {\n    if (!property_exists($this, 'current')) {\n      throw new \\Exception('Property current does not exist');\n    }\n\n    \/\/ if $on_error is set to E_CONTINUE returns true\n    if (in_array($this->on_error, [Errors::E_EXCEPTION, Errors::E_CONTINUE])) {\n      return true;\n    }\n\n    \/\/ If any connection has an error with mode E_STOP_ALL\n    if (self::$_has_error_all && ($this->on_error === Errors::E_STOP_ALL)) {\n      return false;\n    }\n\n    \/\/ If this connection has an error with mode E_STOP or E_STOP_ALL\n    if ($this->_has_error && in_array($this->on_error, [Errors::E_STOP, $this->on_error === Errors::E_STOP_ALL])) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks if the database is ready to process a query.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/HasError.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check(): bool\n  {\n    if (!property_exists($this, 'current')) {\n      throw new \\Exception('Property current does not exist');\n    }\n\n    \/\/ if $on_error is set to E_CONTINUE returns true\n    if (in_array($this->on_error, [Errors::E_EXCEPTION, Errors::E_CONTINUE])) {\n      return true;\n    }\n\n    \/\/ If any connection has an error with mode E_STOP_ALL\n    if (self::$_has_error_all && ($this->on_error === Errors::E_STOP_ALL)) {\n      return false;\n    }\n\n    \/\/ If this connection has an error with mode E_STOP or E_STOP_ALL\n    if ($this->_has_error && in_array($this->on_error, [Errors::E_STOP, $this->on_error === Errors::E_STOP_ALL])) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\HasError",
                "startLine": 232,
                "endLine": 254,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [
                    "bool"
                ],
                "arguments": [],
                "doc": {
                    "description": "Checks if the database is ready to process a query.\n",
                    "params": [],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "\\Exception"
                    }
                },
                "comments": "  \/**\n   * Checks if the database is ready to process a query.\n   *\n   * @return bool\n   * @throws \\Exception\n   *\/"
            },
            "trait": "bbn\\Db\\HasError",
            "startLine": 232,
            "endLine": 254,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks if the database is ready to process a query.\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "\\Exception"
                }
            },
            "comments": "  \/**\n   * Checks if the database is ready to process a query.\n   *\n   * @return bool\n   * @throws \\Exception\n   *\/"
        },
        "cacheInit": {
            "name": "cacheInit",
            "summary": "Initializes the cache object, must be called in __construct",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
            "parent": {
                "name": "cacheInit",
                "summary": "Initializes the cache object, must be called in __construct",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 27,
                "endLine": 33,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheInit",
                "returns": [
                    "void"
                ],
                "arguments": [],
                "doc": {
                    "description": "Initializes the cache object, must be called in __construct\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 27,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheInit",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Initializes the cache object, must be called in __construct\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
        },
        "cacheCheck": {
            "name": "cacheCheck",
            "summary": "Throws an exception if the cache has not been initialized",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
            "parent": {
                "name": "cacheCheck",
                "summary": "Throws an exception if the cache has not been initialized",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 41,
                "endLine": 46,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheCheck",
                "returns": [
                    "void"
                ],
                "arguments": [],
                "doc": {
                    "description": "Throws an exception if the cache has not been initialized\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 41,
            "endLine": 46,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheCheck",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Throws an exception if the cache has not been initialized\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
            "parent": {
                "name": "_cache_name",
                "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 57,
                "endLine": 62,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "_cache_name",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "[type]",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 57,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "Deletes all the cache related to the current class",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
            "parent": {
                "name": "cacheDeleteAll",
                "summary": "Deletes all the cache related to the current class",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 70,
                "endLine": 75,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheDeleteAll",
                "returns": [
                    "self"
                ],
                "arguments": [],
                "doc": {
                    "description": "Deletes all the cache related to the current class\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 70,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the cache related to the current class\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "Deletes the given cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
            "parent": {
                "name": "cacheDelete",
                "summary": "Deletes the given cache",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 85,
                "endLine": 90,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheDelete",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Deletes the given cache\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 85,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheDeleteLocale": {
            "name": "cacheDeleteLocale",
            "summary": "Deletes the given cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
            "parent": {
                "name": "cacheDeleteLocale",
                "summary": "Deletes the given cache for a specific locale",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 101,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheDeleteLocale",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Deletes the given cache for a specific locale\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 101,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheDeleteLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "Gets the cached data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
            "parent": {
                "name": "cacheGet",
                "summary": "Gets the cached data",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 116,
                "endLine": 120,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheGet",
                "returns": [
                    null,
                    "mixed"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the cached data\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 116,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "Gets the cached data for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
            "parent": {
                "name": "cacheGetLocale",
                "summary": "Gets the cached data for a specific locale",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 131,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetLocale",
                "returns": [
                    null,
                    "mixed"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the cached data for a specific locale\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "Sets the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
            "parent": {
                "name": "cacheSet",
                "summary": "Sets the cache",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 147,
                "endLine": 152,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheSet",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Sets the cache\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$data"
                        },
                        {
                            "tag": "param",
                            "type": "integer",
                            "name": "$ttl"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 147,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "Sets the cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
            "parent": {
                "name": "cacheSetLocale",
                "summary": "Sets the cache for a specific locale",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 165,
                "endLine": 170,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheSetLocale",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Sets the cache for a specific locale\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$data"
                        },
                        {
                            "tag": "param",
                            "type": "integer",
                            "name": "$ttl"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 165,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "Gets the cache or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
            "parent": {
                "name": "cacheGetSet",
                "summary": "Gets the cache or creates it if needs to",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 182,
                "endLine": 186,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetSet",
                "returns": [
                    null,
                    "mixed"
                ],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the cache or creates it if needs to\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "callable",
                            "name": "$fn"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "integer",
                            "name": "$ttl"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 182,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "Gets the cache for a specific locale or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
            "parent": {
                "name": "cacheGetSetLocale",
                "summary": "Gets the cache for a specific locale or creates it if needs to",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 199,
                "endLine": 203,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 3,
                "shortName": "cacheGetSetLocale",
                "returns": [
                    null,
                    "mixed"
                ],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the cache for a specific locale or creates it if needs to\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "callable",
                            "name": "$fn"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "integer",
                            "name": "$ttl"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 199,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache for a specific locale or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
            "parent": {
                "name": "cacheHas",
                "summary": "Checks whether the cache exists and is valid",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 213,
                "endLine": 217,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheHas",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Checks whether the cache exists and is valid\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 213,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
            "parent": {
                "name": "cacheHasLocale",
                "summary": "Checks whether the cache exists and is valid",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\Cache",
                "startLine": 227,
                "endLine": 231,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheHasLocale",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Checks whether the cache exists and is valid\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\Cache",
            "startLine": 227,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "emulatePreparesAndQuery": {
            "name": "emulatePreparesAndQuery",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function emulatePreparesAndQuery(string $sql)\n  {\n    $att = true;\n    try {\n      $att = $this->pdo->getAttribute(PDO::ATTR_EMULATE_PREPARES);\n    }\n    catch (Exception $e) {}\n\n    if (empty($att)) {\n      $this->pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);\n    }\n\n    $res = (bool)$this->rawQuery($sql);\n    if (empty($att)) {\n      $this->pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "emulatePreparesAndQuery",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function emulatePreparesAndQuery(string $sql)\n  {\n    $att = true;\n    try {\n      $att = $this->pdo->getAttribute(PDO::ATTR_EMULATE_PREPARES);\n    }\n    catch (Exception $e) {}\n\n    if (empty($att)) {\n      $this->pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, true);\n    }\n\n    $res = (bool)$this->rawQuery($sql);\n    if (empty($att)) {\n      $this->pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 14,
                "endLine": 32,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "emulatePreparesAndQuery",
                "returns": [],
                "arguments": [
                    {
                        "name": "sql",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 14,
            "endLine": 32,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "emulatePreparesAndQuery",
            "returns": [],
            "arguments": [
                {
                    "name": "sql",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "charsets": {
            "name": "charsets",
            "summary": "Returns the list of charsets available in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function charsets(): ?array\n  {\n    if (($sql = $this->getCharsets())\n      && ($list = $this->getRows($sql))\n    ) {\n      $list = array_map(fn($a) => $a['charset'], $list);\n      sort($list);\n      return $list;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "charsets",
                "summary": "Returns the list of charsets available in the database.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function charsets(): ?array\n  {\n    if (($sql = $this->getCharsets())\n      && ($list = $this->getRows($sql))\n    ) {\n      $list = array_map(fn($a) => $a['charset'], $list);\n      sort($list);\n      return $list;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 40,
                "endLine": 51,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "charsets",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the list of charsets available in the database.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the list of charsets available in the database.\n   *\n   * @return array|null\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 40,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "charsets",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of charsets available in the database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of charsets available in the database.\n   *\n   * @return array|null\n   *\/"
        },
        "collations": {
            "name": "collations",
            "summary": "Returns the list of collations available in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function collations(): ?array\n  {\n    if (($sql = $this->getCollations())\n      && ($list = $this->getRows($sql))\n    ) {\n      $list = array_map(fn($a) => $a['collation'], $list);\n      sort($list);\n      return $list;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "collations",
                "summary": "Returns the list of collations available in the database.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function collations(): ?array\n  {\n    if (($sql = $this->getCollations())\n      && ($list = $this->getRows($sql))\n    ) {\n      $list = array_map(fn($a) => $a['collation'], $list);\n      sort($list);\n      return $list;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 59,
                "endLine": 70,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "collations",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [],
                "doc": {
                    "description": "Returns the list of collations available in the database.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the list of collations available in the database.\n   *\n   * @return array|null\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 59,
            "endLine": 70,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "collations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the list of collations available in the database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the list of collations available in the database.\n   *\n   * @return array|null\n   *\/"
        },
        "analyzeDatabase": {
            "name": "analyzeDatabase",
            "summary": "Analyzes the given database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeDatabase(string $database): bool\n  {\n    if ($this->check()\n      && ($sql = $this->getAnalyzeDatabase($database))\n    ) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "analyzeDatabase",
                "summary": "Analyzes the given database.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function analyzeDatabase(string $database): bool\n  {\n    if ($this->check()\n      && ($sql = $this->getAnalyzeDatabase($database))\n    ) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 194,
                "endLine": 203,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "analyzeDatabase",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Analyzes the given database.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Analyzes the given database.\n   *\n   * @param string $database\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 194,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeDatabase",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Analyzes the given database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Analyzes the given database.\n   *\n   * @param string $database\n   * @return bool\n   *\/"
        },
        "getDatabaseCharset": {
            "name": "getDatabaseCharset",
            "summary": "Returns the charset of the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDatabaseCharset(string $database): ?string\n  {\n    if ($this->check()\n      && ($sql = $this->getCharsetDatabase($database))\n      && ($r = $this->getRow($sql))\n    ) {\n      return $r['charset'] ?? $r['encoding'] ?? null;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getDatabaseCharset",
                "summary": "Returns the charset of the given database",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDatabaseCharset(string $database): ?string\n  {\n    if ($this->check()\n      && ($sql = $this->getCharsetDatabase($database))\n      && ($r = $this->getRow($sql))\n    ) {\n      return $r['charset'] ?? $r['encoding'] ?? null;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 212,
                "endLine": 222,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getDatabaseCharset",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns the charset of the given database\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the charset of the given database\n   *\n   * @param string $database\n   * @return string|null\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 212,
            "endLine": 222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDatabaseCharset",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the charset of the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the charset of the given database\n   *\n   * @param string $database\n   * @return string|null\n   *\/"
        },
        "getDatabaseCollation": {
            "name": "getDatabaseCollation",
            "summary": "Returns the collation of the given database",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDatabaseCollation(string $database): ?string\n  {\n    if ($this->check()\n      && method_exists($this, 'getCollationDatabase')\n      && ($sql = $this->getCollationDatabase($database))\n      && ($r = $this->getRow($sql))\n    ) {\n      return $r['collation'] ?? null;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getDatabaseCollation",
                "summary": "Returns the collation of the given database",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDatabaseCollation(string $database): ?string\n  {\n    if ($this->check()\n      && method_exists($this, 'getCollationDatabase')\n      && ($sql = $this->getCollationDatabase($database))\n      && ($r = $this->getRow($sql))\n    ) {\n      return $r['collation'] ?? null;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 231,
                "endLine": 242,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getDatabaseCollation",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns the collation of the given database\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the collation of the given database\n   *\n   * @param string $database\n   * @return string|null\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 231,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDatabaseCollation",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the collation of the given database\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the collation of the given database\n   *\n   * @param string $database\n   * @return string|null\n   *\/"
        },
        "createTable": {
            "name": "createTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createTable(\n    string $table,\n    ?array $cfg = null,\n    bool $createKeys = true,\n    bool $createConstraints = true\n  ): bool\n  {\n    if ($sql = $this->getCreateTableRaw($table, $cfg, $createKeys, $createConstraints)) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "createTable",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function createTable(\n    string $table,\n    ?array $cfg = null,\n    bool $createKeys = true,\n    bool $createConstraints = true\n  ): bool\n  {\n    if ($sql = $this->getCreateTableRaw($table, $cfg, $createKeys, $createConstraints)) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 252,
                "endLine": 264,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "createTable",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "createKeys",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": true,
                        "default_name": "",
                        "description": "eys"
                    },
                    {
                        "name": "createConstraints",
                        "position": 3,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": true,
                        "default_name": "",
                        "description": "onstraints"
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$cfg"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$create",
                            "description": "eys"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$create",
                            "description": "onstraints"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @param bool $createKeys\n   * @param bool $createConstraints\n   * @return string\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 252,
            "endLine": 264,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "createTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "createKeys",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "eys"
                },
                {
                    "name": "createConstraints",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "onstraints"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "eys"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "onstraints"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @param bool $createKeys\n   * @param bool $createConstraints\n   * @return string\n   *\/"
        },
        "dropTable": {
            "name": "dropTable",
            "summary": "Drops a table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dropTable(string $table, ?string $database = null): bool\n  {\n    $tn = (!empty($database) ? $database . '.' : '').$table;\n    $tfn = $this->tableFullName($tn, true);\n    if (!$tfn) {\n      throw new Exception(X::_(\"Invalid table name to drop '%s'\", $tn));\n    }\n\n    if (!$this->tableExists($table, $database)) {\n      throw new Exception(X::_(\"The table %s does not exist\", $tfn));\n    }\n\n    if ($sql = $this->getDropTable($table, $database)) {\n      $this->rawQuery($sql);\n    }\n\n    return !$this->tableExists($table, $database);\n\n  }",
            "parent": {
                "name": "dropTable",
                "summary": "Drops a table",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function dropTable(string $table, ?string $database = null): bool\n  {\n    $tn = (!empty($database) ? $database . '.' : '').$table;\n    $tfn = $this->tableFullName($tn, true);\n    if (!$tfn) {\n      throw new Exception(X::_(\"Invalid table name to drop '%s'\", $tn));\n    }\n\n    if (!$this->tableExists($table, $database)) {\n      throw new Exception(X::_(\"The table %s does not exist\", $tfn));\n    }\n\n    if ($sql = $this->getDropTable($table, $database)) {\n      $this->rawQuery($sql);\n    }\n\n    return !$this->tableExists($table, $database);\n\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 274,
                "endLine": 292,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "dropTable",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "database",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Drops a table\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$database"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string|null $database\n   * @return boolean\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 274,
            "endLine": 292,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dropTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Drops a table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Drops a table\n   *\n   * @param string $table\n   * @param string|null $database\n   * @return boolean\n   *\/"
        },
        "duplicateTable": {
            "name": "duplicateTable",
            "summary": "Duplicates the given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function duplicateTable(string $source, string $target, bool $withData): bool\n  {\n    if ($this->check()) {\n      if (!Str::checkName($source) || !Str::checkName($target)) {\n        throw new Exception(X::_(\"Wrong table name '%s' or '%s'\", $source, $target));\n      }\n\n      if ($sql = $this->getDuplicateTable($source, $target, $withData)) {\n        try {\n          $this->disableKeys();\n          $res = (bool)$this->emulatePreparesAndQuery($sql);\n          $this->enableKeys();\n          return $res;\n        }\n        catch (Exception $e) {\n          return false;\n        }\n      }\n    }\n\n    return $this->check();\n  }",
            "parent": {
                "name": "duplicateTable",
                "summary": "Duplicates the given table",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function duplicateTable(string $source, string $target, bool $withData): bool\n  {\n    if ($this->check()) {\n      if (!Str::checkName($source) || !Str::checkName($target)) {\n        throw new Exception(X::_(\"Wrong table name '%s' or '%s'\", $source, $target));\n      }\n\n      if ($sql = $this->getDuplicateTable($source, $target, $withData)) {\n        try {\n          $this->disableKeys();\n          $res = (bool)$this->emulatePreparesAndQuery($sql);\n          $this->enableKeys();\n          return $res;\n        }\n        catch (Exception $e) {\n          return false;\n        }\n      }\n    }\n\n    return $this->check();\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 304,
                "endLine": 325,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 3,
                "shortName": "duplicateTable",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "source",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "target",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "withData",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ata"
                    }
                ],
                "doc": {
                    "description": "Duplicates the given table\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$source"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$target"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$with",
                            "description": "ata"
                        }
                    ],
                    "return": "",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception"
                    }
                },
                "comments": "  \/**\n   * Duplicates the given table\n   *\n   * @param string $source\n   * @param string $target\n   * @param bool $withData\n   * @return bool\n   * @throws Exception\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 304,
            "endLine": 325,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "duplicateTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "target",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "withData",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ata"
                }
            ],
            "doc": {
                "description": "Duplicates the given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$target"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "ata"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Duplicates the given table\n   *\n   * @param string $source\n   * @param string $target\n   * @param bool $withData\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "analyzeTable": {
            "name": "analyzeTable",
            "summary": "Analyzes the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function analyzeTable(string $table, ?string $database = null): bool\n  {\n    if ($this->check()\n      && ($sql = $this->getAnalyzeTable($table, $database))\n    ) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "analyzeTable",
                "summary": "Analyzes the given table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function analyzeTable(string $table, ?string $database = null): bool\n  {\n    if ($this->check()\n      && ($sql = $this->getAnalyzeTable($table, $database))\n    ) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 335,
                "endLine": 344,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "analyzeTable",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "database",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Analyzes the given table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$database"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Analyzes the given table.\n   *\n   * @param string $table\n   * @param string|null $database\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 335,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "analyzeTable",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Analyzes the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$database"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Analyzes the given table.\n   *\n   * @param string $table\n   * @param string|null $database\n   * @return bool\n   *\/"
        },
        "getTableCharset": {
            "name": "getTableCharset",
            "summary": "Returns the charset of the given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTableCharset(string $table): ?string\n  {\n    if ($this->check()\n      && ($sql = $this->getCharsetTable($table))\n      && ($r = $this->getRow($sql))\n    ) {\n      return $r['charset'] ?? $r['encoding'] ?? null;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getTableCharset",
                "summary": "Returns the charset of the given table",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getTableCharset(string $table): ?string\n  {\n    if ($this->check()\n      && ($sql = $this->getCharsetTable($table))\n      && ($r = $this->getRow($sql))\n    ) {\n      return $r['charset'] ?? $r['encoding'] ?? null;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 353,
                "endLine": 363,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getTableCharset",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns the charset of the given table\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the charset of the given table\n   *\n   * @param string $table\n   * @return string|null\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 353,
            "endLine": 363,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTableCharset",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the charset of the given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the charset of the given table\n   *\n   * @param string $table\n   * @return string|null\n   *\/"
        },
        "getTableCollation": {
            "name": "getTableCollation",
            "summary": "Returns the collation of the given table",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTableCollation(string $table): ?string\n  {\n    if ($this->check()\n      && method_exists($this, 'getCollationTable')\n      && ($sql = $this->getCollationTable($table))\n      && ($r = $this->getRow($sql))\n    ) {\n      return $r['collation'] ?? null;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getTableCollation",
                "summary": "Returns the collation of the given table",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getTableCollation(string $table): ?string\n  {\n    if ($this->check()\n      && method_exists($this, 'getCollationTable')\n      && ($sql = $this->getCollationTable($table))\n      && ($r = $this->getRow($sql))\n    ) {\n      return $r['collation'] ?? null;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 372,
                "endLine": 383,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getTableCollation",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns the collation of the given table\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the collation of the given table\n   *\n   * @param string $table\n   * @return string|null\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 372,
            "endLine": 383,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getTableCollation",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the collation of the given table\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the collation of the given table\n   *\n   * @param string $table\n   * @return string|null\n   *\/"
        },
        "createColumn": {
            "name": "createColumn",
            "summary": "Creates the given column for the given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createColumn(string $table, string $column, array $columnCfg): bool\n  {\n    if ($sql = $this->getCreateColumn($table, $column, $columnCfg)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "createColumn",
                "summary": "Creates the given column for the given table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function createColumn(string $table, string $column, array $columnCfg): bool\n  {\n    if ($sql = $this->getCreateColumn($table, $column, $columnCfg)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 394,
                "endLine": 401,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 3,
                "shortName": "createColumn",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "column",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "columnCfg",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "fg"
                    }
                ],
                "doc": {
                    "description": "Creates the given column for the given table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$column"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$column",
                            "description": "fg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $columnCfg\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 394,
            "endLine": 401,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "createColumn",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "columnCfg",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "fg"
                }
            ],
            "doc": {
                "description": "Creates the given column for the given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$column",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Creates the given column for the given table.\n   *\n   * @param string $table\n   * @param string $column\n   * @param array $columnCfg\n   * @return bool\n   *\/"
        },
        "dropColumn": {
            "name": "dropColumn",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dropColumn(string $table, string $column): bool\n  {\n    if ($sql = $this->getDropColumn($table, $column)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "dropColumn",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function dropColumn(string $table, string $column): bool\n  {\n    if ($sql = $this->getDropColumn($table, $column)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 409,
                "endLine": 416,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "dropColumn",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "column",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$column"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 409,
            "endLine": 416,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dropColumn",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $column\n   * @return bool\n   *\/"
        },
        "createKeys": {
            "name": "createKeys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createKeys(string $table, ?array $cfg = null): bool\n  {\n    if ($sql = $this->getCreateKeys($table,  $cfg)) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "createKeys",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function createKeys(string $table, ?array $cfg = null): bool\n  {\n    if ($sql = $this->getCreateKeys($table,  $cfg)) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 424,
                "endLine": 431,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "createKeys",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 424,
            "endLine": 431,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "createKeys",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return bool\n   *\/"
        },
        "dropKey": {
            "name": "dropKey",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dropKey(string $table, string $key): bool\n  {\n    if ($sql = $this->getDropKey($table, $key)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "dropKey",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function dropKey(string $table, string $key): bool\n  {\n    if ($sql = $this->getDropKey($table, $key)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 439,
                "endLine": 446,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "dropKey",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "key",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$constraint"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param string $constraint\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 439,
            "endLine": 446,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dropKey",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$constraint"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $constraint\n   * @return bool\n   *\/"
        },
        "createConstraints": {
            "name": "createConstraints",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createConstraints(string $table, ?array $cfg = null): bool\n  {\n    if ($sql = $this->getCreateConstraints($table,  $cfg)) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "createConstraints",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function createConstraints(string $table, ?array $cfg = null): bool\n  {\n    if ($sql = $this->getCreateConstraints($table,  $cfg)) {\n      return (bool)$this->emulatePreparesAndQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 454,
                "endLine": 461,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "createConstraints",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cfg",
                        "position": 1,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 454,
            "endLine": 461,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "createConstraints",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array|null $cfg\n   * @return bool\n   *\/"
        },
        "dropConstraint": {
            "name": "dropConstraint",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dropConstraint(string $table, string $constraint): bool\n  {\n    if ($sql = $this->getDropConstraint($table, $constraint)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "dropConstraint",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Commands.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function dropConstraint(string $table, string $constraint): bool\n  {\n    if ($sql = $this->getDropConstraint($table, $constraint)) {\n      return (bool)$this->rawQuery($sql);\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
                "startLine": 469,
                "endLine": 476,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "dropConstraint",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "constraint",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$constraint"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param string $table\n   * @param string $constraint\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Commands",
            "startLine": 469,
            "endLine": 476,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dropConstraint",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "constraint",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$constraint"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $constraint\n   * @return bool\n   *\/"
        },
        "getCreateDatabase": {
            "name": "getCreateDatabase",
            "summary": "Returns the SQL statement to create a database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateDatabase(string $database, ?string $enc = null, ?string $collation = null): string\n  {\n    if (Str::checkName($database)\n      && (empty($enc) || Str::checkName($enc))\n      && (empty($collation) || Str::checkName($collation))\n    ) {\n      return \"CREATE DATABASE IF NOT EXISTS \".$this->escape($database).\";\";\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getCreateDatabase",
                "summary": "Returns the SQL statement to create a database.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getCreateDatabase(string $database, ?string $enc = null, ?string $collation = null): string\n  {\n    if (Str::checkName($database)\n      && (empty($enc) || Str::checkName($enc))\n      && (empty($collation) || Str::checkName($collation))\n    ) {\n      return \"CREATE DATABASE IF NOT EXISTS \".$this->escape($database).\";\";\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 16,
                "endLine": 26,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "getCreateDatabase",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the database to create."
                    },
                    {
                        "name": "enc",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The character set to use, if any."
                    },
                    {
                        "name": "collation",
                        "position": 2,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The collation to use, if any."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to create a database.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database",
                            "description": "The name of the database to create."
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$enc",
                            "description": "The character set to use, if any."
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$collation",
                            "description": "The collation to use, if any."
                        }
                    ],
                    "return": "The SQL statement to create the database, or an empty string if the parameters are invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to create a database.\n   * @param string $database The name of the database to create.\n   * @param string|null $enc The character set to use, if any.\n   * @param string|null $collation The collation to use, if any.\n   * @return string The SQL statement to create the database, or an empty string if the parameters are invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 16,
            "endLine": 26,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "getCreateDatabase",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the database to create."
                },
                {
                    "name": "enc",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The character set to use, if any."
                },
                {
                    "name": "collation",
                    "position": 2,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The collation to use, if any."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to create a database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "The name of the database to create."
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$enc",
                        "description": "The character set to use, if any."
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$collation",
                        "description": "The collation to use, if any."
                    }
                ],
                "return": "The SQL statement to create the database, or an empty string if the parameters are invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to create a database.\n   * @param string $database The name of the database to create.\n   * @param string|null $enc The character set to use, if any.\n   * @param string|null $collation The collation to use, if any.\n   * @return string The SQL statement to create the database, or an empty string if the parameters are invalid.\n   *\/"
        },
        "getDropDatabase": {
            "name": "getDropDatabase",
            "summary": "Returns the SQL statement to drop a database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDropDatabase(string $database): string\n  {\n    if (Str::checkName($database)) {\n      return \"DROP DATABASE IF EXISTS \".$this->escape($database).\";\";\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getDropDatabase",
                "summary": "Returns the SQL statement to drop a database.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDropDatabase(string $database): string\n  {\n    if (Str::checkName($database)) {\n      return \"DROP DATABASE IF EXISTS \".$this->escape($database).\";\";\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 34,
                "endLine": 41,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getDropDatabase",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "database",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the database to drop."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to drop a database.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$database",
                            "description": "The name of the database to drop."
                        }
                    ],
                    "return": "The SQL statement to drop the database, or an empty string if the name is invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to drop a database.\n   * @param string $database The name of the database to drop.\n   * @return string The SQL statement to drop the database, or an empty string if the name is invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 34,
            "endLine": 41,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getDropDatabase",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the database to drop."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to drop a database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$database",
                        "description": "The name of the database to drop."
                    }
                ],
                "return": "The SQL statement to drop the database, or an empty string if the name is invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to drop a database.\n   * @param string $database The name of the database to drop.\n   * @return string The SQL statement to drop the database, or an empty string if the name is invalid.\n   *\/"
        },
        "getDuplicateDatabase": {
            "name": "getDuplicateDatabase",
            "summary": "Returns the SQL statement to duplicate a database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDuplicateDatabase(string $source, string $target): string\n  {\n    if (Str::checkName($source) && Str::checkName($target)) {\n      $sql = $this->getCreateDatabase($target).PHP_EOL;\n      if ($tables = $this->getTables($source)) {\n        foreach ($tables as $table) {\n          $sql .= $this->getDuplicateTable(\"$source.$table\", \"$target.$table\", false).PHP_EOL;\n        }\n\n        foreach ($tables as $i => $table) {\n          $sql .= ($i ? PHP_EOL : '') . \"INSERT INTO \" . $this->escape(\"$target.$table\") . \" SELECT * FROM \" . $this->escape(\"$source.$table\") . \";\";\n        }\n      }\n\n      return $sql;\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getDuplicateDatabase",
                "summary": "Returns the SQL statement to duplicate a database.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDuplicateDatabase(string $source, string $target): string\n  {\n    if (Str::checkName($source) && Str::checkName($target)) {\n      $sql = $this->getCreateDatabase($target).PHP_EOL;\n      if ($tables = $this->getTables($source)) {\n        foreach ($tables as $table) {\n          $sql .= $this->getDuplicateTable(\"$source.$table\", \"$target.$table\", false).PHP_EOL;\n        }\n\n        foreach ($tables as $i => $table) {\n          $sql .= ($i ? PHP_EOL : '') . \"INSERT INTO \" . $this->escape(\"$target.$table\") . \" SELECT * FROM \" . $this->escape(\"$source.$table\") . \";\";\n        }\n      }\n\n      return $sql;\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 50,
                "endLine": 68,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "getDuplicateDatabase",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "source",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame The name of the database to duplicate."
                    },
                    {
                        "name": "target",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame The name of the new database."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to duplicate a database.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$old",
                            "description": "ame The name of the database to duplicate."
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$new",
                            "description": "ame The name of the new database."
                        }
                    ],
                    "return": "The SQL statement to duplicate the database, or an empty string if the names are invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to duplicate a database.\n   * @param string $oldName The name of the database to duplicate.\n   * @param string $newName The name of the new database.\n   * @return string The SQL statement to duplicate the database, or an empty string if the names are invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 50,
            "endLine": 68,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getDuplicateDatabase",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The name of the database to duplicate."
                },
                {
                    "name": "target",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The name of the new database."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to duplicate a database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "ame The name of the database to duplicate."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "ame The name of the new database."
                    }
                ],
                "return": "The SQL statement to duplicate the database, or an empty string if the names are invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to duplicate a database.\n   * @param string $oldName The name of the database to duplicate.\n   * @param string $newName The name of the new database.\n   * @return string The SQL statement to duplicate the database, or an empty string if the names are invalid.\n   *\/"
        },
        "getRenameDatabase": {
            "name": "getRenameDatabase",
            "summary": "Returns the SQL statement to rename a database.",
            "description": "This method first duplicates the old database to the new name and then drops the old database.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "This method first duplicates the old database to the new name and then drops the old database."
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRenameDatabase(string $oldName, string $newName): string\n  {\n    if ($sql = $this->getDuplicateDatabase($oldName, $newName)) {\n      $sql .= PHP_EOL.$this->getDropDatabase($oldName);\n      return $sql;\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getRenameDatabase",
                "summary": "Returns the SQL statement to rename a database.",
                "description": "This method first duplicates the old database to the new name and then drops the old database.",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "This method first duplicates the old database to the new name and then drops the old database."
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getRenameDatabase(string $oldName, string $newName): string\n  {\n    if ($sql = $this->getDuplicateDatabase($oldName, $newName)) {\n      $sql .= PHP_EOL.$this->getDropDatabase($oldName);\n      return $sql;\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 78,
                "endLine": 86,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "getRenameDatabase",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "oldName",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame The current name of the database."
                    },
                    {
                        "name": "newName",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "ame The new name for the database."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to rename a database.\nThis method first duplicates the old database to the new name and then drops the old database.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$old",
                            "description": "ame The current name of the database."
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$new",
                            "description": "ame The new name for the database."
                        }
                    ],
                    "return": "The SQL statement to rename the database, or an empty string if the names are invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to rename a database.\n   * This method first duplicates the old database to the new name and then drops the old database.\n   * @param string $oldName The current name of the database.\n   * @param string $newName The new name for the database.\n   * @return string The SQL statement to rename the database, or an empty string if the names are invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 78,
            "endLine": 86,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getRenameDatabase",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "oldName",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The current name of the database."
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The new name for the database."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to rename a database.\nThis method first duplicates the old database to the new name and then drops the old database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "ame The current name of the database."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "ame The new name for the database."
                    }
                ],
                "return": "The SQL statement to rename the database, or an empty string if the names are invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to rename a database.\n   * This method first duplicates the old database to the new name and then drops the old database.\n   * @param string $oldName The current name of the database.\n   * @param string $newName The new name for the database.\n   * @return string The SQL statement to rename the database, or an empty string if the names are invalid.\n   *\/"
        },
        "getDropTable": {
            "name": "getDropTable",
            "summary": "Returns the SQL statement to drop a table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDropTable(string $table, ?string $database = null): string\n  {\n    if (Str::checkName($table)\n      && (empty($database) || Str::checkName($database))\n    ) {\n      $table = $this->tableFullName((!empty($database) ? \"$database.\" : '').$this->tableSimpleName($table), true);\n      return \"DROP TABLE IF EXISTS $table;\";\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getDropTable",
                "summary": "Returns the SQL statement to drop a table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDropTable(string $table, ?string $database = null): string\n  {\n    if (Str::checkName($table)\n      && (empty($database) || Str::checkName($database))\n    ) {\n      $table = $this->tableFullName((!empty($database) ? \"$database.\" : '').$this->tableSimpleName($table), true);\n      return \"DROP TABLE IF EXISTS $table;\";\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 178,
                "endLine": 188,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "getDropTable",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the table to drop."
                    },
                    {
                        "name": "database",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The name of the database, if different from the current one."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to drop a table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The name of the table to drop."
                        },
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$database",
                            "description": "The name of the database, if different from the current one."
                        }
                    ],
                    "return": "The SQL statement to drop the table, or an empty string if the parameters are invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to drop a table.\n   * @param string $table The name of the table to drop.\n   * @param string|null $database The name of the database, if different from the current one.\n   * @return string The SQL statement to drop the table, or an empty string if the parameters are invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 178,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getDropTable",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the table to drop."
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The name of the database, if different from the current one."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to drop a table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The name of the table to drop."
                    },
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$database",
                        "description": "The name of the database, if different from the current one."
                    }
                ],
                "return": "The SQL statement to drop the table, or an empty string if the parameters are invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to drop a table.\n   * @param string $table The name of the table to drop.\n   * @param string|null $database The name of the database, if different from the current one.\n   * @return string The SQL statement to drop the table, or an empty string if the parameters are invalid.\n   *\/"
        },
        "getDuplicateTable": {
            "name": "getDuplicateTable",
            "summary": "Returns the SQL statement to duplicate a table.",
            "description": "This method generates a CREATE TABLE statement for the target table based on the source table.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "This method generates a CREATE TABLE statement for the target table based on the source table."
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDuplicateTable(string $source, string $target, bool $withData = true): string\n  {\n    if (Str::checkName($source) && Str::checkName($target)) {\n      $sql = $this->getCreateTable($source);\n      $sql = str_replace(\n        'CREATE TABLE '.$this->escape($source),\n        'CREATE TABLE ' . $this->escape($target),\n        $sql\n      );\n      if ($withData) {\n        $sql .= PHP_EOL . \"INSERT INTO \" . $this->escape($target) . \" SELECT * FROM \" . $this->escape($source) . \";\";\n      }\ndie(var_dump($sql));\n      return $sql;\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getDuplicateTable",
                "summary": "Returns the SQL statement to duplicate a table.",
                "description": "This method generates a CREATE TABLE statement for the target table based on the source table.",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "This method generates a CREATE TABLE statement for the target table based on the source table."
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDuplicateTable(string $source, string $target, bool $withData = true): string\n  {\n    if (Str::checkName($source) && Str::checkName($target)) {\n      $sql = $this->getCreateTable($source);\n      $sql = str_replace(\n        'CREATE TABLE '.$this->escape($source),\n        'CREATE TABLE ' . $this->escape($target),\n        $sql\n      );\n      if ($withData) {\n        $sql .= PHP_EOL . \"INSERT INTO \" . $this->escape($target) . \" SELECT * FROM \" . $this->escape($source) . \";\";\n      }\ndie(var_dump($sql));\n      return $sql;\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 199,
                "endLine": 216,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "getDuplicateTable",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "source",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the source table."
                    },
                    {
                        "name": "target",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the target table."
                    },
                    {
                        "name": "withData",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": true,
                        "default_name": "",
                        "description": "ata Whether to include data in the duplication."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to duplicate a table.\nThis method generates a CREATE TABLE statement for the target table based on the source table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$source",
                            "description": "The name of the source table."
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$target",
                            "description": "The name of the target table."
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$with",
                            "description": "ata Whether to include data in the duplication."
                        }
                    ],
                    "return": "The SQL statement to duplicate the table, or an empty string if the parameters are invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to duplicate a table.\n   * This method generates a CREATE TABLE statement for the target table based on the source table.\n   * @param string $source The name of the source table.\n   * @param string $target The name of the target table.\n   * @param bool $withData Whether to include data in the duplication.\n   * @return string The SQL statement to duplicate the table, or an empty string if the parameters are invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 199,
            "endLine": 216,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "getDuplicateTable",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the source table."
                },
                {
                    "name": "target",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the target table."
                },
                {
                    "name": "withData",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "ata Whether to include data in the duplication."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to duplicate a table.\nThis method generates a CREATE TABLE statement for the target table based on the source table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source",
                        "description": "The name of the source table."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$target",
                        "description": "The name of the target table."
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "ata Whether to include data in the duplication."
                    }
                ],
                "return": "The SQL statement to duplicate the table, or an empty string if the parameters are invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to duplicate a table.\n   * This method generates a CREATE TABLE statement for the target table based on the source table.\n   * @param string $source The name of the source table.\n   * @param string $target The name of the target table.\n   * @param bool $withData Whether to include data in the duplication.\n   * @return string The SQL statement to duplicate the table, or an empty string if the parameters are invalid.\n   *\/"
        },
        "getAnalyzeTable": {
            "name": "getAnalyzeTable",
            "summary": "Returns the SQL statement to analyze a table.",
            "description": "This method generates an ANALYZE statement for the specified table.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "This method generates an ANALYZE statement for the specified table."
                }
            ],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAnalyzeTable(string $table): string\n  {\n    if (Str::checkName($table)) {\n      return \"ANALYZE \" . $this->tableSimpleName($table, true) . \";\";\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getAnalyzeTable",
                "summary": "Returns the SQL statement to analyze a table.",
                "description": "This method generates an ANALYZE statement for the specified table.",
                "description_parts": [
                    {
                        "type": "text",
                        "content": "This method generates an ANALYZE statement for the specified table."
                    }
                ],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getAnalyzeTable(string $table): string\n  {\n    if (Str::checkName($table)) {\n      return \"ANALYZE \" . $this->tableSimpleName($table, true) . \";\";\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 225,
                "endLine": 232,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "getAnalyzeTable",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the table to analyze."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to analyze a table.\nThis method generates an ANALYZE statement for the specified table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The name of the table to analyze."
                        }
                    ],
                    "return": "The SQL statement to analyze the table, or an empty string if the table name is invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to analyze a table.\n   * This method generates an ANALYZE statement for the specified table.\n   * @param string $table The name of the table to analyze.\n   * @return string The SQL statement to analyze the table, or an empty string if the table name is invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 225,
            "endLine": 232,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getAnalyzeTable",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the table to analyze."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to analyze a table.\nThis method generates an ANALYZE statement for the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The name of the table to analyze."
                    }
                ],
                "return": "The SQL statement to analyze the table, or an empty string if the table name is invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to analyze a table.\n   * This method generates an ANALYZE statement for the specified table.\n   * @param string $table The name of the table to analyze.\n   * @return string The SQL statement to analyze the table, or an empty string if the table name is invalid.\n   *\/"
        },
        "getCreateColumn": {
            "name": "getCreateColumn",
            "summary": "Returns the SQL statement to create a column.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCreateColumn(string $table, string $column, array $columnCfg): string\n  {\n    if (($table = $this->tableFullName($table, true))\n      && Str::checkName($column)\n      && ($columnDefinition = $this->getColumnDefinitionStatement($column, $columnCfg))\n    ) {\n      return \"ALTER TABLE $table ADD $columnDefinition;\";\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getCreateColumn",
                "summary": "Returns the SQL statement to create a column.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getCreateColumn(string $table, string $column, array $columnCfg): string\n  {\n    if (($table = $this->tableFullName($table, true))\n      && Str::checkName($column)\n      && ($columnDefinition = $this->getColumnDefinitionStatement($column, $columnCfg))\n    ) {\n      return \"ALTER TABLE $table ADD $columnDefinition;\";\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 242,
                "endLine": 252,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 3,
                "shortName": "getCreateColumn",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the table."
                    },
                    {
                        "name": "column",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the column to create."
                    },
                    {
                        "name": "columnCfg",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "fg The configuration for the column."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to create a column.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The name of the table."
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$column",
                            "description": "The name of the column to create."
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$column",
                            "description": "fg The configuration for the column."
                        }
                    ],
                    "return": "The SQL statement to create the column, or an empty string if the parameters are invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to create a column.\n   * @param string $table The name of the table.\n   * @param string $column The name of the column to create.\n   * @param array $columnCfg The configuration for the column.\n   * @return string The SQL statement to create the column, or an empty string if the parameters are invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 242,
            "endLine": 252,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "getCreateColumn",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the table."
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the column to create."
                },
                {
                    "name": "columnCfg",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "fg The configuration for the column."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to create a column.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The name of the table."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column",
                        "description": "The name of the column to create."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$column",
                        "description": "fg The configuration for the column."
                    }
                ],
                "return": "The SQL statement to create the column, or an empty string if the parameters are invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to create a column.\n   * @param string $table The name of the table.\n   * @param string $column The name of the column to create.\n   * @param array $columnCfg The configuration for the column.\n   * @return string The SQL statement to create the column, or an empty string if the parameters are invalid.\n   *\/"
        },
        "getDropColumn": {
            "name": "getDropColumn",
            "summary": "Returns the SQL statement to drop a column.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDropColumn(string $table, string $column): string\n  {\n    if (($table = $this->tableFullName($table, true))\n      && Str::checkName($column)\n    ) {\n      return \"ALTER TABLE $table DROP COLUMN $column;\";\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getDropColumn",
                "summary": "Returns the SQL statement to drop a column.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDropColumn(string $table, string $column): string\n  {\n    if (($table = $this->tableFullName($table, true))\n      && Str::checkName($column)\n    ) {\n      return \"ALTER TABLE $table DROP COLUMN $column;\";\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 261,
                "endLine": 270,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "getDropColumn",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the table."
                    },
                    {
                        "name": "column",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The name of the column to drop."
                    }
                ],
                "doc": {
                    "description": "Returns the SQL statement to drop a column.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$table",
                            "description": "The name of the table."
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$column",
                            "description": "The name of the column to drop."
                        }
                    ],
                    "return": "The SQL statement to drop the column, or an empty string if the parameters are invalid."
                },
                "comments": "  \/**\n   * Returns the SQL statement to drop a column.\n   * @param string $table The name of the table.\n   * @param string $column The name of the column to drop.\n   * @return string The SQL statement to drop the column, or an empty string if the parameters are invalid.\n   *\/"
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 261,
            "endLine": 270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getDropColumn",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the table."
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the column to drop."
                }
            ],
            "doc": {
                "description": "Returns the SQL statement to drop a column.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table",
                        "description": "The name of the table."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$column",
                        "description": "The name of the column to drop."
                    }
                ],
                "return": "The SQL statement to drop the column, or an empty string if the parameters are invalid."
            },
            "comments": "  \/**\n   * Returns the SQL statement to drop a column.\n   * @param string $table The name of the table.\n   * @param string $column The name of the column to drop.\n   * @return string The SQL statement to drop the column, or an empty string if the parameters are invalid.\n   *\/"
        },
        "getDropKey": {
            "name": "getDropKey",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Db\\Languages\\Sql",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDropKey(string $table, string $key): string\n  {\n    if (($table = $this->tableFullName($table, true))\n      && Str::checkName($key)\n    ) {\n      return 'ALTER TABLE '.$this->escape($table).' DROP KEY '.$this->escape($key).';';\n    }\n\n    return '';\n  }",
            "parent": {
                "name": "getDropKey",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Db\\Languages\\Sql",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Models\/Sql\/Formatters.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getDropKey(string $table, string $key): string\n  {\n    if (($table = $this->tableFullName($table, true))\n      && Str::checkName($key)\n    ) {\n      return 'ALTER TABLE '.$this->escape($table).' DROP KEY '.$this->escape($key).';';\n    }\n\n    return '';\n  }",
                "parent": false,
                "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
                "startLine": 273,
                "endLine": 282,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "getDropKey",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "key",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\Db\\Languages\\Models\\Sql\\Formatters",
            "startLine": 273,
            "endLine": 282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getDropKey",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "qte": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var string The quote character",
                "tags": []
            },
            "parent": {
                "name": "qte",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "@var string The quote character",
                    "tags": []
                },
                "parent": false,
                "value": "`"
            },
            "value": "\""
        },
        "operators": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var array Allowed operators",
                "tags": []
            },
            "parent": {
                "name": "operators",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "@var array Allowed operators",
                    "tags": []
                },
                "parent": false,
                "value": [
                    "!=",
                    "=",
                    "<>",
                    "<",
                    "<=",
                    ">",
                    ">=",
                    "like",
                    "clike",
                    "slike",
                    "not",
                    "is",
                    "is not",
                    "in",
                    "between",
                    "not like"
                ]
            },
            "value": [
                "!=",
                "=",
                "<>",
                "<",
                "<=",
                ">",
                ">=",
                "like",
                "clike",
                "slike",
                "not",
                "is",
                "is not",
                "in",
                "between",
                "not like"
            ]
        },
        "numeric_types": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var array Numeric column types",
                "tags": []
            },
            "parent": {
                "name": "numeric_types",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "@var array Numeric column types",
                    "tags": []
                },
                "parent": false,
                "value": [
                    "integer",
                    "int",
                    "smallint",
                    "tinyint",
                    "mediumint",
                    "bigint",
                    "decimal",
                    "numeric",
                    "float",
                    "double"
                ]
            },
            "value": [
                "integer",
                "real"
            ]
        },
        "date_types": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var array Time and date column types don't exist in SQLite",
                "tags": []
            },
            "parent": {
                "name": "date_types",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "@var array Time and date column types",
                    "tags": []
                },
                "parent": false,
                "value": [
                    "date",
                    "time",
                    "datetime"
                ]
            },
            "value": []
        },
        "types": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": {
                "name": "types",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "public",
                "doc": "",
                "parent": false,
                "value": [
                    "tinyint",
                    "smallint",
                    "mediumint",
                    "int",
                    "bigint",
                    "decimal",
                    "float",
                    "double",
                    "bit",
                    "char",
                    "varchar",
                    "binary",
                    "varbinary",
                    "tinyblob",
                    "blob",
                    "mediumblob",
                    "longblob",
                    "tinytext",
                    "text",
                    "mediumtext",
                    "longtext",
                    "enum",
                    "set",
                    "date",
                    "time",
                    "datetime",
                    "timestamp",
                    "year",
                    "geometry",
                    "point",
                    "linestring",
                    "polygon",
                    "geometrycollection",
                    "multilinestring",
                    "multipoint",
                    "multipolygon",
                    "json"
                ]
            },
            "value": [
                "integer",
                "real",
                "text",
                "blob"
            ]
        },
        "interoperability": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": {
                "name": "interoperability",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "public",
                "doc": "",
                "parent": false,
                "value": {
                    "integer": "int",
                    "real": "decimal",
                    "text": "text",
                    "blob": "blob"
                }
            },
            "value": {
                "tinyint": "integer",
                "smallint": "integer",
                "mediumint": "integer",
                "int": "integer",
                "bigint": "integer",
                "decimal": "real",
                "float": "real",
                "double": "real",
                "bit": "",
                "char": "",
                "varchar": "text",
                "binary": "blob",
                "varbinary": "blob",
                "tinyblob": "blob",
                "blob": "blob",
                "mediumblob": "blob",
                "longblob": "blob",
                "tinytext": "text",
                "text": "text",
                "mediumtext": "text",
                "longtext": "text",
                "enum": "text",
                "set": "text",
                "date": "text",
                "time": "text",
                "datetime": "text",
                "timestamp": "integer",
                "year": "integer",
                "json": "text"
            }
        },
        "aggr_functions": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": {
                "name": "aggr_functions",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "public",
                "doc": "",
                "parent": false,
                "value": [
                    "AVG",
                    "BIT_AND",
                    "BIT_OR",
                    "COUNT",
                    "GROUP_CONCAT",
                    "MAX",
                    "MIN",
                    "STD",
                    "STDDEV_POP",
                    "STDDEV_SAMP",
                    "STDDEV",
                    "SUM",
                    "VAR_POP",
                    "VAR_SAMP",
                    "VARIANCE"
                ]
            },
            "value": [
                "AVG",
                "COUNT",
                "GROUP_CONCAT",
                "MAX",
                "MIN",
                "SUM"
            ]
        },
        "defaultCharset": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "defaultCharset",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": "UTF-8"
        },
        "sqlite_keys_enabled": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sqlite"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sqlite",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "array",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "cfg",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "array",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "connection_code": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string The connection code as it would be stored in option",
                "tags": []
            },
            "parent": {
                "name": "connection_code",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var string The connection code as it would be stored in option",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "host": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The host of this connection\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$host"
                    }
                ]
            },
            "parent": {
                "name": "host",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "The host of this connection\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string",
                            "name": "$host"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "username": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The username of this connection\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string|null",
                        "name": "$username"
                    }
                ]
            },
            "parent": {
                "name": "username",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "The username of this connection\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string|null",
                            "name": "$username"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "defaultCollation": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "defaultCollation",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "defaultEngine": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "defaultEngine",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "write_kinds": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array The 'kinds' of writing statement",
                "tags": []
            },
            "parent": {
                "name": "write_kinds",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var array The 'kinds' of writing statement",
                    "tags": []
                },
                "parent": false,
                "value": [
                    "INSERT",
                    "UPDATE",
                    "DELETE",
                    "DROP",
                    "ALTER",
                    "CREATE",
                    "RENAME"
                ]
            },
            "value": [
                "INSERT",
                "UPDATE",
                "DELETE",
                "DROP",
                "ALTER",
                "CREATE",
                "RENAME"
            ]
        },
        "read_kinds": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array The 'kinds' of reading statement",
                "tags": []
            },
            "parent": {
                "name": "read_kinds",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var array The 'kinds' of reading statement",
                    "tags": []
                },
                "parent": false,
                "value": [
                    "SELECT",
                    "SHOW"
                ]
            },
            "value": [
                "SELECT",
                "SHOW"
            ]
        },
        "structure_kinds": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array The 'kinds' of structure alteration statement",
                "tags": []
            },
            "parent": {
                "name": "structure_kinds",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var array The 'kinds' of structure alteration statement",
                    "tags": []
                },
                "parent": false,
                "value": [
                    "DROP",
                    "ALTER",
                    "CREATE",
                    "RENAME"
                ]
            },
            "value": [
                "DROP",
                "ALTER",
                "CREATE",
                "RENAME"
            ]
        },
        "cache": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "name": "$cache"
                    }
                ]
            },
            "parent": {
                "name": "cache",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "mixed",
                            "name": "$cache"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "cache_renewal": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "integer",
                        "name": "$cache",
                        "description": "renewal"
                    }
                ]
            },
            "parent": {
                "name": "cache_renewal",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "integer",
                            "name": "$cache",
                            "description": "renewal"
                        }
                    ]
                },
                "parent": false,
                "value": 3600
            },
            "value": 3600
        },
        "pdo": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "PDO",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "PDO"
                    }
                ]
            },
            "parent": {
                "name": "pdo",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "PDO",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "PDO"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "queries": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "name": "$queries"
                    }
                ]
            },
            "parent": {
                "name": "queries",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array",
                            "name": "$queries"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "list_queries": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "name": "$list",
                        "description": "queries"
                    }
                ]
            },
            "parent": {
                "name": "list_queries",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array",
                            "name": "$list",
                            "description": "queries"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "_triggers_disabled": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool"
                    }
                ]
            },
            "parent": {
                "name": "_triggers_disabled",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "bool"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "id_just_inserted": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "name": "$id",
                        "description": "just_inserted"
                    }
                ]
            },
            "parent": {
                "name": "id_just_inserted",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "mixed",
                            "name": "$id",
                            "description": "just_inserted"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "last_insert_id": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "name": "$last",
                        "description": "insert_id"
                    }
                ]
            },
            "parent": {
                "name": "last_insert_id",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "mixed",
                            "name": "$last",
                            "description": "insert_id"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "last_params": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The information that will be accessed by Db\\Query as the current statement's options\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "name": "$last",
                        "description": "params"
                    }
                ]
            },
            "parent": {
                "name": "last_params",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "The information that will be accessed by Db\\Query as the current statement's options\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array",
                            "name": "$last",
                            "description": "params"
                        }
                    ]
                },
                "parent": false,
                "value": {
                    "sequences": false,
                    "values": false
                }
            },
            "value": {
                "sequences": false,
                "values": false
            }
        },
        "last_query": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$last",
                        "description": "query"
                    }
                ]
            },
            "parent": {
                "name": "last_query",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string",
                            "name": "$last",
                            "description": "query"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "last_real_query": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$last",
                        "description": "query"
                    }
                ]
            },
            "parent": {
                "name": "last_real_query",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string",
                            "name": "$last",
                            "description": "query"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "last_real_params": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "name": "$last",
                        "description": "real_params"
                    }
                ]
            },
            "parent": {
                "name": "last_real_params",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array",
                            "name": "$last",
                            "description": "real_params"
                        }
                    ]
                },
                "parent": false,
                "value": {
                    "sequences": false,
                    "values": false
                }
            },
            "value": {
                "sequences": false,
                "values": false
            }
        },
        "_last_enabled": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "When set to true last_query will be filled with the latest statement.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool"
                    }
                ]
            },
            "parent": {
                "name": "_last_enabled",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "When set to true last_query will be filled with the latest statement.\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "bool"
                        }
                    ]
                },
                "parent": false,
                "value": true
            },
            "value": true
        },
        "max_queries": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "int",
                        "name": "$max",
                        "description": "queries"
                    }
                ]
            },
            "parent": {
                "name": "max_queries",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "int",
                            "name": "$max",
                            "description": "queries"
                        }
                    ]
                },
                "parent": false,
                "value": 50
            },
            "value": 50
        },
        "length_queries": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "int",
                        "name": "$length",
                        "description": "queries"
                    }
                ]
            },
            "parent": {
                "name": "length_queries",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "int",
                            "name": "$length",
                            "description": "queries"
                        }
                    ]
                },
                "parent": false,
                "value": 60
            },
            "value": 60
        },
        "hash_contour": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "name": "$hash",
                        "description": "contour"
                    }
                ]
            },
            "parent": {
                "name": "hash_contour",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "mixed",
                            "name": "$hash",
                            "description": "contour"
                        }
                    ]
                },
                "parent": false,
                "value": "__BBN__"
            },
            "value": "__BBN__"
        },
        "hash": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "Unique string identifier for current connection\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": {
                "name": "hash",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "Unique string identifier for current connection\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "cfgs": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "name": "$cfgs",
                        "description": "The configs recorded for helpers functions"
                    }
                ]
            },
            "parent": {
                "name": "cfgs",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array",
                            "name": "$cfgs",
                            "description": "The configs recorded for helpers functions"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "_triggers": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "An array of functions for launching triggers on actions\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "_triggers",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "An array of functions for launching triggers on actions\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": {
                    "SELECT": {
                        "before": [],
                        "after": []
                    },
                    "INSERT": {
                        "before": [],
                        "after": []
                    },
                    "UPDATE": {
                        "before": [],
                        "after": []
                    },
                    "DELETE": {
                        "before": [],
                        "after": []
                    }
                }
            },
            "value": {
                "SELECT": {
                    "before": [],
                    "after": []
                },
                "INSERT": {
                    "before": [],
                    "after": []
                },
                "UPDATE": {
                    "before": [],
                    "after": []
                },
                "DELETE": {
                    "before": [],
                    "after": []
                }
            }
        },
        "last_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "name": "$last",
                        "description": "cfg"
                    }
                ]
            },
            "parent": {
                "name": "last_cfg",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array",
                            "name": "$last",
                            "description": "cfg"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "_fancy": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "If set to false, Query will return a regular PDOStatement\nUse stopFancyStuff() to set it to false\nAnd use startFancyStuff to set it back to true\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "int",
                        "name": "$fancy"
                    }
                ]
            },
            "parent": {
                "name": "_fancy",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "If set to false, Query will return a regular PDOStatement\nUse stopFancyStuff() to set it to false\nAnd use startFancyStuff to set it back to true\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "int",
                            "name": "$fancy"
                        }
                    ]
                },
                "parent": false,
                "value": 1
            },
            "value": 1
        },
        "current": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\Languages\\Sql",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "The currently selected database\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "name": "$current"
                    }
                ]
            },
            "parent": {
                "name": "current",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\Languages\\Sql",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "The currently selected database\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "mixed",
                            "name": "$current"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "LINE": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\HasError",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "An elegant separator",
                "tags": []
            },
            "parent": {
                "name": "LINE",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\HasError",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "An elegant separator",
                    "tags": []
                },
                "parent": false,
                "value": "---------------------------------------------------------------------------------"
            },
            "value": "---------------------------------------------------------------------------------"
        },
        "_has_error_all": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\HasError",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "Error state of the current connection\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool"
                    }
                ]
            },
            "parent": {
                "name": "_has_error_all",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\HasError",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "Error state of the current connection\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "bool"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "_has_error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\HasError",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "Error state of the current connection\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "name": "$has",
                        "description": "error"
                    }
                ]
            },
            "parent": {
                "name": "_has_error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\HasError",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "Error state of the current connection\n",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "bool",
                            "name": "$has",
                            "description": "error"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "last_error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\HasError",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$last",
                        "description": "error"
                    }
                ]
            },
            "parent": {
                "name": "last_error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\HasError",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string",
                            "name": "$last",
                            "description": "error"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "on_error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Db\\HasError",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "name": "$on",
                        "description": "error\nPossible values:\n*    stop: the script will go on but no further database query will be executed\n*    die: the script will die with the error\n*    continue: the script and further queries will be executed"
                    }
                ]
            },
            "parent": {
                "name": "on_error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Db\\HasError",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string",
                            "name": "$on",
                            "description": "error\nPossible values:\n*    stop: the script will go on but no further database query will be executed\n*    die: the script will die with the error\n*    continue: the script and further queries will be executed"
                        }
                    ]
                },
                "parent": false,
                "value": "exception"
            },
            "value": "exception"
        },
        "cache_engine": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Db\\Languages\\Sql"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "cache_engine",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Db\\Languages\\Sql"
                },
                "declaring_trait": "bbn\\Models\\Tts\\Cache",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        }
    },
    "staticProperties": {
        "operators": [
            "!=",
            "=",
            "<>",
            "<",
            "<=",
            ">",
            ">=",
            "like",
            "clike",
            "slike",
            "not",
            "is",
            "is not",
            "in",
            "between",
            "not like"
        ],
        "numeric_types": [
            "integer",
            "real"
        ],
        "date_types": [],
        "types": [
            "integer",
            "real",
            "text",
            "blob"
        ],
        "interoperability": {
            "tinyint": "integer",
            "smallint": "integer",
            "mediumint": "integer",
            "int": "integer",
            "bigint": "integer",
            "decimal": "real",
            "float": "real",
            "double": "real",
            "bit": "",
            "char": "",
            "varchar": "text",
            "binary": "blob",
            "varbinary": "blob",
            "tinyblob": "blob",
            "blob": "blob",
            "mediumblob": "blob",
            "longblob": "blob",
            "tinytext": "text",
            "text": "text",
            "mediumtext": "text",
            "longtext": "text",
            "enum": "text",
            "set": "text",
            "date": "text",
            "time": "text",
            "datetime": "text",
            "timestamp": "integer",
            "year": "integer",
            "json": "text"
        },
        "aggr_functions": [
            "AVG",
            "COUNT",
            "GROUP_CONCAT",
            "MAX",
            "MIN",
            "SUM"
        ],
        "defaultCharset": "UTF-8",
        "defaultCollation": null,
        "defaultEngine": null,
        "write_kinds": [
            "INSERT",
            "UPDATE",
            "DELETE",
            "DROP",
            "ALTER",
            "CREATE",
            "RENAME"
        ],
        "read_kinds": [
            "SELECT",
            "SHOW"
        ],
        "structure_kinds": [
            "DROP",
            "ALTER",
            "CREATE",
            "RENAME"
        ],
        "LINE": "---------------------------------------------------------------------------------",
        "_has_error_all": false
    },
    "constants": null,
    "uses": {
        "Exception": "Exception",
        "PDO": "PDO",
        "PDOException": "PDOException",
        "bbn\\Str": "Str",
        "bbn\\X": "X",
        "bbn\\File\\Dir": "Dir",
        "bbn\\Appui\\Option": "Option"
    },
    "dummyComments": [
        "\/**\n * @package db\n *\/",
        "\/**\n * Database Class\n *\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Apr 4, 2011, 23:23:55 +0000\n * @category  Database\n * @license   http:\/\/www.opensource.org\/licenses\/mit-license.php MIT\n * @version 0.4\n *\/"
    ],
    "summary": "Database Class",
    "description": "",
    "description_parts": []
}