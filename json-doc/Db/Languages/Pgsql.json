{
    "doc": {
        "description": "Database Class",
        "tags": {
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Database",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.4"
        }
    },
    "name": "bbn\\Db\\Languages\\Pgsql",
    "namespace": true,
    "traits": [],
    "interfaces": {
        "bbn\\Db\\Engines": {
            "name": "bbn\\Db\\Engines"
        }
    },
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/Db\/Languages\/Pgsql.php",
    "startLine": 22,
    "endLine": 1891,
    "contentConstructor": {
        "file": "bbn\\Db\\Languages\\Pgsql",
        "returns": null
    },
    "methods": {
        "isAggregateFunction": {
            "name": "isAggregateFunction",
            "summary": "Returns true if the column name is an aggregate function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($f)\n  {\n    foreach (self::$aggr_functions as $a) {\n      if (preg_match('\/' . $a . '\\\\s*\\\\(\/i', $f)) {\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 112,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "f",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db = NULL)\n  {\n    if (!\\extension_loaded('pdo_mysql')) {\n      die('The MySQL driver for PDO is not installed...');\n    }\n\n    $this->db = $db;\n  }",
            "startLine": 128,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getConnection": {
            "name": "getConnection",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = [])\n  {\n    if (!X::hasProps($cfg, ['host', 'user'])) {\n      if (!defined('BBN_DB_HOST')) {\n        die(\"No DB host defined\");\n      }\n\n      $cfg = [\n        'host' => BBN_DB_HOST,\n        'user' => defined('BBN_DB_USER') ? BBN_DB_USER : '',\n        'pass' => defined('BBN_DB_PASS') ? BBN_DB_PASS : '',\n        'db' => defined('BBN_DATABASE') ? BBN_DATABASE : '',\n      ];\n    }\n\n    $cfg['engine'] = 'mysql';\n    if (empty($cfg['host'])) {\n      $cfg['host'] = '127.0.0.1';\n    }\n\n    if (empty($cfg['user'])) {\n      $cfg['user'] = 'root';\n    }\n\n    if (!isset($cfg['pass'])) {\n      $cfg['pass'] = '';\n    }\n\n    if (empty($cfg['port']) || !is_int($cfg['port'])) {\n      $cfg['port'] = 5432;\n    }\n\n\n    $cfg['code_db']   = $cfg['db'];\n    $cfg['code_host'] = $cfg['user'].'@'.$cfg['host'];\n    $cfg['args']      = [\n      'pgsql:host='\n        .(in_array($cfg['host'], ['localhost', '127.0.0.1']) ? gethostname() : $cfg['host'])\n        .';port='.$cfg['port']\n        .(empty($cfg['db']) ? '' : ';dbname=' . $cfg['db']),\n      $cfg['user'],\n      $cfg['pass'],\n      [],\n    ];\n    return $cfg;\n  }",
            "startLine": 151,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The user's options"
                }
            ]
        },
        "postCreation": {
            "name": "postCreation",
            "summary": "Actions to do once the PDO object has been created",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return;\n  }",
            "startLine": 204,
            "endLine": 207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "change": {
            "name": "change",
            "summary": "Changes the current database to the given one.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($db)\n  {\n    if (($this->db->getCurrent() !== $db) && bbn\\Str::checkName($db)) {\n      $this->db->rawQuery(\"USE `$db`\");\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 215,
            "endLine": 223,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The database name or file"
                }
            ]
        },
        "escape": {
            "name": "escape",
            "summary": "Returns a database item expression escaped like database, table, column, key names",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($item)\n  {\n    $items = explode('.', str_replace($this->qte, '', $item));\n    $r     = [];\n    foreach ($items as $m) {\n      if (!bbn\\Str::checkName($m)) {\n        return false;\n      }\n\n      $r[] = $this->qte . $m . $this->qte;\n    }\n\n    return implode('.', $r);\n  }",
            "startLine": 232,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableFullName": {
            "name": "tableFullName",
            "summary": "Returns a table's full name i.e. database.table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    $bits = explode('.', $table);\n    if (\\count($bits) === 3) {\n      $db    = trim($bits[0], ' ' . $this->qte);\n      $table = trim($bits[1]);\n    } elseif (\\count($bits) === 2) {\n      $db    = trim($bits[0], ' ' . $this->qte);\n      $table = trim($bits[1], ' ' . $this->qte);\n    } else {\n      $db    = $this->db->getCurrent();\n      $table = trim($bits[0], ' ' . $this->qte);\n    }\n\n    if (bbn\\Str::checkName($db, $table)) {\n      return $escaped ? $this->qte . $db . $this->qte . '.' . $this->qte . $table . $this->qte : $db . '.' . $table;\n    }\n\n    return null;\n  }",
            "startLine": 255,
            "endLine": 274,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "tableSimpleName": {
            "name": "tableSimpleName",
            "summary": "Returns a table's simple name i.e. table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $escaped = false)\n  {\n    if ($table = trim($table)) {\n      $bits = explode('.', $table);\n      switch (\\count($bits)) {\n        case 1:\n          $table = trim($bits[0], ' ' . $this->qte);\n          break;\n        case 2:\n          $table = trim($bits[1], ' ' . $this->qte);\n          break;\n        case 3:\n          $table = trim($bits[1], ' ' . $this->qte);\n          break;\n      }\n\n      if (bbn\\Str::checkName($table)) {\n        return $escaped ? $this->qte . $table . $this->qte : $table;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 284,
            "endLine": 306,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "colFullName": {
            "name": "colFullName",
            "summary": "Returns a column's full name i.e. table.column",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $table = NULL, $escaped = false)\n  {\n    if ($col = trim($col)) {\n      $bits = explode('.', $col);\n      $ok   = null;\n      $col  = trim(array_pop($bits), ' ' . $this->qte);\n      if ($table && ($table = $this->tableSimpleName($table))) {\n        $ok = 1;\n      } elseif (\\count($bits)) {\n        $table = trim(array_pop($bits), ' ' . $this->qte);\n        $ok    = 1;\n      }\n\n      if ((null !== $ok) && bbn\\Str::checkName($table, $col)) {\n        return $escaped ? $this->qte . $table . $this->qte . '.' . $this->qte . $col . $this->qte : $table . '.' . $col;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 317,
            "endLine": 336,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name (escaped or not)"
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 2,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "colSimpleName": {
            "name": "colSimpleName",
            "summary": "Returns a column's simple name i.e. column",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col, $escaped = false)\n  {\n    if ($bits = explode('.', $col)) {\n      $col = trim(end($bits), ' ' . $this->qte);\n      if (bbn\\Str::checkName($col)) {\n        return $escaped ? $this->qte . $col . $this->qte : $col;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 346,
            "endLine": 356,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "If set to true the returned string will be escaped"
                },
                {
                    "name": "escaped",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "isTableFullName": {
            "name": "isTableFullName",
            "summary": "Returns true if the given string is the full name of a table ('database.table').",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return strpos($table, '.') ? true : false;\n  }",
            "startLine": 364,
            "endLine": 367,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isColFullName": {
            "name": "isColFullName",
            "summary": "Returns true if the given string is the full name of a column ('table.column').",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($col)\n  {\n    return (bool)strpos($col, '.');\n  }",
            "startLine": 375,
            "endLine": 378,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "col",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "disableKeys": {
            "name": "disableKeys",
            "summary": "Disables foreign keys check.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->db->rawQuery('SET FOREIGN_KEY_CHECKS=0;');\n    return $this->db;\n  }",
            "startLine": 386,
            "endLine": 390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Db"
            ],
            "parent": false,
            "arguments": []
        },
        "enableKeys": {
            "name": "enableKeys",
            "summary": "Enables foreign keys check.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->db->rawQuery('SET FOREIGN_KEY_CHECKS=1;');\n    return $this->db;\n  }",
            "startLine": 398,
            "endLine": 402,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Db"
            ],
            "parent": false,
            "arguments": []
        },
        "getDatabases": {
            "name": "getDatabases",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->db->check()) {\n      return null;\n    }\n\n    $x = [];\n    if ($r = $this->db->rawQuery('SHOW DATABASES')) {\n      $x = array_map(\n        function ($a) {\n          return $a['Database'];\n        }, array_filter(\n          $r->fetchAll(\\PDO::FETCH_ASSOC), function ($a) {\n            return ($a['Database'] === 'information_schema') || ($a['Database'] === 'mysql') ? false : 1;\n          }\n        )\n      );\n      sort($x);\n    }\n\n    return $x;\n  }",
            "startLine": 408,
            "endLine": 429,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getTables": {
            "name": "getTables",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database = '')\n  {\n    if (!$this->db->check()) {\n      return null;\n    }\n\n    if (empty($database) || !bbn\\Str::checkName($database)) {\n      $database = $this->db->getCurrent();\n    }\n\n    $t2 = [];\n    if (($r = $this->db->rawQuery(\"SHOW TABLES FROM `$database`\"))\n        && ($t1 = $r->fetchAll(\\PDO::FETCH_NUM))\n    ) {\n      foreach ($t1 as $t) {\n        $t2[] = $t[0];\n      }\n    }\n\n    return $t2;\n  }",
            "startLine": 436,
            "endLine": 456,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "Database name"
                }
            ]
        },
        "getColumns": {
            "name": "getColumns",
            "summary": "Returns the columns' configuration of the given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if (!$this->db->check()) {\n      return null;\n    }\n\n    $r = [];\n    if ($full = $this->tableFullName($table)) {\n      $t            = explode('.', $full);\n      [$db, $table] = $t;\n      $sql          = <<<MYSQL\n        SELECT *\n        FROM `information_schema`.`COLUMNS`\n        WHERE `TABLE_NAME` LIKE ?\n        AND `TABLE_SCHEMA` LIKE ?\n        ORDER BY `ORDINAL_POSITION` ASC\nMYSQL;\n      if ($rows = $this->db->getRows($sql, $table, $db)) {\n        $p = 1;\n        foreach ($rows as $row) {\n          $f          = $row['COLUMN_NAME'];\n          $has_length = (stripos($row['DATA_TYPE'], 'text') === false)\n            && (stripos($row['DATA_TYPE'], 'blob') === false)\n            && ($row['EXTRA'] !== 'VIRTUAL GENERATED');\n          $r[$f]      = [\n            'position' => $p++,\n            'type' => $row['DATA_TYPE'],\n            'null' => $row['IS_NULLABLE'] === 'NO' ? 0 : 1,\n            'key' => \\in_array($row['COLUMN_KEY'], ['PRI', 'UNI', 'MUL']) ? $row['COLUMN_KEY'] : null,\n            'extra' => $row['EXTRA'],\n            'signed' => strpos($row['COLUMN_TYPE'], ' unsigned') === false,\n            'virtual' => $row['EXTRA'] === 'VIRTUAL GENERATED',\n            'generation' => $row['GENERATION_EXPRESSION'],\n          ];\n          if (($row['COLUMN_DEFAULT'] !== null) || ($row['IS_NULLABLE'] === 'YES')) {\n            $r[$f]['default'] = \\is_null($row['COLUMN_DEFAULT']) ? 'NULL' : $row['COLUMN_DEFAULT'];\n          }\n\n          if (($r[$f]['type'] === 'enum') || ($r[$f]['type'] === 'set')) {\n            if (preg_match_all('\/\\((.*?)\\)\/', $row['COLUMN_TYPE'], $matches)\n                && !empty($matches[1])\n                && \\is_string($matches[1][0])\n                && ($matches[1][0][0] === \"'\")\n            ) {\n              $r[$f]['values'] = explode(\"','\", substr($matches[1][0], 1, -1));\n              $r[$f]['extra']  = $matches[1][0];\n            } else {\n              $r[$f]['values'] = [];\n            }\n          } elseif (preg_match_all('\/\\((\\d+)?(?:,)|(\\d+)\\)\/', $row['COLUMN_TYPE'], $matches)) {\n            if (empty($matches[1][0])) {\n              if (!empty($matches[2][0])) {\n                $r[$f]['maxlength'] = (int)$matches[2][0];\n              }\n            } else {\n              $r[$f]['maxlength'] = (int)$matches[1][0];\n              $r[$f]['decimals']  = (int)$matches[2][1];\n            }\n          }\n        }\n\n        \/*\n        else{\n        preg_match_all('\/(.*?)\\(\/', $row['Type'], $real_type);\n        if ( strpos($row['Type'],'text') !== false ){\n        $r[$f]['type'] = 'text';\n        }\n        else if ( strpos($row['Type'],'blob') !== false ){\n        $r[$f]['type'] = 'blob';\n        }\n        else if ( strpos($row['Type'],'int(') !== false ){\n        $r[$f]['type'] = 'int';\n        }\n        else if ( strpos($row['Type'],'char(') !== false ){\n        $r[$f]['type'] = 'varchar';\n        }\n        if ( preg_match_all('\/\\((.*?)\\)\/', $row['Type'], $matches) ){\n        $r[$f]['maxlength'] = (int)$matches[1][0];\n        }\n        if ( !isset($r[$f]['type']) ){\n        $r[$f]['type'] = strpos($row['Type'], '(') ? substr($row['Type'],0,strpos($row['Type'], '(')) : $row['Type'];\n        }\n        }\n        *\/\n      }\n    }\n\n    return $r;\n  }",
            "startLine": 464,
            "endLine": 552,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "getKeys": {
            "name": "getKeys",
            "summary": "Returns the keys of the given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if (!$this->db->check()) {\n      return null;\n    }\n\n    $r = [];\n    if ($full = $this->tableFullName($table)) {\n      $t            = explode('.', $full);\n      [$db, $table] = $t;\n      $r            = [];\n      $indexes      = $this->db->getRows('SHOW INDEX FROM ' . $this->tableFullName($full, 1));\n      $keys         = [];\n      $cols         = [];\n      foreach ($indexes as $i => $index) {\n        $a = $this->db->getRow(\n          <<<MYSQL\nSELECT `CONSTRAINT_NAME` AS `name`,\n`ORDINAL_POSITION` AS `position`,\n`REFERENCED_TABLE_SCHEMA` AS `ref_db`,\n`REFERENCED_TABLE_NAME` AS `ref_table`,\n`REFERENCED_COLUMN_NAME` AS `ref_column`\nFROM `information_schema`.`KEY_COLUMN_USAGE`\nWHERE `TABLE_SCHEMA` LIKE ?\nAND `TABLE_NAME` LIKE ?\nAND `COLUMN_NAME` LIKE ?\nAND (\n  `CONSTRAINT_NAME` LIKE ? OR\n  (`REFERENCED_TABLE_NAME` IS NOT NULL OR `ORDINAL_POSITION` = ?)\n)\nORDER BY `KEY_COLUMN_USAGE`.`REFERENCED_TABLE_NAME` DESC\nLIMIT 1\nMYSQL\n          ,\n          $db,\n          $table,\n          $index['Column_name'],\n          $index['Key_name'],\n          $index['Seq_in_index']\n        );\n        if ($a) {\n          $b = $this->db->getRow(\n            <<<MYSQL\n          SELECT `CONSTRAINT_NAME` AS `name`,\n          `UPDATE_RULE` AS `update`,\n          `DELETE_RULE` AS `delete`\n          FROM `information_schema`.`REFERENTIAL_CONSTRAINTS`\n          WHERE `CONSTRAINT_NAME` LIKE ?\n          AND `CONSTRAINT_SCHEMA` LIKE ?\n          AND `TABLE_NAME` LIKE ?\n          LIMIT 1\nMYSQL\n            ,\n            $a['name'],\n            $db,\n            $table\n          );\n        } elseif (isset($b)) {\n          unset($b);\n        }\n\n        if (!isset($keys[$index['Key_name']])) {\n          $keys[$index['Key_name']] = [\n            'columns' => [$index['Column_name']],\n            'ref_db' => isset($a, $a['ref_db']) ? $a['ref_db'] : null,\n            'ref_table' => isset($a, $a['ref_table']) ? $a['ref_table'] : null,\n            'ref_column' => isset($a, $a['ref_column']) ? $a['ref_column'] : null,\n            'constraint' => isset($b, $b['name']) ? $b['name'] : null,\n            'update' => isset($b, $b['update']) ? $b['update'] : null,\n            'delete' => isset($b, $b['delete']) ? $b['delete'] : null,\n            'unique' => $index['Non_unique'] ? 0 : 1,\n          ];\n        } else {\n          $keys[$index['Key_name']]['columns'][] = $index['Column_name'];\n          $keys[$index['Key_name']]['ref_db']    = $keys[$index['Key_name']]['ref_table'] = $keys[$index['Key_name']]['ref_column'] = null;\n        }\n\n        if (!isset($cols[$index['Column_name']])) {\n          $cols[$index['Column_name']] = [$index['Key_name']];\n        } else {\n          $cols[$index['Column_name']][] = $index['Key_name'];\n        }\n      }\n\n      $r['keys'] = $keys;\n      $r['cols'] = $cols;\n    }\n\n    return $r;\n  }",
            "startLine": 560,
            "endLine": 649,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table's name"
                }
            ]
        },
        "getConditions": {
            "name": "getConditions",
            "summary": "Returns a string with the conditions for the ON, WHERE, or HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $conditions, array $cfg = [], $is_having = false, $indent = 0)\n  {\n    $res = '';\n    if (isset($conditions['conditions'], $conditions['logic'])) {\n      $logic = isset($conditions['logic']) && ($conditions['logic'] === 'OR') ? 'OR' : 'AND';\n      foreach ($conditions['conditions'] as $key => $f) {\n        if (\\is_array($f) && isset($f['logic']) && isset($f['conditions'])) {\n          if ($tmp = $this->getConditions($f, $cfg, $is_having, $indent + 2)) {\n            $res .= (empty($res) ? '(' : PHP_EOL . str_repeat(' ', $indent) . \"$logic (\") .\n            $tmp . PHP_EOL . str_repeat(' ', $indent) . \")\";\n          }\n        }\n        elseif (isset($f['operator'], $f['field'])) {\n          $field = $f['field'];\n          if (!array_key_exists('value', $f)) {\n            $f['value'] = false;\n          }\n\n          $is_number = false;\n          $is_null   = true;\n          $is_uid    = false;\n          $is_date   = false;\n          $is_bool   = false;\n          $model     = null;\n          if ($is_having) {\n            $res .= PHP_EOL . str_repeat(' ', $indent) . (empty($res) ? '' : \"$logic \") . $field . ' ';\n          }\n          elseif (isset($cfg['available_fields'][$field])) {\n            $table  = $cfg['available_fields'][$field];\n            $column = $this->colSimpleName($cfg['fields'][$field] ?? $field);\n            if ($table && $column && isset($cfg['models'][$table]['fields'][$column])) {\n              $model = $cfg['models'][$table]['fields'][$column];\n              $res  .= PHP_EOL . str_repeat(' ', $indent) . (empty($res) ? '' : \"$logic \") .\n                (!empty($cfg['available_fields'][$field]) ? $this->colFullName($cfg['fields'][$field] ?? $field, $cfg['available_fields'][$field], true) : $this->colSimpleName($column, true)\n              ) . ' ';\n            }\n            else {\n              \/\/ Remove the alias from where and join but not in having execpt if it's a count\n              if (!$is_having && ($table === false) && isset($cfg['fields'][$field])) {\n                $field = $cfg['fields'][$field];\n                \/\/ Same for exp in case it's an alias\n                if (!empty($f['exp']) && isset($cfg['fields'][$f['exp']])) {\n                  $f['exp'] = $cfg['fields'][$f['exp']];\n                }\n              }\n\n              $res .= (empty($res) ? '' : PHP_EOL . str_repeat(' ', $indent) . $logic . ' ') . $field . ' ';\n            }\n\n            if (!empty($model)) {\n              $is_null = (bool)$model['null'];\n              if ($model['type'] === 'binary') {\n                $is_number = true;\n                if (($model['maxlength'] === 16) && !empty($model['key'])) {\n                  $is_uid = true;\n                }\n              }\n              elseif (\\in_array($model['type'], self::$numeric_types, true)) {\n                $is_number = true;\n              }\n              elseif (\\in_array($model['type'], self::$date_types, true)) {\n                $is_date = true;\n              }\n            }\n            elseif ($f['value'] && Str::isUid($f['value'])) {\n              $is_uid = true;\n            }\n            elseif (\\is_int($f['value']) || \\is_float($f['value'])) {\n              $is_number = true;\n            }\n          }\n          else {\n            $res .= (empty($res) ? '' : PHP_EOL . str_repeat(' ', $indent) . $logic . ' ') . $field . ' ';\n          }\n\n          if (empty($f['exp']) && isset($f['value']) && in_array($f['value'], [1, 0, true, false], true)) {\n            \/\/ Always use LIKE as booleans and 1 and 0 are interpretated badly by MySQL\n            $is_bool = true;\n          }\n\n          switch (strtolower($f['operator'])) {\n            case '=':\n              if ($is_uid && $is_bool) {\n                $res .= isset($f['exp']) ? 'LIKE ' . $f['exp'] : 'LIKE ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : '= ?';\n              }\n              break;\n            case '!=':\n              if (isset($f['exp'])) {\n                $res .= '!= ' . $f['exp'];\n              }\n              else {\n                $res .= '!= ?';\n              }\n              break;\n            case 'like':\n              if (isset($f['exp'])) {\n                $res .= 'LIKE ' . $f['exp'];\n              }\n              else {\n                $res .= 'LIKE ?';\n              }\n              break;\n            case 'not like':\n              if (isset($f['exp'])) {\n                $res .= 'NOT LIKE ' . $f['exp'];\n              }\n              else {\n                $res .= 'NOT LIKE ?';\n              }\n              break;\n            case 'eq':\n            case 'is':\n              if ($is_uid && $is_bool) {\n                $res .= isset($f['exp']) ? 'LIKE ' . $f['exp'] : 'LIKE ?';\n              }\n              elseif ($is_uid) {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : '= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '= ' . $f['exp'] : ($is_number ? '= ?' : 'LIKE ?');\n              }\n              break;\n            case 'neq':\n            case 'isnot':\n              if ($is_uid) {\n                $res .= isset($f['exp']) ? '!= ' . $f['exp'] : '!= ?';\n              }\n              else {\n                $res .= isset($f['exp']) ? '!= ' . $f['exp'] : ($is_number ? '!= ?' : 'NOT LIKE ?');\n              }\n              break;\n\n            case 'doesnotcontains':\n            case 'doesnotcontain':\n              $res .= 'NOT LIKE ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'endswith':\n            case 'startswith':\n            case 'contains':\n              $res .= 'LIKE ' . ($f['exp'] ?? '?');\n              break;\n\n            case 'gte':\n            case '>=':\n              if (isset($f['exp'])) {\n                $res .= '>= ' . $f['exp'];\n              }\n              else {\n                $res .= '>= ?';\n              }\n              break;\n\n            case 'gt':\n            case '>':\n              if (isset($f['exp'])) {\n                $res .= '> ' . $f['exp'];\n              }\n              else {\n                $res .= '> ?';\n              }\n              break;\n\n            case 'lte':\n            case '<=':\n              if (isset($f['exp'])) {\n                $res .= '<= ' . $f['exp'];\n              }\n              else {\n                $res .= '<= ?';\n              }\n              break;\n\n            case 'lt':\n            case '<':\n              if (isset($f['exp'])) {\n                $res .= '< ' . $f['exp'];\n              }\n              else {\n                $res .= '< ?';\n              }\n              break;\n\n            \/** @todo Check if it is working with an array *\/\n            case 'isnull':\n              $res .= 'IS NULL';\n              break;\n\n            case 'isnotnull':\n              $res .= 'IS NOT NULL';\n              break;\n\n            case 'isempty':\n              $res .= $is_number ? '= 0' : \"LIKE ''\";\n              break;\n\n            case 'isnotempty':\n              $res .= $is_number ? '!= 0' : \"NOT LIKE ''\";\n              break;\n\n            case 'doesnotcontain':\n              $res .= $is_number ? '!= ?' : 'NOT LIKE ?';\n              break;\n\n            case 'contains':\n              $res .= 'LIKE ?';\n              break;\n\n            default:\n              $res .= $is_uid && $is_bool ? 'LIKE ?' : '= ?';\n              break;\n          }\n        }\n      }\n    }\n\n    if (!empty($res)) {\n      return str_replace(PHP_EOL . PHP_EOL, PHP_EOL, $res . PHP_EOL);\n    }\n\n    return $res;\n  }",
            "startLine": 660,
            "endLine": 884,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "conditions",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "having"
                },
                {
                    "name": "is_having",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "indent",
                    "position": 3,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSelect": {
            "name": "getSelect",
            "summary": "Generates a string starting with SELECT ... FROM with corresponding parameters",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (\\is_array($cfg['tables']) && !empty($cfg['tables'])) {\n      $res = 'SELECT ';\n      if (!empty($cfg['count'])) {\n        if ($cfg['group_by']) {\n          $indexes = [];\n          $idxs    = [];\n          foreach ($cfg['group_by'] as $g) {\n            \/\/ Alias\n            if (isset($cfg['fields'][$g])) {\n              $g = $cfg['fields'][$g];\n            }\n\n            if (($t = $cfg['available_fields'][$g])\n                && ($cfn = $this->colFullName($g, $t))\n            ) {\n              $indexes[] = $cfn;\n              \/\/$idxs[] = $this->colSimpleName($g, true);\n              \/\/ Changed by Mirko\n              $idxs[] = $this->colSimpleName($cfg['aliases'][$g] ?? $g, true);\n            } else {\n              $indexes[] = $g;\n              $idxs[]    = $cfg['aliases'][$g] ?? $g;\n            }\n          }\n\n          if (!empty($cfg['having'])) {\n            if (count($indexes) === count($cfg['group_by'])) {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n              $tmp  = [];\n              if ($extracted_fields = $this->db->extractFields($cfg, $cfg['having']['conditions'])) {\n                \/\/die(var_dump($extracted_fields));\n                foreach ($extracted_fields as $ef) {\n                  if (!in_array($ef, $indexes)) {\n                    if (!empty($cfg['fields'][$ef])) {\n                      $tmp[$ef] = $cfg['fields'][$ef];\n                    } else {\n                      $tmp[] = $ef;\n                    }\n                  }\n                }\n              }\n\n              $cfg['fields'] = $indexes;\n              foreach ($tmp as $k => $v) {\n                if (is_string($k)) {\n                  $cfg['fields'][$k] = $v;\n                } else {\n                  $cfg['fields'][] = $v;\n                }\n              }\n            } else {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n            }\n          } else {\n            if (count($indexes) === count($cfg['group_by'])) {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n              \/\/$cfg['fields'] = $indexes;\n              \/\/ Changed by Mirko\n              $cfg['fields'] = array_combine($idxs, $indexes);\n            } else {\n              $res .= 'COUNT(*) FROM ( SELECT ';\n            }\n          }\n        } else {\n          $res          .= 'COUNT(*)';\n          $cfg['fields'] = [];\n        }\n      }\n\n      if (!empty($cfg['fields'])) {\n        $fields_to_put = [];\n        \/\/ Checking the selected fields\n        foreach ($cfg['fields'] as $alias => $f) {\n          $is_distinct = false;\n          $f           = trim($f);\n          $bits        = explode(' ', $f);\n          if ((count($bits) > 1) && (strtolower($bits[0]) === 'distinct')) {\n            $is_distinct = true;\n            array_shift($bits);\n            $f = implode(' ', $bits);\n          }\n\n          \/\/ Adding the alias in $fields\n          if (strpos($f, '(')) {\n            $fields_to_put[] = ($is_distinct ? 'DISTINCT ' : '') . $f . (\\is_string($alias) ? ' AS ' . $this->escape($alias) : '');\n          } elseif (array_key_exists($f, $cfg['available_fields'])) {\n            $idx    = $cfg['available_fields'][$f];\n            $csn    = $this->colSimpleName($f);\n            $is_uid = false;\n            \/\/die(var_dump($idx, $f, $tables[$idx]));\n            if (($idx !== false) && isset($cfg['models'][$idx]['fields'][$csn])) {\n              $column = $cfg['models'][$idx]['fields'][$csn];\n              if (($column['type'] === 'binary') && ($column['maxlength'] === 16)) {\n                $is_uid = true;\n                if (!\\is_string($alias)) {\n                  $alias = $csn;\n                }\n              }\n            }\n\n            \/\/$res['fields'][$alias] = $this->cfn($f, $fields[$f]);\n            if ($is_uid) {\n              $st = 'LOWER(HEX(' . $this->colFullName($csn, $cfg['available_fields'][$f], true) . '))';\n            }\n            \/\/ For JSON fields\n            elseif ($cfg['available_fields'][$f] === false) {\n              $st = $f;\n            } else {\n              $st = $this->colFullName($csn, $cfg['available_fields'][$f], true);\n            }\n\n            if (\\is_string($alias)) {\n              $st .= ' AS ' . $this->escape($alias);\n            }\n\n            $fields_to_put[] = ($is_distinct ? 'DISTINCT ' : '') . $st;\n          } elseif (isset($cfg['available_fields'][$f]) && ($cfg['available_fields'][$f] === false)) {\n            $this->db->error(\"Error! The column '$f' exists on several tables in '\" . implode(', ', $cfg['tables']));\n          } else {\n            $this->db->error(\"Error! The column '$f' doesn't exist in '\" . implode(', ', $cfg['tables']));\n          }\n        }\n\n        $res .= implode(', ', $fields_to_put);\n      }\n\n      $res          .= PHP_EOL;\n      $tables_to_put = [];\n      foreach ($cfg['tables'] as $alias => $tfn) {\n        $st = $this->tableFullName($tfn, true);\n        if ($alias !== $tfn) {\n          $st .= ' AS ' . $this->escape($alias);\n        }\n\n        $tables_to_put[] = $st;\n      }\n\n      $res .= 'FROM ' . implode(', ', $tables_to_put) . PHP_EOL;\n      return $res;\n    }\n\n    return $res;\n  }",
            "startLine": 893,
            "endLine": 1038,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInsert": {
            "name": "getInsert",
            "summary": "Generates a string for the insert from a cfg array.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $fields_to_put = [\n      'values' => [],\n      'fields' => [],\n    ];\n    $i             = 0;\n    foreach ($cfg['fields'] as $alias => $f) {\n      if (isset($cfg['available_fields'][$f], $cfg['models'][$cfg['available_fields'][$f]])) {\n        $model  = $cfg['models'][$cfg['available_fields'][$f]];\n        $csn    = $this->colSimpleName($f);\n        $is_uid = false;\n        \/\/X::hdump('---------------', $idx, $f, $tables[$idx]['model']['fields'][$csn], $args['values'],\n        \/\/ $res['values'], '---------------');\n        if (isset($model['fields'][$csn])) {\n          $column = $model['fields'][$csn];\n          if (($column['type'] === 'binary') && ($column['maxlength'] === 16)) {\n            $is_uid = true;\n          }\n\n          $fields_to_put['fields'][] = $this->colSimpleName($f, true);\n          $fields_to_put['values'][] = '?';\n        }\n      } else {\n        $this->db->error(\"Error! The column '$f' doesn't exist in '\" . implode(', ', $cfg['tables']));\n      }\n\n      $i++;\n    }\n\n    if (count($fields_to_put['fields']) && (count($cfg['tables']) === 1)) {\n      return 'INSERT ' . ($cfg['ignore'] ? 'IGNORE ' : '') . 'INTO ' . $this->tableFullName(current($cfg['tables']), true) . PHP_EOL .\n      '(' . implode(', ', $fields_to_put['fields']) . ')' . PHP_EOL . ' VALUES (' .\n      implode(', ', $fields_to_put['values']) . ')' . PHP_EOL;\n    }\n\n    return '';\n  }",
            "startLine": 1046,
            "endLine": 1083,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getUpdate": {
            "name": "getUpdate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res           = '';\n    $fields_to_put = [\n      'values' => [],\n      'fields' => [],\n    ];\n    foreach ($cfg['fields'] as $alias => $f) {\n      if (isset($cfg['available_fields'][$f], $cfg['models'][$cfg['available_fields'][$f]])) {\n        $model  = $cfg['models'][$cfg['available_fields'][$f]];\n        $csn    = $this->colSimpleName($f);\n        $is_uid = false;\n        if (isset($model['fields'][$csn])) {\n          $column = $model['fields'][$csn];\n          if (($column['type'] === 'binary') && ($column['maxlength'] === 16)) {\n            $is_uid = true;\n          }\n\n          $fields_to_put['fields'][] = $this->colSimpleName($f, true);\n          $fields_to_put['values'][] = '?';\n        }\n      } else {\n        $this->db->error(\"Error!! The column '$f' doesn't exist in '\" . implode(', ', $cfg['tables']));\n      }\n    }\n\n    if (count($fields_to_put['fields'])) {\n      $res .= 'UPDATE ' . ($cfg['ignore'] ? 'IGNORE ' : '') . $this->tableFullName(current($cfg['tables']), true) . ' SET ';\n      $last = count($fields_to_put['fields']) - 1;\n      foreach ($fields_to_put['fields'] as $i => $f) {\n        $res .= $f . ' = ' . $fields_to_put['values'][$i];\n        if ($i < $last) {\n          $res .= ',';\n        }\n\n        $res .= PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1090,
            "endLine": 1130,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration array"
                }
            ]
        },
        "getDelete": {
            "name": "getDelete",
            "summary": "Return SQL code for row(s) DELETE.",
            "description": "*\n```php\nX::dump($db->getDelete('table_users',['id'=>1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*<\/p>\n<pre><code class=\"language-php\">X::dump($db-&gt;getDelete('table_users',['id'=&gt;1]));\n\/\/ (string) DELETE FROM `db_example`.`table_users` * WHERE 1 AND `table_users`.`id` = ?<\/code><\/pre>"
                }
            ],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (count($cfg['tables']) === 1) {\n      $res = 'DELETE ' . ($cfg['ignore'] ? 'IGNORE ' : '') .\n      (count($cfg['join']) ? current($cfg['tables']) . ' ' : '') .\n      'FROM ' . $this->tableFullName(current($cfg['tables']), true) . PHP_EOL;\n    }\n\n    return $res;\n  }",
            "startLine": 1144,
            "endLine": 1154,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getJoin": {
            "name": "getJoin",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (!empty($cfg['join'])) {\n      foreach ($cfg['join'] as $join) {\n        if (isset($join['table'], $join['on']) && ($cond = $this->db->getConditions($join['on'], $cfg, false, 4))) {\n          $res .= '  ' .\n          (isset($join['type']) && (strtolower($join['type']) === 'left') ? 'LEFT ' : '') .\n          'JOIN ' . $this->tableFullName($join['table'], true) .\n            (!empty($join['alias']) ? ' AS ' . $this->escape($join['alias']) : '')\n            . PHP_EOL . '    ON ' . $cond;\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1163,
            "endLine": 1179,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getWhere": {
            "name": "getWhere",
            "summary": "Returns a string with the JOIN part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = $this->getConditions($cfg['filters'] ?? [], $cfg);\n    if (!empty($res)) {\n      $res = 'WHERE ' . $res;\n    }\n\n    return $res;\n  }",
            "startLine": 1188,
            "endLine": 1196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getGroupBy": {
            "name": "getGroupBy",
            "summary": "Returns a string with the GROUP BY part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res          = '';\n    $group_to_put = [];\n    if (!empty($cfg['group_by'])) {\n      foreach ($cfg['group_by'] as $g) {\n        if (isset($cfg['available_fields'][$g])) {\n          $group_to_put[] = $this->escape($g);\n          \/\/$group_to_put[] = $this->colFullName($g, $cfg['available_fields'][$g], true);\n        } else {\n          $this->db->error(\"Error! The column '$g' doesn't exist for group by \" . print_r($cfg, true));\n        }\n      }\n\n      if (count($group_to_put)) {\n        $res .= 'GROUP BY ' . implode(', ', $group_to_put) . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1205,
            "endLine": 1225,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getHaving": {
            "name": "getHaving",
            "summary": "Returns a string with the HAVING part of the query if there is, empty otherwise",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (!empty($cfg['group_by'])\n        && !empty($cfg['having'])\n        && ($cond = $this->getConditions($cfg['having'], $cfg, true, 2))\n    ) {\n      if ($cfg['count']) {\n        $res .= ' WHERE ' . $cond . PHP_EOL;\n      } else {\n        $res .= '  HAVING ' . $cond . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1234,
            "endLine": 1249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getOrder": {
            "name": "getOrder",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (!empty($cfg['order'])) {\n      foreach ($cfg['order'] as $col => $dir) {\n        if (\\is_array($dir) && isset($dir['field'])) {\n          $col = $dir['field'];\n          $dir = $dir['dir'] ?? 'ASC';\n        }\n\n        if (isset($cfg['available_fields'][$col])) {\n          \/\/ If it's an alias we use the simple name\n          if (isset($cfg['fields'][$col])) {\n            $f = $this->colSimpleName($col, true);\n          } elseif ($cfg['available_fields'][$col] === false) {\n            $f = $col;\n          } else {\n            $f = $this->colFullName($col, $cfg['available_fields'][$col], true);\n          }\n\n          $res .= $f . ' ' . (strtolower($dir) === 'desc' ? 'DESC' : 'ASC') . ',' . PHP_EOL;\n        }\n      }\n\n      if (!empty($res)) {\n        return 'ORDER BY ' . substr($res, 0, Strrpos($res, ',')) . PHP_EOL;\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 1256,
            "endLine": 1286,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getLimit": {
            "name": "getLimit",
            "summary": "Get a string starting with LIMIT with corresponding parameters to $where",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n    $res = '';\n    if (!empty($cfg['limit']) && bbn\\Str::isInteger($cfg['limit'])) {\n      $res .= 'LIMIT ' . (!empty($cfg['start']) && bbn\\Str::isInteger($cfg['start']) ? (string)$cfg['start'] : '0') . ', ' . $cfg['limit'];\n    }\n\n    return $res;\n  }",
            "startLine": 1295,
            "endLine": 1303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRawCreate": {
            "name": "getRawCreate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    if (($table = $this->tableFullName($table, true))\n        && ($r = $this->db->rawQuery(\"SHOW CREATE TABLE $table\"))\n    ) {\n      return $r->fetch(\\PDO::FETCH_ASSOC)['Create Table'];\n    }\n\n    return '';\n  }",
            "startLine": 1310,
            "endLine": 1319,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The table for which to create the statement"
                }
            ]
        },
        "getCreateTable": {
            "name": "getCreateTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    if (!$model) {\n      $model = $this->db->modelize($table);\n    }\n\n    $st   = 'CREATE TABLE ' . $this->db->escape($table) . ' (' . PHP_EOL;\n    $done = false;\n    foreach ($model['fields'] as $name => $col) {\n      if (!$done) {\n        $done = true;\n      }\n      else {\n        $st .= ',' . PHP_EOL;\n      }\n\n      $st .= '  ' . $this->db->escape($name) . ' ';\n      if (!in_array($col['type'], self::$types)) {\n        if (isset(self::$interoperability[$col['type']])) {\n          $st .= self::$interoperability[$col['type']];\n        }\n        else {\n          throw new \\Exception(X::_(\"Impossible to recognize the column type\").\" $col[type]\");\n        }\n      }\n      else {\n        $st .= $col['type'];\n      }\n\n      if (($col['type'] === 'enum') || ($col['type'] === 'set')) {\n        $st .= ' (' . $col['extra'] . ')';\n      }\n      elseif (!empty($col['maxlength'])) {\n        $st .= '(' . $col['maxlength'];\n        if (!empty($col['decimals'])) {\n          $st .= ',' . $col['decimals'];\n        }\n\n        $st .= ')';\n      }\n\n      if (in_array($col['type'], self::$numeric_types)\n          && empty($col['signed'])\n      ) {\n        $st .= ' UNSIGNED';\n      }\n\n      if (empty($col['null'])) {\n        $st .= ' NOT NULL';\n      }\n\n      if (!empty($col['virtual'])) {\n        $st .= ' GENERATED ALWAYS AS (' . $col['generation'] . ') VIRTUAL';\n      } elseif (array_key_exists('default', $col)) {\n        $st .= ' DEFAULT ';\n        if (($col['default'] === 'NULL')\n            || bbn\\Str::isNumber($col['default'])\n            || strpos($col['default'], '(')\n            || in_array(strtoupper($col['default']), ['CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP'])\n        ) {\n          $st .= (string)$col['default'];\n        } else {\n          $st .= \"'\" . bbn\\Str::escapeSquotes($col['default']) . \"'\";\n        }\n      }\n    }\n\n    $st .= PHP_EOL . ') ENGINE=InnoDB DEFAULT CHARSET=utf8';\n    return $st;\n  }",
            "startLine": 1322,
            "endLine": 1391,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCreateKeys": {
            "name": "getCreateKeys",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    $st = '';\n    if (!$model) {\n      $model = $this->db->modelize($table);\n    }\n\n    if ($model && !empty($model['keys'])) {\n      $st   .= 'ALTER TABLE ' . $this->db->escape($table) . PHP_EOL;\n      $last  = count($model['keys']) - 1;\n      $dbcls = &$this->db;\n      $i     = 0;\n      foreach ($model['keys'] as $name => $key) {\n        $st .= '  ADD ';\n        if ($key['unique']\n            && isset($model['fields'][$key['columns'][0]])\n            && ($model['fields'][$key['columns'][0]]['key'] === 'PRI')\n        ) {\n          $st .= 'PRIMARY KEY';\n        } elseif ($key['unique']) {\n          $st .= 'UNIQUE KEY ' . $this->db->escape($name);\n        } else {\n          $st .= 'KEY ' . $this->db->escape($name);\n        }\n\n        $st .= ' (' . implode(\n          ',', array_map(\n            function ($a) use (&$dbcls) {\n              return $dbcls->escape($a);\n            }, $key['columns']\n          )\n        ) . ')';\n        $st .= $i === $last ? ';' : ',' . PHP_EOL;\n        $i++;\n      }\n    }\n\n    return $st;\n  }",
            "startLine": 1394,
            "endLine": 1432,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getCreateConstraints": {
            "name": "getCreateConstraints",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    $st = '';\n    if (!$model) {\n      $model = $this->db->modelize($table);\n    }\n\n    if ($model && !empty($model['keys'])) {\n      $constraints = array_filter(\n        $model['keys'], function ($a) {\n          return !empty($a['ref_table']) && isset($a['columns']) && (count($a['columns']) === 1);\n        }\n      );\n      if ($last = count($constraints)) {\n        $st .= 'ALTER TABLE ' . $this->db->escape($table) . PHP_EOL;\n        $i   = 0;\n        foreach ($constraints as $name => $key) {\n          $i++;\n          $st .= '  ADD ' .\n          'CONSTRAINT ' . $this->db->escape($key['constraint']) . ' FOREIGN KEY (' . $this->db->escape($key['columns'][0]) . ') ' .\n          'REFERENCES ' . $this->db->escape($key['ref_table']) . ' (' . $this->db->escape($key['ref_column']) . ')' .\n            ($key['delete'] ? ' ON DELETE ' . $key['delete'] : '') .\n            ($key['update'] ? ' ON UPDATE ' . $key['update'] : '') .\n            ($i === $last ? ';' : ',' . PHP_EOL);\n        }\n      }\n    }\n\n    return $st;\n  }",
            "startLine": 1435,
            "endLine": 1464,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTableComment": {
            "name": "getTableComment",
            "summary": "Returns the comment (or an empty string if none) for a given table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table)\n  {\n    return '';\n  }",
            "startLine": 1474,
            "endLine": 1477,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "renameTable": {
            "name": "renameTable",
            "summary": "Renames the given table to the new given name.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $newName)\n  {\n    if ($this->db->check() && Str::checkName($table, $newName)) {\n      $t1 = strpos($table, '.') ? $this->tableFullName($table, true) : $this->tableSimpleName($table, true);\n      $t2 = strpos($newName, '.') ? $this->tableFullName($newName, true) : $this->tableSimpleName($newName, true);\n      $res = $this->db->query(sprintf(\"ALTER TABLE %s RENAME TO %s\", $table, $newName));\n      return !!$res;\n    }\n\n    return false;\n  }",
            "startLine": 1487,
            "endLine": 1497,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The current table's name"
                },
                {
                    "name": "newName",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "ame The new name."
                }
            ]
        },
        "getCreate": {
            "name": "getCreate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, array $model = NULL)\n  {\n    $st = '';\n    if (!$model) {\n      $model = $this->db->modelize($table);\n    }\n\n    if ($st = $this->getCreateTable($table, $model)) {\n      $lines = X::split($st, PHP_EOL);\n      $end   = array_pop($lines);\n      $st    = X::join($lines, PHP_EOL);\n      foreach ($model['keys'] as $name => $key) {\n        $st .= ',' . PHP_EOL . '  ';\n        if ($key['unique'] && (count($key['columns']) === 1) && isset($model['fields'][$key['columns'][0]]) && ($model['fields'][$key['columns'][0]]['key'] === 'PRI')) {\n          $st .= 'PRIMARY KEY';\n        } elseif ($key['unique']) {\n          $st .= 'UNIQUE KEY ' . $this->db->escape($name);\n        } else {\n          $st .= 'KEY ' . $this->db->escape($name);\n        }\n\n        $dbcls = &$this->db;\n        $st   .= ' (' . implode(\n          ',', array_map(\n            function ($a) use (&$dbcls) {\n              return $dbcls->escape($a);\n            }, $key['columns']\n          )\n        ) . ')';\n      }\n\n      \/\/ For avoiding constraint names conflicts\n      $keybase = strtolower(bbn\\Str::genpwd(8, 4));\n      $i       = 1;\n      foreach ($model['keys'] as $name => $key) {\n        if (!empty($key['ref_table'])) {\n          $st .= ',' . PHP_EOL . '  ' .\n          'CONSTRAINT ' . $this->db->escape($keybase.$i) . ' FOREIGN KEY (' . $this->db->escape($key['columns'][0]) . ') ' .\n          'REFERENCES ' . $this->db->escape($key['ref_table']) . ' (' . $this->db->escape($key['ref_column']) . ')' .\n            ($key['delete'] ? ' ON DELETE ' . $key['delete'] : '') .\n            ($key['update'] ? ' ON UPDATE ' . $key['update'] : '');\n          $i++;\n        }\n      }\n\n      $st .= PHP_EOL . $end;\n    }\n\n    return $st;\n  }",
            "startLine": 1500,
            "endLine": 1549,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "model",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "createIndex": {
            "name": "createIndex",
            "summary": "Creates an index",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $column, $unique = false, $length = NULL)\n  {\n    $column = (array)$column;\n    if ($length) {\n      $length = (array)$length;\n    }\n\n    $name = bbn\\Str::encodeFilename($table);\n    if ($table = $this->tableFullName($table, true)) {\n      foreach ($column as $i => $c) {\n        if (!bbn\\Str::checkName($c)) {\n          $this->db->error(\"Illegal column $c\");\n        }\n\n        $name      .= '_' . $c;\n        $column[$i] = $this->escape($column[$i]);\n        if (\\is_int($length[$i]) && $length[$i] > 0) {\n          $column[$i] .= '(' . $length[$i] . ')';\n        }\n      }\n\n      $name = bbn\\Str::cut($name, 50);\n      return (bool)$this->db->query(\n        'CREATE ' . ($unique ? 'UNIQUE ' : '') . \"INDEX `$name` ON $table ( \" .\n        implode(', ', $column) . ' )'\n      );\n    }\n\n    return false;\n  }",
            "startLine": 1561,
            "endLine": 1590,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "column",
                    "position": 1,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "unique",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteIndex": {
            "name": "deleteIndex",
            "summary": "Deletes an index",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $key)\n  {\n    if (($table = $this->tableFullName($table, true))\n        && bbn\\Str::checkName($key)\n    ) {\n      return (bool)$this->db->query(\n        <<<MYSQL\nALTER TABLE $table\nDROP INDEX `$key`\nMYSQL\n      );\n    }\n\n    return false;\n  }",
            "startLine": 1600,
            "endLine": 1614,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createMysqlDatabase": {
            "name": "createMysqlDatabase",
            "summary": "Creates a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database, $enc = 'utf8', $collation = 'utf8_general_ci')\n  {\n    if (bbn\\Str::checkName($database, $enc, $collation)) {\n      return (bool)$this->db->rawQuery(\"CREATE DATABASE IF NOT EXISTS `$database` DEFAULT CHARACTER SET $enc COLLATE $collation;\");\n    }\n\n    return false;\n  }",
            "startLine": 1625,
            "endLine": 1632,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "enc",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "utf8",
                    "default_name": ""
                },
                {
                    "name": "collation",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "utf8_general_ci",
                    "default_name": ""
                }
            ]
        },
        "createDatabase": {
            "name": "createDatabase",
            "summary": "Creates a database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n    return $this->createMysqlDatabase($database);\n  }",
            "startLine": 1643,
            "endLine": 1646,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dropDatabase": {
            "name": "dropDatabase",
            "summary": "Drops the given database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database)\n  {\n    if ($this->db->check()) {\n      if (!Str::checkName($database)) {\n        throw new \\Exception(X::_(\"Wrong database name\").\" $database\");\n      }\n\n      try {\n        $this->db->rawQuery(\"DROP DATABASE '$database'\");\n      }\n      catch (\\Exception $e) {\n        return false;\n      }\n    }\n\n    return $this->db->check();\n  }",
            "startLine": 1655,
            "endLine": 1671,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createUser": {
            "name": "createUser",
            "summary": "Creates a database user",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user, $pass, $db = NULL)\n  {\n    if (null === $db) {\n      $db = $this->db->getCurrent();\n    }\n\n    if (($db = $this->escape($db))\n        && bbn\\Str::checkName($user, $db)\n        && (strpos($pass, \"'\") === false)\n    ) {\n      return (bool)$this->db->rawQuery(\n        <<<MYSQL\nGRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER\nON $db . *\nTO '$user'@'{$this->db->host}'\nIDENTIFIED BY '$pass'\nMYSQL\n      );\n    }\n\n    return false;\n  }",
            "startLine": 1682,
            "endLine": 1703,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "pass",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "db",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "deleteUser": {
            "name": "deleteUser",
            "summary": "There's an error in the query REVOKE ALL PRIVILEGES ON *.*",
            "description": "FROM $user\nDeletes a database user",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>FROM $user\nDeletes a database user<\/p>"
                }
            ],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user)\n  {\n    if (bbn\\Str::checkName($user)) {\n      $this->db->rawQuery(\n        \"\n\t\t\tREVOKE ALL PRIVILEGES ON *.*\n      FROM $user\"\n      );\n      return (bool)$this->db->query(\"DROP USER $user\");\n    }\n\n    return false;\n  }",
            "startLine": 1714,
            "endLine": 1726,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUsers": {
            "name": "getUsers",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($user = '', $host = '')\n  {\n    if ($this->db->check()) {\n      $cond = '';\n      if (!empty($user) && bbn\\Str::checkName($user)) {\n        $cond .= \" AND  user LIKE '$user' \";\n      }\n\n      if (!empty($host) && bbn\\Str::checkName($host)) {\n        $cond .= \" AND  host LIKE '$host' \";\n      }\n\n      $us = $this->db->getRows(\n        <<<MYSQL\nSELECT DISTINCT host, User\nFROM mysql.user\nWHERE 1\n$cond\nMYSQL\n      );\n      $q  = [];\n      foreach ($us as $u) {\n        $gs = $this->db->getColArray(\"SHOW GRANTS FOR '$u[user]'@'$u[host]'\");\n        foreach ($gs as $g) {\n          $q[] = $g;\n        }\n      }\n\n      return $q;\n    }\n\n    return null;\n  }",
            "startLine": 1734,
            "endLine": 1766,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "user",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "host",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbSize": {
            "name": "dbSize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($database = '', $type = '')\n  {\n    $cur = null;\n    if ($database && ($this->db->getCurrent() !== $database)) {\n      $cur = $this->db->getCurrent();\n      $this->db->change($database);\n    }\n\n    $q    = $this->db->query('SHOW TABLE STATUS');\n    $size = 0;\n    while ($row = $q->getRow()) {\n      if (!$type || ($type === 'data')) {\n        $size += $row['Data_length'];\n      }\n\n      if (!$type || ($type === 'index')) {\n        $size += $row['Index_length'];\n      }\n    }\n\n    if ($cur !== null) {\n      $this->db->change($cur);\n    }\n\n    return $size;\n  }",
            "startLine": 1769,
            "endLine": 1794,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "database",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "tableSize": {
            "name": "tableSize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table, $type = '')\n  {\n    $size = 0;\n    if (bbn\\Str::checkName($table)) {\n      $row = $this->db->getRow('SHOW TABLE STATUS WHERE Name LIKE ?', $table);\n      if (!$type || (strtolower($type) === 'index')) {\n        $size += $row['Index_length'];\n      }\n\n      if (!$type || (strtolower($type) === 'data')) {\n        $size += $row['Data_length'];\n      }\n    }\n\n    return $size;\n  }",
            "startLine": 1797,
            "endLine": 1812,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "status": {
            "name": "status",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = '', $database = '')\n  {\n    $cur = null;\n    if ($database && ($this->db->getCurrent() !== $database)) {\n      $cur = $this->db->getCurrent();\n      $this->db->change($database);\n    }\n\n    $r = $this->db->getRow('SHOW TABLE STATUS WHERE Name LIKE ?', $table);\n    if (null !== $cur) {\n      $this->db->change($cur);\n    }\n\n    return $r;\n  }",
            "startLine": 1815,
            "endLine": 1829,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "database",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUid": {
            "name": "getUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    \/\/return $this->db->getOne(\"SELECT replace(uuid(),'-','')\");\n    $uid = null;\n    while (!bbn\\Str::isBuid(hex2bin($uid))) {\n      $uid = $this->db->getOne(\"SELECT replace(uuid(),'-','')\");\n    }\n\n    return $uid;\n  }",
            "startLine": 1832,
            "endLine": 1841,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "createTable": {
            "name": "createTable",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Db\\Languages\\Pgsql",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table_name, array $columns, array $keys = NULL, $with_constraints = false, $charset = 'utf8', $engine = 'InnoDB')\n  {\n    $lines = [];\n    $sql   = '';\n    foreach ($columns as $n => $c) {\n      $name = $c['name'] ?? $n;\n      if (isset($c['type']) && bbn\\Str::checkName($name)) {\n        $st = $this->colSimpleName($name, true) . ' ' . $c['type'];\n        if (!empty($c['maxlength'])) {\n          $st .= '(' . $c['maxlength'] . ')';\n        } elseif (!empty($c['values']) && \\is_array($c['values'])) {\n          $st .= '(';\n          foreach ($c['values'] as $i => $v) {\n            $st .= \"'\" . bbn\\Str::escapeSquotes($v) . \"'\";\n            if ($i < count($c['values']) - 1) {\n              $st .= ',';\n            }\n          }\n\n          $st .= ')';\n        }\n\n        if ((strpos($c['type'], 'int') !== false) && empty($c['signed'])) {\n          $st .= ' UNSIGNED';\n        }\n\n        if (empty($c['null'])) {\n          $st .= ' NOT NULL';\n        }\n\n        if (isset($c['default'])) {\n          $st .= ' DEFAULT ' . ($c['default'] === 'NULL' ? 'NULL' : \"'\" . bbn\\Str::escapeSquotes($c['default']) . \"'\");\n        }\n\n        $lines[] = $st;\n      }\n    }\n\n    if (count($lines)) {\n      $sql = 'CREATE TABLE ' . $this->tableSimpleName($table_name, true) . ' (' . PHP_EOL . implode(',' . PHP_EOL, $lines) .\n        PHP_EOL . ') ENGINE=' . $engine . ' DEFAULT CHARSET=' . $charset . ';';\n    }\n\n    return $sql;\n  }",
            "startLine": 1844,
            "endLine": 1888,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "table_name",
                    "position": 0,
                    "type": null,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "columns",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "keys",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "with_constraints",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "charset",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "utf8",
                    "default_name": ""
                },
                {
                    "name": "engine",
                    "position": 5,
                    "type": null,
                    "required": false,
                    "has_default": true,
                    "default": "InnoDB",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "operators": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var array Allowed operators",
                "tags": []
            },
            "value": [
                "!=",
                "=",
                "<>",
                "<",
                "<=",
                ">",
                ">=",
                "like",
                "clike",
                "slike",
                "not",
                "is",
                "is not",
                "in",
                "between",
                "not like"
            ]
        },
        "numeric_types": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var array Numeric column types",
                "tags": []
            },
            "value": [
                "integer",
                "int",
                "smallint",
                "tinyint",
                "mediumint",
                "bigint",
                "decimal",
                "numeric",
                "float",
                "double"
            ]
        },
        "date_types": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var array Time and date column types",
                "tags": []
            },
            "value": [
                "date",
                "time",
                "datetime"
            ]
        },
        "types": {
            "static": true,
            "visibility": "public",
            "value": [
                "tinyint",
                "smallint",
                "mediumint",
                "int",
                "bigint",
                "decimal",
                "float",
                "double",
                "bit",
                "char",
                "varchar",
                "binary",
                "varbinary",
                "tinyblob",
                "blob",
                "mediumblob",
                "longblob",
                "tinytext",
                "text",
                "mediumtext",
                "longtext",
                "enum",
                "set",
                "date",
                "time",
                "datetime",
                "timestamp",
                "year",
                "geometry",
                "point",
                "linestring",
                "polygon",
                "geometrycollection",
                "multilinestring",
                "multipoint",
                "multipolygon",
                "json"
            ]
        },
        "interoperability": {
            "static": true,
            "visibility": "public",
            "value": {
                "integer": "int",
                "real": "decimal",
                "text": "text",
                "blob": "blob"
            }
        },
        "aggr_functions": {
            "static": true,
            "visibility": "public",
            "value": [
                "AVG",
                "BIT_AND",
                "BIT_OR",
                "COUNT",
                "GROUP_CONCAT",
                "MAX",
                "MIN",
                "STD",
                "STDDEV_POP",
                "STDDEV_SAMP",
                "STDDEV",
                "SUM",
                "VAR_POP",
                "VAR_SAMP",
                "VARIANCE"
            ]
        },
        "qte": {
            "visibility": "public",
            "doc": {
                "description": "@var string The quote character",
                "tags": []
            },
            "value": "`"
        }
    },
    "staticProperties": {
        "operators": [
            "!=",
            "=",
            "<>",
            "<",
            "<=",
            ">",
            ">=",
            "like",
            "clike",
            "slike",
            "not",
            "is",
            "is not",
            "in",
            "between",
            "not like"
        ],
        "numeric_types": [
            "integer",
            "int",
            "smallint",
            "tinyint",
            "mediumint",
            "bigint",
            "decimal",
            "numeric",
            "float",
            "double"
        ],
        "date_types": [
            "date",
            "time",
            "datetime"
        ],
        "types": [
            "tinyint",
            "smallint",
            "mediumint",
            "int",
            "bigint",
            "decimal",
            "float",
            "double",
            "bit",
            "char",
            "varchar",
            "binary",
            "varbinary",
            "tinyblob",
            "blob",
            "mediumblob",
            "longblob",
            "tinytext",
            "text",
            "mediumtext",
            "longtext",
            "enum",
            "set",
            "date",
            "time",
            "datetime",
            "timestamp",
            "year",
            "geometry",
            "point",
            "linestring",
            "polygon",
            "geometrycollection",
            "multilinestring",
            "multipoint",
            "multipolygon",
            "json"
        ],
        "interoperability": {
            "integer": "int",
            "real": "decimal",
            "text": "text",
            "blob": "blob"
        },
        "aggr_functions": [
            "AVG",
            "BIT_AND",
            "BIT_OR",
            "COUNT",
            "GROUP_CONCAT",
            "MAX",
            "MIN",
            "STD",
            "STDDEV_POP",
            "STDDEV_SAMP",
            "STDDEV",
            "SUM",
            "VAR_POP",
            "VAR_SAMP",
            "VARIANCE"
        ]
    },
    "constants": null,
    "numMethods": 49,
    "numProperties": 7,
    "numConstants": 0,
    "numStaticProperties": 6,
    "interfaceNames": [
        "bbn\\Db\\Engines"
    ],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "operators": [
            "!=",
            "=",
            "<>",
            "<",
            "<=",
            ">",
            ">=",
            "like",
            "clike",
            "slike",
            "not",
            "is",
            "is not",
            "in",
            "between",
            "not like"
        ],
        "numeric_types": [
            "integer",
            "int",
            "smallint",
            "tinyint",
            "mediumint",
            "bigint",
            "decimal",
            "numeric",
            "float",
            "double"
        ],
        "date_types": [
            "date",
            "time",
            "datetime"
        ],
        "types": [
            "tinyint",
            "smallint",
            "mediumint",
            "int",
            "bigint",
            "decimal",
            "float",
            "double",
            "bit",
            "char",
            "varchar",
            "binary",
            "varbinary",
            "tinyblob",
            "blob",
            "mediumblob",
            "longblob",
            "tinytext",
            "text",
            "mediumtext",
            "longtext",
            "enum",
            "set",
            "date",
            "time",
            "datetime",
            "timestamp",
            "year",
            "geometry",
            "point",
            "linestring",
            "polygon",
            "geometrycollection",
            "multilinestring",
            "multipoint",
            "multipolygon",
            "json"
        ],
        "interoperability": {
            "integer": "int",
            "real": "decimal",
            "text": "text",
            "blob": "blob"
        },
        "aggr_functions": [
            "AVG",
            "BIT_AND",
            "BIT_OR",
            "COUNT",
            "GROUP_CONCAT",
            "MAX",
            "MIN",
            "STD",
            "STDDEV_POP",
            "STDDEV_SAMP",
            "STDDEV",
            "SUM",
            "VAR_POP",
            "VAR_SAMP",
            "VARIANCE"
        ],
        "db": null,
        "qte": "`"
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Db\\Languages",
    "shortName": "Pgsql",
    "summary": "Database Class"
}