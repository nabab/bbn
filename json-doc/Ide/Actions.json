{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Ide\\Actions",
    "namespace": true,
    "realName": "Actions",
    "realNamespace": "bbn\\Ide",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Ide\/Actions.php",
    "startLine": 17,
    "endLine": 581,
    "numMethods": 11,
    "numProperties": 1,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": [],
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Ide",
    "shortName": "Actions",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "isMvc": {
            "name": "isMvc",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function isMvc($dirs)\n  {\n    if (isset($dirs['files']) && \\count($dirs['files'])) {\n      return (isset($dirs['files'][0], $dirs['files'][0]['title']) && ($dirs['files'][0]['title'] === 'CTRL')) || isset($dirs['files']['CTRL']);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 20,
            "endLine": 26,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isMvc",
            "returns": [],
            "arguments": [
                {
                    "name": "dirs",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(protected Db $db)\n  {\n    $this->db = $db;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 28,
            "endLine": 31,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "promoted": "protected"
                }
            ]
        },
        "save": {
            "name": "save",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function save($data)\n  {\n    if (\n      isset($data['file'], $data['code']) &&\n      (strpos($data['file'], '..\/') === false)\n    ) {\n      $args = explode('\/', $data['file']);\n      \/\/ The root directory\n      $dir = array_shift($args);\n      \/\/ The rest of the path\n      $path = implode('\/', $args);\n      \/\/ Gives the config array of each directory, indexed on the dir's name\n      $directories = new Directories();\n      $cfg = $directories->dirs();\n      if (isset($cfg[$dir])) {\n        $dirs = &$cfg[$dir];\n        \/\/ Change the path for the MVC\n        if ($this->isMvc($dirs)) {\n          \/\/ type of file part of the MVC\n          foreach ($dirs['files'] as $f) {\n            if ($f['url'] === end($args)) {\n              if ($f['url'] === '_super') {\n                $arg = \\array_slice($args, 0, \\count($args) - 2);\n                $new_path = \\count($arg) > 0 ? implode(\"\/\", $arg) . '\/_super.' . $f['ext'] : '_super.' . $f['ext'];\n              }\n              \/\/ If MVC file is not controller and no content, we delete the file\n              else if (empty($data['code']) && ($f['url'] !== 'php')) {\n                $new_path = $f['fpath'] . substr(implode(\"\/\", $args), 0, -3) . $f['ext'];\n                unlink($new_path);\n                return ['path' => $new_path];\n              } else {\n                $arg = \\array_slice($args, 0, \\count($args) - 1);\n                $new_path = substr(implode(\"\/\", $arg), 0, -3) . $f['ext'];\n              }\n              $new_path = $f['fpath'] . $new_path;\n              break;\n            }\n          }\n        } else {\n          foreach ($dirs['files'] as $f) {\n            if ($f['ext'] === Str::fileExt($path)) {\n              $new_path = $f['fpath'] . $path;\n              break;\n            }\n          }\n        }\n        if (is_file($new_path)) {\n          $backup = BBN_DATA_PATH . 'users\/' . $_SESSION[BBN_APP_NAME]['user']['id'] . '\/ide\/backup\/' . date('Y-m-d His') . ' - Save\/' . $dir . '\/' . $path;\n          \/\/die(X::dump($f, $new_path, $backup, $dir ));\n          Dir::createPath(X::dirname($backup));\n          rename($new_path, $backup);\n        } else if (!is_dir(X::dirname($new_path))) {\n          Dir::createPath(X::dirname($new_path));\n        }\n        file_put_contents($new_path, $data['code']);\n        return ['path' => $new_path];\n      }\n    }\n    return $this->error('Error: Save');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 33,
            "endLine": 92,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "save",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function insert($data)\n  {\n    $directories = new Directories();\n    $dirs = $directories->dirs();\n    if (\n      isset($data['dir'], $data['name'], $data['path'], $data['type'], $dirs[$data['dir']]) &&\n      (strpos($data['path'], '..\/') === false) &&\n      Str::checkFilename($data['name'])\n    ) {\n      $cfg = &$dirs[$data['dir']];\n      $type = $data['type'] === 'file' ? 'file' : 'dir';\n      $wtype = $type === 'dir' ? 'directory' : 'file';\n      $dir = $this->isMvc($cfg) ? $cfg['files']['Controller']['fpath'] : $cfg['root_path'];\n      $ext = $this->isMvc($cfg) ? $cfg['files']['Controller']['ext'] : $data['ext'];\n      if (($type === 'file') && !$this->isMvc($cfg) && !empty($ext)) {\n        foreach ($cfg['files'] as $f) {\n          if ($ext === $f['ext']) {\n            $dir = $f['fpath'];\n            break;\n          }\n        }\n      }\n      \/\/X::dump($cfg, $dir);\n      $path = '';\n      if (($data['path'] !== '.\/')) {\n        if (is_dir($dir . $data['path'])) {\n          $path = $data['path'] . '\/';\n        } else {\n          return $this->error(\"The container directory doesn't exist\");\n        }\n      }\n      $path .= $type === 'file' ? $data['name'] . '.' . $ext : $data['name'];\n      if (file_exists($dir . $path)) {\n        return $this->error(\"The $wtype already exists\");\n      }\n      if ($type === 'dir') {\n        if (!@mkdir($dir . $path) && !is_dir($dir . $path)) {\n          return $this->error(\"Impossible to create the $wtype\");\n        }\n      } else if ($ext) {\n        $modes = $directories->modes();\n        if (!file_put_contents($dir . $path, isset($modes[$ext]['code']) ? $modes[$ext]['code'] : ' ')) {\n          return $this->error(\"Impossible to create the $wtype\");\n        }\n      }\n      return 1;\n    }\n    return $this->error(\"There is a problem in the name you entered\");\n  }",
            "parent": false,
            "trait": false,
            "startLine": 94,
            "endLine": 142,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "insert",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "close": {
            "name": "close",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function close($data)\n  {\n    if (isset($data['dir'], $data['file'])) {\n      $directories = new Directories();\n      $dirs = $directories->dirs($data['dir']);\n      $data['file'] = $this->isMvc($dirs) && (Str::fileExt($data['file']) !== 'php') ?\n        substr($data['file'], 0, Strrpos($data['file'], \"\/\")) : $data['file'];\n      unset($data['act']);\n      return 1;\n    }\n    if (\n      isset($_SESSION[BBN_APP_NAME]['ide']) &&\n      \\in_array($data, $_SESSION[BBN_APP_NAME]['ide']['list'])\n    ) {\n      unset($_SESSION[BBN_APP_NAME]['ide']['list'][array_search($data, $_SESSION[BBN_APP_NAME]['ide']['list'])]);\n      return 1;\n    }\n    return ['data' => \"Tab is not in session.\"];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 144,
            "endLine": 162,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "close",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete($data)\n  {\n    $directories = new Directories();\n    $cfg = $directories->dirs();\n    if (\n      isset($data['dir'], $data['name'], $data['path'], $data['type'], $cfg[$data['dir']]) &&\n      (strpos($data['path'], '..\/') === false) &&\n      Str::checkFilename($data['name'])\n    ) {\n      $type = $data['type'] === 'file' ? 'file' : 'dir';\n      $wtype = $type === 'dir' ? 'directory' : 'file';\n      $delete = [];\n      $dirs = &$cfg[$data['dir']];\n      if ($type === 'file') {\n        if ($this->isMvc($dirs)) {\n          $tab_url_mvc = $data['dir'] . '\/' . $data['path'];\n          if ($data['name'] != '_super') {\n            foreach ($cfg[$data['dir']]['files'] as $f) {\n              $p = $f['fpath'] . substr($data['path'], 0, -3) . $f['ext'];\n              if (file_exists($p) && !\\in_array($p, $delete)) {\n                array_push($delete, $p);\n              }\n            }\n          } else {\n            $p = $cfg[$data['dir']]['files']['CTRL']['fpath'] . $data['path'];\n            if (file_exists($p) && !\\in_array($p, $delete)) {\n              array_push($delete, $p);\n            }\n          }\n        } else {\n          foreach ($dirs['files'] as $f) {\n            if ($f['ext'] === Str::fileExt($data['path'])) {\n              $p = $f['fpath'] . $data['path'];\n              if (file_exists($p) && !\\in_array($p, $delete)) {\n                array_push($delete, $p);\n              }\n            }\n          }\n        }\n      }\n      if ($type === 'dir') {\n        $p_mvc = false;\n        $p_mvc2 = false;\n        if ($this->isMvc($cfg[$data['dir']])) {\n          foreach ($cfg[$data['dir']]['files'] as $f) {\n            $p = $f['fpath'] . $data['path'];\n            if ($f['title'] === 'Controller') {\n              $p_mvc = $f['fpath'] . $data['path'];\n              $p_mvc2 = $f['fpath'];\n            }\n            if (is_dir($p) && !\\in_array($p, $delete)) {\n              array_push($delete, $p);\n            }\n          }\n        } else {\n          $p = $cfg[$data['dir']]['root_path'] . $data['path'];\n          if (is_dir($p) && !\\in_array($p, $delete)) {\n            array_push($delete, $p);\n          }\n        }\n        \/\/ Files and directories to check if they're opened\n        $sub_files = Dir::scan(empty($p_mvc) ? $p : $p_mvc);\n        foreach ($sub_files as $i => $sub) {\n          if (is_file($sub)) {\n            $sub_files[$i] = str_replace((empty($p_mvc2) ? $cfg[$data['dir']]['root_path'] : $p_mvc2), $data['dir'] . '\/', $sub);\n          } else {\n            unset($sub_files[$i]);\n          }\n        }\n      }\n      foreach ($delete as $d) {\n        $r = $type === 'dir' ? Dir::delete($d) : unlink($d);\n        if (empty($r)) {\n          return $this->error(\"Impossible to delete the $wtype $d\");\n        }\n      }\n      $ret = [\n        'path' => empty($p_mvc) ? $p : $p_mvc,\n        'sub_files' => empty($sub_files) ? false : array_values($sub_files)\n      ];\n      if (empty($ret['sub_files'])) {\n        $ret['tab_url'] = [empty($tab_url_mvc) ? str_replace($cfg[$data['dir']]['root_path'], $data['dir'] . '\/', $ret['path']) : $tab_url_mvc];\n      }\n      return $ret;\n    } else {\n      return $this->error(\"There is a problem in the name you entered\");\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 164,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "duplicate": {
            "name": "duplicate",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function duplicate($data)\n  {\n    if (\n      isset($data['dir'], $data['path'], $data['src'], $data['name']) &&\n      (strpos($data['src'], '..\/') === false) &&\n      (strpos($data['path'], '..\/') === false) &&\n      Str::checkFilename($data['name'])\n    ) {\n      $directories = new Directories();\n      $dirs = $directories->dirs();\n      if (isset($dirs[$data['dir']])) {\n        $cfg = &$dirs[$data['dir']];\n        $src = $data['src'];\n        $type = is_dir($cfg['files'][0]['fpath'] . $src) ? 'dir' : 'file';\n        $dir_src = X::dirname($src) . '\/';\n        if ($dir_src === '.\/') {\n          $dir_src = '';\n        }\n        $name = Str::fileExt($src, 1)[0];\n        $ext = Str::fileExt($src);\n        $src_file = $dir_src . $name;\n        $dest_file = $data['path'] . '\/' . $data['name'];\n        $todo = [];\n        if ($this->isMvc($cfg)) {\n          foreach ($cfg['files'] as $f) {\n            if ($f != 'CTRL') {\n              $src = $f['fpath'] . $src_file;\n              if ($type === 'file') {\n                $src .= '.' . $f['ext'];\n              }\n              $is_dir = ($type === 'dir') && is_dir($src);\n              $is_file = ($type === 'dir') || $is_dir ? false : is_file($src);\n              if ($is_dir || $is_file) {\n                $dest = $f['fpath'] . $dest_file;\n                if ($type === 'file') {\n                  $dest .= '.' . $f['ext'];\n                }\n                if (file_exists($dest)) {\n                  return $this->error(X::_(\"There's already a file named %s\", $dest));\n                } else {\n                  $todo[$src] = $dest;\n                }\n              }\n            }\n          }\n        } else {\n          $src = $cfg['root_path'] . $src_file . ($type === 'file' ? '.' . $ext : '');\n          $is_dir = ($type === 'dir') && is_dir($src);\n          $is_file = ($type === 'dir') || $is_dir ? false : is_file($src);\n          if ($is_dir || $is_file) {\n            $dest = $cfg['root_path'] . $dest_file . ($type === 'file' ? '.' . $ext : '');\n            if (file_exists($dest)) {\n              return $this->error(X::_(\"There's already a file named %s\", $dest));\n            } else {\n              $todo[$src] = $dest;\n            }\n          }\n        }\n        foreach ($todo as $src => $dest) {\n          if (!Dir::copy($src, $dest)) {\n            return $this->error(X::_(\"Impossible to move the file %s\", $src));\n          }\n        }\n        return 1;\n      }\n    }\n    return $this->error();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 253,
            "endLine": 320,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "duplicate",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "move": {
            "name": "move",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function move($data)\n  {\n    if (\n      isset($data['dir'], $data['spath'], $data['dpath']) &&\n      (strpos($data['dpath'], '..\/') === false) &&\n      (strpos($data['spath'], '..\/') === false)\n    ) {\n      $directories = new Directories();\n      $dirs = $directories->dirs();\n      if (isset($dirs[$data['dir']])) {\n        $cfg = &$dirs[$data['dir']];\n        $spath = $data['spath'];\n        $dpath = $data['dpath'];\n        if ($this->isMvc($cfg)) {\n          $type = is_dir($cfg['files']['Controller']['fpath'] . $spath) ? 'dir' : 'file';\n        } else {\n          $type = is_dir($cfg['root_path'] . $spath) ? 'dir' : 'file';\n        }\n        $dir = X::dirname($spath) . '\/';\n        if ($dir === '.\/') {\n          $dir = '';\n        }\n        $name = Str::fileExt($spath, 1)[0];\n        $ext = Str::fileExt($spath);\n        $todo = [];\n        if ($this->isMvc($cfg)) {\n          foreach ($cfg['files'] as $f) {\n            if ($f != 'CTRL') {\n              $src = $f['fpath'] . $dir . $name;\n              if ($type === 'file') {\n                $src .= '.' . $f['ext'];\n              }\n              $is_dir = ($type === 'dir') && is_dir($src);\n              $is_file = ($type === 'dir') || $is_dir ? false : is_file($src);\n              if ($is_dir || $is_file) {\n                Dir::createPath($f['fpath'] . $dpath);\n                $dest = $f['fpath'] . $dpath . '\/' . $name;\n                if ($type === 'file') {\n                  $dest .= '.' . $f['ext'];\n                }\n                if (file_exists($dest)) {\n                  return $this->error(X::_(\"There's already a file named %s\", $dest));\n                } else {\n                  $todo[$src] = $dest;\n                }\n              }\n            }\n          }\n        } else {\n          $src = $cfg['root_path'] . $dir . $name . ($type === 'file' ? '.' . $ext : '');\n          $is_dir = ($type === 'dir') && is_dir($src);\n          $is_file = ($type === 'dir') || $is_dir ? false : is_file($src);\n          if ($is_dir || $is_file) {\n            Dir::createPath($cfg['root_path'] . $dpath);\n            $dest = $cfg['root_path'] . $dpath . '\/' . $name . ($type === 'file' ? '.' . $ext : '');\n            if (file_exists($dest)) {\n              return $this->error(X::_(\"There's already a file named %s\", $dest));\n            } else {\n              $todo[$src] = $dest;\n            }\n          }\n        }\n        foreach ($todo as $src => $dest) {\n          if (!rename($src, $dest)) {\n            return $this->error(X::_(\"Impossible to move the file %s\", $src));\n          }\n        }\n        return 1;\n      }\n    }\n    return $this->error();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 322,
            "endLine": 393,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "move",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "rename": {
            "name": "rename",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rename($data)\n  {\n    if (\n      isset($data['dir'], $data['name'], $data['path']) &&\n      (strpos($data['path'], '..\/') === false) &&\n      Str::checkFilename($data['name'])\n    ) {\n      $directories = new Directories();\n      $dirs = $directories->dirs();\n      if (isset($dirs[$data['dir']])) {\n        $cfg = &$dirs[$data['dir']];\n        $path = $data['path'];\n        if ($this->isMvc($cfg)) {\n          $type = is_dir($cfg['files']['Controller']['fpath'] . $path) ? 'dir' : 'file';\n        } else {\n          $type = is_dir($cfg['root_path'] . $path) ? 'dir' : 'file';\n        }\n        $dir = X::dirname($path) . '\/';\n        if ($dir === '.\/') {\n          $dir = '';\n        }\n        $name = Str::fileExt($path, 1)[0];\n        $src_file = $dir . $name;\n        $dest_file = $dir . $data['name'];\n        $todo = [];\n        if ($this->isMvc($cfg)) {\n          foreach ($cfg['files'] as $f) {\n            if ($f != 'CTRL') {\n              $src = $f['fpath'] . $src_file;\n              $dest = X::dirname($src) . '\/' . $data['name'];\n              if ($type === 'file') {\n                $src .= '.' . $f['ext'];\n                $dest .= '.' . $f['ext'];\n              }\n              $is_dir = ($type === 'dir') && is_dir($src);\n              $is_file = ($type === 'dir') || $is_dir ? false : is_file($src);\n              if ($is_dir || $is_file) {\n                if (file_exists($dest)) {\n                  return $this->error(X::_(\"There's already a file named %s\", $dest));\n                } else {\n                  $todo[$src] = $dest;\n                }\n              }\n            }\n          }\n        } else {\n          $dest_file = $dir . Str::fileExt($data['name'], 1)[0];\n          $ext = Str::fileExt($data['path']);\n          $src = $cfg['root_path'] . $src_file . ($type === 'file' ? '.' . $ext : '');\n          $dest = X::dirname($src) . '\/' . Str::fileExt($data['name'], 1)[0] . ($type === 'file' ? '.' . $ext : '');\n          $is_dir = ($type === 'dir') && is_dir($src);\n          $is_file = ($type === 'dir') || $is_dir ? false : is_file($src);\n          if ($is_dir || $is_file) {\n            if (file_exists($dest)) {\n              return $this->error(X::_(\"There's already a file named %s\", $dest));\n            } else {\n              $todo[$src] = $dest;\n            }\n          }\n        }\n        foreach ($todo as $src => $dest) {\n          if (!rename($src, $dest)) {\n            return $this->error(X::_(\"Impossible to move the file %s\", $src));\n          }\n        }\n        if (isset($_SESSION[BBN_APP_NAME]['ide']['list'])) {\n          $sess = [\n            'dir' => $data['dir'],\n            'file' => $data['path']\n          ];\n          if (\\in_array($sess, $_SESSION[BBN_APP_NAME]['ide']['list'])) {\n            unset($_SESSION[BBN_APP_NAME]['ide']['list'][array_search($sess, $_SESSION[BBN_APP_NAME]['ide']['list'])]);\n            array_push($_SESSION[BBN_APP_NAME]['ide']['list'], [\n              'dir' => $data['dir'],\n              'file' => $dest_file . (empty($ext) ? '.php' : '.' . $ext)\n            ]);\n          }\n        }\n        return [\n          'new_file' => $dest_file,\n          'new_file_ext' => empty($ext) ? '' : $ext\n        ];\n      }\n    }\n    return $this->error();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 395,
            "endLine": 480,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "rename",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "export": {
            "name": "export",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function export($data)\n  {\n    if (isset($data['dir'], $data['name'], $data['path'], $data['type'])) {\n      $directories = new Directories();\n      $dirs = $directories->dirs();\n      $root_dest = BBN_USER_PATH . 'tmp\/' . Str::genpwd() . '\/';\n      if (isset($dirs[$data['dir']])) {\n        if ($this->isMvc($dirs[$data['dir']])) {\n          foreach ($dirs[$data['dir']]['files'] as $f) {\n            $dest = $root_dest . $data['name'] . '\/' . str_replace(Mvc::getAppPath(), '', $f['fpath']);\n            if ($data['type'] === 'file') {\n              $ext = Str::fileExt($data['path']);\n              $path = substr($data['path'], 0, Strrpos($data['path'], $ext));\n              $file = $f['fpath'] . $path . $f['ext'];\n              if (file_exists($file)) {\n                if (!Dir::createPath($dest . X::dirname($data['path']))) {\n                  return $this->error(\"Impossible to create the path \" . $dest . X::dirname($data['path']));\n                }\n                if (!Dir::copy($file, $dest . $path . $f['ext'])) {\n                  return $this->error('Impossible to export the file ' . $path . $f['ext']);\n                }\n              }\n            } else {\n              $dir = $f['fpath'] . $data['path'];\n              if (file_exists($dir)) {\n                if (!Dir::copy($dir, $dest . $data['path'])) {\n                  return $this->error('Impossible to export the folder ' . $data['path']);\n                }\n              }\n            }\n          }\n        } else {\n          $ext = Str::fileExt($data['path']);\n          $dir = false;\n          foreach ($dirs[$data['dir']]['files'] as $f) {\n            if ($ext === $f['ext']) {\n              $dir = $f['fpath'];\n            }\n          }\n          if (!$dir) {\n            $dir = $dirs[$data['dir']]['files'][0]['fpath'];\n          }\n          $dest = $root_dest . $data['name'] . '\/' . $data['path'];\n          if ($data['type'] === 'file') {\n            if (!Dir::createPath(substr($dest, 0, Strrpos($dest, '\/') + 1))) {\n              return $this->error('Impossible to create the path ' . substr($dest, 0, Strrpos($dest, '\/') + 1));\n            }\n          }\n          if (!Dir::copy($dir . $data['path'], $dest)) {\n            return $this->error('Impossible to export the file or folder ' . $data['name']);\n          }\n        }\n        \/\/ Create zip file\n        if (class_exists('\\\\ZipArchive')) {\n          $dest = $this->isMvc($dirs[$data['dir']]) ? $root_dest . $data['name'] . '\/mvc\/' : $dest;\n          $filezip = BBN_USER_PATH . 'tmp\/' . $data['name'] . '.zip';\n          $zip = new \\ZipArchive();\n          if ($err = $zip->open($filezip, \\ZipArchive::OVERWRITE)) {\n            if (file_exists($dest)) {\n              if (($data['type'] === 'dir') || $this->isMvc($dirs[$data['dir']])) {\n                \/\/ Create recursive directory iterator\n                $files = Dir::scan($dest);\n                foreach ($files as $file) {\n                  \/\/ Add current file to archive\n                  if (($file !== $root_dest . $data['name']) &&\n                    is_file($file) &&\n                    !$zip->addFile($file, str_replace($root_dest . $data['name'] . '\/', '', $file))\n                  ) {\n                    return $this->error(\"Impossible to add $file\");\n                  }\n                }\n              } else {\n                if (!$zip->addFile($dest, $data['path'])) {\n                  return $this->error(\"Impossible to add $dest\");\n                }\n              }\n              if ($zip->close()) {\n                if (!Dir::delete($root_dest, 1)) {\n                  return $this->error(\"Impossible to delete the directory $root_dest\");\n                }\n                return $filezip;\n              }\n              return $this->error(\"Impossible to close the zip file $filezip\");\n            }\n            return $this->error(\"The path does not exist: $dest\");\n          }\n          return $this->error(\"Impossible to create $filezip ($err)\");\n        }\n        return $this->error(\"ZipArchive class non-existent\");\n      }\n    }\n    return $this->error();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 482,
            "endLine": 574,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "export",
            "returns": [],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "error": {
            "name": "error",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Ide\\Actions",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Ide\/Actions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function error($msg = \"Error.\")\n  {\n    return [\"error\" => $msg];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 577,
            "endLine": 580,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "error",
            "returns": [],
            "arguments": [
                {
                    "name": "msg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "Error.",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Db",
            "declaring": {
                "name": "bbn\\Ide\\Actions"
            },
            "declaring_trait": "bbn\\Ide\\Actions",
            "promoted": true,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        }
    },
    "staticProperties": [],
    "constants": null,
    "uses": {
        "bbn\\Db": "Db",
        "bbn\\Str": "Str",
        "bbn\\X": "X",
        "bbn\\Mvc": "Mvc",
        "bbn\\File\\Dir": "Dir",
        "bbn\\Ide\\Directories": "Directories"
    },
    "dummyComments": [],
    "summary": "",
    "description": "",
    "description_parts": []
}