{
    "doc": {
        "description": "The class which deals with App-UI configuration.",
        "tags": []
    },
    "name": "bbn\\Appui",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Appui.php",
    "startLine": 10,
    "endLine": 2041,
    "contentConstructor": {
        "file": "bbn\\Appui",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Constructor",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = NULL, bbn\\File\\System $fs = NULL)\n  {\n    $this->setConfig($cfg, $fs);\n  }",
            "startLine": 114,
            "endLine": 117,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "An initial configuration"
                },
                {
                    "name": "fs",
                    "position": 1,
                    "type": "bbn\\File\\System",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "A File System connection for the given config."
                }
            ]
        },
        "unsetConfig": {
            "name": "unsetConfig",
            "summary": "Unsets all the object created for the current environment if any",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->_current                = [];\n    $this->_currentPerm            = null;\n    $this->_currentPref            = null;\n    $this->_currentPass            = null;\n    $this->_currentMenu            = null;\n    $this->_currentOption          = null;\n    $this->_currentUser            = null;\n    $this->_currentDb              = null;\n    $this->_currentFs              = null;\n    $this->_dbFilesContent         = null;\n    $this->_optionFilesContent     = null;\n    $this->_permissionFilesContent = null;\n    $this->_menuFilesContent       = null;\n    $this->_info                   = null;\n  }",
            "startLine": 125,
            "endLine": 141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setConfig": {
            "name": "setConfig",
            "summary": "Sets the whole current config.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg = NULL, bbn\\File\\System $fs = NULL)\n  {\n    $this->unsetConfig();\n    $this->_currentFs = $fs ?? new File\\System();\n    $has_cfg          = (bool)$cfg;\n    foreach (self::$vars as $v) {\n      if ($has_cfg) {\n        $this->_current[$v] = $cfg[$v] ?? null;\n      }\n      elseif (defined('\\\\BBN_'.strtoupper($v))) {\n        $this->_current[$v] = constant('\\\\BBN_'.strtoupper($v));\n      }\n    }\n\n    $c =& $this->_current;\n\n    $url = 'http';\n    if ($c['is_ssl']) {\n      $url .= 's';\n    }\n\n    $url .= ':\/\/' . $c['server_name'];\n    if (isset($c['port']) && !in_array($c['port'], [80, 443])) {\n      $url .= ':'.$c['port'];\n    }\n\n    if (!empty($c['cur_path'])) {\n      $url .= $c['cur_path'];\n    }\n\n    if (substr($url, -1) !== '\/') {\n      $url .= '\/';\n    }\n\n    $this->_current['url'] = $url;\n  }",
            "startLine": 151,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "An application configuration"
                },
                {
                    "name": "fs",
                    "position": 1,
                    "type": "bbn\\File\\System",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "A filesystem object accessing the config path"
                }
            ]
        },
        "appPath": {
            "name": "appPath",
            "summary": "Returns the path to the main application",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $raw = false)\n  {\n    if (isset($this->_current['app_path'])) {\n      return $this->_current['app_path'].($raw ? '' : 'src\/');\n    }\n\n    return null;\n  }",
            "startLine": 195,
            "endLine": 202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "raw",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If false, src\/ is appended to the app_path var."
                }
            ]
        },
        "libPath": {
            "name": "libPath",
            "summary": "Returns the path to the libraries",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_current['lib_path'] ?? null;\n  }",
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "dataPath": {
            "name": "dataPath",
            "summary": "Returns the path to the data",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_current['data_path'] ?? null;\n  }",
            "startLine": 221,
            "endLine": 224,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getDb": {
            "name": "getDb",
            "summary": "Returns a Db object according to the current config, creates it if needed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_currentDb) {\n      $this->_currentDb = new Db(\n        [\n          'engine' => $this->_current['db_engine'],\n          'host' => $this->_current['db_host'] ?? '',\n          'user' => $this->_current['db_user'] ?? '',\n          'pass' => $this->_current['db_pass'] ?? '',\n          'error_mode' => 'continue'\n        ]\n      );\n    }\n\n    return $this->_currentDb;\n  }",
            "startLine": 232,
            "endLine": 247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getOption": {
            "name": "getOption",
            "summary": "Returns a Db object according to the current config, creates it if needed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_currentOption) {\n      $this->_currentOption = new Appui\\Option($this->getDb());\n    }\n\n    return $this->_currentOption;\n  }",
            "startLine": 255,
            "endLine": 262,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getUser": {
            "name": "getUser",
            "summary": "Returns a special User class which connects directly as admin.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->_currentUser) {\n      return $this->_currentUser;\n    }\n\n    $this->_currentUser = new class($this->getDb(), $this->_current) extends User {\n\n      private $_cfg;\n\n\n      \/**\n       * Constructor which logs in directly the admin after regular construction.\n       *\n       * @param Db    $db  The database connection corresponding to the current configuration\n       * @param array $cfg A configuration array with admin_email and admin_password\n       *\/\n      public function __construct(Db $db, array $cfg)\n      {\n        parent::__construct($db, $cfg);\n        $this->_cfg = $cfg;\n        $this->logAdminIn();\n      }\n\n\n      \/**\n       * Logs in the admin user.\n       *\n       * @return void\n       *\/\n      public function logAdminIn(): void\n      {\n        $id_user = $this->db->selectOne('bbn_users', 'id', ['email' => $this->_cfg['admin_email']]);\n        if ($id_user) {\n          $this->logIn($id_user);\n          return;\n        }\n\n        throw new \\Exception(\"Impossible to fiond the admin user\");\n      }\n\n\n    };\n\n    return $this->_currentUser;\n  }",
            "startLine": 270,
            "endLine": 315,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getPreferences": {
            "name": "getPreferences",
            "summary": "Returns a Db object according for the current config, creates it if needed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_currentPref) {\n      $this->_currentPref = new User\\Preferences($this->getDb());\n    }\n\n    return $this->_currentPref;\n  }",
            "startLine": 323,
            "endLine": 330,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getPermissions": {
            "name": "getPermissions",
            "summary": "Returns a Db object according for the current config, creates it if needed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_currentPerm) {\n      $routes             = $this->getRoutes();\n      $user               = $this->getUser();\n      $preferences        = $this->getPreferences();\n      $this->_currentPerm = new User\\Permissions($routes['root']);\n    }\n\n    return $this->_currentPerm;\n  }",
            "startLine": 338,
            "endLine": 348,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getPassword": {
            "name": "getPassword",
            "summary": "Returns a Password object according for the current config, creates it if needed",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_currentPass) {\n      $this->_currentPass = new Appui\\Passwords($this->getDb());\n    }\n\n    return $this->_currentPass;\n  }",
            "startLine": 356,
            "endLine": 363,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getMenu": {
            "name": "getMenu",
            "summary": "Returns a menu instance accordin to the current configuration",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_currentMenu) {\n      $this->_currentMenu = new Appui\\Menu();\n    }\n\n    return $this->_currentMenu;\n\n  }",
            "startLine": 371,
            "endLine": 379,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks just once whether or not all needed constant have been defined",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $throwError = false)\n  {\n    if ($throwError || is_null($this->_checked)) {\n      $ok = true;\n      foreach (self::$vars as $v) {\n        if (!array_key_exists($v, $this->_current)) {\n          if ($throwError) {\n            throw new \\Exception(X::_(\"The parameter %s is not defined\", $v));\n          }\n\n          $ok = false;\n        }\n      }\n\n      $this->_checked = $ok;\n    }\n\n    return $this->_checked;\n  }",
            "startLine": 390,
            "endLine": 408,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "throwError",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "rror wil throw an error if set to true instead of returning false"
                }
            ]
        },
        "getSettings": {
            "name": "getSettings",
            "summary": "Gets the settings of the current project.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      if (empty($this->_settings)\n          && ($file = $this->getSettingsFile())\n          && ($content = $this->_currentFs->getContents($file))\n      ) {\n        if (substr($file, -4) === '.yml') {\n          $this->_settings = yaml_parse($content);\n        }\n        else {\n          $this->_settings = json_decode($content, true);\n        }\n      }\n\n      return $this->_settings;\n    }\n\n    return null;\n  }",
            "startLine": 416,
            "endLine": 435,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getRoutes": {
            "name": "getRoutes",
            "summary": "Gets the settings of the current project.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      if (empty($this->_routes)\n          && ($file = $this->getRoutesFile())\n          && ($content = $this->_currentFs->getContents($file))\n      ) {\n        if (substr($file, -4) === '.yml') {\n          $this->_routes = yaml_parse($content);\n        }\n        else {\n          $this->_routes = json_decode($content, true);\n        }\n      }\n\n      return $this->_routes;\n    }\n\n    return null;\n  }",
            "startLine": 443,
            "endLine": 462,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getEnvironmentIndex": {
            "name": "getEnvironmentIndex",
            "summary": "Gets the index for the given environment.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $hostname = NULL, string $servname = NULL)\n  {\n    if ($this->check()) {\n      if (empty($hostname) && empty($servname)) {\n        if (!defined('BBN_HOSTNAME')) {\n          throw new \\Exception(X::_(\"No hostname defined\"));\n        }\n\n        if (!defined('BBN_SERVER_NAME')) {\n          throw new \\Exception(X::_(\"No server name defined\"));\n        }\n\n        $hostname = BBN_HOSTNAME;\n        $servname = BBN_SERVER_NAME;\n      }\n\n      return md5($hostname.$servname);\n    }\n\n    return null;\n\n  }",
            "startLine": 473,
            "endLine": 494,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "hostname",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The hostname of the environment."
                },
                {
                    "name": "servname",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The URL of the environment."
                }
            ]
        },
        "getEnvironment": {
            "name": "getEnvironment",
            "summary": "Returns the environment variables of an app from the current project.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($hostname = NULL, string $servname = NULL)\n  {\n    if ($this->check()) {\n      if ($hostname !== true) {\n        $idx = $this->getEnvironmentIndex($hostname, $servname);\n      }\n\n      if (empty($this->_environment)\n          && ($file = $this->getEnvironmentFile())\n          && ($content = $this->_currentFs->getContents($file))\n      ) {\n        if (substr($file, -4) === '.yml') {\n          $envs = yaml_parse($content);\n        }\n        else {\n          $envs = json_decode($content, true);\n        }\n\n        $_env =& $this->_environment;\n        foreach ($envs as $i => $env) {\n          $md5        = $this->getEnvironmentIndex($env['hostname'], $env['server_name']);\n          $_env[$md5] = [\n            'index' => $i,\n            'data' => $env\n          ];\n        }\n      }\n\n      return $hostname === true ? array_values(\n        array_map(\n          function ($a) {\n            return $a['data'];\n          },\n          $this->_environment\n        )\n      ) : (\n        isset($this->_environment[$idx]) ? $this->_environment[$idx]['data'] : null\n      );\n    }\n\n    return null;\n  }",
            "startLine": 505,
            "endLine": 546,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "hostname",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The hostname of the environment."
                },
                {
                    "name": "servname",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The URL of the environment."
                }
            ]
        },
        "getRoutesFile": {
            "name": "getRoutesFile",
            "summary": "Get the routes file location.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      if (empty($this->_routes_file)) {\n        $app_path = $this->appPath();\n        if (function_exists('\\\\yaml_parse')\n            && $this->_currentFs->isFile($app_path.'cfg\/routes.yml')\n        ) {\n          $this->_routes_file = $app_path.'cfg\/routes.yml';\n        }\n        elseif ($this->_currentFs->isFile($app_path.'cfg\/routes.json')) {\n          $this->_routes_file = $app_path.'cfg\/routes.json';\n        }\n      }\n\n      return $this->_routes_file;\n    }\n\n    return null;\n  }",
            "startLine": 554,
            "endLine": 573,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getSettingsFile": {
            "name": "getSettingsFile",
            "summary": "Get the settings file location.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      if (empty($this->_settings_file)) {\n        $app_path = $this->appPath();\n        if (function_exists('\\\\yaml_parse')\n            && $this->_currentFs->isFile($app_path.'cfg\/settings.yml')\n        ) {\n          $this->_settings_file = $app_path.'cfg\/settings.yml';\n        }\n        elseif ($this->_currentFs->isFile($app_path.'cfg\/settings.json')) {\n          $this->_settings_file = $app_path.'cfg\/settings.json';\n        }\n      }\n\n      return $this->_settings_file;\n    }\n\n    return null;\n  }",
            "startLine": 581,
            "endLine": 600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getEnvironmentFile": {
            "name": "getEnvironmentFile",
            "summary": "Get the environment file location.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      if (empty($this->_environment_file)) {\n        $app_path = $this->appPath();\n        if (function_exists('\\\\yaml_parse')\n            && $this->_currentFs->isFile($app_path.'cfg\/environment.yml')\n        ) {\n          $this->_environment_file = $app_path.'cfg\/environment.yml';\n        }\n        elseif ($this->_currentFs->isFile($app_path.'cfg\/environment.json')) {\n          $this->_environment_file = $app_path.'cfg\/environment.json';\n        }\n      }\n\n      return $this->_environment_file;\n    }\n\n    return null;\n  }",
            "startLine": 608,
            "endLine": 627,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "setEnvironment": {
            "name": "setEnvironment",
            "summary": "Set environment vars",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $update, string $hostname = NULL, string $servname = NULL, bool $replace = false)\n  {\n      string $hostname = null,\n      string $servname = null,\n      bool $replace = false\n  ): bool\n  {\n    $idx = $this->getEnvironmentIndex($hostname, $servname);\n    if (isset($this->_environment[$idx])) {\n      if ($replace) {\n        $this->_environment[$idx]['data'] = $update;\n      }\n      else {\n        $this->_environment[$idx]['data'] = array_merge(\n          $this->_environment[$idx]['data'],\n          $update\n        );\n      }\n\n      $file = $this->getEnvironmentFile();\n      $envs = $this->getEnvironment(true);\n      if (substr($file, -4) === '.yml') {\n        $content = \\yaml_emit($envs);\n      }\n      else {\n        $content = json_encode($envs, JSON_PRETTY_PRINT);\n      }\n\n      return (bool)$this->_currentFs->putContents($file, $content);\n    }\n\n    return false;\n  }",
            "startLine": 640,
            "endLine": 672,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "update",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new values to be added"
                },
                {
                    "name": "hostname",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The environment's hostname"
                },
                {
                    "name": "servname",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The environment's server name"
                },
                {
                    "name": "replace",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "True if the whole value should be replaced by the new one"
                }
            ]
        },
        "setSettings": {
            "name": "setSettings",
            "summary": "Set settings vars",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $update, $replace = false)\n  {\n    if ($this->getSettings()) {\n      if ($replace) {\n        $this->_settings = $update;\n      }\n      else {\n        $this->_settings = array_merge(\n          $this->_settings,\n          $update\n        );\n      }\n\n      $file = $this->getSettingsFile();\n      if (substr($file, -4) === '.yml') {\n        $content = \\yaml_emit($this->_settings);\n      }\n      else {\n        $content = json_encode($this->_settings, JSON_PRETTY_PRINT);\n      }\n\n      return (bool)$this->_currentFs->putContents($file, $content);\n    }\n    else {\n      throw new \\Exception(X::_(\"Impossible to get the settings\"));\n    }\n\n    return false;\n  }",
            "startLine": 683,
            "endLine": 711,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "update",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new values to be added"
                },
                {
                    "name": "replace",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "True if the whole value should be replaced by the new one"
                }
            ]
        },
        "replaceEnvironment": {
            "name": "replaceEnvironment",
            "summary": "Replaces an environment with another",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $update, string $hostname = NULL, string $servname = NULL)\n  {\n      string $hostname = null,\n      string $servname = null\n  ): bool\n  {\n    return $this->setEnvironment($update, $hostname, $servname, true);\n  }",
            "startLine": 722,
            "endLine": 729,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "update",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new environment config"
                },
                {
                    "name": "hostname",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "A hostname, if none given default env value wwill be used"
                },
                {
                    "name": "servname",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "A server name, if none given default env value wwill be used"
                }
            ]
        },
        "replaceSettings": {
            "name": "replaceSettings",
            "summary": "Replaces the settings with another set of options",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $update)\n  {\n    return $this->setSettings($update, true);\n  }",
            "startLine": 738,
            "endLine": 741,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "update",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new settings"
                }
            ]
        },
        "addPlugin": {
            "name": "addPlugin",
            "summary": "Creates a plugin in the database or check its existence and returns its ID.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name, string $title = NULL)\n  {\n    $id_plugin = null;\n    if (!$title) {\n      $title = $name;\n    }\n\n    \/** @var Appui\\Option *\/\n    $o = $this->getOption();\n    if (substr($name, 0, 6) === 'appui-') {\n      $name   = substr($name, 6);\n      $params = ['appui'];\n    }\n    else {\n      $name   = $name;\n      $params = ['plugins'];\n    }\n\n    if ($id_parent = $o->fromCode(...$params)) {\n      array_unshift($params, $name);\n      if ($id = $o->fromCode(...$params)) {\n        $id_plugin = $id;\n      }\n      else {\n        $id_plugin = $o->add(\n          [\n          'code' => $name,\n          'text' => $title,\n          'id_parent' => $id_parent\n          ]\n        );\n        if (!$id_plugin) {\n          throw new \\Exception(X::_(\"Impossible to add the plugin\").\" $name\");\n        }\n\n        $perm_id = $o->add(\n          [\n          'id_parent' => $id_plugin,\n          'code' => 'permissions',\n          'text' => 'Permissions'\n          ]\n        );\n        if (!$perm_id) {\n          throw new \\Exception(X::_(\"Impossible to add the permission for the plugin\").\" $name\");\n        }\n\n        \/\/ Other options under permissions\n        $o->add(\n          [\n          'id_parent' => $perm_id,\n          'code' => 'options',\n          'text' => 'Options'\n          ]\n        );\n        $o->add(\n          [\n          'id_parent' => $perm_id,\n          'code' => 'plugins',\n          'text' => 'Plugins'\n          ]\n        );\n      }\n    }\n\n    return $id_plugin;\n  }",
            "startLine": 751,
            "endLine": 816,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Created in appui if starts with `appui-`, otherwise in plugins"
                },
                {
                    "name": "title",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The title of the plugin"
                }
            ]
        },
        "replaceMagicStrings": {
            "name": "replaceMagicStrings",
            "summary": "Replaces plugins names by path and *(project)* by the real project name",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $st)\n  {\n    \/\/ Function for replacing *(project)* by the real project name\n    $magic_strings = [\n      '\/\\|\\*(project)\\*\\|\/' => BBN_APP_NAME,\n    ];\n    $routes        = $this->getRoutes();\n    $plugins_urls  = $routes['root'];\n    $st            = preg_replace_callback(\n      '\/\\|\\*(appui-[a-z]+)\\*\\|\/',\n      function ($a) use ($plugins_urls) {\n        return X::getField($plugins_urls, ['name' => $a[1]], 'url');\n      },\n      $st\n    );\n\n    foreach ($magic_strings as $exp => $val) {\n      $string = preg_replace($exp, $val, $st);\n    }\n\n    return $string;\n  }",
            "startLine": 825,
            "endLine": 846,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string nwhere to replace the values"
                }
            ]
        },
        "getHistoryConstraints": {
            "name": "getHistoryConstraints",
            "summary": "Returns the constraints on the history_uids table",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $tables      = $this->getDbFilesContent();\n    $constraints = [];\n    $i           = 0;\n    $st          = strtolower(Str::genpwd(4));\n    foreach ($tables as $table => $structure) {\n      foreach ($structure['keys'] as $k => $cfg) {\n        if (!empty($cfg['constraint'])) {\n          ++$i;\n          $tables[$table]['keys'][$k]['constraint'] = \"bbn_constraint_{$st}_{$i}\";\n        }\n\n        if (!empty($cfg['ref_table']) && ('bbn_history_uids' === $cfg['ref_table'])) {\n          if (!isset($constraints[$table])) {\n            $constraints[$table] = [];\n          }\n\n          if (!isset($constraints[$table][$k])) {\n            $constraints[$table][$k] = $tables[$table]['keys'][$k];\n          }\n        }\n      }\n    }\n\n    return $constraints;\n  }",
            "startLine": 854,
            "endLine": 880,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getDbFilesContent": {
            "name": "getDbFilesContent",
            "summary": "Returns an array of tables with their structures from the database.json files in all plugins.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_dbFilesContent) {\n      $routes   = $this->getRoutes();\n      $lib_path = $this->libPath();\n      $tables   = [];\n      foreach ($routes['root'] as $url => $plugin) {\n        $path = $lib_path.'bbn\/'.$plugin['name'].'\/src\/cfg\/';\n        if ($this->_currentFs->exists($path.'database.json')) {\n          if ($list = $this->_currentFs->decodeContents($path.'database.json', 'json', true)) {\n            foreach ($list as $t => $it) {\n              $tables[$t] = $it;\n            }\n          }\n          else {\n            throw new \\Exception(X::_(\"Unreadable database file in plugin %s\", $plugin['name']));\n          }\n        }\n      }\n\n      $this->_dbFilesContent = $tables;\n    }\n\n    return $this->_dbFilesContent;\n  }",
            "startLine": 888,
            "endLine": 912,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getOptionFilesContent": {
            "name": "getOptionFilesContent",
            "summary": "Returns an array of tables with their structures from the database.json files in all plugins.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_optionFilesContent) {\n      $routes   = $this->getRoutes();\n      $lib_path = $this->libPath();\n      $options  = [];\n      foreach ($routes['root'] as $url => $plugin) {\n        $path = $lib_path.'bbn\/'.$plugin['name'].'\/src\/cfg\/';\n        if (('appui-core' !== $plugin['name'])\n            && ('appui-options' !== $plugin['name'])\n            && $this->_currentFs->exists($path.'nononononono.json')\n            \/* && file_exists(BBN_LIB_PATH.'bbn\/'.$p.'\/src\/cfg\/options.json') *\/\n        ) {\n          if ($list = $this->_currentFs->decodeContents($path.'options.json', 'json', true)) {\n            if (X::isAssoc($list)) {\n              $options[] = $list;\n            }\n            else {\n              $options = array_merge($options, $list);\n            }\n          }\n          else {\n            throw new \\Exception(X::_(\"The options file in %s is corrupted\", $plugin['name']));\n          }\n        }\n      }\n\n      $this->_optionFilesContent = $options;\n    }\n\n    return $this->_optionFilesContent;\n  }",
            "startLine": 921,
            "endLine": 952,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getPermissionFilesContent": {
            "name": "getPermissionFilesContent",
            "summary": "Returns an array of tables with their structures from the database.json files in all plugins.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_permissionFilesContent) {\n      $routes   = $this->getRoutes();\n      $lib_path = $this->libPath();\n      $perms    = [];\n      foreach ($routes['root'] as $url => $plugin) {\n        $path = $lib_path.'bbn\/'.$plugin['name'].'\/src\/cfg\/';\n        if ($this->_currentFs->exists($path.'permissions.json')) {\n          if ($list = $this->_currentFs->decodeContents($path.'permissions.json', 'json', true)) {\n            if (X::isAssoc($list)) {\n              $perms[] = $list;\n            }\n            else {\n              $perms = array_merge($perms, $list);\n            }\n          }\n          else {\n            throw new \\Exception(X::_(\"The permission file in %s is corrupted\", $plugin['name']));\n          }\n        }\n      }\n\n      $this->_permissionFilesContent = $perms;\n    }\n\n    return $this->_permissionFilesContent;\n  }",
            "startLine": 960,
            "endLine": 987,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getMenuFilesContent": {
            "name": "getMenuFilesContent",
            "summary": "Returns an array of menus with their structures from the menu.json files in all plugins.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_menuFilesContent) {\n      $routes   = $this->getRoutes();\n      $lib_path = $this->libPath();\n      $menus    = [];\n      foreach ($routes['root'] as $url => $plugin) {\n        if ($this->_currentFs->exists($lib_path.'bbn\/'.$plugin['name'].'\/src\/cfg\/menu.json')) {\n          $path = $lib_path.'bbn\/'.$plugin['name'].'\/src\/cfg\/';\n\n          if ($list = $this->_currentFs->decodeContents($path.'menu.json', 'json', true)) {\n            foreach ($list['items'] as &$it) {\n              $it['link'] = $url.'\/'.$it['link'];\n            }\n\n            unset($it);\n            $menus[$plugin['name']] = $list;\n          }\n          else {\n            throw new \\Exception(X::_(\"The database file in %s is corrupted\", $plugin['name']));\n          }\n        }\n      }\n\n      \/\/ Correcting the menus' sort order\n      X::sortBy($menus, 'num');\n      foreach ($menus as $i => &$m) {\n        $m['num'] = $i + 1;\n      }\n\n      unset($m);\n      $this->_menuFilesContent = $menus;\n    }\n\n    return $this->_menuFilesContent;\n  }",
            "startLine": 995,
            "endLine": 1030,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getDatabaseStructure": {
            "name": "getDatabaseStructure",
            "summary": "Returns an array of tables with their whole structure, keys included",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $tables = $this->getDbFilesContent();\n    $i      = 0;\n    $st     = strtolower(Str::genpwd(4));\n    foreach ($tables as $table => $structure) {\n      foreach ($structure['keys'] as $k => $cfg) {\n        if (!empty($cfg['constraint'])) {\n          ++$i;\n          $tables[$table]['keys'][$k]['constraint'] = \"bbn_constraint_{$st}_{$i}\";\n        }\n\n        if (!empty($cfg['ref_table'])) {\n          if (!isset($tables[$cfg['ref_table']]) || ('bbn_history_uids' === $cfg['ref_table'])) {\n            $tables[$table]['keys'][$k]['ref_db']     = null;\n            $tables[$table]['keys'][$k]['ref_table']  = null;\n            $tables[$table]['keys'][$k]['ref_column'] = null;\n          }\n          else {\n            $tables[$table]['keys'][$k]['ref_db'] = $this->_current['database'];\n          }\n        }\n      }\n    }\n\n    return $tables;\n  }",
            "startLine": 1038,
            "endLine": 1064,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getDatabaseCreationQueries": {
            "name": "getDatabaseCreationQueries",
            "summary": "Returns an array of queries for creating the database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $db      = $this->getDb();\n    $tables  = $this->getDatabaseStructure();\n    $queries = [\n      'table' => [],\n      'keys' => [],\n      'constraints' => [],\n    ];\n    \/\/ Creating queries for tables, keys and constraint creation\n    foreach (array_keys($queries) as $type) {\n      $fn = 'getCreate'.ucwords($type);\n      foreach ($tables as $table => $structure) {\n        if ($tmp = $db->{$fn}($table, $structure)) {\n          $queries[$type][$table] = $tmp;\n        }\n      }\n    }\n\n    return $queries;\n  }",
            "startLine": 1072,
            "endLine": 1092,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getPublicKey": {
            "name": "getPublicKey",
            "summary": "Returns the path of the main RSA public key of the application",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $create = false)\n  {\n    if ($this->check()) {\n      $path = $this->appPath().'cfg\/cert';\n      if (!$this->_currentFs->isFile($path.'_rsa.pub') && $create) {\n        try {\n          Enc::generateCertFiles($path);\n        }\n        catch (\\Exception $e) {\n          throw new \\Exception(X::_(\"Failed to create SSL certificate\").': '.$e->getMessage());\n        }\n      }\n\n      if ($this->_currentFs->isFile($path.'_rsa.pub')) {\n        return $path.'_rsa.pub';\n      }\n\n      return null;\n    }\n  }",
            "startLine": 1101,
            "endLine": 1120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "create",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true will create it if it doesn't exist"
                }
            ]
        },
        "createDatabase": {
            "name": "createDatabase",
            "summary": "Creates a database with given name based on the given structure.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $db = $this->getDb();\n    \/\/ creates the Database\n    $db->createDatabase($this->_current['database']);\n    if (!$db->change($this->_current['database'])) {\n      throw new \\Exception(X::_(\"The database %s doesn't exist\", $this->_current['database']));\n    }\n\n    \/\/ Getting the existing tables\n    $current_tables = $db->getTables() ?: [];\n    $queries        = $this->getDatabaseCreationQueries();\n    $num            = 0;\n    foreach ($queries as $type => $arr) {\n      foreach ($arr as $table => $q) {\n        if (!empty($q) && (('table' !== $type) || !in_array($table, $current_tables, true))) {\n          $current_tables[] = $table;\n          $db->query($q);\n          $db_err = $db->getLastError();\n          if ($db_err) {\n            throw new \\Exception($db_err);\n          }\n          elseif ('table' === $type) {\n            $num++;\n          }\n        }\n      }\n    }\n\n    return $num;\n  }",
            "startLine": 1128,
            "endLine": 1158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getUserGroup": {
            "name": "getUserGroup",
            "summary": "Returns the id_group for the given code, creating the group if needed.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $code, string $name, $type = 'real')\n  {\n    $id_group = null;\n    if ($this->check()\n        && ($db = $this->getDb())\n        && !($id_group = $db->selectOne(\n          'bbn_users_groups', 'id', [\n          'code' => $code,\n          'type' => $type\n          ]\n        ))\n        && $db->insert(\n          'bbn_users_groups',\n          [\n            'group' => $name,\n            'code' => $code,\n            'type' => $type\n          ]\n        )\n    ) {\n      $id_group = $db->lastId();\n    }\n\n    return $id_group;\n  }",
            "startLine": 1169,
            "endLine": 1193,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The group's code"
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The group's name"
                },
                {
                    "name": "type",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "real",
                    "default_name": "",
                    "description": "The group's type"
                }
            ]
        },
        "getAdminUser": {
            "name": "getAdminUser",
            "summary": "Returns the admin user's ID and creates it if it doesn't exist.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name, string $password)\n  {\n    $id_user = null;\n    if (($db = $this->getDb())\n        && !($id_user = $db->selectOne(\n          'bbn_users',\n          'id',\n          ['login' => $this->_current['admin_email']]\n        ))\n        && $db->insert(\n          'bbn_users',\n          [\n            'username' => $name,\n            'email' => $this->_current['admin_email'],\n            'login' => $this->_current['admin_email'],\n            'id_group' => $this->getUserGroup('admin', 'Administrators'),\n            'admin' => 1,\n            'dev' => 1,\n            'theme' => $this->_current['theme'] ?? 'default',\n          ]\n        )\n    ) {\n      $id_user = $db->lastId();\n      $db->insert(\n        'bbn_users_passwords',\n        [\n          'pass' => sha1($password),\n          'id_user' => $id_user,\n          'added' => date('Y-m-d H:i:s'),\n        ]\n      );\n    }\n\n    return $id_user;\n  }",
            "startLine": 1203,
            "endLine": 1237,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The admin's name"
                },
                {
                    "name": "password",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The password if needed to create it"
                }
            ]
        },
        "getOptionRoot": {
            "name": "getOptionRoot",
            "summary": "Returns the options' root's ID and creates it if it doesn't exist.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $db = $this->getDb();\n    if (!($id = $db->selectOne('bbn_options', 'id', ['code' => 'root', 'id_parent' => null]))\n        && $db->insert(\n          'bbn_options',\n          [\n            'id_parent' => null,\n            'code' => 'root',\n            'text' => 'root',\n            'cfg' => '{\"permissions\":1}'\n          ]\n        )\n    ) {\n      $id = $db->lastId();\n    }\n\n    if (!$id) {\n      throw new \\Exception(\"Impossible to create the root option\");\n    }\n\n    return $id;\n  }",
            "startLine": 1246,
            "endLine": 1268,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getClient": {
            "name": "getClient",
            "summary": "Returns the ID of the main client, and creates if not exist.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $name)\n  {\n    $id_client = null;\n    if (($db = $this->getDb())\n        && !($id_client = $db->selectOne('bbn_clients', 'id', ['name' => $name]))\n        && $db->insert('bbn_clients', ['name' => $name])\n    ) {\n      $id_client = $db->lastId();\n    }\n\n    if (!$id_client) {\n      throw new \\Exception(\"Impossible to create the client\");\n    }\n\n    return $id_client;\n  }",
            "startLine": 1277,
            "endLine": 1292,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the client"
                }
            ]
        },
        "getProject": {
            "name": "getProject",
            "summary": "Returns the ID of the main app project, and creates if not exist.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $opt = $this->getOption();\n    $id_project_list = $opt->fromCode('list', 'project', 'appui');\n    if (!($id_project = $opt->fromCode($this->_current['app_name'], $id_project_list))) {\n      $id_project = $opt->add(\n        [\n          'id_parent' => $id_project_list,\n          'id_alias' => ['project', 'templates', 'appui-option', 'plugins', 'project', 'appui'],\n          'text' => $this->_current['app_name'],\n          'code' => $this->_current['app_name'],\n        ]\n      );\n      $opt->add(\n        [\n          'id_parent' => $id_project,\n          'text' => X::_(\"Environment\"),\n          'code' => 'env'\n        ]\n      );\n    }\n\n    $id_client = $this->getClient($this->_current['client_name']);\n\n    $db = $this->getDb();\n    \/\/ Create project\n    $id_project = $db->selectOne(\n      'bbn_projects',\n      'id',\n      [\n        'id_client' => $id_client,\n        'name' => $this->_current['app_name']\n      ]\n    );\n    if (!$id_project\n        && $db->insert(\n          'bbn_projects',\n          [\n            'id_client' => $id_client,\n            'db' => BBN_DATABASE,\n            'name' => BBN_APP_NAME,\n            'lang' => 'en',\n          ]\n        )\n    ) {\n      $id_project = $db->lastId();\n    }\n\n    if (!$id_project) {\n      throw new \\Exception(\"Impossible to create the project\");\n    }\n\n    return $id_project;\n  }",
            "startLine": 1301,
            "endLine": 1354,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getAppId": {
            "name": "getAppId",
            "summary": "Returns the ID and creates if needed the app entry in the options",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $id_app = null;\n    if (($db = $this->getDb())\n        && ($opt = $this->getOption())\n    ) {\n      $id_env = $opt->fromCode('env', $this->_current['app_name'], 'list', 'project', 'appui');\n      if (!$id_env) {\n        $this->getProject();\n        $id_env = $opt->fromCode('env', $this->_current['app_name'], 'list', 'project', 'appui');\n      }\n\n      if (!$id_env) {\n        throw new \\Exception(\"Impossible to retrieve the environment ID\");\n      }\n\n      if ($id_env\n          && !($id_app = $db->selectOne(\n            'bbn_options',\n            'id',\n            [\n              'id_parent' => $id_env,\n              'text' => $this->_current['app_path'],\n              'code' => $this->_current['server_name'].\n                  ($this->_current['cur_path'] === '\/' ? '' : $this->_current['cur_path'])\n            ]\n          ))\n      ) {\n        $id_app = $opt->add(\n          [\n            'id_parent' => $id_env,\n            'text' => $this->_current['app_path'],\n            'code' => $this->_current['server_name'].\n                ($this->_current['cur_path'] === '\/' ? '' : $this->_current['cur_path']),\n            'env' => $this->_current['env']\n          ]\n        );\n      }\n    }\n\n    if (!$id_app) {\n      throw new \\Exception(\"Impossible to create the application row\");\n    }\n\n    return $id_app;\n  }",
            "startLine": 1362,
            "endLine": 1407,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getInternalUser": {
            "name": "getInternalUser",
            "summary": "Gets and creates if needs be the main internal user's ID",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $id_appui_user = null;\n    $db            = $this->getDb();\n    \/\/ Create \"APPUI\" user\n    $id_internal_group = $this->getUserGroup('internal', 'Internal users', 'internal');\n    if (!($id_appui_user = $db->selectOne(\n      'bbn_users',\n      'id',\n      [\n        'username' => 'APPUI',\n        'email' => null,\n        'login' => null,\n        'id_group' => $id_internal_group,\n      ]\n    )) && $db->insert(\n      'bbn_users',\n      [\n        'username' => 'APPUI',\n        'email' => null,\n        'login' => null,\n        'id_group' => $id_internal_group,\n        'admin' => 1,\n        'dev' => 1,\n        'theme' => 'default',\n      ]\n    )\n    ) {\n      $id_appui_user = $db->lastId();\n    }\n\n    if (!$id_appui_user) {\n      throw new \\Exception(\"Impossible to create the client\");\n    }\n\n    return $id_appui_user;\n  }",
            "startLine": 1415,
            "endLine": 1451,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "importOptions": {
            "name": "importOptions",
            "summary": "Import the options from the default bbn file in the current environment.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $res = 0;\n    if ($opt = $this->getOption()) {\n      $root = $this->getOptionRoot();\n      $file = $this->libPath().'bbn\/bbn\/options.json';\n      if (!$this->_currentFs->exists($file)) {\n        throw new \\Exception(\"Impossible to find the file options\");\n      }\n\n      $appui_options = $this->_currentFs->decodeContents($file, 'json', true);\n      if (!$appui_options) {\n        throw new \\Exception(\"Impossible to decode the file options\");\n      }\n\n      $res += (int)$opt->import($appui_options, $root);\n      if (!defined('BBN_APPUI')) {\n        define('BBN_APPUI', $opt->fromCode('appui'));\n      }\n\n      $opt->deleteCache(null);\n    }\n\n    return $res;\n  }",
            "startLine": 1459,
            "endLine": 1483,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "updatePlugins": {
            "name": "updatePlugins",
            "summary": "Update the plugins in the options table for the current environment",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $res = 0;\n    if ($opt = $this->getOption()) {\n      $res = (int)$opt->updatePlugins();\n      $opt->deleteCache(null);\n    }\n\n    return $res;\n  }",
            "startLine": 1491,
            "endLine": 1500,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "updateTemplates": {
            "name": "updateTemplates",
            "summary": "Update all the templates in the options table for the current environment",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $res = 0;\n    if ($opt = $this->getOption()) {\n      $res = (int)$opt->updateAllTemplates();\n      $opt->deleteCache(null);\n    }\n\n    return $res;\n  }",
            "startLine": 1508,
            "endLine": 1517,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "updatePermissions": {
            "name": "updatePermissions",
            "summary": "Updates all the permissions in the current environment.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $res = 0;\n    if ($perm = $this->getPermissions()) {\n      $perm_routes = [];\n      $routes      = $this->getRoutes();\n      foreach ($routes['root'] as $u => $r) {\n        $r['path']       = BBN_LIB_PATH.$r['path'].'\/';\n        $r['url']        = $u;\n        $perm_routes[$u] = $r;\n      }\n\n      $perms = $perm->updateAll($perm_routes);\n      $res   = $perms['total'] ?? 0;\n      $this->getOption()->deleteCache(null);\n    }\n\n    return $res;\n  }",
            "startLine": 1525,
            "endLine": 1543,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "register": {
            "name": "register",
            "summary": "Registers the application to the central server.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $user       = $this->getUser();\n    $db         = $this->getDb();\n    $api        = new Appui\\Api($user, $db);\n    $pass       = $this->getPassword();\n    $rsa        = $this->getPublicKey();\n    $id_project = $this->getProject();\n    $id_app     = $this->getAppId();\n    try {\n      $reg = $api->registerProject(\n        [\n          'key' => file_get_contents($rsa),\n          'id_project' => $id_project,\n          'id_app' => $id_app,\n          'site_title' => $this->_current['site_title'],\n          'user' => $this->_current['admin_email'],\n          'id_user' => $user->getId(),\n          'app_name' => $this->_current['app_name'],\n          'url' => $this->_current['url'],\n          'hostname' => $this->_current['hostname']\n        ]\n      );\n    }\n    catch (\\Exception $e) {\n      throw new \\Exception(X::_(\"The application didn't register!\").PHP_EOL.$e->getMessage());\n    }\n\n    if (!empty($reg) && !empty($reg['id_app'])) {\n      $this->setEnvironment(['id_app' => $reg['id_app']]);\n      $this->setSettings(['id_project' => $reg['id_project']]);\n      $pass->store($reg['key'], $id_app);\n      return true;\n    }\n\n    return false;\n  }",
            "startLine": 1551,
            "endLine": 1587,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "updateMenus": {
            "name": "updateMenus",
            "summary": "Update the menus in the database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $db         = $this->getDb();\n    $opt_class  = $this->getOption();\n    $menu_class = $this->getMenu();\n    $pref_class = $this->getPreferences();\n    $perm_class = $this->getPermissions();\n    if ($id_main_menu = $menu_class->add(\n      [\n        'text' => 'Main menu',\n        'code' => 'main',\n        'num' => 1,\n      ]\n    )\n    ) {\n      $pref_class->makePublic($id_main_menu);\n      \/\/ Set default menu\n      if ($pref_class->add(\n        $opt_class->fromCode('default', 'menu', 'appui'),\n        [\n          'text' => 'Default menu',\n          'id_alias' => $id_main_menu,\n        ]\n      )\n      ) {\n        $pref_class->makePublic($id_main_menu);\n      }\n    }\n\n    \/\/ Add Plugins menu\n    if ($id_plugin_menu = $menu_class->add(\n      [\n        'text' => 'Plugins',\n        'code' => 'plugins',\n        'num' => 2,\n      ]\n    )\n    ) {\n      $pref_class->makePublic($id_plugin_menu);\n      $menus = $this->getMenuFilesContent();\n      foreach ($menus as $m) {\n        if ($id_parent_menu = $menu_class->add($id_plugin_menu, $m)) {\n          foreach ($m['items'] as $mit) {\n            $mit = array_merge(\n              $mit,\n              [\n                'id_parent' => $id_parent_menu,\n                'id_option' => $perm_class->fromPath($mit['link']),\n              ]\n            );\n            unset($mit['link']);\n            $menu_class->add($id_plugin_menu, $mit);\n          }\n        }\n        else {\n          throw new \\Exception(X::_(\"Impossible to add the menu element %s!\", $m['text']));\n        }\n      }\n\n      $id_group = $this->getUserGroup('admin', 'Administrators');\n      $db->update(\n        'bbn_users_options',\n        [\n          'id_user' => null,\n          'id_group' => $id_group,\n        ],\n        [\n          'id' => $id_plugin_menu,\n        ]\n      );\n    }\n\n    return $id_main_menu;\n\n  }",
            "startLine": 1595,
            "endLine": 1669,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "updateDashboard": {
            "name": "updateDashboard",
            "summary": "Updates the dashboard on the database",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $num_widgets = 0;\n    $db          = $this->getDb();\n    $opt_class   = $this->getOption();\n    $pref_class  = $this->getPreferences();\n    $admin_group = $this->getUserGroup('admin', 'Administrators');\n    $dev_group   = $this->getUserGroup('dev', 'Developers');\n    $idDashboard = $opt_class->fromCode('dashboard', 'appui');\n    $routes      = $this->getRoutes();\n    if (!($idList = $opt_class->fromCode('list', $idDashboard))) {\n      throw new \\Exception(X::_(\"Id list not found\"));\n    }\n\n    if (!($idPluginsDashboard = $pref_class->addToGroup(\n      $idList, [\n      'text' => 'Plugins dashboard',\n      'code' => 'plugins',\n      ]\n    ))\n    ) {\n      throw new \\Exception(X::_(\"Plugins dashboard not found\"));\n    }\n    else {\n      $pref_class->makePublic($idPluginsDashboard);\n      $defDash = $opt_class->fromCode('default', 'dashboard', 'appui');\n      $prefCfg = $pref_class->getClassCfg();\n      $db->insert(\n        $prefCfg['table'], [\n        $prefCfg['arch']['user_options']['id_option'] => $defDash,\n        $prefCfg['arch']['user_options']['id_group'] => $admin_group,\n        $prefCfg['arch']['user_options']['id_alias'] => $idPluginsDashboard,\n        ]\n      );\n      $db->insert(\n        $prefCfg['table'], [\n        $prefCfg['arch']['user_options']['id_option'] => $defDash,\n        $prefCfg['arch']['user_options']['id_group'] => $dev_group,\n        $prefCfg['arch']['user_options']['id_alias'] => $idPluginsDashboard,\n        ]\n      );\n    }\n\n    if (!($idDefaultDashboard = $pref_class->addToGroup(\n      $idList, [\n      'text' => 'Default dashboard',\n      'code' => 'default',\n      ]\n    ))\n    ) {\n      throw new \\Exception(X::_(\"Default dashboard not found\"));\n    }\n    else {\n      $pref_class->makePublic($idDefaultDashboard);\n    }\n\n    $dashboard = new Appui\\Dashboard($idPluginsDashboard);\n    $plugins   = array_map(\n      function ($r) {\n        return $r['name'];\n      },\n      array_values($routes['root'])\n    );\n    foreach ($plugins as $p) {\n      $name = substr($p, strlen('appui-'));\n      if ('dashboard' === $name) {\n        continue;\n      }\n\n      $idWidgets = $opt_class->fromCode('widgets', 'appui-dashboard', 'plugins', $name, 'appui');\n      if ($idWidgets && ($widgets = $opt_class->fullOptions($idWidgets))) {\n        $num_widgets = 0;\n        foreach ($widgets as $w) {\n          $dashboard->setCurrent($idDefaultDashboard);\n          if (!empty($w['public']) && $dashboard->addWidget($w['id'])) {\n            ++$num_widgets;\n          }\n\n          $dashboard->setCurrent($idPluginsDashboard);\n          if ($dashboard->addWidget($w['id'])) {\n            ++$num_widgets;\n          }\n        }\n      }\n    }\n\n    return $num_widgets;\n  }",
            "startLine": 1677,
            "endLine": 1764,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "updateHistory": {
            "name": "updateHistory",
            "summary": "Updates the history tables and add the history constraints.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $tot_insert     = 0;\n    $inserted       = 0;\n    $db             = $this->getDb();\n    $opt_class      = $this->getOption();\n    $pass           = $this->getPassword();\n    $id_appui_user  = $this->getInternalUser();\n    $dbc            = new Appui\\Database($db);\n    $id_connections = $opt_class->fromCode(\n      'connections',\n      $this->_current['db_engine'],\n      'database',\n      'appui'\n    );\n    if ($id_connections\n        && ($id_connection = $opt_class->add(\n          [\n            'id_parent' => $id_connections,\n            'text' => $this->_current['db_host'],\n            'code' => $this->_current['db_user'].'@'.$this->_current['db_host'],\n          ]\n        ))\n        && $pass->store($this->_current['db_pass'], $id_connection)\n        && ($id_option_database = $dbc->importDb($this->_current['database'], $id_connection, true))\n    ) {\n      $id_option_table  = $dbc->tableId('bbn_options', $id_option_database);\n      $id_option_column = $dbc->columnId('id', 'bbn_options', $id_option_database);\n      $tst              = microtime(true);\n      \/\/ Insert all options into bbn_history_uids and bbn_history tables\n      $history_rows     = $db->getColumnValues('bbn_options', 'id');\n      $num_history_rows = count($history_rows);\n      foreach ($history_rows as $o) {\n        ++$tot_insert;\n        if (0 === $tot_insert % 100) {\n          echo \"{$tot_insert} \/ {$num_history_rows} rows written\".PHP_EOL;\n        }\n\n        if ($db->insert(\n          'bbn_history_uids',\n          [\n            'bbn_uid' => $o,\n            'bbn_table' => $id_option_table,\n            'bbn_active' => 1,\n          ]\n        )\n            && $db->insert(\n              'bbn_history',\n              [\n                'opr' => 'INSERT',\n                'uid' => $o,\n                'col' => $id_option_column,\n                'tst' => $tst,\n                'usr' => $id_appui_user,\n              ]\n            )\n        ) {\n          ++$inserted;\n        }\n      }\n\n      \/\/ Create constraints\n      $constraints = $this->getHistoryConstraints();\n      foreach ($constraints as $ctable => $ckeys) {\n        $db->query($db->getCreateConstraints($ctable, ['keys' => $ckeys]));\n      }\n    }\n\n    return $inserted;\n  }",
            "startLine": 1772,
            "endLine": 1841,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "install": {
            "name": "install",
            "summary": "Installs an app-ui instance after the installation of composer and directories structure.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Appui",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(Installer $installer, array $cfg, int $step = NULL)\n  {\n    if (!method_exists($installer, 'report')) {\n      throw new \\Exception(X::_(\"The installer is invalid\"));\n    }\n\n    $installer->report(' ');\n    $installer->report('Starting the initialization file');\n    $installer->report(' ');\n\n    \/\/ Initial settings\n    \/*\n    date_default_timezone_set('UTC');\n    ignore_user_abort(true);\n    ini_set('output_buffering', 'Off');\n    if (function_exists('apache_setenv')) {\n      apache_setenv('no-gzip', '1');\n      apache_setenv('dont-vary', '1');\n    }\n    *\/\n\n    \/\/ Cache, deleting all before starting\n    $installer->report('Deleting cache if any');\n    $cache    = Cache::getEngine();\n    $cache->deleteAll('');\n\n    $routes   = $this->getRoutes();\n    $settings = $this->getSettings();\n\n    \/\/ Making a simple plugins array with only the names\n    $plugins = array_map(\n      function ($r) {\n        return $r['name'];\n      },\n      array_values($routes['root'])\n    );\n    $installer->report(count($plugins).' plugins found');\n\n    $plugins_urls = [];\n    foreach ($routes['root'] as $url => $route) {\n      $plugins_urls[$route['name']] = $url;\n    }\n\n    \/\/ We need a key, if we don't find it we create one..\n    $installer->report('Generating the certificate');\n    try {\n      $this->getPublicKey(true);\n    }\n    catch (\\Exception $e) {\n      $installer->report('Failed to create SSL certificate: '.$e->getMessage(), false, true);\n    }\n\n    \/\/ All the update info\n    $installer->report('Gathering all the update information');\n\n    \/\/ Database creation phase\n    $installer->report('Creating the database');\n    try {\n      $this->createDatabase();\n    }\n    catch (\\Exception $e) {\n      $installer->report($e->getMessage(), false, true);\n    }\n\n    $installer->report('Database created successfully');\n\n    \/\/ Records generation\n    if ($installer->has_appui()) {\n      $installer->report('Records generation', true);\n\n      if ($id_appui_user = $this->getInternalUser()) {\n        $installer->report('Internal user and group created successfully');\n      }\n      else {\n        $installer->report('Error during internal user or group creation', false, true);\n      }\n\n      $settings = $this->getSettings();\n\n      if (!empty($settings)) {\n        $settings['external_user_id'] = $id_appui_user;\n        if (!defined('BBN_EXTERNAL_USER_ID')) {\n          define('BBN_EXTERNAL_USER_ID', $id_appui_user);\n        }\n\n        $this->setSettings(['external_user_id' => $id_appui_user]);\n      }\n      else {\n        $installer->report('Impossible to retrieve the settings file!', false, true);\n      }\n\n      if ($this->getUserGroup('admin', 'Administrators')\n          && $this->getUserGroup('dev', 'Developers')\n      ) {\n        $installer->report('Admin and dev group created\/retrieved successfully');\n      }\n      else {\n        $installer->report('Error during admin group creation', false, true);\n      }\n\n      if ($this->getAdminUser($cfg['admin_name'], $cfg['admin_password'])) {\n        $installer->report('Admin user created successfully');\n      }\n      else {\n        $installer->report('Error during admin user creation', false, true);\n      }\n\n      if ($res = $this->importOptions()) {\n        $installer->report(\"{$res} options imported\");\n      }\n      else {\n        $installer->report('No new option created');\n      }\n\n\n      if ($res = $this->updatePlugins()) {\n        $installer->report(\"{$res} options for plugins imported\");\n      }\n      else {\n        $installer->report('No new option imported');\n      }\n\n      if ($res = $this->updatePermissions()) {\n        $installer->report(\"{$res} Permissions created\");\n      }\n      else {\n        $installer->report('No new permissions created');\n      }\n\n      if ($res = $this->updateTemplates()) {\n        $installer->report(\"{$res} options from templates\");\n      }\n      else {\n        $installer->report(\"No new options from templates\");\n      }\n\n      if ($this->getProject()) {\n        $installer->report(\"Main project OK\");\n      }\n      else {\n        $installer->report('Impossible retrieving the main project', false, true);\n      }\n\n      if ($id_app = $this->getAppId()) {\n        $installer->report(\"App ID OK\");\n      }\n      else {\n        $installer->report('Impossible retrieving the app ID', false, true);\n      }\n\n      \/\/ Contacting the server to give the id_project, id_client, id_user and the public key\n      \/\/ Using JWT and JWE\n      if ($this->register()) {\n        $installer->report(\"Registering the app with ID {$id_app}...\");\n      }\n      else {\n        $installer->report('Impossible retrieving the app ID', false, true);\n      }\n\n      \/\/ Add Main menu\n      $installer->report('Creating menus...');\n      $this->updateMenus();\n\n      $installer->report('Menus created');\n\n      if (in_array('appui-dashboard', $plugins)) {\n\n        $this->updateDashboard();\n        $installer->report('Dashboard created');\n      }\n\n      \/\/ If history is active\n      if (!empty($settings['history'])) {\n        $installer->report(X::_(\"History update starting, it might take a while...\"));\n        if ($this->updateHistory()) {\n          $installer->report(X::_(\"History update successful\"));\n        }\n        else {\n          $installer->report('Error during history update', false, true);\n        }\n      }\n\n      $cache->deleteAll('');\n      $installer->report('Default DB records created.', true);\n    }\n\n    return true;\n  }",
            "startLine": 1851,
            "endLine": 2038,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "installer",
                    "position": 0,
                    "type": "Installer",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "An installer object coming from the previously executed script."
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration comuing from the post."
                },
                {
                    "name": "step",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "vars": [
            "env",
            "is_ssl",
            "admin_email",
            "db_engine",
            "db_host",
            "database",
            "db_user",
            "db_pass",
            "server_name",
            "hostname",
            "public",
            "cur_path",
            "app_path",
            "lib_path",
            "data_path",
            "log_path",
            "user",
            "preferences",
            "permissions",
            "options",
            "history",
            "encryption_key",
            "fingerprint",
            "app_name",
            "app_prefix",
            "site_title",
            "client_name"
        ]
    },
    "constants": null,
    "numMethods": 52,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "vars": [
            "env",
            "is_ssl",
            "admin_email",
            "db_engine",
            "db_host",
            "database",
            "db_user",
            "db_pass",
            "server_name",
            "hostname",
            "public",
            "cur_path",
            "app_path",
            "lib_path",
            "data_path",
            "log_path",
            "user",
            "preferences",
            "permissions",
            "options",
            "history",
            "encryption_key",
            "fingerprint",
            "app_name",
            "app_prefix",
            "site_title",
            "client_name"
        ],
        "_checked": null,
        "_settings_file": null,
        "_environment_file": null,
        "_routes_file": null,
        "_settings": null,
        "_environment": null,
        "_routes": null,
        "_dbFilesContent": null,
        "_optionFilesContent": null,
        "_permissionFilesContent": null,
        "_menuFilesContent": null,
        "_current": [],
        "_currentDb": null,
        "_currentOption": null,
        "_currentUser": null,
        "_currentPref": null,
        "_currentPerm": null,
        "_currentFs": null,
        "_currentPass": null,
        "_currentMenu": null,
        "_info": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "Appui",
    "summary": "The class which deals with App-UI configuration.",
    "description": "",
    "description_parts": []
}