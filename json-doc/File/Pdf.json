{
    "doc": {
        "description": "This class generates PDF with the mPDF class\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Dec 14, 2012, 04:23:55 +0000",
            "category": "Appui",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.2r89"
        }
    },
    "name": "bbn\\File\\Pdf",
    "namespace": true,
    "realName": "Pdf",
    "realNamespace": "bbn\\File",
    "traits": [],
    "interfaces": [],
    "fileName": "\/File\/Pdf.php",
    "startLine": 24,
    "endLine": 326,
    "numMethods": 20,
    "numProperties": 4,
    "numConstants": 0,
    "numStaticProperties": 1,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "default_cfg": {
            "mode": "ISO-8859-2",
            "format": "A4",
            "default_font_size": 8,
            "default_font": "Times",
            "margin_left": 15,
            "margin_right": 15,
            "margin_top": 15,
            "margin_bottom": 15,
            "margin_header": 10,
            "margin_footer": 10,
            "orientation": "P",
            "head": "<html>\n  <head>\n    <title>PDF Doc<\/title>\n  <\/head>\n  <body>\n    <table width=\"100%\" border=\"0\">\n      <tr>\n        <td width=\"40%\" style=\"vertical-align:top; font-size:0.8em; color:#666\">Your logo here<\/td>\n        <td width=\"60%\">&nbsp;<\/td>\n      <\/tr>\n    <\/table>",
            "foot": "    <div align=\"center\" style=\"text-align:justify; color:#666; font-size:0.8em\">\n      Your<br>Adress<br>Here\n    <\/div>\n  <\/body>\n<\/html>",
            "title_tpl": "<div style=\"background-color:#DDD; text-align:center; font-size:large; font-weight:bold; border-bottom-color:#000; border-width:3px; padding:20px; border-style:solid; text-transform:uppercase; margin-bottom:30px\">%s<\/div>",
            "text_tpl": "<div style=\"text-align:justify; margin-top:30px; margin-bottom:30px\">%s<\/div>",
            "signature": "<div style=\"text-align:right\">Your signing here<\/div>"
        },
        "pdf": false,
        "last_cfg": [],
        "cfg": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\File",
    "shortName": "Pdf",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function check(){\n    return ( \\get_class($this->pdf) === 'Mpdf\\Mpdf' );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 71,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": []
        },
        "fixCfg": {
            "name": "fixCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function fixCfg(array $cfg){\n    if ( \\is_array($cfg) ){\n      $to_check = [\n        'size' => 'default_font_size',\n        'font' => 'default_font',\n        'mgl' => 'margin_left',\n        'mgr' => 'margin_right',\n        'mgt' => 'margin_top',\n        'mgb' => 'margin_bottom',\n        'mgh' => 'margin_header',\n        'mgf' => 'margin_footer'\n      ];\n      foreach ( $cfg as $i => $c ){\n        if ( isset($to_check[$i]) ){\n          $cfg[$to_check[$i]] = $c;\n          unset($cfg[$i]);\n        }\n      }\n    }\n    return $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 75,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "fixCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setDefault": {
            "name": "setDefault",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setDefault(array $cfg){\n    self::$default_cfg = X::mergeArrays(self::$default_cfg, $cfg);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 97,
            "endLine": 99,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDefault",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct($cfg = null){\n    \/\/ Temp path for PDF generation (MPDF)\n    if (!defined('_MPDF_TEMP_PATH') && defined('BBN_DATA_PATH')) {\n      define('_MPDF_TEMP_PATH', BBN_DATA_PATH . 'tmp\/');\n    }\n    $this->resetConfig($cfg);\n    $this->pdf = new \\Mpdf\\Mpdf($this->cfg);\n    \/\/$this->pdf->SetImportUse();\n    if ( \\is_string($cfg) ){\n      $this->addPage($cfg);\n    }\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 101,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getObj": {
            "name": "getObj",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObj(){\n    return $this->pdf;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 114,
            "endLine": 116,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObj",
            "returns": [],
            "arguments": []
        },
        "getConfig": {
            "name": "getConfig",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getConfig(array $cfg = null){\n    if ( \\is_array($cfg) ){\n      return X::mergeArrays($this->cfg, $this->fixCfg($cfg));\n    }\n    return $this->cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 123,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getConfig",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "resetConfig": {
            "name": "resetConfig",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function resetConfig($cfg){\n    if ( \\is_array($cfg) ){\n      $this->cfg = X::mergeArrays(self::$default_cfg, $this->fixCfg($cfg));\n    }\n    else{\n      $this->cfg = self::$default_cfg;\n    }\n    if (\n      empty($this->cfg['tempDir']) &&\n      ($tmp = Mvc::getTmpPath()) &&\n      ($path = Dir::createPath($tmp))\n    ){\n      $this->cfg['tempDir'] = $path;\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 125,
            "endLine": 140,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "resetConfig",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addPage": {
            "name": "addPage",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function addPage($html, $cfg = null, $sign = false){\n\t\tif ( $this->check() ){\n      if ( $this->last_cfg !== $cfg ){\n        $this->last_cfg = $cfg;\n        $cfg = $this->getConfig($cfg);\n        if ( isset($cfg['template']) && is_file($cfg['template']) ){\n          $src = $this->pdf->SetSourceFile($cfg['template']);\n          $tpl = $this->pdf->importPage($src);\n          $this->pdf->SetPageTemplate($tpl);\n        }\n        else{\n          $this->pdf->DefHTMLHeaderByName('head', $this->cfg['head']);\n          $this->pdf->DefHTMLFooterByName('foot', $this->cfg['foot']);\n        }\n      }\n      $this->pdf->AddPageByArray([\n        'orientation' => $this->cfg['orientation'],\n        'margin-left' => $this->cfg['margin_left'],\n        'margin-right' => $this->cfg['margin_right'],\n        'margin-top' => $this->cfg['margin_top'],\n        'margin-bottom' => $this->cfg['margin_bottom'],\n        'margin-header' => $this->cfg['margin_header'],\n        'margin-footer' => $this->cfg['margin_footer'],\n\t\t\t\t'odd-header-name' => 'head',\n\t\t\t\t'odd-footer-name' => 'foot',\n        'odd-header-value' => 1,\n        'odd-footer-value' => 1\n      ]);\n\t\t\tif ( $sign ){\n\t\t\t\t$this->pdf->WriteHTML($html.$this->cfg['signature']);\n      }\n\t\t\telse{\n\t\t\t\t$this->pdf->WriteHTML($html);\n      }\n\t\t}\n\t\treturn $this;\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 142,
            "endLine": 178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "addPage",
            "returns": [],
            "arguments": [
                {
                    "name": "html",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "sign",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addCss": {
            "name": "addCss",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addCss($file){\n    $this->pdf->WriteHTML(file_get_contents($file), 1);\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 180,
            "endLine": 183,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "addCss",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "show": {
            "name": "show",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function show($file = 'MyPDF.pdf'){\n\t\tif ( $this->check() ){\n\t\t\t$this->pdf->Output($file, \\Mpdf\\Output\\Destination::INLINE);\n      die();\n\t\t}\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 185,
            "endLine": 190,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "show",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "MyPDF.pdf",
                    "default_name": ""
                }
            ]
        },
        "download": {
            "name": "download",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function download($file = 'MyPDF.pdf'){\n\t\tif ( $this->check() ){\n\t\t\t$this->pdf->Output($file, \\Mpdf\\Output\\Destination::DOWNLOAD);\n      die();\n\t\t}\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 192,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "download",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "MyPDF.pdf",
                    "default_name": ""
                }
            ]
        },
        "setPageSize": {
            "name": "setPageSize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setPageSize($size){\n    if ($this->check()) {\n      $orientation = $this->pdf->CurOrientation;\n      $this->pdf->_setPageSize($size, $orientation);\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 199,
            "endLine": 205,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setPageSize",
            "returns": [],
            "arguments": [
                {
                    "name": "size",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCurrentPageContentHeight": {
            "name": "getCurrentPageContentHeight",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrentPageContentHeight(){\n    if ($this->check()) {\n      return $this->pdf->y;\n    }\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 207,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrentPageContentHeight",
            "returns": [],
            "arguments": []
        },
        "getCurrentPageHeight": {
            "name": "getCurrentPageHeight",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrentPageHeight(){\n    if ($this->check()) {\n      return $this->pdf->h;\n    }\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 214,
            "endLine": 219,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrentPageHeight",
            "returns": [],
            "arguments": []
        },
        "setDpi": {
            "name": "setDpi",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDpi(int $dpi) {\n    if ($this->check()) {\n      $this->pdf->dpi = $dpi;\n      $this->pdf->img_dpi = $dpi;\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 221,
            "endLine": 227,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDpi",
            "returns": [],
            "arguments": [
                {
                    "name": "dpi",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "makeAttachment": {
            "name": "makeAttachment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function makeAttachment(){\n\t\tif ( $this->check() ){\n\t\t\t$pdf = $this->pdf->Output(\"\", \\Mpdf\\Output\\Destination::STRING_RETURN);\n\t\t\treturn chunk_split(base64_encode($pdf));\n\t\t}\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 229,
            "endLine": 234,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeAttachment",
            "returns": [],
            "arguments": []
        },
        "save": {
            "name": "save",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function save($filename){\n    if ( $this->check() ){\n      $filename = Str::parsePath($filename, true);\n      if ( !is_dir(X::dirname($filename)) ){\n        die(\"Error! No destination directory\");\n      }\n      $this->pdf->Output($filename, \\Mpdf\\Output\\Destination::FILE);\n      return is_file($filename);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 236,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "save",
            "returns": [],
            "arguments": [
                {
                    "name": "filename",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "import": {
            "name": "import",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function import($files){\n    if ( $this->check() ){\n      if ( !\\is_array($files) ){\n        $files = [$files];\n      }\n      \/\/$this->pdf->SetImportUse();\n      foreach ( $files as $f ){\n        if ( is_file($f) ){\n          $pagecount = $this->pdf->SetSourceFile($f);\n          for ( $i = 1; $i <= $pagecount; $i++ ){\n            $import_page = $this->pdf->importPage($i);\n            $this->pdf->UseTemplate($import_page);\n            $this->pdf->addPage();\n          }\n        }\n      }\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 247,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "import",
            "returns": [],
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "importPage": {
            "name": "importPage",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function importPage($file, $page){\n    if ( $this->check() ){\n      \/\/$this->pdf->SetImportUse();\n      if ( is_file($file) ){\n        $pagecount = $this->pdf->SetSourceFile($file);\n        if ( ($page > 0) && ($page < $pagecount) ){\n          $import_page = $this->pdf->importPage($page);\n          $this->pdf->UseTemplate($import_page);\n          $this->pdf->addPage();\n        }\n      }\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "importPage",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "page",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addFonts": {
            "name": "addFonts",
            "summary": "Adds custom fonts",
            "description": "$pdf->addFonts([\n 'dawningofanewday' => [\n   'R' => BBN_DATA_PATH.'files\/DawningofaNewDay.ttf'\n  ]\n]);",
            "description_parts": [
                {
                    "type": "text",
                    "content": "$pdf->addFonts([\n 'dawningofanewday' => [\n   'R' => BBN_DATA_PATH.'files\/DawningofaNewDay.ttf'\n  ]\n]);"
                }
            ],
            "class": "bbn\\File\\Pdf",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Pdf.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addFonts(array $fonts){\n    if ( !\\defined('BBN_LIB_PATH') ){\n      die('You must define BBN_LIB_PATH!');\n    }\n    if ( !is_dir(BBN_LIB_PATH . 'mpdf\/mpdf\/ttfonts\/') ){\n      die(\"You don't have the mpdf\/mpdf\/ttfonts directory.\");\n    }\n    foreach ($fonts as $f => $fs) {\n      \/\/ add to available fonts array\n      foreach ( $fs as $i => $v ){\n        if ( !empty($v) ){\n          \/\/ check if file exists in mpdf\/ttfonts directory\n          if ( !is_file(BBN_LIB_PATH . 'mpdf\/mpdf\/ttfonts\/' . X::basename($v)) ){\n            Dir::copy($v, BBN_LIB_PATH . 'mpdf\/mpdf\/ttfonts\/' . X::basename($v));\n          }\n          $fs[$i] = X::basename($v);\n          if ( $i === 'R' ){\n            array_push($this->pdf->available_unifonts, $f);\n          }\n          else {\n            array_push($this->pdf->available_unifonts, $f.$i);\n          }\n        }\n        else {\n          unset($fs[$i]);\n        }\n      }\n      \/\/ add to fontdata array\n      $this->pdf->fontdata[$f] = $fs;\n    }\n    $this->pdf->default_available_fonts = $this->pdf->available_unifonts;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 293,
            "endLine": 324,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "addFonts",
            "returns": [],
            "arguments": [
                {
                    "name": "fonts",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds custom fonts\n\n$pdf->addFonts([\n 'dawningofanewday' => [\n   'R' => BBN_DATA_PATH.'files\/DawningofaNewDay.ttf'\n  ]\n]);\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fonts"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds custom fonts\n   *\n   * $pdf->addFonts([\n   *  'dawningofanewday' => [\n   *    'R' => BBN_DATA_PATH.'files\/DawningofaNewDay.ttf'\n   *   ]\n   * ]);\n   *\n   * @param array $fonts\n   *\/"
        }
    },
    "properties": {
        "default_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Pdf"
            },
            "declaring_trait": "bbn\\File\\Pdf",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": {
                "mode": "ISO-8859-2",
                "format": "A4",
                "default_font_size": 8,
                "default_font": "Times",
                "margin_left": 15,
                "margin_right": 15,
                "margin_top": 15,
                "margin_bottom": 15,
                "margin_header": 10,
                "margin_footer": 10,
                "orientation": "P",
                "head": "<html>\n  <head>\n    <title>PDF Doc<\/title>\n  <\/head>\n  <body>\n    <table width=\"100%\" border=\"0\">\n      <tr>\n        <td width=\"40%\" style=\"vertical-align:top; font-size:0.8em; color:#666\">Your logo here<\/td>\n        <td width=\"60%\">&nbsp;<\/td>\n      <\/tr>\n    <\/table>",
                "foot": "    <div align=\"center\" style=\"text-align:justify; color:#666; font-size:0.8em\">\n      Your<br>Adress<br>Here\n    <\/div>\n  <\/body>\n<\/html>",
                "title_tpl": "<div style=\"background-color:#DDD; text-align:center; font-size:large; font-weight:bold; border-bottom-color:#000; border-width:3px; padding:20px; border-style:solid; text-transform:uppercase; margin-bottom:30px\">%s<\/div>",
                "text_tpl": "<div style=\"text-align:justify; margin-top:30px; margin-bottom:30px\">%s<\/div>",
                "signature": "<div style=\"text-align:right\">Your signing here<\/div>"
            }
        },
        "pdf": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Pdf"
            },
            "declaring_trait": "bbn\\File\\Pdf",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "last_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Pdf"
            },
            "declaring_trait": "bbn\\File\\Pdf",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": []
        },
        "cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Pdf"
            },
            "declaring_trait": "bbn\\File\\Pdf",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "default_cfg": {
            "mode": "ISO-8859-2",
            "format": "A4",
            "default_font_size": 8,
            "default_font": "Times",
            "margin_left": 15,
            "margin_right": 15,
            "margin_top": 15,
            "margin_bottom": 15,
            "margin_header": 10,
            "margin_footer": 10,
            "orientation": "P",
            "head": "<html>\n  <head>\n    <title>PDF Doc<\/title>\n  <\/head>\n  <body>\n    <table width=\"100%\" border=\"0\">\n      <tr>\n        <td width=\"40%\" style=\"vertical-align:top; font-size:0.8em; color:#666\">Your logo here<\/td>\n        <td width=\"60%\">&nbsp;<\/td>\n      <\/tr>\n    <\/table>",
            "foot": "    <div align=\"center\" style=\"text-align:justify; color:#666; font-size:0.8em\">\n      Your<br>Adress<br>Here\n    <\/div>\n  <\/body>\n<\/html>",
            "title_tpl": "<div style=\"background-color:#DDD; text-align:center; font-size:large; font-weight:bold; border-bottom-color:#000; border-width:3px; padding:20px; border-style:solid; text-transform:uppercase; margin-bottom:30px\">%s<\/div>",
            "text_tpl": "<div style=\"text-align:justify; margin-top:30px; margin-bottom:30px\">%s<\/div>",
            "signature": "<div style=\"text-align:right\">Your signing here<\/div>"
        }
    },
    "constants": null,
    "uses": {
        "bbn": "bbn",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Mvc": "Mvc",
        "bbn\\File\\Dir": "Dir"
    },
    "dummyComments": [
        "\/**\n * @package file\n *\/",
        "\/**\n * This class generates PDF with the mPDF class\n *\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Dec 14, 2012, 04:23:55 +0000\n * @category  Appui\n * @license   http:\/\/www.opensource.org\/licenses\/mit-license.php MIT\n * @version 0.2r89\n*\/"
    ],
    "summary": "This class generates PDF with the mPDF class",
    "description": "",
    "description_parts": []
}