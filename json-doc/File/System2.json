{
    "doc": {
        "description": "Class system\n",
        "tags": {
            "package": "bbn\\File"
        }
    },
    "name": "bbn\\File\\System2",
    "namespace": true,
    "realName": "System2",
    "realNamespace": "bbn\\File",
    "traits": [],
    "interfaces": [],
    "fileName": "\/File\/System2.php",
    "startLine": 24,
    "endLine": 1280,
    "numMethods": 62,
    "numProperties": 13,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "cn": "",
        "obj": "",
        "prefix": "",
        "mode": null,
        "current": null,
        "host": null,
        "timeout": 10,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\File",
    "shortName": "System2",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "_connect_nextcloud": {
            "name": "_connect_nextcloud",
            "summary": "Connect to a Nextcloud instance",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _connect_nextcloud(array $cfg): bool\n  {\n  \n    if ( isset($cfg['host'], $cfg['user'], $cfg['pass']) && class_exists('\\\\Sabre\\\\DAV\\\\Client') ){\n      $this->prefix = '\/remote.php\/webdav\/';\n      $this->obj = new \\Sabre\\DAV\\Client([\n        'baseUri' => 'http'.(isset($cfg['port']) && ($cfg['port'] === 21) ? '' : 's').':\/\/'.$cfg['host'].$this->prefix.$cfg['path'],\n        'userName' => $cfg['user'],\n        'password' => $cfg['pass']\n      ]);\n      $this->host = 'http'.(isset($cfg['port']) && ($cfg['port'] === 21) ? '' : 's').':\/\/'.$cfg['host'];\n     \n      if ( $this->obj->options() ){\n        $this->current = '';\n        return true;\n      }\n      $this->error = X::_('Impossible to connect to the WebDAV host');\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 60,
            "endLine": 79,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_connect_nextcloud",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Connect to a Nextcloud instance\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Connect to a Nextcloud instance\n   * @param array $cfg\n   * @return bool\n   *\/"
        },
        "_connect_ftp": {
            "name": "_connect_ftp",
            "summary": "Connect to FTP",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _connect_ftp(array $cfg): bool\n  {\n    if ( isset($cfg['host'], $cfg['user'], $cfg['pass']) ){\n      $args = [$cfg['host'], $cfg['port'] ?? 21, $cfg['timeout'] ?? $this->timeout];\n      if (\n        (\n          ($this->obj = @ftp_ssl_connect(...$args)) &&\n          @ftp_login($this->obj, $cfg['user'], $cfg['pass'])\n        ) || (\n          ($this->obj = @ftp_connect(...$args)) &&\n          @ftp_login($this->obj, $cfg['user'], $cfg['pass'])\n        ) ){\n        $this->current = ftp_pwd($this->obj);\n        $this->prefix = 'ftp:\/\/'.$cfg['user'].':'.$cfg['pass'].'@'.$cfg['host'];\n        return true;\n      }\n      $this->error = X::_('Impossible to connect to the FTP host');\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 86,
            "endLine": 105,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_connect_ftp",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Connect to FTP\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Connect to FTP\n   * @param array $cfg\n   * @return bool\n   *\/"
        },
        "_connect_ssh": {
            "name": "_connect_ssh",
            "summary": "Connects to SSH",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _connect_ssh(array $cfg): bool\n  {\n    if ( isset($cfg['host'], $cfg['user'], $cfg['pass']) ){\n      $this->cn = @ssh2_connect($cfg['host'], $cfg['port'] ?? 22);\n      if ( !$this->cn ){\n        $this->error = X::_(\"Could not connect through SSH.\");\n      }\n      else if ( @ssh2_auth_password($this->cn, $cfg['user'], $cfg['pass']) ){\n        \/\/die(X::_(\"Could not authenticate with username and password.\"));\n        $this->obj = @ssh2_sftp($this->cn);\n        if ( $this->obj ){\n          $this->current = ssh2_sftp_realpath($this->obj, '.');\n          $this->prefix = 'ssh2.sftp:\/\/'.$this->obj;\n          return true;\n        }\n        $this->error = X::_(\"Could not initialize SFTP subsystem.\");\n      }\n      else{\n        $this->error = X::_(\"Could not authenticate with username and password.\");\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 112,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_connect_ssh",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Connects to SSH\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Connects to SSH\n   * @param array $cfg\n   * @return bool\n   *\/"
        },
        "_check_filter": {
            "name": "_check_filter",
            "summary": "Checks if the given files name ends with the given suffix string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _check_filter($item, $filter): bool\n  {\n    if ( $filter ){\n      if ( is_string($filter) ){\n        return strtolower(substr(\\is_array($item) ? $item['path'] : $item, - strlen($filter))) === strtolower($filter);\n      }\n      if ( is_callable($filter) ){\n        return $filter($item);\n      }\n    }\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 142,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_check_filter",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the given files name ends with the given suffix string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$item"
                    },
                    {
                        "tag": "param",
                        "type": "callable|string",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the given files name ends with the given suffix string\n   * @param array|string $item\n   * @param callable|string $filter\n   * @return bool\n   *\/"
        },
        "_propfind_deep": {
            "name": "_propfind_deep",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _propfind_deep($path, $props, string $deep ){\n    $collection = $this->obj->propFind($this->getRealPath($path), $props, $deep);\n    $res = [];\n    if ( !empty($collection) ){\n      foreach ( $collection as $i => $c ){\n        $tmp = [\n          'path' => $this->getRealPath($i),\n          'dir' => $c['{DAV:}resourcetype'] || false\n        ];  \n        $res[] = $tmp;\n      }\n      return $res;\n    }\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 155,
            "endLine": 169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_propfind_deep",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "props",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_get_items": {
            "name": "_get_items",
            "summary": "Raw function returning the elements contained in the given directory",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_items(string $path, $type = 'both', bool $hidden = false, string $detailed = ''): array\n  {\n    $files = [];\n    $dirs = [];\n    if ( $this->mode === 'nextcloud' ) {\n      if ( empty($path) || ($path === '.') ){\n        $path = $this->prefix;\n      }\n      if ( $this->isDir($path) ){\n        $props = ['{DAV:}getcontenttype'];\n        \/\/devo prendere rimandare name , Dir e file\n        $collection = $this->obj->propFind($path, \n          $props, 1);\n        if ( !empty($collection) ){\n          array_shift($collection);\n          foreach ( $collection as $i => $c ){\n            $tmp = [\n              'path' => $i,\/\/$path === $this->prefix ? $i : basename($i),\n              'dir' => empty($c['{DAV:}getcontenttype']) ? true : false,\n              'file' => empty($c['{DAV:}getcontenttype']) ? false : true,\n            ];\n            \/\/arrayt_shift to remove the parent included in the array\n            if ($type === 'both'){\n              if ($tmp['dir']) {\n                $dirs[] = $detailed ? $tmp : $i;\n              }\n              else{\n                $files[] = $detailed ? $tmp : $i;\n              }\n            }\n            else if ( $tmp['file'] && ($type === 'file') ){\n              $files[] = $detailed ? $tmp : $i;\n            }\n            else if ( $tmp['dir'] ($type === 'dir') ){\n              $dirs[] = $detailed ? $tmp : $i;\n            }\n          }\n        }  \n      }\n    }\n    if ( ($this->mode === 'ftp') && ($detailed || ($type !== 'both')) ){\n      $fs = ftp_mlsd($this->obj, substr($path, strlen($this->prefix)));\n      foreach ( $fs as $f ){\n        if ( ($f['name'] !== '.') && ($f['name'] !== '..') && ($hidden || (strpos(basename($f['name']), '.') !== 0)) ){\n          $ok = 0;\n          if ( $type === 'both' ){\n            $ok = 1;\n          }\n          else if ( $type === 'dir' ){\n            $ok = $f['type'] === 'dir';\n          }\n          else if ( $type === 'file' ){\n            $ok = $f['type'] === 'file';\n          }\n          else if ( !is_string($type) || is_file($path.'\/'.$f['name']) ){\n            $ok = $this->_check_filter($f['name'], $type);\n          }\n          if ( $ok ){\n            if ( $detailed ){\n              if ( !isset($has_type, $has_mod) ){\n                $has_type = stripos($detailed, 't') !== false;\n                $has_mod = stripos($detailed, 'm') !== false;\n              }\n              $tmp = [\n                'path' => $path.'\/'.$f['name']\n              ];\n              if ( $has_mod ){\n                $tmp['mtime'] = mktime(\n                  substr($f['modify'], 8, 2),\n                  substr($f['modify'], 10, 2),\n                  substr($f['modify'], 12, 2),\n                  substr($f['modify'], 4, 2),\n                  substr($f['modify'], 6, 2),\n                  substr($f['modify'], 0, 4)\n                );\n              }\n              if ( $has_type ){\n                $tmp['dir'] = $f['type'] === 'dir';\n                $tmp['file'] = $f['type'] !== 'dir';\n              }\n              if ( $has_size ){\n                $tmp['size'] = $f['type'] === 'dir' ? 0 : $this->filesize($path.'\/'.$f['name']);\n              }\n              if ($f['type'] === 'dir') {\n                $dirs[] = $tmp;\n              }\n              else{\n                $files[] = $tmp;\n              }\n            }\n            else{\n              if ($f['type'] === 'dir') {\n                $dirs[] = $path.'\/'.$f['name'];\n              }\n              else{\n                $files[] = $path.'\/'.$f['name'];\n              }\n            }\n          }\n        }\n      }\n    }\n    else{\n      $fs = scandir($path, SCANDIR_SORT_ASCENDING);\n      foreach ( $fs as $f ){\n        if ( ($f !== '.') && ($f !== '..') && ($hidden || (strpos(basename($f), '.') !== 0)) ){\n          $ok = 0;\n          $is_dir = is_dir($path.'\/'.$f);\n          $is_file = !$is_dir;\n          if ( $type === 'both' ){\n            $ok = 1;\n          }\n          else if ( $type === 'dir' ){\n            $ok = $is_dir;\n          }\n          else if ( $type === 'file' ){\n            $ok = $is_file;\n          }\n          else if ( !is_string($type) || $is_file ){\n            $ok = $this->_check_filter($f, $type);\n          }\n          if ( $ok ){\n            if ( $detailed ){\n              if ( !isset($has_type, $has_mod) ){\n                $has_type = stripos($detailed, 't') !== false;\n                $has_mod = stripos($detailed, 'm') !== false;\n              }\n              $tmp = [\n                'path' => $path.'\/'.$f\n              ];\n              if ( $has_mod ){\n                $tmp['mtime'] = filemtime($path.'\/'.$f);\n              }\n              if ( $has_type ){\n                $tmp['dir'] = $is_dir ?? is_dir($path.'\/'.$f);\n                $tmp['file'] = !$tmp['dir'];\n              }\n            }\n            else {\n              $tmp = $path.'\/'.$f;\n            }\n            if ($is_dir) {\n              $dirs[] = $tmp;\n            }\n            else{\n              $files[] = $tmp;\n            }\n          }\n        }\n      }\n    }\n    return array_merge($dirs, $files);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 180,
            "endLine": 332,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_items",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "both",
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Raw function returning the elements contained in the given directory\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Raw function returning the elements contained in the given directory\n   * @param string $path\n   * @param string|callable $type\n   * @param bool $hidden\n   * @param string $detailed\n   * @return array\n   *\/"
        },
        "_exists": {
            "name": "_exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _exists($path): bool\n  {\n    \\bbn\\X::log(['_exists' => $path], 'cheSuccede');\n    if ( $this->mode === 'nextcloud' ){\n      try {\n        if ( $this->obj->propFind($path, [\n          '{DAV:}resourcetype',\n          '{DAV:}getcontenttype'\n        ], 0) ){\n          return true;\n        }\n      }\n      catch ( \\Exception $e ){\n        if ( $e->getResponse()->getStatus() === 404 ){\n          return false;\n        }\n        else{\n          $this->error = $e->getResponse()->getStatusText();\n        }\n      }\n      return false;\n    }\n    else{\n      $file = $this->getRealPath($path);\n      return file_exists($file);\n    }\n    \n  }",
            "parent": false,
            "trait": false,
            "startLine": 338,
            "endLine": 365,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_exists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $path\n   * @return bool\n   *\/"
        },
        "_scand": {
            "name": "_scand",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _scand(string $path = '', $filter = null, bool $hidden = false, string $detailed = ''): array\n  {\n    $all = [];\n    foreach ( $this->_get_items($path, 'dir', $hidden, $detailed) as $it ){\n      $p = $detailed ? $it['path'] : $it;\n      if ( !$filter || $this->_check_filter($p, $filter) ){\n        $all[] = $it;\n      }\n      foreach ( $this->_scand($p, $filter, $hidden, $detailed) as $t ){\n        $all[] = $t;\n      }\n    }\n    return $all;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 374,
            "endLine": 387,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "_scand",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param string|callable|null $filter\n   * @param bool $hidden\n   * @param string $detailed\n   * @return array\n   *\/"
        },
        "_scan": {
            "name": "_scan",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _scan(string $path = '', $filter = null, bool $hidden = false, string $detailed = ''): array\n  {\n    $all = [];\n    foreach ( $this->_get_items($path, 'both', $hidden, $detailed) as $it ){\n      $p = $detailed ? $it['path'] : $it;\n    \n      if ( !$filter || $this->_check_filter($p, $filter) ){\n        $all[] = $it;\n      }\n      if ( is_dir($p) ){\n        foreach ( $this->_scan($p, $filter, $hidden, $detailed) as $t ){\n          $all[] = $t;\n        }\n      }\n    }\n    return $all;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 396,
            "endLine": 412,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "_scan",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param string|callable|null $filter\n   * @param bool $hidden\n   * @param string $detailed\n   * @return array\n   *\/"
        },
        "_mkdir": {
            "name": "_mkdir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _mkdir(string $dir, int $chmod = 0755, $recursive = false): bool\n  {\n    if ( $this->mode !== 'nextcloud' ){\n      return is_dir($dir) || (@mkdir($dir, $chmod, $recursive) || is_dir($dir));\n    }\n    else {\n      return $this->isDir($dir) || $this->obj->request('MKCOL', $dir);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 420,
            "endLine": 428,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_mkdir",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 493,
                    "default_name": ""
                },
                {
                    "name": "recursive",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dir"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$chmod"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$recursive"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $dir\n   * @param int $chmod\n   * @param bool $recursive\n   * @return bool\n   *\/"
        },
        "_delete": {
            "name": "_delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _delete(string $path, bool $full = true): bool\n  { \n    if ( $this->isDir($path) ){\n      $files = $this->_get_items($path, 'both', true);\n      \n      if ( !empty($files) ){\n        foreach ( $files as $file ){\n          $this->_delete($file);\n        }\n      }\n      if ( $full ){\n        if ( $this->mode === 'ssh' ){\n          return @ssh2_sftp_rmdir($this->obj, substr($path, strlen($this->prefix)));\n        }\n        if ( $this->mode === 'ftp' ){\n          return @ftp_rmdir($this->obj, substr($path, strlen($this->prefix)));\n        }\n        else if ( $this->mode === 'nextcloud' ){\n          if ( $this->obj->request('DELETE', $path) ){\n            return true;\n          }\n        }\n        else{\n          return rmdir($path);\n        }\n        return false;\n      }\n      return true;\n    }\n    if ( $this->isFile($path) ){\n      if ( $this->mode === 'ssh' ){\n        return ssh2_sftp_unlink($this->obj, substr($path, strlen($this->prefix)));\n      }\n      if ( $this->mode === 'ftp' ){\n        return ftp_delete($this->obj, substr($path, strlen($this->prefix)));\n      }\n      else if ( $this->mode === 'nextcloud' ){\n        if ( $this->obj->request('DELETE', $path) ){\n          return true;\n        }\n      }\n      return unlink($path);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 435,
            "endLine": 479,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param bool $full\n   * @return bool\n   *\/"
        },
        "_copy": {
            "name": "_copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _copy(string $source, string $dest): bool\n  {\n    if ( $this->isFile($source) ){\n      if ( $this->mode === 'nextcloud' ){\n        return (bool)$this->obj->request('COPY', $source, null, [\n          'Destination' => $dest\n        ]);\n      }\n      return copy($source, $dest);\n    }\n    else if ( $this->isDir($source)  && $this->_mkdir($dest) ){\n      \n      if ( ( $this->mode !== 'nextcloud' ) ){\n        foreach ( $this->_get_items($source, 'both', true) as $it ){\n          $this->_copy($it, $dest.'\/'.basename($it));\n        }\n        return true;\n      }\n      else if ( $this->mode === 'nextcloud' ){\n        foreach ( $this->_get_items($source, 'both', true) as $it ){\n          $this->_copy($it, $dest.'\/'.basename($it));\n        }\n        return true;\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 486,
            "endLine": 512,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_copy",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dest"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $source\n   * @param string $dest\n   * @return bool\n   *\/"
        },
        "_rename": {
            "name": "_rename",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _rename($source, $dest): bool\n  {\n    $file1 = substr($source, strlen($this->prefix));\n    $file2 = substr($dest, strlen($this->prefix));\n    \n    if ( $this->mode === 'ssh' ){\n      return ssh2_sftp_rename($this->obj, $file1, $file2);\n    }\n    else if ( $this->mode === 'ftp' ){\n      return ftp_rename($this->obj, $file1, $file2);\n    }\n    if ( $this->mode === 'nextcloud' ){\n      return (bool)$this->obj->request('MOVE', $source, null, [\n        'Destination' => $dest\n      ]);\n    }\n    return rename($file1, $file2);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 519,
            "endLine": 536,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_rename",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "$dest"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $source\n   * @param $dest\n   * @return bool\n   *\/"
        },
        "_get_empty_dirs": {
            "name": "_get_empty_dirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_empty_dirs($path, bool $hidden_is_empty = false): array\n  {\n    $res = [];\n    bbn\\X::log($path, 'infolegale');\n    $all = $this->_get_items($path, 'both', !$hidden_is_empty);\n    foreach ( $all as $dir ){\n      if ( is_dir($dir) ){\n        if ( !count($files = $this->_get_items($dir, 'file', !$hidden_is_empty)) ){\n          $dirs = $this->_get_items($dir, 'dir', !$hidden_is_empty);\n          $tot = count($dirs);\n          $empty_dirs = $this->_get_empty_dirs($dir, !$hidden_is_empty);\n          if ( $tot && count($empty_dirs) ){\n            foreach ( $dirs as $d ){\n              if ( in_array($d, $empty_dirs, true) ){\n                $tot--;\n              }\n            }\n          }\n          foreach ( $empty_dirs as $e ){\n            $res[] = $e;\n          }\n          if ( !$tot ){\n            $res[] = $dir;\n          }\n        }\n      }\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 538,
            "endLine": 566,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_empty_dirs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "_delete_empty_dirs": {
            "name": "_delete_empty_dirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _delete_empty_dirs($path, bool $hidden_is_empty = false): int\n  {\n    $num = 0;\n    $all = $this->_get_items($path, 'both', !$hidden_is_empty);\n    $tot = count($all);\n    foreach ( $all as $dir ){\n      if ( is_dir($dir) ){\n        $num += $this->_delete_empty_dirs($dir, $hidden_is_empty);\n      }\n      if ( $num && !is_dir($dir) ){\n        $tot--;\n      }\n    }\n    if ( !$tot ){\n      $this->_delete($path);\n      $num++;\n    }\n    return $num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 568,
            "endLine": 586,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_delete_empty_dirs",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "_is_file": {
            "name": "_is_file",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _is_file(string $path)\n  {\n    if ( $this->mode === 'nextcloud' ){\n      if ( !empty( $this->obj->propFind($this->getRealPath($path), ['{DAV:}getcontenttype'], 0) ) ){\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    else {\n      return is_file($path);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 588,
            "endLine": 601,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_is_file",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_is_dir": {
            "name": "_is_dir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _is_dir(string $path)\n  {\n    if ( strpos($path, '\/') !== 0 ){\n      $path = $this->getRealPath($path);\n    } \n    if ( $this->mode === 'nextcloud' ){\n      if ( $this->exists($path) ){\n        $tmp = $this->obj->propFind($path, ['{DAV:}getcontenttype'], 0 );\n\n        if ( empty($tmp) ){\n          return true;\n        }\n        else if ( !empty($tmp) ){\n          return false;\n        }\n      }\n      else {\n        return false;\n      }\n    }\n    else {\n      return is_dir($path);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 603,
            "endLine": 626,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_is_dir",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "system constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(string $type  = 'local', array $cfg = [])\n  {\n   \n    switch ( $type ){\n      case 'ssh':\n        if ( $this->_connect_ssh($cfg) ){\n          $this->mode = 'ssh';\n        }\n        break;\n      case 'ftp':\n        if ( $this->_connect_ftp($cfg) ){\n          $this->mode = 'ftp';\n        }\n        break;\n      case 'nextcloud':\n        if ( $this->_connect_nextcloud($cfg) ){\n          $this->mode = 'nextcloud';\n        }\n        break;\n      case 'local':\n        $this->mode = 'local';\n        $this->current = getcwd();\n        break;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 633,
            "endLine": 657,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "local",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "system constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * system constructor.\n   * @param string $type\n   * @param array $cfg\n   *\/"
        },
        "cleanPath": {
            "name": "cleanPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cleanPath(string $path): string\n  {\n    if ( ($path === '.') || ($path === '.\/') ){\n      $path = '';\n    }\n    while ( $path && (substr($path, -1) === '\/') ){\n      $path = substr($path, 0, strlen($path) - 1);\n    }\n    return $path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 663,
            "endLine": 672,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cleanPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return string\n   *\/"
        },
        "_get_real_path": {
            "name": "_get_real_path",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_real_path(string $path): string\n  {\n    $path = $this->cleanPath($path);\n    if ( $this->mode === 'nextcloud' ){\n      if (  ( '\/'.$path.'\/' === $this->prefix ) ){\n        return $this->prefix; \n      }\n      else if ( strpos($path, $this->prefix) === 0 ) {\n        return $path;\n      }\n      else {\n        \/\/die(var_dump($this->mode));\n        return $this->prefix.$path;\n      }\n    }\n    else {\n      return $this->prefix.(\n      strpos($path, '\/') === 0 ?\n        $path :\n        (\n          ($this->current ? $this->current.($path ? '\/' : '') : '').\n          (\n          substr($path, -1) === '\/' ?\n            substr($path, 0, -1) :\n            $path\n          )\n        )\n      );\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 674,
            "endLine": 703,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_real_path",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRealPath": {
            "name": "getRealPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRealPath(string $path): string\n  {\n    return $this->_get_real_path($path);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 709,
            "endLine": 712,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getRealPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return string\n   *\/"
        },
        "getSystemPath": {
            "name": "getSystemPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSystemPath(string $file, bool $is_absolute = true): string\n  {\n    \/\/ The full path without the obj prefix, and if it's not absolute we remove the initial slash\n    \n    if ( $this->mode ===  'nextcloud' ){\n      return $file = substr($file, strlen($this->prefix) + ($is_absolute ? 0 : 1) -1 );  \n    }\n    $file = substr($file, strlen($this->prefix) + ($is_absolute ? 0 : 1));\n    \n    if ( !$is_absolute && isset($this->current) ){\n      $file = substr($file, strlen($this->current));\n    }\n    return $file;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 719,
            "endLine": 732,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getSystemPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "is_absolute",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "absolute"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$is",
                        "description": "absolute"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @param bool $is_absolute\n   * @return string\n   *\/"
        },
        "getMode": {
            "name": "getMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMode(): ?string\n  {\n    return $this->mode;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 737,
            "endLine": 740,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMode",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|string\n   *\/"
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrent(): ?string\n  {\n    return $this->current;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 745,
            "endLine": 748,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrent",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|string\n   *\/"
        },
        "getObj": {
            "name": "getObj",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObj(){\n    return $this->obj;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 753,
            "endLine": 755,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObj",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string\n   *\/"
        },
        "getFiles": {
            "name": "getFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFiles(string|null $path = null, $including_dirs = false, $hidden = false, $filter = null, string $detailed = ''): ?array\n  {\n    if ( $this->check() && $this->isDir($path) ){\n      \/\/die(var_dump($path));\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs =& $this;\n      clearstatcache();\n      $type = $including_dirs ? 'both' : 'file';\n      return array_map(function($a)use($is_absolute, $fs, $detailed){\n        if ( $detailed ){\n          $a['path'] = $fs->getSystemPath($a['path'], $is_absolute);\n          return $a;\n        }\n        return $fs->getSystemPath($a, $is_absolute);\n      }, $this->_get_items($this->getRealPath($path), $filter ?: $type, $hidden, $detailed));\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 765,
            "endLine": 782,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "getFiles",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "including_dirs",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "dirs"
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$including",
                        "description": "dirs"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|null $path\n   * @param bool $including_dirs\n   * @param bool $hidden\n   * @param string|callable|null $filter\n   * @param string $detailed\n   * @return array|null\n   *\/"
        },
        "getDirs": {
            "name": "getDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDirs(string $path = '', bool $hidden = false, string $detailed = ''): ?array\n  {\n    if ( $this->check() && $this->isDir($path) ){\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs =& $this;\n      clearstatcache();\n      return array_map(function ($a) use ($is_absolute, $fs, $detailed){\n        if ( $detailed ){\n          $a['path'] = $fs->getSystemPath($a['path'], $is_absolute);\n          return $a;\n        }\n        return $fs->getSystemPath($a, $is_absolute);\n      }, $this->_get_items($this->getRealPath($path), 'dir', $hidden, $detailed));\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 790,
            "endLine": 805,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getDirs",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param bool $hidden\n   * @param string $detailed\n   * @return array|null\n   *\/"
        },
        "cd": {
            "name": "cd",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "    public function cd(string $path): bool\n  {\n    if ($this->check()) {\n      while ( strpos($path, '..\/') ===  0 ){\n        $tmp = dirname($this->current);\n        if ( $tmp !== $this->current ){\n          $path = substr($path, 3);\n        }\n        else {\n          break;\n        }\n      }\n      if ( isset($tmp) ){\n        $path = $tmp.$path;\n      }\n      if (($p = $this->getRealPath($path)) && \\is_dir($p)) {\n        $this->current = $this->cleanPath($path);\n        return true;\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 823,
            "endLine": 844,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cd",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function exists(string $path): bool\n  {\n    if ( $this->check() ){\n      clearstatcache();\n      $file = $this->getRealPath($path);\n      if ( $file ){\n        return $this->_exists($file);\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 851,
            "endLine": 861,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "exists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "isFile": {
            "name": "isFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isFile(string $path): bool\n  {\n    clearstatcache();\n    return $this->check() && $this->_is_file($path);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 867,
            "endLine": 871,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isFile",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "isDir": {
            "name": "isDir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDir(string $path): bool\n  {\n    clearstatcache();\n    return $this->check() && $this->_is_dir($path);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 877,
            "endLine": 881,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isDir",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "scand": {
            "name": "scand",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function scand(string $path, bool $hidden = false, string $detailed = ''): ?array\n  {\n    if ( $this->check() && $this->isDir($path) ){\n      clearstatcache();\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs =& $this;\n      return array_map(function($a)use($is_absolute, $fs, $detailed){\n        if ( $detailed ){\n          $a['path'] = $fs->getSystemPath($a['path'], $is_absolute);\n          return $a;\n        }\n        return $fs->getSystemPath($a, $is_absolute);\n      }, $this->_scand($this->getRealPath($path), $hidden, $detailed));\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 888,
            "endLine": 903,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "scand",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param bool $hidden\n   * @return array|null\n   *\/"
        },
        "scan": {
            "name": "scan",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function scan(string $path = '', $filter = null, bool $hidden = false, string $detailed = ''): ?array\n  {\n    if ( $this->check() && $this->isDir($path) ){\n      clearstatcache();\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs =& $this;\n      return array_map(function($a)use($is_absolute, $fs, $detailed){\n        if ( $detailed ){\n          $a['path'] = $fs->getSystemPath($a['path'], $is_absolute);\n          return $a;\n        }\n        return $fs->getSystemPath($a, $is_absolute);\n      }, $this->_scan($this->getRealPath($path), $filter, $hidden, $detailed));\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 912,
            "endLine": 927,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "scan",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param string|callable|null $filter\n   * @param bool $hidden\n   * @param string $detailed\n   * @return array|null\n   *\/"
        },
        "createPath": {
            "name": "createPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createPath(string $dir, int $chmod = 0755): ?bool\n  {\n    if ( $this->check() ){\n      if ( !($real = $this->getRealPath($dir)) ){\n        return false;\n      }\n      clearstatcache();\n      return $this->_mkdir($real, $chmod, true);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 934,
            "endLine": 944,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "createPath",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 493,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dir"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$chmod"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $dir\n   * @param int $chmod\n   * @return bool|null\n   *\/"
        },
        "mkdir": {
            "name": "mkdir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function mkdir(string $dir, int $chmod = 0755, $recursive = false): ?bool\n  {\n    if ( $this->check() ){\n      if ( !$dir ){\n        return false;\n      }\n      clearstatcache();\n      $real = $this->getRealPath($dir);\n      return $this->_mkdir($real, $chmod, $recursive);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 952,
            "endLine": 963,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "mkdir",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 493,
                    "default_name": ""
                },
                {
                    "name": "recursive",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dir"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$chmod"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$recursive"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $dir\n   * @param int $chmod\n   * @param bool $recursive\n   * @return bool|null\n   *\/"
        },
        "putContents": {
            "name": "putContents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function putContents(string $file, string $content, bool $append = false): bool\n  {\n    $path = dirname($file);\n    if ( $this->check() && $this->isDir($path) ){\n      $real = $this->getRealPath($path).'\/';\n      if ( $append && $this->exists($file) ){\n        return (bool)file_put_contents($real.basename($file), $content, FILE_APPEND);\n      }\n      else{\n        return (bool)file_put_contents($real.basename($file), $content);\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 971,
            "endLine": 984,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "putContents",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "append",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$content"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$append"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @param string $content\n   * @param bool $append\n   * @return bool\n   *\/"
        },
        "_get_contents": {
            "name": "_get_contents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_contents(string $file):? string\n  {\n     if ( $this->check() && $this->exists($file) ){\n      $real = $this->getRealPath($file);\n      if ( $this->mode === 'nextcloud' ){\n        if ( $res = $this->obj->request('GET') ){\n          return $res['body'];\n        }\n      }\n      return file_get_contents($real);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 986,
            "endLine": 998,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_contents",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getContents": {
            "name": "getContents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getContents(string $file):? string\n  {\n    return $this->_get_contents($file);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1003,
            "endLine": 1006,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getContents",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @return null|string\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(string $file, bool $full = true): bool\n  {\n    if ( $this->check() && $this->exists($file) ){\n      return $this->_delete($this->getRealPath($file), $full);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1013,
            "endLine": 1019,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @param bool $full\n   * @return bool\n   *\/"
        },
        "copy": {
            "name": "copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function copy(string $source, string $dest, bool $overwrite = false, System $fs = null): bool\n  {\n    if ( $this->check() ){\n      $nfs =& $this;\n      if ( $fs ){\n        if ( !$fs->check() ){\n          return false;\n        }\n        $nfs =& $fs;\n      }\n     \n      if ( $this->exists($source) && $nfs->exists(dirname($dest)) ){\n        if ( $nfs->exists($dest) ){\n          $dest_is_dir = $nfs->isDir($dest);\n          if ( $dest_is_dir && $this->isFile($source) ){\n            $dest .= '\/'.basename($source);\n          }\n          else if (\n            (!$dest_is_dir && !$overwrite) ||\n            ($dest_is_dir && (count($nfs->getFiles($dest, true, true)) > 0) && !$overwrite)\n          ){\n            return false;\n          }\n          else{\n            $nfs->delete($dest);\n          }\n        }\n        return $this->_copy($this->getRealPath($source), $nfs->getRealPath($dest));\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1028,
            "endLine": 1059,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "copy",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 3,
                    "type": "null|bbn\\File\\System",
                    "type_arr": [
                        "null",
                        "bbn\\File\\System"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dest"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$overwrite"
                    },
                    {
                        "tag": "param",
                        "type": "system|null",
                        "name": "$fs"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $source\n   * @param string $dest\n   * @param bool $overwrite\n   * @param system|null $fs\n   * @return bool\n   *\/"
        },
        "rename": {
            "name": "rename",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rename(string $file, $name, bool $overwrite = false): bool\n  {\n    if ( $this->exists($file) && (strpos($name, '\/') === false) ){\n      $path = $this->getRealPath(dirname($file));\n      if ( $this->_exists($path.'\/'.$name) && ( !$overwrite || !$this->_delete($path.'\/'.$name)) ){\n        return false;\n      }\n      return $this->_rename($path.'\/'.basename($file), $path.'\/'.$name);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1067,
            "endLine": 1077,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "rename",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$overwrite"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @param $name\n   * @param bool $overwrite\n   * @return bool\n   *\/"
        },
        "move": {
            "name": "move",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function move(string $source, string $dest, bool $overwrite = false, System $fs = null): bool\n  {\n    if ( $this->check() && $this->exists($source) ){\n      $name = basename($source);\n      if ( $fs ){\n        if (\n          $fs->check() &&\n          $fs->isDir($dest) &&\n          $this->copy($source, $dest.'\/'.$name, $overwrite, $fs) &&\n          $this->delete($source)\n        ){\n          return true;\n        }\n      }\n      else if ( $this->isDir($dest) ){\n        if ( $this->exists($dest.'\/'.$name) && (!$overwrite || !$this->delete($dest.'\/'.$name)) ){\n          return false;\n        }\n        return $this->_rename($this->getRealPath($source), $this->getRealPath($dest.'\/'.$name));\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1086,
            "endLine": 1108,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "move",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 3,
                    "type": "null|bbn\\File\\System",
                    "type_arr": [
                        "null",
                        "bbn\\File\\System"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dest"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$overwrite"
                    },
                    {
                        "tag": "param",
                        "type": "system|null",
                        "name": "$fs"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $source\n   * @param string $dest\n   * @param bool $overwrite\n   * @param system|null $fs\n   * @return bool\n   *\/"
        },
        "getFile": {
            "name": "getFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFile(string $file): ?bbn\\File\n  {\n    if ( $this->check() && $this->isFile($file) ){\n      return new bbn\\File($this->getRealPath($file));\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1114,
            "endLine": 1120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFile",
            "returns": [
                null,
                "bbn\\File"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @return bbn\\File|null\n   *\/"
        },
        "_download": {
            "name": "_download",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _download($file, $dest = '', $f = false )\n  {\n    if ( $this->mode === 'nextcloud' ){\n      \/** if  is a file*\/\n      if ( $f === true ){\n        if ( $res = $this->obj->request('GET') ){\n          tempnam(sys_get_temp_dir());\n          if ( empty($this->exists($dest)) ){\n            mkdir($dest, 0755, false);\n          }\n          $f = fopen($dest.$file, 'w');\n          if ( fwrite($f, $res['body']) ){\n            return fclose($f);  \n          }\n        }\n      }\n      \/** if is a folder *\/\n      else {\n        $items = $this->_propfind_deep($file, ['{DAV:}getcontenttype','{DAV:}resourcetype'], 'infinity' );\n        $files = array_filter($items, function($a){\n          return $a['dir'] === false;\n        });\n        $dirs = array_filter($items, function($a){\n          return $a['dir'] === true;\n        });\n        if ( empty($this->exists($dest)) ){\n          mkdir($dest, 0755, false);\n          foreach ( $dirs as $i => $d ){\n            $dirs[$i]['path'] = str_replace($this->prefix, '', $d['path']);\n            if( empty($this->exists($dest.$dirs[$i]['path'])) ){\n              mkdir($dest.$dirs[$i]['path'], 0755, false);\n            }\n          }\n          foreach ( $files as $i => $d ){\n            $files[$i]['path'] = str_replace($this->prefix, '', $d['path']);\n            if ( empty($this->exists($dest.$files[$i]['path'])) ){\n              if ( $res = $this->obj->request('GET', $d['path']) ){\n                $f = fopen($dest.$files[$i]['path'], 'w');\n                if ( fwrite($f, $res['body']) ){\n                  fclose($f);  \n                }  \n              }\n            }\n          }\n        }\n      }\n      \/*\n      to delete the downloaded file\n      $dav->request('DELETE', $file);\n      *\/\n    }\n    else {\n      if ( ($f = $this->getFile($file)) && $f->check() ){\n        $f->download();\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1122,
            "endLine": 1178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_download",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "f",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "download": {
            "name": "download",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function download($file, $dest = '', $f = false)\n  {\n    return $this->_download($file, $dest, $f);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1183,
            "endLine": 1186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "download",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "f",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $file\n   *\/"
        },
        "filesize": {
            "name": "filesize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function filesize($path): ?int\n  {\n    if ( $this->isFile($path) ){\n      return $this->_filesize($this->getRealPath($path));\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1188,
            "endLine": 1194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "filesize",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_filesize": {
            "name": "_filesize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _filesize($path):? int\n  {\n    if ( $this->mode === 'nextcloud' ){\n      $size = $this->obj->propFind($path, [\n        '{DAV:}getcontentlength'\n      ]);\n      if ( isset($size['{DAV:}getcontentlength']) ){\n        return $size['{DAV:}getcontentlength'];\n      }\n    }\n    else {\n      return filesize($path);\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1196,
            "endLine": 1210,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_filesize",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "filemtime": {
            "name": "filemtime",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function filemtime($path)\n  {\n    return $this->_filemtime($this->getRealPath($path));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1212,
            "endLine": 1215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "filemtime",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_filemtime": {
            "name": "_filemtime",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _filemtime($path)\n  {\n    if ( $this->mode === 'nextcloud' ){\n      $mtime = $this->obj->propFind($path, [\n        '{DAV:}getlastmodified'\n      ]);\n      if ( !empty($mtime['{DAV:}getlastmodified']) ){\n        return $mtime['{DAV:}getlastmodified'];\n      }\n    }\n    else {\n      return filemtime($path);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1217,
            "endLine": 1230,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_filemtime",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_dirsize": {
            "name": "_dirsize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _dirsize($path): int\n  {\n    $tot = 0;\n    foreach ( $this->_get_items($path, 'file', true) as $f ){\n      $tot += $this->filesize($f);\n    }\n    foreach ( $this->_get_items($path, 'dir', true) as $d ){\n      $tot += $this->_dirsize($d);\n    }\n    return $tot;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1232,
            "endLine": 1242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_dirsize",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dirsize": {
            "name": "dirsize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dirsize($path): ?int\n  {\n    if ( $this->check() ){\n      $rpath = $this->getRealPath($path);\n      if ( $this->isDir($rpath) ){\n        return $this->_dirsize($rpath);\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1244,
            "endLine": 1253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dirsize",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getEmptyDirs": {
            "name": "getEmptyDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEmptyDirs($path, bool $hidden_is_empty = false): array\n  {\n    $res = [];\n    if ( $this->isDir($path) ){\n      foreach ( $this->getDirs($path) as $d ){\n        if ( $rs = $this->_get_empty_dirs($this->getRealPath($d), $hidden_is_empty) ){\n          foreach ( $rs as $r ){\n            $res[] = $this->getSystemPath($r);\n          }\n        }\n      }\n    }\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1255,
            "endLine": 1268,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getEmptyDirs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "deleteEmptyDirs": {
            "name": "deleteEmptyDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System2",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System2.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteEmptyDirs($path, bool $hidden_is_empty = false): int\n  {\n    $num = 0;\n    if ( $this->isDir($path) ){\n      foreach ( $this->getDirs($path) as $d ){\n        $num += $this->_delete_empty_dirs($this->getRealPath($d), $hidden_is_empty);\n      }\n    }\n    return $num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1270,
            "endLine": 1279,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteEmptyDirs",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        }
    },
    "properties": {
        "cn": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System2"
            },
            "declaring_trait": "bbn\\File\\System2",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "description": "The connection obj only if it is different from the original connection"
                    }
                ]
            },
            "parent": false,
            "value": ""
        },
        "obj": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System2"
            },
            "declaring_trait": "bbn\\File\\System2",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "description": "The connection obj"
                    }
                ]
            },
            "parent": false,
            "value": ""
        },
        "prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System2"
            },
            "declaring_trait": "bbn\\File\\System2",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The connection prefix (with connection infos)"
                    }
                ]
            },
            "parent": false,
            "value": ""
        },
        "mode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System2"
            },
            "declaring_trait": "bbn\\File\\System2",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The mode of connecti0n (ftp, ssh, or local)"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "current": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System2"
            },
            "declaring_trait": "bbn\\File\\System2",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The current directory"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "host": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System2"
            },
            "declaring_trait": "bbn\\File\\System2",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "timeout": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System2"
            },
            "declaring_trait": "bbn\\File\\System2",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": 10
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        }
    },
    "staticProperties": [],
    "constants": null,
    "uses": {
        "bbn": "bbn"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 31\/01\/2019\n * Time: 04:17\n *\n * \/\/$encodings = ['UTF-8', 'WINDOWS-1252', 'ISO-8859-1', 'ISO-8859-15'];\n * $enc = mb_detect_encoding($f, $encodings);\n * if ( $enc !== 'UTF-8' ){\n *   $f = html_entity_decode(htmlentities($f, ENT_QUOTES, $enc), ENT_QUOTES , 'UTF-8');\n * }\n *\n *\/",
        "\/**\n * Class system\n * @package bbn\\File\n *\/"
    ],
    "summary": "Class system",
    "description": "",
    "description_parts": []
}