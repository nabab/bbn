{
    "doc": {
        "description": "A class for dealing with directories (folders)\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Files ressources",
            "license": "http:\/\/www.opensource.org\/licenses\/lgpl-license.php LGPL",
            "version": "0.2r89"
        }
    },
    "name": "bbn\\File\\Dir",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/File\/Dir.php",
    "startLine": 20,
    "endLine": 614,
    "contentConstructor": null,
    "methods": {
        "clean": {
            "name": "clean",
            "summary": "Replaces backslash with slash and deletes whitespace from the beginning and the end of a directory's path.",
            "description": "```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::clean(\"\\home\\data\\test\"));\n\/\/ (string) \"\/home\/data\/test\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::clean(\"\\home\\data\\test\"));\n\/\/ (string) \"\/home\/data\/test\""
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir)\n  {\n    $new = trim(str_replace('\\\\', '\/', $dir));\n    if ( substr($new, -1) === '\/' ){\n      $new = substr($new, 0, -1);\n    }\n    return $new;\n  }",
            "startLine": 33,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory path."
                }
            ]
        },
        "hasFile": {
            "name": "hasFile",
            "summary": "Checks if the given file(s) exists in the directory.",
            "description": "Accepts unlimited arguments (files name).\n\n```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::hasFile(\"\/home\/data\/test\/file.txt\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\File\\Dir::hasFile(\"\/home\/data\/test\", \"file.txt\", \"doc.pdf\"));\n\/\/ (bool) true\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Accepts unlimited arguments (files name).<\/p>"
                },
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::hasFile(\"\/home\/data\/test\/file.txt\"));\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\File\\Dir::hasFile(\"\/home\/data\/test\", \"file.txt\", \"doc.pdf\"));\n\/\/ (bool) true"
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir)\n  {\n    $dir = self::clean($dir);\n    $as = \\func_get_args();\n    array_shift($as);\n    foreach ( $as as $a ){\n      if ( !file_exists($dir.'\/'.$a) ){\n        return false;\n      }\n    }\n\t\treturn true;\n  }",
            "startLine": 56,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory's path."
                }
            ]
        },
        "cur": {
            "name": "cur",
            "summary": "If the directory's path starts with '.\/' returns the path without '.\/' else returns the complete path.",
            "description": "```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::cur(\".\/home\/data\/test\/\"));\n\/\/ (string) \"home\/data\/test\/\"\n\\bbn\\X::dump(\\bbn\\File\\Dir::cur(\"\/home\/data\/test\/\"));\n\/\/ (string) \"\/home\/data\/test\/\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::cur(\".\/home\/data\/test\/\"));\n\/\/ (string) \"home\/data\/test\/\"\n\\bbn\\X::dump(\\bbn\\File\\Dir::cur(\"\/home\/data\/test\/\"));\n\/\/ (string) \"\/home\/data\/test\/\""
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir)\n  {\n    return strpos($dir, '.\/') === 0 ? substr($dir, 2) : $dir;\n  }",
            "startLine": 82,
            "endLine": 85,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory path."
                }
            ]
        },
        "getDirs": {
            "name": "getDirs",
            "summary": "Return an array of directories contained in the given directory.",
            "description": "It will return directories' full path.",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>It will return directories' full path.<\/p>"
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($dir, $hidden = false)\n  {\n    clearstatcache();\n    if ( $dir === '.\/' ){\n      $dir = '.';\n\t\t}\n    if ( is_dir($dir) && (($dir === '.') || ((strpos(X::basename($dir), '.') !== 0) || $hidden)) ){\n\t\t\t$dirs = [];\n\t\t\t$fs = scandir($dir, SCANDIR_SORT_ASCENDING );\n\t\t\tforeach ( $fs as $f ){\n\t\t\t\tif ( $f !== '.' && $f !== '..' && is_dir($dir.'\/'.$f) ){\n\t\t\t\t\t$dirs[] = self::cur($dir.'\/').$f;\n        }\n\t\t\t}\n      if ( !empty($dirs) ){\n        bbn\\X::sort($dirs);\n      }\n\t\t\treturn $dirs;\n\t\t}\n\t\treturn false;\n  }",
            "startLine": 101,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory's path."
                },
                {
                    "name": "hidden",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true return the hidden directories' path"
                }
            ]
        },
        "getFiles": {
            "name": "getFiles",
            "summary": "Returns an array of files contained in the given directory.",
            "description": "Returns the full path of files.\n\n```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::getFiles(\"\/home\/Docs\/Test\"));\n\/\/ (array) ['\/home\/Docs\/Test\/file.txt']\n\\bbn\\X::dump(\\bbn\\File\\Dir::getFiles(\"\/home\/Docs\/Test\",0,1));\n\/\/ (array) ['\/home\/Docs\/Test\/file.txt', '\/home\/Docs\/Test\/.doc.pdf']\n\\bbn\\X::dump(\\bbn\\File\\Dir::getFiles(\"\/home\/Docs\/Test\", 1));\n\/\/ (array) ['\/home\/Docs\/Test\/folder', '\/home\/Docs\/Test\/file.txt']\n\\bbn\\X::dump(\\bbn\\File\\Dir::getFiles(\"\/home\/Docs\/Test\", 1,1));\n\/\/ (array) ['\/home\/Docs\/Test\/folder', '\/home\/Docs\/Test\/.folder_test','\/home\/Docs\/Test\/file.txt', '\/home\/Docs\/Test\/.doc.pdf']\n```",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Returns the full path of files.<\/p>"
                },
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::getFiles(\"\/home\/Docs\/Test\"));\n\/\/ (array) ['\/home\/Docs\/Test\/file.txt']\n\\bbn\\X::dump(\\bbn\\File\\Dir::getFiles(\"\/home\/Docs\/Test\",0,1));\n\/\/ (array) ['\/home\/Docs\/Test\/file.txt', '\/home\/Docs\/Test\/.doc.pdf']\n\\bbn\\X::dump(\\bbn\\File\\Dir::getFiles(\"\/home\/Docs\/Test\", 1));\n\/\/ (array) ['\/home\/Docs\/Test\/folder', '\/home\/Docs\/Test\/file.txt']\n\\bbn\\X::dump(\\bbn\\File\\Dir::getFiles(\"\/home\/Docs\/Test\", 1,1));\n\/\/ (array) ['\/home\/Docs\/Test\/folder', '\/home\/Docs\/Test\/.folder_test','\/home\/Docs\/Test\/file.txt', '\/home\/Docs\/Test\/.doc.pdf']"
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($dir, $including_dirs = false, $hidden = false, $extension = NULL)\n  {\n    $dir = self::clean($dir);\n    clearstatcache();\n    if ( $dir === '.\/' ){\n      $dir = '.';\n    }\n    if ( is_dir($dir) && (($dir === '.') || ((strpos(X::basename($dir), '.') !== 0) || $hidden)) ){\n\t\t\t$files = [];\n\t\t\t$fs = scandir($dir, SCANDIR_SORT_ASCENDING );\n      \/\/$encodings = ['UTF-8', 'WINDOWS-1252', 'ISO-8859-1', 'ISO-8859-15'];\n\t\t\tforeach ( $fs as $f ){\n\t\t\t\tif ( $f !== '.' && $f !== '..' ){\n          \/*\n          $enc = mb_detect_encoding($f, $encodings);\n          if ( $enc !== 'UTF-8' ){\n            $f = html_entity_decode(htmlentities($f, ENT_QUOTES, $enc), ENT_QUOTES , 'UTF-8');\n          }\n          *\/\n          if ( $hidden || (strpos(X::basename($f), '.') !== 0) ){\n            if ( $including_dirs ){\n              $files[] = self::cur($dir.'\/').$f;\n            }\n            else if ( is_file($dir.'\/'.$f) ){\n              if ( !$extension || (strtolower($extension) === strtolower(bbn\\Str::fileExt($f))) ){\n                $files[] = self::cur($dir.'\/').$f;\n              }\n            }\n          }\n\t\t\t\t}\n\t\t\t}\n      if ( \\count($files) > 0 ){\n        bbn\\X::sort($files);\n      }\n\t\t\treturn $files;\n\t\t}\n\t\treturn false;\n  }",
            "startLine": 143,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory's path."
                },
                {
                    "name": "including_dirs",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "dirs If set to true it will also returns the folders contained in the given directory."
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will also returns the hidden files contained the directory"
                },
                {
                    "name": "extension",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the given directory and all its content.",
            "description": "```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::delete('\/home\/Docs\/Test\/')\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\File\\Dir::delete('\/home\/Docs\/Test', 0);\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\File\\Dir::delete('\/home\/Docs\/Test\/file.txt');\n\/\/ (bool) false\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::delete('\/home\/Docs\/Test\/')\n\/\/ (bool) true\n\\bbn\\X::dump(\\bbn\\File\\Dir::delete('\/home\/Docs\/Test', 0);\n\/\/ (bool) false\n\\bbn\\X::dump(\\bbn\\File\\Dir::delete('\/home\/Docs\/Test\/file.txt');\n\/\/ (bool) false"
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir, bool $full = true)\n  {\n    $dir = self::clean($dir);\n\t\tif ( is_dir($dir) ){\n\t\t\t$files = self::getFiles($dir, 1, 1);\n\t\t\tforeach ( $files as $file ){\n        self::delete($file);\n\t\t\t}\n\t\t\tif ( $full ){\n\t\t\t\treturn rmdir($dir);\n      }\n\t\t\treturn true;\n\t\t}\n    if ( is_file($dir) ){\n      return unlink($dir);\n    }\n\t\treturn false;\n  }",
            "startLine": 198,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory path's."
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "If set to '0' will delete only the content of the directory. Default: \"1\"."
                }
            ]
        },
        "scan": {
            "name": "scan",
            "summary": "Returns an array with all the content of the given directory.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir, string $type = NULL, bool $hidden = false)\n  {\n\t   $all = [];\n\t   $dir = self::clean($dir);\n\t   $dirs = self::getDirs($dir);\n\t   if ( \\is_array($dirs) ){\n\t     if ( $type && (strpos($type, 'file') === 0) ){\n\t       $all = self::getFiles($dir, false, $hidden);\n\t     }\n\t     else if ( $type && ((strpos($type, 'dir') === 0) || (strpos($type, 'fold') === 0)) ){\n\t       $all = $dirs;\n\t     }\n\t     else if ( $type ){\n\t       $all = array_filter(self::getFiles($dir, false, $hidden), function($a)use($type){\n\t         $ext = bbn\\Str::fileExt($a);\n\t         return strtolower($ext) === strtolower($type);\n\t       });\n\t     }\n\t     else{\n\t       $files = self::getFiles($dir, false, $hidden);\n\t       if ( \\is_array($files) ){\n\t         $all = array_merge($dirs, $files);\n\t       }\n\t     }\n\t     foreach ( $dirs as $d ){\n\t       $all = array_merge(\\is_array($all) ? $all : [], self::scan($d, $type, $hidden));\n\t     }\n\t   }\n\t   return $all;\n  }",
            "startLine": 239,
            "endLine": 268,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory's path."
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type or the extension of item to return ('file', 'dir', 'php', default is both)"
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will include the hidden files\/directories in the result"
                }
            ]
        },
        "mscan": {
            "name": "mscan",
            "summary": "Returns an array of indexed arrays with the 'name' of the file\/folder contained in the given directory, the 'mtime', and the 'date' of creation the file\/folder.",
            "description": "```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::mscan(\"\/home\/data\/test\"));\n\/* (array)\n[\n [\n   \"name\"  =>  \"\/home\/data\/test\/Folder\",\n   \"mtime\"  =>  1480422173,\n   \"date\"  =>  \"2016-11-29  13:22:53\",\n ],\n[\n   \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n   \"mtime\"  =>  1480422173,\n   \"date\"  =>  \"2016-11-29  13:22:53\",\n ],\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n   \"mtime\"  =>  1480418947,\n   \"date\"  =>  \"2016-11-29  12:29:07\",\n ]\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::mscan(\"\/home\/data\/test\", \"dir\"));\n\/* (array)\n[\n [\n   \"name\"  =>  \"\/home\/data\/test\/Folder\",\n   \"mtime\"  =>  1480422173,\n   \"date\"  =>  \"2016-11-29  13:22:53\",\n ],\n[\n   \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n   \"mtime\"  =>  1480422173,\n   \"date\"  =>  \"2016-11-29  13:22:53\",\n ]\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::mscan(\"\/home\/data\/test\", \"file\"));\n\/* (array)\n[\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n   \"mtime\"  =>  1480418947,\n   \"date\"  =>  \"2016-11-29  12:29:07\",\n ]\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::mscan(\"\/home\/data\/test\", \"file\",1));\n\/* (array)\n[\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n   \"mtime\"  =>  1480418947,\n   \"date\"  =>  \"2016-11-29  12:29:07\",\n ],\n\t[\n  \"name\"  =>  \"\/home\/data\/test\/Folder\/.doc.pdf\",\n   \"mtime\"  =>  1480418947,\n   \"date\"  =>  \"2016-11-29  12:29:07\",\n ]\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::mscan(\"\/home\/data\/test\"));\n\/* (array)\n[\n [\n   \"name\"  =>  \"\/home\/data\/test\/Folder\",\n   \"mtime\"  =>  1480422173,\n   \"date\"  =>  \"2016-11-29  13:22:53\",\n ],\n[\n   \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n   \"mtime\"  =>  1480422173,\n   \"date\"  =>  \"2016-11-29  13:22:53\",\n ],\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n   \"mtime\"  =>  1480418947,\n   \"date\"  =>  \"2016-11-29  12:29:07\",\n ]\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::mscan(\"\/home\/data\/test\", \"dir\"));\n\/* (array)\n[\n [\n   \"name\"  =>  \"\/home\/data\/test\/Folder\",\n   \"mtime\"  =>  1480422173,\n   \"date\"  =>  \"2016-11-29  13:22:53\",\n ],\n[\n   \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n   \"mtime\"  =>  1480422173,\n   \"date\"  =>  \"2016-11-29  13:22:53\",\n ]\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::mscan(\"\/home\/data\/test\", \"file\"));\n\/* (array)\n[\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n   \"mtime\"  =>  1480418947,\n   \"date\"  =>  \"2016-11-29  12:29:07\",\n ]\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::mscan(\"\/home\/data\/test\", \"file\",1));\n\/* (array)\n[\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n   \"mtime\"  =>  1480418947,\n   \"date\"  =>  \"2016-11-29  12:29:07\",\n ],\n\t[\n  \"name\"  =>  \"\/home\/data\/test\/Folder\/.doc.pdf\",\n   \"mtime\"  =>  1480418947,\n   \"date\"  =>  \"2016-11-29  12:29:07\",\n ]\n]"
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir, string $type = NULL, $hidden = false)\n  {\n     $res = [];\n\t   if ( $all = self::scan($dir, $type, $hidden) ){\n\t     foreach ($all as $a ){\n\t       $t = filemtime($a);\n\t       $res[] = ['name' => $a, 'mtime' => $t, 'date' => date('Y-m-d H:i:s', $t)];\n\t     }\n\t   }\n     return $res;\n  }",
            "startLine": 337,
            "endLine": 347,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory's path"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The type or the extension of item to return ('file', 'dir', 'php', default is both)"
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will also return the hidden files\/folders contained in the given directory. Default=false"
                }
            ]
        },
        "getTree": {
            "name": "getTree",
            "summary": "Return an array with the tree of the folder's content.",
            "description": "```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::getTree(\"\/home\/data\/test\"));\n\/* (array)\n[\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder\",\n  \"type\"  =>  \"dir\",\n  \"num_children\"  =>  0,\n  \"items\"  =>  [],\n ],\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n  \"type\"  =>  \"dir\",\n  \"num_children\"  =>  1,\n  \"items\"  =>  [\n                 [\n                   \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n                   \"type\"  =>  \"file\",\n                   \"ext\"  =>  \"png\",\n                 ],\n               ],\n ],\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::getTree(\"\/home\/data\/test\", true) );\n\/* (array)\n[\n  [\n    \"name\"  =>  \"\/home\/data\/test\/Folder\",\n    \"type\"  =>  \"dir\",\n    \"num_children\"  =>  0,\n    \"items\"  =>  [],\n  ],\n  [\n    \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n    \"type\"  =>  \"dir\",\n    \"num_children\"  =>  0,\n    \"items\"  =>  [],\n  ],\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::getTree(\"\/home\/data\/test\", false, false, true) );\n\/* (array)\n[\n  [\n    \"name\"  =>  \"\/home\/data\/test\/Folder\",\n    \"type\"  =>  \"dir\",\n    \"num_children\"  =>  1,\n    \"items\"  =>  [\n                   [\n                     \"name\"  =>  \"\/home\/data\/test\/Folder\/.doc.pdf\",\n                     \"type\"  =>  \"file\",\n                     \"ext\"  =>  \"pdf\",\n                   ],\n                 ],\n     ],\n     [\n       \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n       \"type\"  =>  \"dir\",\n       \"num_children\"  =>  1,\n       \"items\"  =>  [\n                      [\n                        \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n                        \"type\"  =>  \"file\",\n                        \"ext\"  =>  \"png\",\n                      ],\n                    ],\n   ],\n]\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::getTree(\"\/home\/data\/test\"));\n\/* (array)\n[\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder\",\n  \"type\"  =>  \"dir\",\n  \"num_children\"  =>  0,\n  \"items\"  =>  [],\n ],\n [\n  \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n  \"type\"  =>  \"dir\",\n  \"num_children\"  =>  1,\n  \"items\"  =>  [\n                 [\n                   \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n                   \"type\"  =>  \"file\",\n                   \"ext\"  =>  \"png\",\n                 ],\n               ],\n ],\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::getTree(\"\/home\/data\/test\", true) );\n\/* (array)\n[\n  [\n    \"name\"  =>  \"\/home\/data\/test\/Folder\",\n    \"type\"  =>  \"dir\",\n    \"num_children\"  =>  0,\n    \"items\"  =>  [],\n  ],\n  [\n    \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n    \"type\"  =>  \"dir\",\n    \"num_children\"  =>  0,\n    \"items\"  =>  [],\n  ],\n]\n\\bbn\\X::dump(\\bbn\\File\\Dir::getTree(\"\/home\/data\/test\", false, false, true) );\n\/* (array)\n[\n  [\n    \"name\"  =>  \"\/home\/data\/test\/Folder\",\n    \"type\"  =>  \"dir\",\n    \"num_children\"  =>  1,\n    \"items\"  =>  [\n                   [\n                     \"name\"  =>  \"\/home\/data\/test\/Folder\/.doc.pdf\",\n                     \"type\"  =>  \"file\",\n                     \"ext\"  =>  \"pdf\",\n                   ],\n                 ],\n     ],\n     [\n       \"name\"  =>  \"\/home\/data\/test\/Folder_test\",\n       \"type\"  =>  \"dir\",\n       \"num_children\"  =>  1,\n       \"items\"  =>  [\n                      [\n                        \"name\"  =>  \"\/home\/data\/test\/Folder_test\/image.png\",\n                        \"type\"  =>  \"file\",\n                        \"ext\"  =>  \"png\",\n                      ],\n                    ],\n   ],\n]"
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir, bool $only_dir = false, callable $filter = NULL, bool $hidden = false)\n  {\n    $r = [];\n    $dir = self::clean($dir);\n    $dirs = self::getDirs($dir, $hidden);\n    if ( \\is_array($dirs) ){\n      foreach ( $dirs as $d ){\n        $x = [\n          'name' => $d,\n          'type' => 'dir',\n          'num_children' => 0,\n          'items' => self::getTree($d, $only_dir, $filter, $hidden)\n        ];\n        $x['num_children'] = \\count($x['items']);\n        if ( $filter ){\n          if ( $filter($x) ){\n            $r[] = $x;\n          }\n        }\n        else{\n          $r[] = $x;\n        }\n      }\n      if ( !$only_dir ){\n        $files = self::getFiles($dir, false, $hidden);\n        foreach ( $files as $f ){\n          $x = [\n            'name' => $f,\n            'type' => 'file',\n            'ext' => bbn\\Str::fileExt($f)\n          ];\n          if ( $filter ){\n            if ( $filter($x) ){\n              $r[] = $x;\n            }\n          }\n          else{\n            $r[] = $x;\n          }\n        }\n      }\n    }\n    return $r;\n  }",
            "startLine": 426,
            "endLine": 469,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The directory's path."
                },
                {
                    "name": "only_dir",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "dir If set to true will just return the folder(s), if false will include in the resulr also the file(s). Default = false."
                },
                {
                    "name": "filter",
                    "position": 2,
                    "type": "callable",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Filter function"
                },
                {
                    "name": "hidden",
                    "position": 3,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true will also return the hidden file(s)\/folder(s)"
                }
            ]
        },
        "createPath": {
            "name": "createPath",
            "summary": "Creates a folder with the given path.",
            "description": "```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::createPath(\"\/home\/data\/test\/New\"));\n\\\\ (string) \"\/home\/data\/test\/New\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::createPath(\"\/home\/data\/test\/New\"));\n\\\\ (string) \"\/home\/data\/test\/New\""
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir, $chmod = false)\n  {\n    if ( !$dir || !\\is_string($dir) ){\n      return null;\n\t\t}\n\t\t$bits = [];\n\t\t\/\/clearstatcache();\n\t\t$path = self::clean($dir);\n    while ( $path && !is_dir($path) ){\n\t\t\t$bits[] = X::basename($path);\n\t\t\t$path = X::dirname($path);\n\t\t}\n\t\tif (is_dir($path)) {\n\t\t\tforeach (array_reverse($bits) as $b) {\n\t\t\t\tif (!empty($b)) {\n\t\t\t\t\t$path .= '\/'.$b;\n\t\t\t\t\tif (!is_dir($path)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tmkdir($path);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (\\Exception $e) {\n\t\t\t\t\t\t\t\\bbn\\X::log($e->getMessage(), 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!is_dir($path)) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif ($chmod) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tchmod($path, $chmod);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (\\Exception $e) {\n\t\t\t\t\t\t\t\\bbn\\X::log($e->getMessage(), 'errors');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    return $dir;\n  }",
            "startLine": 483,
            "endLine": 522,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new directory's path."
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If set to true the user won't have the permissions to view the content of the folder created"
                }
            ]
        },
        "move": {
            "name": "move",
            "summary": "Moves a file or directory to a new location",
            "description": "```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::move(\"\/home\/data\/test\/Folder\/image.png\",\"\/home\/data\/test\/Folder_test\/image.png\"));\n\\\\ (string) \"image.png\"\n\\bbn\\X::dump(\\bbn\\File\\Dir::move(\"\/home\/data\/test\/Folder\/image.png\",\"\/home\/data\/test\/Folder_test\/Intro\/image.png\"));\n\\\\ (string) \"image.png\"\n\\bbn\\X::dump(\\bbn\\File\\Dir::move(\"\/home\/data\/test\/Folder\",\"\/home\/data\/test\/Folder_test\", true));\n\\\\ (string) \"Folder_test\"\n\\bbn\\X::dump(\\bbn\\File\\Dir::move(\"\/home\/data\/test\/Folder\",\"\/home\/data\/test\/Folder_test\", \"_n\", 3));\n\\\\ (string) \"Folder_test_n001\"\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::move(\"\/home\/data\/test\/Folder\/image.png\",\"\/home\/data\/test\/Folder_test\/image.png\"));\n\\\\ (string) \"image.png\"\n\\bbn\\X::dump(\\bbn\\File\\Dir::move(\"\/home\/data\/test\/Folder\/image.png\",\"\/home\/data\/test\/Folder_test\/Intro\/image.png\"));\n\\\\ (string) \"image.png\"\n\\bbn\\X::dump(\\bbn\\File\\Dir::move(\"\/home\/data\/test\/Folder\",\"\/home\/data\/test\/Folder_test\", true));\n\\\\ (string) \"Folder_test\"\n\\bbn\\X::dump(\\bbn\\File\\Dir::move(\"\/home\/data\/test\/Folder\",\"\/home\/data\/test\/Folder_test\", \"_n\", 3));\n\\\\ (string) \"Folder_test_n001\""
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($orig, $dest, $st = '_v', $length = 0)\n  {\n    if ( file_exists($orig) && self::createPath(X::dirname($dest)) ){\n      if ( file_exists($dest) ){\n        if ( $st === true ){\n          self::delete($dest);\n        }\n        else{\n          $i = 1;\n          while ( $i ){\n            $dir = X::dirname($dest).'\/';\n            $file_name = bbn\\Str::fileExt($dest, 1);\n            $file = $file_name[0].$st;\n            if ( $length > 0 ){\n              $len = \\strlen(bbn\\Str::cast($i));\n              if ( $len > $length ){\n                return false;\n              }\n              $file .= str_repeat('0', $length - $len);\n            }\n            $file .= bbn\\Str::cast($i);\n            if ( !empty($file_name[1]) ){\n              $file .= '.'.$file_name[1];\n            }\n            $i++;\n            if ( !file_exists($dir.$file) ){\n              $dest = $dir.$file;\n              $i = false;\n            }\n          }\n        }\n      }\n      if ( rename($orig, $dest) ){\n        return true;\n      }\n    }\n    return false;\n  }",
            "startLine": 544,
            "endLine": 581,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "orig",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path of the file to move"
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The full name of the destination (including basename)"
                },
                {
                    "name": "st",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "_v",
                    "default_name": "",
                    "description": "If in the destination folder alredy exists a file with the same name of the file to move it will rename the file adding '_v' (default). If 'string' will change the file name with the given string. If $st=true it will overwrite the file\/folder."
                },
                {
                    "name": "length",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The number of characters to use for the revision number; will be zerofilled"
                }
            ]
        },
        "copy": {
            "name": "copy",
            "summary": "Will move the content of the given folder to a new destination. Doesn't move the hidden files.",
            "description": "```php\n\\bbn\\X::dump(\\bbn\\File\\Dir::copy(\"\/home\/data\/test\/Folder\",\"\/home\/data\/test\/Folder_test\"));\n\\\\ (bool) 1\n```",
            "description_parts": [
                {
                    "type": "code",
                    "content": "\\bbn\\X::dump(\\bbn\\File\\Dir::copy(\"\/home\/data\/test\/Folder\",\"\/home\/data\/test\/Folder_test\"));\n\\\\ (bool) 1"
                }
            ],
            "file": "bbn\\File\\Dir",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($src, $dst)\n  {\n    if ( is_file($src) ){\n      return copy($src, $dst);\n    }\n    if ( is_dir($src) && self::createPath($dst) ){\n      $files = self::getFiles($src);\n      $dirs = self::getDirs($src);\n      foreach ( $files as $f ){\n        copy($f, $dst.'\/'.X::basename($f));\n      }\n      foreach ( $dirs as $f ){\n        self::copy($f, $dst.'\/'.X::basename($f));\n      }\n      return true;\n    }\n    else{\n      return false;\n    }\n  }",
            "startLine": 594,
            "endLine": 613,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "src",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path of the files to move"
                },
                {
                    "name": "dst",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new destination of files"
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "numMethods": 20,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\File",
    "shortName": "Dir",
    "summary": "A class for dealing with directories (folders)",
    "description": "",
    "description_parts": []
}