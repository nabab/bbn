{
    "doc": {
        "description": "Class system\n",
        "tags": {
            "package": "bbn\\File"
        }
    },
    "name": "bbn\\File\\System",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/File\/System.php",
    "startLine": 28,
    "endLine": 1674,
    "numMethods": 47,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "cn": "",
        "error_stream": null,
        "obj": "",
        "prefix": "",
        "mode": null,
        "current": null,
        "host": null,
        "timeout": 10,
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\File",
    "shortName": "System",
    "contentConstructor": {
        "file": "bbn\\File\\System",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "system constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $type = 'local', array $cfg = [])\n  {\n    switch ($type) {\n      case 'ssh':\n        if ($this->_connect_ssh($cfg)) {\n          $this->mode   = 'ssh';\n          $this->prefix = 'ssh2.sftp:\/\/' . $this->obj;\n        }\n        break;\n      case 'ftp':\n        if ($this->_connect_ftp($cfg)) {\n          $this->mode   = 'ftp';\n          $this->prefix = 'ftp:\/\/' . $cfg['user'] . ':' . $this->_get_password($cfg) . '@' . $cfg['host'] . '\/';\n        }\n        break;\n      case 'nextcloud':\n        if (isset($cfg['host'], $cfg['user'], $cfg['pass'])) {\n          $this->mode = 'nextcloud';\n          $this->obj  = new \\bbn\\Api\\Nextcloud($cfg);\n        }\n        break;\n      case 'webdav':\n        if (isset($cfg['host'], $cfg['user'], $cfg['pass'])) {\n          $this->mode   = 'webdav';\n          $this->prefix = 'https:\/\/' . $cfg['host'] . $cfg['prefix'];\n          $this->obj    = new \\Sabre\\DAV\\Client([\n            'baseUri' => $this->path,\n            'userName' => $cfg['user'],\n            'password' => $cfg['pass']\n          ]);\n        }\n        break;\n      case 'local':\n        $this->mode    = $type;\n        $this->current = getcwd();\n        break;\n    }\n\n    if (empty($this->mode)) {\n      $this->error = X::_(\"Impossible to connect to the SSH server\");\n    }\n  }",
            "startLine": 69,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "local",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "__destruct": {
            "name": "__destruct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (($this->mode === 'ssh') && \\is_resource($this->obj)) {\n      \/\/fclose($this->obj);\n    }\n  }",
            "startLine": 113,
            "endLine": 118,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "sanitize": {
            "name": "sanitize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $filename)\n  {\n    $st = end(explode('\/', $filename));\n    return Str::encodeFilename($st);\n  }",
            "startLine": 121,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "filename",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cleanPath": {
            "name": "cleanPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    if (($path === '.') || ($path === '.\/')) {\n      $path = '';\n    }\n\n    while ($path && (substr($path, -1) === '\/')) {\n      $path = substr($path, 0, strlen($path) - 1);\n    }\n\n    return $path;\n  }",
            "startLine": 132,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getRealPath": {
            "name": "getRealPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    $path = $this->cleanPath($path);\n    switch ($this->mode) {\n      case 'nextcloud':\n        return $this->obj->getRealPath($path);\n      case 'webdav':\n        return $path;\n      default:\n        return $this->prefix . (strpos($path, '\/') === 0 ?\n          $path : (($this->current ?\n            $this->current . ($path ? '\/' : '') : '') . (substr($path, -1) === '\/' ? substr($path, 0, -1) : $path)));\n    }\n  }",
            "startLine": 150,
            "endLine": 163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getSystemPath": {
            "name": "getSystemPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file, bool $is_absolute = true)\n  {\n    \/\/ The full path without the obj prefix, and if it's not absolute we remove the initial slash\n    switch ($this->mode) {\n      case 'nextcloud':\n        return $this->obj->getSystemPath($file, $is_absolute);\n      case 'webdav':\n        return $file;\n      default:\n        $file = substr($file, strlen($this->prefix) + ($is_absolute ? 0 : 1));\n        if (!$is_absolute && $this->current) {\n          $file = substr($file, strlen($this->current));\n        }\n        return $file;\n    }\n  }",
            "startLine": 171,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "is_absolute",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "absolute"
                }
            ]
        },
        "getMode": {
            "name": "getMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->mode;\n  }",
            "startLine": 192,
            "endLine": 195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->current;\n  }",
            "startLine": 201,
            "endLine": 204,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getObj": {
            "name": "getObj",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->obj;\n  }",
            "startLine": 210,
            "endLine": 213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getFiles": {
            "name": "getFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path = NULL, $including_dirs = false, $hidden = false, $filter = NULL, string $detailed = '')\n  {\n    if ($this->check()) {\n      if ($this->mode === 'nextcloud') {\n        return $this->obj->getFiles($path, $including_dirs, $hidden, $filter, $detailed);\n      } else {\n        $is_absolute = strpos($path, '\/') === 0;\n        $fs          = &$this;\n        clearstatcache();\n        $type = $including_dirs ? 'both' : 'file';\n        return array_map(\n          function ($a) use ($is_absolute, $fs, $detailed) {\n            if ($detailed) {\n              $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n              return $a;\n            }\n\n            return $fs->getSystemPath($a, $is_absolute);\n          },\n          $this->_get_items($this->getRealPath($path), $filter ?: $type, $hidden, $detailed)\n        );\n      }\n    }\n\n    return null;\n  }",
            "startLine": 224,
            "endLine": 249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "including_dirs",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "dirs"
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 4,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDirs": {
            "name": "getDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path = '', bool $hidden = false, string $detailed = '')\n  {\n    if ($this->check()) {\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs          = &$this;\n      clearstatcache();\n      return array_map(\n        function ($a) use ($is_absolute, $fs, $detailed) {\n          if ($detailed) {\n            $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n            return $a;\n          }\n\n          return $fs->getSystemPath($a, $is_absolute);\n        },\n        $this->_get_items($this->getRealPath($path), 'dir', $hidden, $detailed)\n      );\n    }\n\n    return null;\n  }",
            "startLine": 258,
            "endLine": 278,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cd": {
            "name": "cd",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    if ($this->check()) {\n      while (strpos($path, '..\/') === 0) {\n        $tmp = X::dirname($this->current);\n        if ($tmp !== $this->current) {\n          $path = substr($path, 3);\n        } else {\n          break;\n        }\n      }\n\n      if (isset($tmp)) {\n        $path = $tmp . $path;\n      }\n\n      if (($p = $this->getRealPath($path)) && \\is_dir($p)) {\n        $this->current = $this->cleanPath($path);\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 286,
            "endLine": 309,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    if ($this->check()) {\n      clearstatcache();\n      $file = $this->getRealPath($path);\n      if ($file) {\n        return $this->_exists($file);\n      }\n    }\n\n    return false;\n  }",
            "startLine": 316,
            "endLine": 327,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isFile": {
            "name": "isFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    return $this->check() && $this->_is_file($this->getRealPath($path));\n  }",
            "startLine": 334,
            "endLine": 337,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDir": {
            "name": "isDir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path)\n  {\n    return $this->check() && $this->_is_dir($this->getRealPath($path));\n  }",
            "startLine": 344,
            "endLine": 347,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "scand": {
            "name": "scand",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, bool $hidden = false, string $detailed = '')\n  {\n    if ($this->check() && $this->isDir($path)) {\n      clearstatcache();\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs          = &$this;\n      return array_map(\n        function ($a) use ($is_absolute, $fs, $detailed) {\n          if ($detailed) {\n            $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n            return $a;\n          }\n\n          return $fs->getSystemPath($a, $is_absolute);\n        },\n        $this->_scand($this->getRealPath($path), null, $hidden, $detailed)\n      );\n    }\n\n    return null;\n  }",
            "startLine": 355,
            "endLine": 375,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 2,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "scan": {
            "name": "scan",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path = '', $filter = NULL, bool $hidden = false, string $detailed = '')\n  {\n    if ($this->check() && $this->isDir($path)) {\n      clearstatcache();\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs          = &$this;\n      return array_map(\n        function ($a) use ($is_absolute, $fs, $detailed) {\n          if ($detailed) {\n            $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n            return $a;\n          }\n\n          return $fs->getSystemPath($a, $is_absolute);\n        },\n        $this->_scan($this->getRealPath($path), $filter, $hidden, $detailed)\n      );\n    }\n\n    return null;\n  }",
            "startLine": 385,
            "endLine": 405,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "rscan": {
            "name": "rscan",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path = '', $filter = NULL, bool $hidden = false, string $detailed = '')\n  {\n    if ($this->check() && $this->isDir($path)) {\n      clearstatcache();\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs          = &$this;\n      return array_map(\n        function ($a) use ($is_absolute, $fs, $detailed) {\n          if ($detailed) {\n            $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n            return $a;\n          }\n\n          return $fs->getSystemPath($a, $is_absolute);\n        },\n        $this->_rscan($this->getRealPath($path), $filter, $hidden, $detailed)\n      );\n    }\n\n    return null;\n  }",
            "startLine": 415,
            "endLine": 435,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "createPath": {
            "name": "createPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir, int $chmod = 493)\n  {\n    if ($this->check()) {\n      if (!($real = $this->getRealPath($dir))) {\n        return false;\n      }\n\n      clearstatcache();\n      if ($this->_mkdir($real, $chmod, true) || $this->_is_dir($real)) {\n        return $this->getSystemPath($real);\n      }\n    }\n\n    return null;\n  }",
            "startLine": 443,
            "endLine": 457,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 493,
                    "default_name": ""
                }
            ]
        },
        "mkdir": {
            "name": "mkdir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir, int $chmod = 493, $recursive = false)\n  {\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->mkdir($dir);\n    }\n\n    if ($this->check()) {\n      if (!$dir) {\n        return false;\n      }\n\n      clearstatcache();\n      $real = $this->getRealPath($dir);\n      return $this->_mkdir($real, $chmod, $recursive);\n    }\n\n    return null;\n  }",
            "startLine": 466,
            "endLine": 483,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 493,
                    "default_name": ""
                },
                {
                    "name": "recursive",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "putContents": {
            "name": "putContents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file, string $content, bool $append = false)\n  {\n    $path = X::dirname($file);\n    if ($this->check() && $this->isDir($path)) {\n      $real = $this->getRealPath($path) . '\/';\n      if ($append && $this->exists($file)) {\n        return (bool)file_put_contents($real . X::basename($file), $content, FILE_APPEND);\n      } else {\n        return (bool)file_put_contents($real . X::basename($file), $content);\n      }\n    }\n\n    return false;\n  }",
            "startLine": 493,
            "endLine": 506,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "append",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "getContents": {
            "name": "getContents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    if ($this->check() && $this->exists($file)) {\n      if ($this->mode === 'nextcloud') {\n        return $this->obj->getContents($file);\n      } else {\n        $real = $this->getRealPath($file);\n        return file_get_contents($real);\n      }\n    }\n\n    return null;\n  }",
            "startLine": 513,
            "endLine": 525,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "decodeContents": {
            "name": "decodeContents",
            "summary": "Returns the decoded content of the given file with a predefined or given decoding function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file, $decoder = NULL, $as_array = false)\n  {\n    if ($c = $this->getContents($file)) {\n      if (is_callable($decoder)) {\n        return $decoder($c);\n      } else {\n        $encoding = false;\n        if (!$decoder) {\n          $encoding = bbn\\Str::fileExt($file);\n        } elseif (is_string($decoder)) {\n          $encoding = $decoder;\n        }\n\n        switch ($encoding) {\n          case 'json':\n            return json_decode($c, $as_array);\n          case 'yml':\n          case 'yaml':\n            return yaml_parse($c);\n          default:\n            return unserialize($c);\n        }\n      }\n    }\n\n    return null;\n  }",
            "startLine": 536,
            "endLine": 562,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file to get the content from"
                },
                {
                    "name": "decoder",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "A decoding function or an encoding type"
                },
                {
                    "name": "as_array",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "array If set to true the result will be forced into an array"
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file, bool $full = true)\n  {\n    if ($this->check() && $this->exists($file)) {\n      return $this->_delete($this->getRealPath($file), $full);\n    }\n\n    return false;\n  }",
            "startLine": 570,
            "endLine": 577,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "copy": {
            "name": "copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $source, string $dest, bool $overwrite = false, bbn\\File\\System $fs = NULL)\n  {\n    if ($this->check()) {\n      if ($this->mode !== 'nextcloud') {\n        $nfs = &$this;\n        if ($fs) {\n          if (!$fs->check()) {\n            return false;\n          }\n\n          $nfs = &$fs;\n        }\n\n        if ($this->exists($source) && $nfs->exists(X::dirname($dest))) {\n          if ($nfs->exists($dest)) {\n            $dest_is_dir = $nfs->isDir($dest);\n            if ($dest_is_dir && $this->isFile($source)) {\n              $dest .= '\/' . X::basename($source);\n            } elseif ((!$dest_is_dir && !$overwrite)\n              || ($dest_is_dir && (count($nfs->getFiles($dest, true, true)) > 0) && !$overwrite)\n            ) {\n              return false;\n            } else {\n              $nfs->delete($dest);\n            }\n          }\n\n          return $this->_copy($this->getRealPath($source), $nfs->getRealPath($dest));\n        }\n      } else {\n        $this->obj->copy($source, $dest);\n      }\n    }\n\n    return false;\n  }",
            "startLine": 587,
            "endLine": 622,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 3,
                    "type": "bbn\\File\\System",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "rename": {
            "name": "rename",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file, $name, bool $overwrite = false)\n  {\n    if ($this->exists($file) && (strpos($name, '\/') === false)) {\n      $path = $this->getRealPath(X::dirname($file));\n      if ($this->_exists($path . '\/' . $name) && (!$overwrite || !$this->_delete($path . '\/' . $name))) {\n        return false;\n      }\n\n      return $this->_rename($path . '\/' . X::basename($file), $path . '\/' . $name);\n    }\n\n    return false;\n  }",
            "startLine": 631,
            "endLine": 643,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "move": {
            "name": "move",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $source, string $dest, bool $overwrite = false, bbn\\File\\System $fs = NULL)\n  {\n    if ($this->check() && $this->exists($source)) {\n      $name = X::basename($source);\n      if ($fs) {\n        if (\n          $fs->check()\n          && $fs->isDir($dest)\n          && $this->copy($source, $dest . '\/' . $name, $overwrite, $fs)\n          && $this->delete($source)\n        ) {\n          return true;\n        }\n      } elseif ($this->isDir($dest)) {\n        if ($this->exists($dest . '\/' . $name) && (!$overwrite || !$this->delete($dest . '\/' . $name))) {\n          return false;\n        }\n\n        return $this->_rename($this->getRealPath($source), $this->getRealPath($dest . '\/' . $name));\n      }\n    }\n\n    return false;\n  }",
            "startLine": 654,
            "endLine": 677,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 3,
                    "type": "bbn\\File\\System",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getFile": {
            "name": "getFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $file)\n  {\n    if ($this->check()) {\n      if ($this->mode === 'nextcloud') {\n        return $this->obj->getFile($file);\n      }\n\n      if ($this->isFile($file)) {\n        return new bbn\\File($this->getRealPath($file));\n      }\n    }\n\n    return null;\n  }",
            "startLine": 684,
            "endLine": 697,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "download": {
            "name": "download",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file)\n  {\n    return $this->_download($this->getRealPath($file));\n  }",
            "startLine": 700,
            "endLine": 703,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "filemtime": {
            "name": "filemtime",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    return $this->_filemtime($this->getRealPath($path));\n  }",
            "startLine": 706,
            "endLine": 709,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "filesize": {
            "name": "filesize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    return $this->_filesize($this->getRealPath($path));\n  }",
            "startLine": 712,
            "endLine": 715,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dirsize": {
            "name": "dirsize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    if ($this->check()) {\n      $rpath = $this->getRealPath($path);\n\n      if ($this->mode !== 'nextcloud') {\n        if ($this->_is_dir($rpath)) {\n          return $this->_dirsize($rpath);\n        }\n      } else {\n        return $this->obj->getSize($rpath);\n      }\n\n      return null;\n    }\n  }",
            "startLine": 733,
            "endLine": 748,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getEmptyDirs": {
            "name": "getEmptyDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, bool $hidden_is_empty = false)\n  {\n    $res = [];\n    if ($this->isDir($path)) {\n      foreach ($this->getDirs($path) as $d) {\n        if ($rs = $this->_get_empty_dirs($this->getRealPath($d), $hidden_is_empty)) {\n          foreach ($rs as $r) {\n            $res[] = $this->getSystemPath($r);\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "startLine": 751,
            "endLine": 765,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "deleteEmptyDirs": {
            "name": "deleteEmptyDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path, bool $hidden_is_empty = false)\n  {\n    $num = 0;\n    if ($this->isDir($path)) {\n      foreach ($this->getDirs($path) as $d) {\n        $num += $this->_delete_empty_dirs($this->getRealPath($d), $hidden_is_empty);\n      }\n    }\n\n    return $num;\n  }",
            "startLine": 767,
            "endLine": 777,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "searchContents": {
            "name": "searchContents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($search, $path, $deep = false, $hidden = false, $filter = 'file')\n  {\n    $res = [];\n    if ($this->isDir($path)) {\n      $files = $deep ? $this->scan($path, $filter) : $this->getFiles($path, false, $hidden, $filter);\n      foreach ($files as $f) {\n        $r = $this->searchContents($search, $f);\n        if (count($r)) {\n          if (is_array($search)) {\n            foreach ($r as $s => $found) {\n              if (count($found)) {\n                if (!isset($res[$s])) {\n                  $res[$s] = [];\n                }\n\n                $res[$s][$f] = $found;\n              }\n            }\n          } else {\n            $res[$f] = $r;\n          }\n        }\n      }\n\n      return $res;\n    } elseif ($this->isFile($path)) {\n      $content = $this->getContents($path);\n      if (is_array($search)) {\n        foreach ($search as $s) {\n          $idx     = 0;\n          $res[$s] = [];\n          while (($n = X::indexOf($content, $s, $idx)) > -1) {\n            $res[$s][] = $n;\n            $idx       = $n + strlen($s);\n          }\n        }\n      } else {\n        $idx = 0;\n        while (($n = X::indexOf($content, $search, $idx)) > -1) {\n          $res[] = $n;\n          $idx   = $n + 1;\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "startLine": 790,
            "endLine": 838,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                }
            ]
        },
        "replaceContents": {
            "name": "replaceContents",
            "summary": "Replaces search with replace in the given content.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($search, $replace, $path, $deep = false, $hidden = false, $filter = 'file')\n  {\n    if (\\is_array($replace)) {\n      if (!\\is_array($search) || (count($replace) !== count($search))) {\n        throw new \\Exception(X::_(\"If replace is an array, search must be an array of equal length\"));\n      }\n\n      $replace_array = true;\n    }\n    $res = 0;\n    if ($this->isDir($path)) {\n      $files = $deep ? $this->scan($path, $filter) : $this->getFiles($path, false, $hidden, $filter);\n      foreach ($files as $f) {\n        $res += $this->replaceContents($search, $replace, $f);\n      }\n\n      return $res;\n    } elseif ($this->isFile($path)) {\n      $content = $this->getContents($path);\n      $changed = false;\n      if (is_array($search)) {\n        foreach ($search as $idx => $s) {\n          if (X::indexOf($content, $s) === -1) {\n            continue;\n          }\n\n          $changed = true;\n          $content = str_replace($s, $replace_array ? $replace[$idx] : $replace, $content);\n        }\n      } elseif (X::indexOf($content, $search) > -1) {\n        $changed = true;\n        $content = str_replace($search, $replace, $content);\n      }\n      if ($changed) {\n        $this->putContents($path, $content);\n        return 1;\n      }\n\n      return $res;\n    }\n\n    return 0;\n  }",
            "startLine": 853,
            "endLine": 895,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 3,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "replace",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 2,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 5,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                }
            ]
        },
        "getNumFiles": {
            "name": "getNumFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($path)\n  {\n    if (($s = $this->scan($path))) {\n      return count($s);\n    }\n\n    return 0;\n  }",
            "startLine": 898,
            "endLine": 905,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "upload": {
            "name": "upload",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $files, string $path)\n  {\n    $success = false;\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->upload($files, $path);\n    } elseif ($this->mode === 'local') {\n      return $this->_upload($files, $path);\n    } else {\n      $success = false;\n    }\n\n    return $success;\n  }",
            "startLine": 908,
            "endLine": 920,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTree": {
            "name": "getTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\File\\System",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $dir, string $exclude = '', $only_dir = false, $filter = NULL, $hidden = false)\n  {\n    $r    = [];\n    $dirs = self::getDirs($dir, $hidden);\n    if (\\is_array($dirs)) {\n      foreach ($dirs as $d) {\n        if (X::basename($d) !== $exclude) {\n          $x        = [\n            'name' => $d,\n            'type' => 'dir',\n            'num' => 0,\n            'items' => self::getTree($d, $exclude, $only_dir, $filter, $hidden)\n          ];\n          $x['num'] = \\count($x['items']);\n          if (empty($x['items'])) {\n            unset($x['items']);\n          }\n        }\n\n        if (!empty($x['items']) || $this->_check_filter($x, $filter)) {\n          $r[] = $x;\n        }\n      }\n\n      if (!$only_dir) {\n        $files = self::getFiles($dir, false, $hidden);\n\n        foreach ($files as $f) {\n          $x = [\n            'name' => $f,\n            'type' => 'file',\n            'ext' => bbn\\Str::fileExt($f)\n          ];\n          if ($this->_check_filter($x, $filter)) {\n            $r[] = $x;\n          }\n        }\n      }\n    }\n\n    return $r;\n  }",
            "startLine": 923,
            "endLine": 964,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "exclude",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "only_dir",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 3,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 4,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "summary": "Class system",
    "description": "",
    "description_parts": []
}