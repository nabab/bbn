{
    "doc": {
        "description": "Class system\n",
        "tags": {
            "package": "bbn\\File"
        }
    },
    "name": "bbn\\File\\System",
    "namespace": true,
    "realName": "System",
    "realNamespace": "bbn\\File",
    "traits": [],
    "interfaces": [],
    "fileName": "\/File\/System.php",
    "startLine": 28,
    "endLine": 1698,
    "numMethods": 72,
    "numProperties": 15,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "cn": "",
        "error_stream": null,
        "obj": "",
        "prefix": "",
        "mode": null,
        "current": null,
        "previous": null,
        "host": null,
        "timeout": 10,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\File",
    "shortName": "System",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "system constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(string $type  = 'local', array $cfg = [])\n  {\n    switch ($type) {\n      case 'ssh':\n        if ($this->_connect_ssh($cfg)) {\n          $this->mode   = 'ssh';\n          $this->prefix = 'ssh2.sftp:\/\/' . $this->obj;\n        }\n        break;\n      case 'ftp':\n        if ($this->_connect_ftp($cfg)) {\n          $this->mode   = 'ftp';\n          $this->prefix = 'ftp:\/\/' . $cfg['user'] . ':' . $this->_get_password($cfg) . '@' . $cfg['host'] . '\/';\n        }\n        break;\n      case 'nextcloud':\n        if (isset($cfg['host'], $cfg['user'], $cfg['pass'])) {\n          $this->mode = 'nextcloud';\n          $this->obj  = new \\bbn\\Api\\Nextcloud($cfg);\n        }\n        break;\n      case 'webdav':\n        if (isset($cfg['host'], $cfg['user'], $cfg['pass'])) {\n          $this->mode   = 'webdav';\n          $this->prefix = 'https:\/\/' . $cfg['host'] . $cfg['prefix'];\n          $this->obj    = new \\Sabre\\DAV\\Client([\n            'baseUri' => $this->prefix,\n            'userName' => $cfg['user'],\n            'password' => $cfg['pass']\n          ]);\n        }\n        break;\n      case 'local':\n        $this->mode    = $type;\n        $this->current = getcwd();\n        break;\n    }\n\n    if (empty($this->mode)) {\n      $this->error = X::_(\"Impossible to connect to the SSH server\");\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 71,
            "endLine": 112,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "local",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "system constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * system constructor.\n   * @param string $type\n   * @param array  $cfg\n   *\/"
        },
        "__destruct": {
            "name": "__destruct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __destruct()\n  {\n    if (($this->mode === 'ssh') && \\is_resource($this->obj)) {\n      \/\/fclose($this->obj);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 115,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "__destruct",
            "returns": [],
            "arguments": []
        },
        "sanitize": {
            "name": "sanitize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function sanitize(string $filename)\n  {\n    $st = end(explode('\/', $filename));\n    return Str::encodeFilename($st);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 123,
            "endLine": 127,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "sanitize",
            "returns": [],
            "arguments": [
                {
                    "name": "filename",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "cleanPath": {
            "name": "cleanPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cleanPath(string $path): string\n  {\n    if (($path === '.') || ($path === '.\/')) {\n      $path = '';\n    }\n\n    while ($path && (substr($path, -1) === '\/')) {\n      $path = substr($path, 0, strlen($path) - 1);\n    }\n\n    return $path;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 134,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cleanPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return string\n   *\/"
        },
        "getRealPath": {
            "name": "getRealPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRealPath(string $path): string\n  {\n    $path = $this->cleanPath($path);\n    switch ($this->mode) {\n      case 'nextcloud':\n        return $this->obj->getRealPath($path);\n      case 'webdav':\n        return $path;\n      default:\n        return $this->prefix . (strpos($path, '\/') === 0 ?\n          $path : (($this->current ?\n            $this->current . ($path ? '\/' : '') : '') . (substr($path, -1) === '\/' ? substr($path, 0, -1) : $path)));\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 152,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getRealPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return string\n   *\/"
        },
        "getSystemPath": {
            "name": "getSystemPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSystemPath(string $file, bool $is_absolute = true): string\n  {\n    \/\/ The full path without the obj prefix, and if it's not absolute we remove the initial slash\n    switch ($this->mode) {\n      case 'nextcloud':\n        return $this->obj->getSystemPath($file, $is_absolute);\n      case 'webdav':\n        return $file;\n      default:\n        $file = substr($file, strlen($this->prefix) + ($is_absolute ? 0 : 1));\n        if (!$is_absolute && $this->current) {\n          $file = substr($file, strlen($this->current));\n        }\n        return $file;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 173,
            "endLine": 188,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getSystemPath",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "is_absolute",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "absolute"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$is",
                        "description": "absolute"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @param bool   $is_absolute\n   * @return string\n   *\/"
        },
        "getMode": {
            "name": "getMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMode(): ?string\n  {\n    return $this->mode;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 194,
            "endLine": 197,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMode",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|string\n   *\/"
        },
        "getCurrent": {
            "name": "getCurrent",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrent(): ?string\n  {\n    return $this->current;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 203,
            "endLine": 206,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getCurrent",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|string\n   *\/"
        },
        "getObj": {
            "name": "getObj",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getObj()\n  {\n    return $this->obj;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 212,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getObj",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return string\n   *\/"
        },
        "getFiles": {
            "name": "getFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFiles(string $path = null, $including_dirs = false, $hidden = false, $filter = null, string $detailed = ''): ?array\n  {\n    if ($this->check()) {\n      if ($this->mode === 'nextcloud') {\n        return $this->obj->getFiles($path, $including_dirs, $hidden, $filter, $detailed);\n      } else {\n        $is_absolute = strpos($path, '\/') === 0;\n        $fs          = &$this;\n        clearstatcache();\n        $type = $including_dirs ? 'both' : 'file';\n        return array_map(\n          function ($a) use ($is_absolute, $fs, $detailed) {\n            if ($detailed) {\n              $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n              return $a;\n            }\n\n            return $fs->getSystemPath($a, $is_absolute);\n          },\n          $this->_get_items($this->getRealPath($path), $filter ?: $type, $hidden, $detailed)\n        );\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "getFiles",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "including_dirs",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "dirs"
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$including",
                        "description": "dirs"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|null          $path\n   * @param bool                 $including_dirs\n   * @param bool                 $hidden\n   * @param string|callable|null $filter\n   * @param string               $detailed\n   * @return array|null\n   *\/"
        },
        "getDirs": {
            "name": "getDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDirs(string $path = '', bool $hidden = false, string $detailed = ''): ?array\n  {\n    if ($this->check()) {\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs          = &$this;\n      clearstatcache();\n      return array_map(\n        function ($a) use ($is_absolute, $fs, $detailed) {\n          if ($detailed) {\n            $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n            return $a;\n          }\n\n          return $fs->getSystemPath($a, $is_absolute);\n        },\n        $this->_get_items($this->getRealPath($path), 'dir', $hidden, $detailed)\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 260,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "getDirs",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param bool   $hidden\n   * @param string $detailed\n   * @return array|null\n   *\/"
        },
        "cd": {
            "name": "cd",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function cd(string $path): bool\n  {\n    if ($this->check()) {\n      while (strpos($path, '..\/') === 0) {\n        $tmp = X::dirname($this->current);\n        if ($tmp !== $this->current) {\n          $path = substr($path, 3);\n        } else {\n          break;\n        }\n      }\n\n      if (isset($tmp)) {\n        $path = $tmp . $path;\n      }\n\n      if (($p = $this->getRealPath($path)) && \\is_dir($p)) {\n        $this->previous = $this->current;\n        $this->current = $this->cleanPath($path);\n        return true;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 288,
            "endLine": 312,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cd",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Nextcloud"
                }
            },
            "comments": "  \/**\n   * @todo Nextcloud\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "back": {
            "name": "back",
            "summary": "Undocumented function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function back(): bool\n  {\n    if ($this->previous) {\n      return $this->cd($this->previous);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 320,
            "endLine": 327,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "back",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Undocumented function\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Undocumented function\n   *\n   * @return boolean\n   *\/"
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function exists(string $path): bool\n  {\n    if ($this->check()) {\n      clearstatcache();\n      $file = $this->getRealPath($path);\n      if ($file) {\n        return $this->_exists($file);\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 334,
            "endLine": 345,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "exists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "isFile": {
            "name": "isFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isFile(string $path): bool\n  {\n    return $this->check() && $this->_is_file($this->getRealPath($path));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 352,
            "endLine": 355,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isFile",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "isDir": {
            "name": "isDir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDir(string $path): bool\n  {\n    return $this->check() && $this->_is_dir($this->getRealPath($path));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 362,
            "endLine": 365,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isDir",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @return bool\n   *\/"
        },
        "scand": {
            "name": "scand",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function scand(string $path, bool $hidden = false, string $detailed = ''): ?array\n  {\n    if ($this->check() && $this->isDir($path)) {\n      clearstatcache();\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs          = &$this;\n      return array_map(\n        function ($a) use ($is_absolute, $fs, $detailed) {\n          if ($detailed) {\n            $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n            return $a;\n          }\n\n          return $fs->getSystemPath($a, $is_absolute);\n        },\n        $this->_scand($this->getRealPath($path), null, $hidden, $detailed)\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 373,
            "endLine": 393,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "scand",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param bool   $hidden\n   * @return array|null\n   *\/"
        },
        "scan": {
            "name": "scan",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function scan(string $path = '', $filter = null, bool $hidden = false, string $detailed = ''): ?array\n  {\n    if ($this->check() && $this->isDir($path)) {\n      clearstatcache();\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs          = &$this;\n      return array_map(\n        function ($a) use ($is_absolute, $fs, $detailed) {\n          if ($detailed) {\n            $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n            return $a;\n          }\n\n          return $fs->getSystemPath($a, $is_absolute);\n        },\n        $this->_scan($this->getRealPath($path), $filter, $hidden, $detailed)\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 403,
            "endLine": 423,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "scan",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string               $path\n   * @param string|callable|null $filter\n   * @param bool                 $hidden\n   * @param string               $detailed\n   * @return array|null\n   *\/"
        },
        "rscan": {
            "name": "rscan",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rscan(string $path = '', $filter = null, bool $hidden = false, string $detailed = ''): ?array\n  {\n    if ($this->check() && $this->isDir($path)) {\n      clearstatcache();\n      $is_absolute = strpos($path, '\/') === 0;\n      $fs          = &$this;\n      return array_map(\n        function ($a) use ($is_absolute, $fs, $detailed) {\n          if ($detailed) {\n            $a['name'] = $fs->getSystemPath($a['name'], $is_absolute);\n            return $a;\n          }\n\n          return $fs->getSystemPath($a, $is_absolute);\n        },\n        $this->_rscan($this->getRealPath($path), $filter, $hidden, $detailed)\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 433,
            "endLine": 453,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "rscan",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string               $path\n   * @param string|callable|null $filter\n   * @param bool                 $hidden\n   * @param string               $detailed\n   * @return array|null\n   *\/"
        },
        "createPath": {
            "name": "createPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function createPath(string $dir, int $chmod = 0755): ?string\n  {\n    if ($this->check()) {\n      if (!($real = $this->getRealPath($dir))) {\n        return false;\n      }\n\n      clearstatcache();\n      if ($this->_mkdir($real, $chmod, true) || $this->_is_dir($real)) {\n        return $this->getSystemPath($real);\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 461,
            "endLine": 475,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "createPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 493,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dir"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$chmod"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $dir\n   * @param int    $chmod\n   * @return bool|null\n   *\/"
        },
        "mkdir": {
            "name": "mkdir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function mkdir(string $dir, int $chmod = 0755, $recursive = false): ?bool\n  {\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->mkdir($dir);\n    }\n\n    if ($this->check()) {\n      if (!$dir) {\n        return false;\n      }\n\n      clearstatcache();\n      $real = $this->getRealPath($dir);\n      return $this->_mkdir($real, $chmod, $recursive);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 484,
            "endLine": 501,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "mkdir",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 493,
                    "default_name": ""
                },
                {
                    "name": "recursive",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dir"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$chmod"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$recursive"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $dir\n   * @param int    $chmod\n   * @param bool   $recursive\n   * @return bool|null\n   *\/"
        },
        "putContents": {
            "name": "putContents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function putContents(string $file, string $content, bool $append = false): bool\n  {\n    $path = X::dirname($file);\n    if ($this->check() && $this->isDir($path)) {\n      $real = $this->getRealPath($path) . '\/';\n      if ($append && $this->exists($file)) {\n        return (bool)file_put_contents($real . X::basename($file), $content, FILE_APPEND);\n      } else {\n        return (bool)file_put_contents($real . X::basename($file), $content);\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 511,
            "endLine": 524,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "putContents",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "content",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "append",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$content"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$append"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Nextcloud"
                }
            },
            "comments": "  \/**\n   * @todo Nextcloud\n   * @param string $file\n   * @param string $content\n   * @param bool   $append\n   * @return bool\n   *\/"
        },
        "getContents": {
            "name": "getContents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getContents(string $file): ?string\n  {\n    if ($this->check() && $this->exists($file)) {\n      if ($this->mode === 'nextcloud') {\n        return $this->obj->getContents($file);\n      } else {\n        $real = $this->getRealPath($file);\n        return file_get_contents($real);\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 531,
            "endLine": 543,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getContents",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @return null|string\n   *\/"
        },
        "decodeContents": {
            "name": "decodeContents",
            "summary": "Returns the decoded content of the given file with a predefined or given decoding function",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function decodeContents(string $file, $decoder = null, $as_array = false): ?iterable\n  {\n    if ($c = $this->getContents($file)) {\n      if (is_callable($decoder)) {\n        return $decoder($c);\n      } else {\n        $encoding = false;\n        if (!$decoder) {\n          $encoding = bbn\\Str::fileExt($file);\n        } elseif (is_string($decoder)) {\n          $encoding = $decoder;\n        }\n\n        switch ($encoding) {\n          case 'json':\n            return json_decode($c, $as_array);\n          case 'yml':\n          case 'yaml':\n            return yaml_parse($c);\n          default:\n            return unserialize($c);\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 554,
            "endLine": 580,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "decodeContents",
            "returns": [
                null,
                "iterable"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The file to get the content from"
                },
                {
                    "name": "decoder",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "A decoding function or an encoding type"
                },
                {
                    "name": "as_array",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "array If set to true the result will be forced into an array"
                }
            ],
            "doc": {
                "description": "Returns the decoded content of the given file with a predefined or given decoding function\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file",
                        "description": "The file to get the content from"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$decoder",
                        "description": "A decoding function or an encoding type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$as",
                        "description": "array If set to true the result will be forced into an array"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the decoded content of the given file with a predefined or given decoding function\n   *\n   * @param string $file     The file to get the content from\n   * @param mixed  $decoder  A decoding function or an encoding type\n   * @param bool   $as_array If set to true the result will be forced into an array\n   * @return null|array\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(string $file, bool $full = true): bool\n  {\n    if ($this->check() && $this->exists($file)) {\n      return $this->_delete($this->getRealPath($file), $full);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 588,
            "endLine": 595,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @param bool   $full\n   * @return bool\n   *\/"
        },
        "copy": {
            "name": "copy",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function copy(string $source, string $dest, bool $overwrite = false, System $fs = null): bool\n  {\n    if ($this->check()) {\n      if ($this->mode !== 'nextcloud') {\n        $nfs = &$this;\n        if ($fs) {\n          if (!$fs->check()) {\n            return false;\n          }\n\n          $nfs = &$fs;\n        }\n\n        if ($this->exists($source) && $nfs->exists(X::dirname($dest))) {\n          if ($nfs->exists($dest)) {\n            $dest_is_dir = $nfs->isDir($dest);\n            if ($dest_is_dir && $this->isFile($source)) {\n              $dest .= '\/' . X::basename($source);\n            } elseif ((!$dest_is_dir && !$overwrite)\n              || ($dest_is_dir && (count($nfs->getFiles($dest, true, true)) > 0) && !$overwrite)\n            ) {\n              return false;\n            } else {\n              $nfs->delete($dest);\n            }\n          }\n\n          return $this->_copy($this->getRealPath($source), $nfs->getRealPath($dest));\n        }\n      } else {\n        $this->obj->copy($source, $dest);\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 605,
            "endLine": 640,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "copy",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 3,
                    "type": "null|bbn\\File\\System",
                    "type_arr": [
                        "null",
                        "bbn\\File\\System"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dest"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$overwrite"
                    },
                    {
                        "tag": "param",
                        "type": "system|null",
                        "name": "$fs"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string      $source\n   * @param string      $dest\n   * @param bool        $overwrite\n   * @param system|null $fs\n   * @return bool\n   *\/"
        },
        "rename": {
            "name": "rename",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rename(string $file, $name, bool $overwrite = false): bool\n  {\n    if ($this->exists($file) && (strpos($name, '\/') === false)) {\n      $path = $this->getRealPath(X::dirname($file));\n      if ($this->_exists($path . '\/' . $name) && (!$overwrite || !$this->_delete($path . '\/' . $name))) {\n        return false;\n      }\n\n      return $this->_rename($path . '\/' . X::basename($file), $path . '\/' . $name);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 649,
            "endLine": 661,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "rename",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$overwrite"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @param $name\n   * @param bool   $overwrite\n   * @return bool\n   *\/"
        },
        "move": {
            "name": "move",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function move(string $source, string $dest, bool $overwrite = false, System $fs = null): bool\n  {\n    if ($this->check() && $this->exists($source)) {\n      $name = X::basename($source);\n      if ($fs) {\n        if (\n          $fs->check()\n          && $fs->isDir($dest)\n          && $this->copy($source, $dest . '\/' . $name, $overwrite, $fs)\n          && $this->delete($source)\n        ) {\n          return true;\n        }\n      } elseif ($this->isDir($dest)) {\n        if ($this->exists($dest . '\/' . $name) && (!$overwrite || !$this->delete($dest . '\/' . $name))) {\n          return false;\n        }\n\n        return $this->_rename($this->getRealPath($source), $this->getRealPath($dest . '\/' . $name));\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 672,
            "endLine": 695,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "move",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "overwrite",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 3,
                    "type": "null|bbn\\File\\System",
                    "type_arr": [
                        "null",
                        "bbn\\File\\System"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dest"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$overwrite"
                    },
                    {
                        "tag": "param",
                        "type": "system|null",
                        "name": "$fs"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   *\n   * @param string      $source\n   * @param string      $dest\n   * @param bool        $overwrite\n   * @param system|null $fs\n   * @return bool\n   *\/"
        },
        "getFile": {
            "name": "getFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFile(string $file): ?bbn\\File\n  {\n    if ($this->check()) {\n      if ($this->mode === 'nextcloud') {\n        return $this->obj->getFile($file);\n      }\n\n      if ($this->isFile($file)) {\n        return new bbn\\File($this->getRealPath($file));\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 702,
            "endLine": 715,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFile",
            "returns": [
                null,
                "bbn\\File"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $file\n   * @return bbn\\File|null\n   *\/"
        },
        "download": {
            "name": "download",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function download($file)\n  {\n    return $this->_download($this->getRealPath($file));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 718,
            "endLine": 721,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "download",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "filemtime": {
            "name": "filemtime",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function filemtime($path)\n  {\n    return $this->_filemtime($this->getRealPath($path));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 724,
            "endLine": 727,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "filemtime",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "filesize": {
            "name": "filesize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function filesize($path): ?int\n  {\n    return $this->_filesize($this->getRealPath($path));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 730,
            "endLine": 733,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "filesize",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_dirsize": {
            "name": "_dirsize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _dirsize($path): int\n  {\n    $tot = 0;\n    foreach ($this->_get_items($path, 'file', true) as $f) {\n      $tot += $this->filesize($f);\n    }\n\n    foreach ($this->_get_items($path, 'dir', true) as $d) {\n      $tot += $this->_dirsize($d);\n    }\n\n    return $tot;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 736,
            "endLine": 748,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_dirsize",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dirsize": {
            "name": "dirsize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function dirsize($path): ?int\n  {\n    if ($this->check()) {\n      $rpath = $this->getRealPath($path);\n\n      if ($this->mode !== 'nextcloud') {\n        if ($this->_is_dir($rpath)) {\n          return $this->_dirsize($rpath);\n        }\n      } else {\n        return $this->obj->getSize($rpath);\n      }\n\n      return null;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 751,
            "endLine": 766,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dirsize",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getEmptyDirs": {
            "name": "getEmptyDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEmptyDirs($path, bool $hidden_is_empty = false): array\n  {\n    $res = [];\n    if ($this->isDir($path)) {\n      foreach ($this->getDirs($path) as $d) {\n        if ($rs = $this->_get_empty_dirs($this->getRealPath($d), $hidden_is_empty)) {\n          foreach ($rs as $r) {\n            $res[] = $this->getSystemPath($r);\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 769,
            "endLine": 783,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getEmptyDirs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "deleteEmptyDirs": {
            "name": "deleteEmptyDirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteEmptyDirs($path, bool $hidden_is_empty = false): int\n  {\n    $num = 0;\n    if ($this->isDir($path)) {\n      foreach ($this->getDirs($path) as $d) {\n        $num += $this->_delete_empty_dirs($this->getRealPath($d), $hidden_is_empty);\n      }\n    }\n\n    return $num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 785,
            "endLine": 795,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteEmptyDirs",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "searchContents": {
            "name": "searchContents",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function searchContents($search, $path, $deep = false, $hidden = false, $filter = 'file'): ?array\n  {\n    $res = [];\n    if ($this->isDir($path)) {\n      $files = $deep ? $this->scan($path, $filter) : $this->getFiles($path, false, $hidden, $filter);\n      foreach ($files as $f) {\n        $r = $this->searchContents($search, $f);\n        if (count($r)) {\n          if (is_array($search)) {\n            foreach ($r as $s => $found) {\n              if (count($found)) {\n                if (!isset($res[$s])) {\n                  $res[$s] = [];\n                }\n\n                $res[$s][$f] = $found;\n              }\n            }\n          } else {\n            $res[$f] = $r;\n          }\n        }\n      }\n\n      return $res;\n    } elseif ($this->isFile($path)) {\n      $content = $this->getContents($path);\n      if (is_array($search)) {\n        foreach ($search as $s) {\n          $idx     = 0;\n          $res[$s] = [];\n          while (($n = X::indexOf($content, $s, $idx)) > -1) {\n            $res[$s][] = $n;\n            $idx       = $n + strlen($s);\n          }\n        }\n      } else {\n        $idx = 0;\n        while (($n = X::indexOf($content, $search, $idx)) > -1) {\n          $res[] = $n;\n          $idx   = $n + 1;\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 808,
            "endLine": 856,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "searchContents",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$search"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$filter"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "nextcloud"
                }
            },
            "comments": "  \/**\n   * @todo nextcloud\n   *\n   * @param string  $search\n   * @param string  $path\n   * @param boolean $deep\n   * @param boolean $hidden\n   * @param string  $filter\n   * @return array|null\n   *\/"
        },
        "replaceContents": {
            "name": "replaceContents",
            "summary": "Replaces search with replace in the given content.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function replaceContents($search, $replace, $path, $deep = false, $hidden = false, $filter = 'file'): int\n  {\n    if (\\is_array($replace)) {\n      if (!\\is_array($search) || (count($replace) !== count($search))) {\n        throw new \\Exception(X::_(\"If replace is an array, search must be an array of equal length\"));\n      }\n\n      $replace_array = true;\n    }\n    $res = 0;\n    if ($this->isDir($path)) {\n      $files = $deep ? $this->scan($path, $filter) : $this->getFiles($path, false, $hidden, $filter);\n      foreach ($files as $f) {\n        $res += $this->replaceContents($search, $replace, $f);\n      }\n\n      return $res;\n    } elseif ($this->isFile($path)) {\n      $content = $this->getContents($path);\n      $changed = false;\n      if (is_array($search)) {\n        foreach ($search as $idx => $s) {\n          if (X::indexOf($content, $s) === -1) {\n            continue;\n          }\n\n          $changed = true;\n          $content = str_replace($s, $replace_array ? $replace[$idx] : $replace, $content);\n        }\n      } elseif (X::indexOf($content, $search) > -1) {\n        $changed = true;\n        $content = str_replace($search, $replace, $content);\n      }\n      if ($changed) {\n        $this->putContents($path, $content);\n        return 1;\n      }\n\n      return $res;\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 871,
            "endLine": 913,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 3,
            "shortName": "replaceContents",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "search",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "replace",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deep",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 5,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "file",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Replaces search with replace in the given content.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$search"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$replace"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$deep"
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$filter"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "nextcloud"
                }
            },
            "comments": "  \/**\n   * Replaces search with replace in the given content.\n   * @todo nextcloud\n   *\n   * @param string|array $search\n   * @param string|array $replace\n   * @param string|array $path\n   * @param boolean      $deep\n   * @param boolean      $hidden\n   * @param string       $filter\n   * @return array|null\n   *\/"
        },
        "getNumFiles": {
            "name": "getNumFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNumFiles($path)\n  {\n    if (($s = $this->scan($path))) {\n      return count($s);\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 916,
            "endLine": 923,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getNumFiles",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "upload": {
            "name": "upload",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function upload(array $files, string $path): bool\n  {\n    $success = false;\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->upload($files, $path);\n    } elseif ($this->mode === 'local') {\n      return $this->_upload($files, $path);\n    } else {\n      $success = false;\n    }\n\n    return $success;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 926,
            "endLine": 938,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "upload",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getTree": {
            "name": "getTree",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTree(string $dir,  string $exclude = '', $only_dir = false,  $filter = null,  $hidden = false)\n  {\n    $r    = [];\n    $dirs = self::getDirs($dir, $hidden);\n    if (\\is_array($dirs)) {\n      foreach ($dirs as $d) {\n        if (X::basename($d) !== $exclude) {\n          $x        = [\n            'name' => $d,\n            'type' => 'dir',\n            'num' => 0,\n            'items' => self::getTree($d, $exclude, $only_dir, $filter, $hidden)\n          ];\n          $x['num'] = \\count($x['items']);\n          if (empty($x['items'])) {\n            unset($x['items']);\n          }\n        }\n\n        if (!empty($x['items']) || $this->_check_filter($x, $filter)) {\n          $r[] = $x;\n        }\n      }\n\n      if (!$only_dir) {\n        $files = self::getFiles($dir, false, $hidden);\n\n        foreach ($files as $f) {\n          $x = [\n            'name' => $f,\n            'type' => 'file',\n            'ext' => bbn\\Str::fileExt($f)\n          ];\n          if ($this->_check_filter($x, $filter)) {\n            $r[] = $x;\n          }\n        }\n      }\n    }\n\n    return $r;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 941,
            "endLine": 982,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "getTree",
            "returns": [],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "exclude",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "only_dir",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "_get_password": {
            "name": "_get_password",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_password(array $cfg)\n  {\n    if (isset($cfg['pass'])) {\n      if (!empty($cfg['encrypted'])) {\n        if ($tmp = base64_decode($cfg['pass'])) {\n          return \\bbn\\Util\\Enc::decrypt($tmp, $cfg['encryption_key'] ?? '');\n        }\n      }\n\n      return $cfg['pass'];\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 985,
            "endLine": 998,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_password",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_connect_nextcloud": {
            "name": "_connect_nextcloud",
            "summary": "Connect to a Nextcloud instance",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _connect_nextcloud(array $cfg): bool\n  {\n    if (isset($cfg['host'], $cfg['user'], $cfg['pass']) && class_exists('\\\\Sabre\\\\DAV\\\\Client')) {\n      $this->prefix = '\/remote.php\/webdav\/';\n      $this->obj    = new \\Sabre\\DAV\\Client(\n        [\n          'baseUri' => 'http' . (isset($cfg['port']) && ($cfg['port'] === 21) ? '' : 's') . ':\/\/' . $cfg['host'] . $this->prefix . $cfg['name'],\n          'userName' => $cfg['user'],\n          'password' => $this->_get_password($cfg)\n        ]\n      );\n      $this->host   = 'http' . (isset($cfg['port']) && ($cfg['port'] === 21) ? '' : 's') . ':\/\/' . $cfg['host'];\n      if ($this->obj->options()) {\n        $this->current = '';\n        return true;\n      }\n\n      $this->error = X::_('Impossible to connect to the WebDAV host');\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1006,
            "endLine": 1027,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_connect_nextcloud",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Connect to a Nextcloud instance\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Connect to a Nextcloud instance\n   * @param array $cfg\n   * @return bool\n   *\/"
        },
        "_connect_ftp": {
            "name": "_connect_ftp",
            "summary": "Connect to FTP",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _connect_ftp(array $cfg): bool\n  {\n    if (isset($cfg['host'], $cfg['user'], $cfg['pass'])) {\n      $args = [$cfg['host'], $cfg['port'] ?? 21, $cfg['timeout'] ?? $this->timeout];\n      try {\n        $this->obj = ftp_ssl_connect(...$args);\n      } catch (\\Exception $e) {\n        $this->error  = X::_('Impossible to connect to the FTP host through SSL');\n        $this->error .= PHP_EOL . $e->getMessage();\n      }\n\n      if (!$this->obj) {\n        try {\n          $this->obj = ftp_connect(...$args);\n        } catch (\\Exception $e) {\n          $this->error  = X::_('Impossible to connect to the FTP host');\n          $this->error .= PHP_EOL . $e->getMessage();\n        }\n      }\n\n      if ($this->obj) {\n        if (!@ftp_login($this->obj, $cfg['user'], $this->_get_password($cfg))) {\n          $this->error  = X::_('Impossible to login to the FTP host');\n          $this->error .= PHP_EOL . error_get_last()['message'];\n        } else {\n          $this->current = ftp_pwd($this->obj);\n          if (\n            !empty($cfg['passive'])\n            || (defined('BBN_SERVER_NAME') && !@fsockopen(constant('BBN_SERVER_NAME'), $args[1]))\n          ) {\n            ftp_pasv($this->obj, true);\n            stream_set_chunk_size($this->obj, 1024 * 1024);\n          }\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1035,
            "endLine": 1075,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_connect_ftp",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Connect to FTP\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Connect to FTP\n   * @param array $cfg\n   * @return bool\n   *\/"
        },
        "_connect_ssh": {
            "name": "_connect_ssh",
            "summary": "Connects to SSH",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _connect_ssh(array $cfg): bool\n  {\n    if (isset($cfg['host'])) {\n      $param = [];\n      \/\/ Keys as parans\n      if (isset($cfg['public'], $cfg['private'])) {\n        $param['hostkey'] = 'ssh-rsa';\n      }\n\n      $this->cn = @ssh2_connect(\n        $cfg['host'],\n        $cfg['port'] ?? 22,\n        $param\/*, [\n        'debug' => function($message, $language, $always_display){\n        X::log([$message, $language, $always_display], 'connect_ssh_debug');\n        },\n        'disconnect' => function($reason, $message, $language){\n        X::log([$reason, $message, $language], 'connect_ssh_disconnect');\n        }\n        ]*\/\n      );\n      if (!$this->cn) {\n        $this->error = X::_(\"Could not connect through SSH.\");\n      } elseif (X::hasProps($cfg, ['user', 'public', 'private'], true)) {\n        stream_set_blocking($this->cn, true);\n        stream_set_chunk_size($this->cn, 1024 * 1024);\n        \/*\n        $fingerprint = ssh2_fingerprint($this->cn, SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX);\n        if ( strcmp($this->ssh_server_fp, $fingerprint) !== 0 ){\n          $this->error = X::_('Unable to verify server identity!');\n        }\n        *\/\n        if (!ssh2_auth_pubkey_file($this->cn, $cfg['user'], $cfg['public'], $cfg['private'], $this->_get_password($cfg))) {\n          $this->error = X::_('Authentication rejected by server');\n        } else {\n          try {\n            $this->obj = ssh2_sftp($this->cn);\n          } catch (\\Exception $e) {\n            $this->error = X::_(\"Could not connect through SFTP.\");\n          }\n\n          if ($this->obj) {\n            $this->current = ssh2_sftp_realpath($this->obj, '.');\n            return true;\n          }\n        }\n      } elseif (X::hasProps($cfg, ['user', 'pass'], true)) {\n        try {\n          ssh2_auth_password($this->cn, $cfg['user'], $this->_get_password($cfg));\n        } catch (\\Exception $e) {\n          $this->error = X::_(\"Could not authenticate with username and password.\");\n        }\n        if (!$this->error) {\n          try {\n            $this->obj = @ssh2_sftp($this->cn);\n          } catch (\\Exception $e) {\n            $this->error = X::_(\"Could not initialize SFTP subsystem.\");\n          }\n\n          if ($this->obj) {\n            $this->current = ssh2_sftp_realpath($this->obj, '.');\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1083,
            "endLine": 1151,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_connect_ssh",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Connects to SSH\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Connects to SSH\n   * @param array $cfg\n   * @return bool\n   *\/"
        },
        "_check_filter": {
            "name": "_check_filter",
            "summary": "Checks if the given files name ends with the given suffix string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _check_filter($item, $filter): bool\n  {\n    if ($filter && $item) {\n      $name = \\is_array($item) ? ($item['name'] ?? null) : $item;\n\n      if (empty($name)) {\n        throw new \\Exception(X::_(\"There is no item to chek the filter against\"));\n      }\n\n      if (is_string($filter)) {\n        if ($filter === 'file') {\n          return $this->_is_file($name);\n        }\n\n        if ($filter === 'dir') {\n          return $this->_is_dir($name);\n        }\n\n        if ($filter === 'both') {\n          return true;\n        }\n\n        $extensions = array_map(\n          function ($a) {\n            if (substr($a, 0, 1) !== '.') {\n              $a = '.' . $a;\n            }\n\n            return strtolower($a);\n          },\n          X::split($filter, '|')\n        );\n        foreach ($extensions as $ext) {\n          if (strtolower(substr($name, -strlen($ext))) === $ext) {\n            return true;\n          }\n        }\n\n        return false;\n      } elseif (is_callable($filter)) {\n        return $filter($item);\n      }\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1162,
            "endLine": 1207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_check_filter",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "item",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the given files name ends with the given suffix string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$item"
                    },
                    {
                        "tag": "param",
                        "type": "callable|string",
                        "name": "$filter"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Nextcloud"
                }
            },
            "comments": "  \/**\n   * Checks if the given files name ends with the given suffix string\n   *\n   * @todo Nextcloud\n   * @param array|string    $item\n   * @param callable|string $filter\n   * @return bool\n   *\/"
        },
        "_get_items": {
            "name": "_get_items",
            "summary": "Raw function returning the elements contained in the given directory",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_items(string $path, $type = 'both', bool $hidden = false, string $detailed = ''): array\n  {\n    if ($this->mode !== 'nextcloud') {\n      $files        = [];\n      $dirs         = [];\n      $has_size     = stripos((string)$detailed, 's') !== false;\n      $has_type     = stripos((string)$detailed, 't') !== false;\n      $has_mod      = stripos((string)$detailed, 'm') !== false;\n      $has_children = stripos((string)$detailed, 'c') !== false;\n      $has_ext      = stripos((string)$detailed, 'e') !== false;\n      if (($this->mode === 'ftp') && ($detailed || ($type !== 'both'))) {\n        if ($fs = ftp_mlsd($this->obj, substr($path, strlen($this->prefix)))) {\n          foreach ($fs as $f) {\n            if (($f['name'] !== '.') && ($f['name'] !== '..') && ($hidden || (strpos(X::basename($f['name']), '.') !== 0))) {\n              if ($this->_check_filter($f['name'], $type)) {\n                if ($detailed) {\n                  $tmp = [\n                    'name' => $path . '\/' . $f['name']\n                  ];\n                  if ($has_mod) {\n                    $tmp['mtime'] = mktime(\n                      substr($f['modify'], 8, 2),\n                      substr($f['modify'], 10, 2),\n                      substr($f['modify'], 12, 2),\n                      substr($f['modify'], 4, 2),\n                      substr($f['modify'], 6, 2),\n                      substr($f['modify'], 0, 4)\n                    );\n                  }\n\n                  if ($has_type) {\n                    $tmp['dir']  = $f['type'] === 'dir';\n                    $tmp['file'] = $f['type'] !== 'dir';\n                  }\n\n                  if ($has_ext) {\n                    $tmp['ext'] = $f['type'] === 'dir' ? '' : Str::fileExt($f['name']);\n                  }\n\n                  if ($has_size) {\n                    $tmp['size'] = $f['type'] === 'dir' ? 0 : $this->filesize($path . '\/' . $f['name']);\n                  }\n\n                  if ($has_children && ($f['type'] === 'dir')) {\n                    $tmp['num'] = count($this->getFiles($path . '\/' . $f['name'], true, $hidden));\n                  }\n                } else {\n                  $tmp = $path . '\/' . $f['name'];\n                }\n\n                if ($f['type'] === 'dir') {\n                  $dirs[] = $tmp;\n                } else {\n                  $files[] = $tmp;\n                }\n              }\n            }\n          }\n        } else {\n          X::log(error_get_last(), 'filesystem');\n        }\n      } elseif (is_dir($path)) {\n        $fs = scandir($path, SCANDIR_SORT_ASCENDING);\n        foreach ($fs as $f) {\n          if (($f !== '.') && ($f !== '..') && ($hidden || (strpos(X::basename($f), '.') !== 0))) {\n            $file = $path . '\/' . $f;\n            if ($this->_check_filter($file, $type)) {\n              $is_dir = is_dir($path . '\/' . $f);\n              if ($detailed) {\n                $tmp = [\n                  'name' => $file\n                ];\n                if ($has_mod) {\n                  $tmp['mtime'] = filemtime($path . '\/' . $f);\n                }\n\n                if ($has_type) {\n                  $tmp['dir']  = $is_dir;\n                  $tmp['file'] = !$tmp['dir'];\n                }\n\n                if ($has_size) {\n                  $tmp['size'] = $is_dir ? 0 : $this->filesize($path . '\/' . $f);\n                }\n\n                if ($has_children && $is_dir) {\n                  $tmp['num'] = count($this->getFiles($path . '\/' . $f, true, $hidden));\n                }\n                if ($has_ext) {\n                  $ex = Str::fileExt($f, true);\n                  $tmp['ext'] = $is_dir ? '' : $ex[1];\n                  $tmp['basename'] = $ex[0];\n                }\n              }\n              else {\n                $tmp = $file;\n              }\n\n              if ($is_dir) {\n                $dirs[] = $tmp;\n              } else {\n                $files[] = $tmp;\n              }\n            }\n          }\n        }\n      }\n\n      return array_merge($dirs, $files);\n    } else {\n      return $this->obj->getItems($path, $type, $hidden, $detailed);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1218,
            "endLine": 1330,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_items",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "both",
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Raw function returning the elements contained in the given directory\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Raw function returning the elements contained in the given directory\n   * @param string          $path\n   * @param string|callable $type\n   * @param bool            $hidden\n   * @param string          $detailed\n   * @return array\n   *\/"
        },
        "_exists": {
            "name": "_exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _exists($path): bool\n  {\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->exists($path);\n    } else {\n      return file_exists($path);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1337,
            "endLine": 1344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_exists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$path"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $path\n   * @return bool\n   *\/"
        },
        "_scand": {
            "name": "_scand",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _scand(string $path = '', $filter = null, bool $hidden = false, string $detailed = ''): array\n  {\n    $all = [];\n    foreach ($this->_get_items($path, 'dir', $hidden, $detailed) as $it) {\n      $p = $detailed ? $it['name'] : $it;\n      if (!$filter || $this->_check_filter($p, $filter)) {\n        $all[] = $it;\n      }\n\n      foreach ($this->_scand($p, $filter, $hidden, $detailed) as $t) {\n        $all[] = $t;\n      }\n    }\n\n    return $all;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1354,
            "endLine": 1369,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "_scand",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string               $path\n   * @param string|callable|null $filter\n   * @param bool                 $hidden\n   * @param string               $detailed\n   * @return array\n   *\/"
        },
        "_scan": {
            "name": "_scan",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _scan(string $path = '', $filter = null, bool $hidden = false, string $detailed = ''): array\n  {\n    $all = [];\n\n    foreach ($this->_get_items($path, 'both', $hidden, $detailed) as $it) {\n      $p = $detailed ? $it['name'] : $it;\n      if (!$filter || $this->_check_filter($p, $filter)) {\n        $all[] = $it;\n      }\n\n      if ($this->_is_dir($p)) {\n        foreach ($this->_scan($p, $filter, $hidden, $detailed) as $t) {\n          $all[] = $t;\n        }\n      }\n    }\n\n    return $all;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1379,
            "endLine": 1397,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "_scan",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string               $path\n   * @param string|callable|null $filter\n   * @param bool                 $hidden\n   * @param string               $detailed\n   * @return array\n   *\/"
        },
        "_rscan": {
            "name": "_rscan",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _rscan(string $path = '', $filter = null, bool $hidden = false, string $detailed = ''): array\n  {\n    $all = [];\n\n    foreach ($this->_get_items($path, 'both', $hidden, $detailed) as $it) {\n      $p = $detailed ? $it['name'] : $it;\n      if ($this->_is_dir($p)) {\n        foreach ($this->_scan($p, $filter, $hidden, $detailed) as $t) {\n          $all[] = $t;\n        }\n      }\n\n      if (!$filter || $this->_check_filter($p, $filter)) {\n        $all[] = $it;\n      }\n    }\n\n    return $all;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1407,
            "endLine": 1425,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "_rscan",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "hidden",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "detailed",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "string|callable|null",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$hidden"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$detailed"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string               $path\n   * @param string|callable|null $filter\n   * @param bool                 $hidden\n   * @param string               $detailed\n   * @return array\n   *\/"
        },
        "_mkdir": {
            "name": "_mkdir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _mkdir(string $dir, int $chmod = 0755, $recursive = false): bool\n  {\n    if (!$this->_is_dir($dir)) {\n      return @mkdir($dir, $chmod, $recursive);\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1434,
            "endLine": 1441,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_mkdir",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "dir",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "chmod",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 493,
                    "default_name": ""
                },
                {
                    "name": "recursive",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dir"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$chmod"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$recursive"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $dir\n   * @param int    $chmod\n   * @param bool   $recursive\n   * @return bool\n   *\/"
        },
        "_delete": {
            "name": "_delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _delete(string $path, bool $full = true, $attempts = 0): bool\n  {\n    $res = false;\n    if ($this->mode === 'nextcloud') {\n      $res = $this->obj->delete($path);\n    } else {\n      if ($this->_is_dir($path)) {\n        $files = $this->_get_items($path, 'both', true);\n        if (!empty($files)) {\n          foreach ($files as $file) {\n            $this->_delete($file);\n          }\n        }\n\n        if ($full) {\n$obj =& $this;\n          set_error_handler(\n            function (int $errno, string $errstr, string $errfile = null, int $errline = null)\n            use ($attempts, $path, &$obj) {\n              if ($attempts >= 3) {\n                X::logError($errno, $errstr, $errfile, $errline);\n              }\n              else {\n                $obj->_delete($path, true, ++$attempts);\n              }\n            },\n            E_WARNING\n          );\n          if ($this->mode === 'ssh') {\n                          $res = @ssh2_sftp_rmdir($this->obj, substr($path, strlen($this->prefix)));\n                        }\n          elseif ($this->mode === 'ftp') {\n                          $res = @ftp_rmdir($this->obj, substr($path, strlen($this->prefix)));\n                        }\n          else {\n                          $res = rmdir($path);\n                        }\n\n          restore_error_handler();          \n          }\n        else {\n          $res = true;\n        }\n      }\n      elseif ($this->_is_file($path)) {\n        if ($this->mode === 'ssh') {\n          try {\n            $res = ssh2_sftp_unlink($this->obj, substr($path, strlen($this->prefix)));\n          } catch (\\Exception $e) {\n            $this->log(X::_('Error in _delete') . ': ' . $e->getMessage() . ' (' . $e->getLine() . ')');\n          }\n        } elseif ($this->mode === 'ftp') {\n          try {\n            $res = ftp_delete($this->obj, substr($path, strlen($this->prefix)));\n          } catch (\\Exception $e) {\n            $this->log(X::_('Error in _delete') . ': ' . $e->getMessage() . ' (' . $e->getLine() . ')');\n          }\n        } else {\n          $res = @unlink($path);\n          if (!$res) {\n            $this->log(X::_('Error in _delete') . ': ' . $path);\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1449,
            "endLine": 1516,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_delete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                },
                {
                    "name": "attempts",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$path"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$full"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $path\n   * @param bool   $full\n   * @return bool\n   *\/"
        },
        "_copy": {
            "name": "_copy",
            "summary": "Copy either the file to the new path or the ocntent of the dir inside the new dir",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _copy(string $source, string $dest): bool\n  {\n    if ($this->mode !== 'nextcloud') {\n      if ($this->_is_file($source)) {\n        return copy($source, $dest);\n      } elseif ($this->_is_dir($source) && $this->_mkdir($dest)) {\n        foreach ($this->_get_items($source, 'both', true) as $it) {\n          $this->_copy($it, $dest . '\/' . X::basename($it));\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1525,
            "endLine": 1540,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_copy",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Copy either the file to the new path or the ocntent of the dir inside the new dir\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dest"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Copy either the file to the new path or the ocntent of the dir inside the new dir\n   * @param string $source\n   * @param string $dest\n   * @return bool\n   *\/"
        },
        "_rename": {
            "name": "_rename",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _rename($source, $dest): bool\n  {\n    if ($this->mode !== 'nextcloud') {\n      $file1 = substr($source, strlen($this->prefix));\n      $file2 = substr($dest, strlen($this->prefix));\n      if ($this->mode === 'ssh') {\n        return ssh2_sftp_rename($this->obj, $file1, $file2);\n      }\n\n      if ($this->mode === 'ftp') {\n        return ftp_rename($this->obj, $file1, $file2);\n      }\n\n      return rename($file1, $file2);\n    } else {\n      return $this->obj->rename($source, $dest);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1548,
            "endLine": 1565,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_rename",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "dest",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$source"
                    },
                    {
                        "tag": "param",
                        "type": "$dest"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $source\n   * @param $dest\n   * @return bool\n   *\/"
        },
        "_get_empty_dirs": {
            "name": "_get_empty_dirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_empty_dirs($path, bool $hidden_is_empty = false): array\n  {\n    $res = [];\n    $all = $this->_get_items($path, 'both', !$hidden_is_empty);\n    $tot = count($all);\n    \/\/ This directory will be added to the result if it is empty or if each of its items is itself an empty directory\n    foreach ($all as $dir) {\n      if (is_dir($dir)) {\n        $empty_dirs = $this->_get_empty_dirs($dir, !$hidden_is_empty);\n        if (in_array($dir, $empty_dirs, true)) {\n          $tot--;\n        }\n\n        \/\/ Each empty subdirectory will be added to the result\n        foreach ($empty_dirs as $e) {\n          $res[] = $e;\n        }\n      }\n    }\n\n    if (!$tot) {\n      $res[] = $path;\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1568,
            "endLine": 1593,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_get_empty_dirs",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "_delete_empty_dirs": {
            "name": "_delete_empty_dirs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _delete_empty_dirs($path, bool $hidden_is_empty = false): int\n  {\n    $num = 0;\n    $all = $this->_get_items($path, 'both', !$hidden_is_empty);\n    $tot = count($all);\n    foreach ($all as $dir) {\n      if (is_dir($dir)) {\n        $num += $this->_delete_empty_dirs($dir, $hidden_is_empty);\n        if (!is_dir($dir)) {\n          $tot--;\n        }\n      }\n    }\n\n    if (!$tot) {\n      $this->_delete($path);\n      $num++;\n    }\n\n    return $num;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1596,
            "endLine": 1616,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_delete_empty_dirs",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "hidden_is_empty",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "_is_file": {
            "name": "_is_file",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _is_file(string $path)\n  {\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->isFile($path);\n    } else {\n      return is_file($path);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1619,
            "endLine": 1626,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_is_file",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_is_dir": {
            "name": "_is_dir",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _is_dir(string $path)\n  {\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->isDir($path);\n    } else {\n      return is_dir($path);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1629,
            "endLine": 1636,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_is_dir",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_filemtime": {
            "name": "_filemtime",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _filemtime($path)\n  {\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->filemtime($path);\n    } else {\n      return filemtime($path);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1639,
            "endLine": 1646,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_filemtime",
            "returns": [],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_filesize": {
            "name": "_filesize",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _filesize($path): ?int\n  {\n    if ($this->mode === 'nextcloud') {\n      return $this->obj->getSize($path);\n    } else {\n      if ($this->_is_file($path)) {\n        return filesize($path);\n      }\n\n      return null;\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1649,
            "endLine": 1660,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_filesize",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "_download": {
            "name": "_download",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _download($file): void\n  {\n    if ($this->_is_file($file)) {\n      if ($this->mode === 'nextcloud') {\n        $this->obj->download($file);\n      } elseif ($this->isFile($file)) {\n        $f = new bbn\\File($file);\n        $f->download();\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1666,
            "endLine": 1676,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_download",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param $file\n   *\/"
        },
        "_upload": {
            "name": "_upload",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\System",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/System.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _upload(array $files, string $path): bool\n  {\n    $success = false;\n    if (!empty($files) && !empty($path)) {\n      foreach ($files as $f) {\n        if (is_file($f['tmp_name'])) {\n          \/\/replace ' ' with '_' like in nextcloud\n          $full_name = $this->getRealPath($path) . '\/' . str_replace(' ', '_', $f['name']);\n          if (!$this->exists($full_name)) {\n            if (move_uploaded_file($f['tmp_name'], $full_name)) {\n              return $success = true;\n            }\n          }\n        }\n      }\n    }\n\n    return $success;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1679,
            "endLine": 1697,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_upload",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "files",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        }
    },
    "properties": {
        "cn": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "description": "The connection stream only if it is different from the original connection"
                    }
                ]
            },
            "parent": false,
            "value": ""
        },
        "error_stream": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "obj": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed",
                        "description": "The connection stream"
                    }
                ]
            },
            "parent": false,
            "value": ""
        },
        "prefix": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The connection prefix (with connection infos)"
                    }
                ]
            },
            "parent": false,
            "value": ""
        },
        "mode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The mode of connecti0n (ftp, ssh, or local)"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "current": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string",
                        "description": "The current directory"
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "previous": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "host": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": null
        },
        "timeout": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\System"
            },
            "declaring_trait": "bbn\\File\\System",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": 10
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        }
    },
    "staticProperties": [],
    "constants": null,
    "uses": {
        "bbn": "bbn",
        "bbn\\X": "X",
        "bbn\\Str": "Str"
    },
    "dummyComments": [
        "\/**\n * @category File\n * @package bbn\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @license MIT\n * @link https:\/\/php.bbn.io\n *\n * \/\/$encodings = ['UTF-8', 'WINDOWS-1252', 'ISO-8859-1', 'ISO-8859-15'];\n * $enc = mb_detect_encoding($f, $encodings);\n * if ( $enc !== 'UTF-8' ){\n *   $f = html_entity_decode(htmlentities($f, ENT_QUOTES, $enc), ENT_QUOTES , 'UTF-8');\n * }\n *\n *\/",
        "\/**\n * Class system\n * @package bbn\\File\n *\/"
    ],
    "summary": "Class system",
    "description": "",
    "description_parts": []
}