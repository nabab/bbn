{
    "doc": {
        "description": "Image Class\n\n\nThis class is used to upload, delete and transform images, and create thumbnails.\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Files ressources",
            "license": "http:\/\/www.opensource.org\/licenses\/lgpl-license.php LGPL",
            "version": "0.2r89",
            "package": "bbn\\File",
            "todo": "Add a static function and var to check for available libraries (Imagick\/GD)"
        }
    },
    "name": "bbn\\File\\Image",
    "namespace": true,
    "realName": "Image",
    "realNamespace": "bbn\\File",
    "traits": [],
    "interfaces": {
        "Stringable": {
            "name": "Stringable"
        }
    },
    "fileName": "\/File\/Image.php",
    "startLine": 28,
    "endLine": 1187,
    "numMethods": 43,
    "numProperties": 24,
    "numConstants": 0,
    "numStaticProperties": 5,
    "interfaceNames": [
        "Stringable"
    ],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\File",
    "isSubclassOf": false,
    "defaultProperties": {
        "imageClassMode": "",
        "allowed_extensions": [
            "jpg",
            "gif",
            "jpeg",
            "png",
            "svg",
            "webp"
        ],
        "defaultThumbSizes": [
            [
                false,
                500
            ],
            [
                false,
                250
            ],
            [
                false,
                125
            ],
            [
                false,
                96
            ],
            [
                false,
                48
            ]
        ],
        "exif": false,
        "max_width": 5000,
        "ext2": null,
        "w": null,
        "h": null,
        "img": null,
        "size": null,
        "ext": null,
        "fs": null,
        "hash": null,
        "path": null,
        "name": null,
        "file": null,
        "title": null,
        "uploaded": 0,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\File",
    "shortName": "Image",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "removeAlphaImagick": {
            "name": "removeAlphaImagick",
            "summary": "Removes the alpha channel from an image (Imagick)",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": true,
            "visibility": "private",
            "final": false,
            "code": "  private static function removeAlphaImagick(\\Imagick $img)\n  {\n    if ($img->getImageAlphaChannel()) {\n      $img->setImageBackgroundColor('#FFFFFF');\n      $img->setImageAlphaChannel(11);\n      \/\/$img->mergeImageLayers(\\Imagick::LAYERMETHOD_FLATTEN);\n      \/\/$img->transformImageColorspace(\\Imagick::COLORSPACE_RGB);\n    }\n\n    return $img;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 64,
            "endLine": 74,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "removeAlphaImagick",
            "returns": [],
            "arguments": [
                {
                    "name": "img",
                    "position": 0,
                    "type": "Imagick",
                    "type_arr": [
                        "Imagick"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The Imagick object"
                }
            ],
            "doc": {
                "description": "Removes the alpha channel from an image (Imagick)\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "\\Imagick",
                        "name": "$img",
                        "description": "The Imagick object"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Removes the alpha channel from an image (Imagick)\n   *\n   * @param \\Imagick $img The Imagick object\n   * @return \\Imagick\n   *\/"
        },
        "jpg2pdf": {
            "name": "jpg2pdf",
            "summary": "Converts one or more jpg image(s) to a pdf file. If the pdf file doesn't exist will be created.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "bbn\\X::dump(bbn\\File\\Image::jpg2pdf([\"\/home\/data\/test\/two.jpg\",\"\/home\/data\/test\/one.jpeg\"], \"\/home\/data\/test\/doc.pdf\"));\n\/\/ (string) \"\/home\/data\/test\/doc.pdf\""
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function jpg2pdf($jpg, $pdf)\n  {\n    if (class_exists('\\\\Imagick')) {\n      if (\\is_array($jpg)) {\n        $img = new \\Imagick();\n        $img->setResolution(200, 200);\n        if (\\count($jpg) === 1) {\n          $img->readImage($jpg[0]);\n        }\n        else {\n          $img->readImages($jpg);\n        }\n\n        $img->setImageFormat('pdf');\n        if (\\count($jpg) === 1) {\n          $img->writeImage($pdf);\n        }\n        else {\n          $img->writeImages($pdf, 1);\n        }\n\n        return $pdf;\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 89,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "jpg2pdf",
            "returns": [],
            "arguments": [
                {
                    "name": "jpg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path of jpg file(s) to convert"
                },
                {
                    "name": "pdf",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path of the pdf file"
                }
            ],
            "doc": {
                "description": "Converts one or more jpg image(s) to a pdf file. If the pdf file doesn't exist will be created.\n\n```php\nbbn\\X::dump(bbn\\File\\Image::jpg2pdf([\"\/home\/data\/test\/two.jpg\",\"\/home\/data\/test\/one.jpeg\"], \"\/home\/data\/test\/doc.pdf\"));\n\/\/ (string) \"\/home\/data\/test\/doc.pdf\"\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$jpg",
                        "description": "The path of jpg file(s) to convert"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$pdf",
                        "description": "The path of the pdf file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Converts one or more jpg image(s) to a pdf file. If the pdf file doesn't exist will be created.\n   *\n   * ```php\n   * bbn\\X::dump(bbn\\File\\Image::jpg2pdf([\"\/home\/data\/test\/two.jpg\",\"\/home\/data\/test\/one.jpeg\"], \"\/home\/data\/test\/doc.pdf\"));\n   * \/\/ (string) \"\/home\/data\/test\/doc.pdf\"\n   * ```\n   *\n   * @param array  $jpg The path of jpg file(s) to convert\n   * @param string $pdf The path of the pdf file\n   * @return string|false\n   *\/"
        },
        "pdf2jpg": {
            "name": "pdf2jpg",
            "summary": "Converts pdf file to jpg image(s).",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "bbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\"));\n\/\/ (string)  \"\/home\/data\/test\/doc.jpg\"\nbbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\",'', all));\n\/\/ (array) [\"\/home\/data\/test\/doc-0.jpg\",\"\/home\/data\/test\/doc-1.jpg\"]\nbbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\",'\/home\/data\/test\/Folder\/image.jpg', all));\n\/\/ (array) [\"\/home\/data\/test\/Folder\/image-0.jpg\", \"\/home\/data\/test\/Folder\/image-1.jpg\"],"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function pdf2jpg($pdf, $jpg='', $num=0)\n  {\n    if (class_exists('\\\\Imagick')) {\n      $img = new \\Imagick();\n      $img->setResolution(200, 200);\n      $img->readImage($pdf);\n      $img->setFormat('jpg');\n      if (empty($jpg)) {\n        $dir = X::dirname($pdf);\n        if (!empty($dir)) {\n          $dir .= '\/';\n        }\n\n        $f   = Str::fileExt($pdf, 1);\n        $jpg = $dir.$f[0].'.jpg';\n      }\n\n      if ($num !== 'all') {\n        $img->setIteratorIndex($num);\n        $img = self::removeAlphaImagick($img);\n        if ($img->writeImage($jpg)) {\n          return $jpg;\n        }\n      }\n      else {\n        $pages_number = $img->getNumberImages();\n        $f            = Str::fileExt($jpg, 1);\n        $dir          = X::dirname($jpg);\n        $r            = [];\n        if (!empty($dir)) {\n          $dir .= '\/';\n        }\n\n        for ($i = 0; $i < $pages_number; $i++){\n          $img->setIteratorIndex($i);\n          $img      = self::removeAlphaImagick($img);\n          $filename = $dir.$f[0];\n          if ($pages_number > 1) {\n            $l = \\strlen((string)$i);\n            if ($l < $pages_number) {\n              $filename .= '-'.str_repeat('0', \\strlen($pages_number) - $l).$i;\n            }\n          }\n\n          $filename .= '.'.$f[1];\n          if ($img->writeImage($filename)) {\n            array_push($r, $filename);\n          }\n        }\n\n        if (\\count($r) === $pages_number) {\n          return $r;\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 135,
            "endLine": 192,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "pdf2jpg",
            "returns": [],
            "arguments": [
                {
                    "name": "pdf",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The path of pdf file to convert"
                },
                {
                    "name": "jpg",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "The destination filename. If empty is used the same path of pdf. Default: empty."
                },
                {
                    "name": "num",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": "",
                    "description": "The index page of pdf file to convert. If set 'all' all pages to convert. Default: 0(first page)."
                }
            ],
            "doc": {
                "description": "Converts pdf file to jpg image(s).\n\n```php\nbbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\"));\n\/\/ (string)  \"\/home\/data\/test\/doc.jpg\"\nbbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\",'', all));\n\/\/ (array) [\"\/home\/data\/test\/doc-0.jpg\",\"\/home\/data\/test\/doc-1.jpg\"]\nbbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\",'\/home\/data\/test\/Folder\/image.jpg', all));\n\/\/ (array) [\"\/home\/data\/test\/Folder\/image-0.jpg\", \"\/home\/data\/test\/Folder\/image-1.jpg\"],\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$pdf",
                        "description": "The path of pdf file to convert"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$jpg",
                        "description": "The destination filename. If empty is used the same path of pdf. Default: empty."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$num",
                        "description": "The index page of pdf file to convert. If set 'all' all pages to convert. Default: 0(first page)."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Converts pdf file to jpg image(s).\n   *\n     * ```php\n     * bbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\"));\n     * \/\/ (string)  \"\/home\/data\/test\/doc.jpg\"\n     * bbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\",'', all));\n     * \/\/ (array) [\"\/home\/data\/test\/doc-0.jpg\",\"\/home\/data\/test\/doc-1.jpg\"]\n     * bbn\\X::dump(bbn\\File\\Image::pdf2jpg(\"\/home\/data\/test\/doc.pdf\",'\/home\/data\/test\/Folder\/image.jpg', all));\n   * \/\/ (array) [\"\/home\/data\/test\/Folder\/image-0.jpg\", \"\/home\/data\/test\/Folder\/image-1.jpg\"],\n     * ```\n   *\n   * @param string $pdf The path of pdf file to convert\n   * @param string $jpg The destination filename. If empty is used the same path of pdf. Default: empty.\n   * @param int    $num The index page of pdf file to convert. If set 'all' all pages to convert. Default: 0(first page).\n   * @return string|array\n   *\/"
        },
        "svg2png": {
            "name": "svg2png",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function svg2png($svg, $filename)\n  {\n    if (class_exists('\\\\Imagick')) {\n      $img = new \\Imagick();\n      if (strpos($svg, '<svg') !== 0) {\n        $svg = @file_get_contents($svg);\n      }\n\n      $img->setImageFormat(\"png24\");\n      $res = $img->writeImage($filename);\n      $img->clear();\n      $img->destroy();\n      return $res;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 195,
            "endLine": 211,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "svg2png",
            "returns": [],
            "arguments": [
                {
                    "name": "svg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filename",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setImageClassMode": {
            "name": "setImageClassMode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function setImageClassMode(string $mode) \n  {\n    $mode = strtolower($mode);\n    if (strpos($mode, 'gd') === 0) {\n      if (!function_exists('\\\\imagecreate')) {\n        throw new Exception(X::_(\"The GD library is not installed\"));\n      }\n\n      self::$imageClassMode = 'gd';\n    }\n    else {\n      if (!class_exists('\\\\Imagick')) {\n        throw new Exception(X::_(\"The Imagick library is not installed\"));\n      }\n\n      self::$imageClassMode = 'imagick';\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 214,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setImageClassMode",
            "returns": [],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isImagick": {
            "name": "isImagick",
            "summary": "Returns true if the current library used is Imagick",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isImagick(): bool\n  {\n    return self::$imageClassMode === 'imagick';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 239,
            "endLine": 242,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isImagick",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if the current library used is Imagick\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if the current library used is Imagick\n   *\n   * @return boolean\n   *\/"
        },
        "__construct": {
            "name": "__construct",
            "summary": "Construct",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct($file, System $fs = null)\n  {\n    parent::__construct($file, $fs);\n    if (!\\in_array($this->ext, bbn\\File\\Image::$allowed_extensions)) {\n      $this->name  = false;\n      $this->path  = false;\n      $this->file  = false;\n      $this->size  = false;\n      $this->title = false;\n    }\n    elseif (!self::$imageClassMode) {\n      self::setImageClassMode(class_exists('\\\\Imagick') ? 'imagick' : 'gd');\n    }\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$file=new bbn\\File('\/home\/user\/Desktop\/test.txt');"
                    }
                ],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct($file, File\\System $fs = null)\n  {\n    $this->fs = $fs ?: new File\\System();\n    if ( \\is_array($file) )\n    {\n      if ( isset($file['name'],$file['tmp_name']) )\n      {\n        $this->path = '';\n        $this->name = $file['name'];\n        $this->size = $file['size'];\n        $file = $file['tmp_name'];\n      }\n    }\n    else if ( \\is_string($file) )\n    {\n      $file = trim($file);\n      if (strrpos($file,'\/'))\n      {\n        \/* The -2 in strrpos means that if there is a final \/, it will be kept in the file name *\/\n        $this->name = substr($file,strrpos($file,'\/',-2)+1);\n        $this->path = substr($file,0,-\\strlen($this->name));\n        if ( substr($this->path,0,2) == '\/\/' ){\n          $this->path = 'http:\/\/'.substr($this->path,2);\n        }\n      }\n      else\n      {\n        $this->name = $file;\n        $this->path = '.\/';\n      }\n    }\n\n    if ( \\is_string($file) && is_file($file) ){\n      $this->file = $file;\n      $this->getExtension();\n    }\n    else{\n      $this->getExtension();\n      $this->make();\n    }\n\n  }",
                "parent": false,
                "trait": false,
                "startLine": 77,
                "endLine": 118,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "file",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "fs",
                        "position": 1,
                        "type": "null|bbn\\File\\System",
                        "type_arr": [
                            "null",
                            "bbn\\File\\System"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Constructor.\n\n```php\n$file=new bbn\\File('\/home\/user\/Desktop\/test.txt');\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "mixed",
                            "name": "$file"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * ```php\n   * $file=new bbn\\File('\/home\/user\/Desktop\/test.txt');\n   * ```\n   *\n   * @param mixed $file\n   * @return $this\n   *\/"
            },
            "trait": false,
            "startLine": 249,
            "endLine": 262,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fs",
                    "position": 1,
                    "type": "null|bbn\\File\\System",
                    "type_arr": [
                        "null",
                        "bbn\\File\\System"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Construct\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n     * Construct\n     * @return void\n     *\/"
        },
        "__toString": {
            "name": "__toString",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __toString()\n  {\n    if ($this->test()) {\n      if (!headers_sent()) {\n        header('Content-Type: image\/'.$this->ext2);\n      }\n\n      return (string)$this->img;\n    }\n\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 265,
            "endLine": 276,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "__toString",
            "returns": [
                "string"
            ],
            "arguments": []
        },
        "getImageObject": {
            "name": "getImageObject",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getImageObject()\n  {\n    if ($this->test()) {\n      return $this->img;\n    }\n\n  }",
            "parent": false,
            "trait": false,
            "startLine": 279,
            "endLine": 285,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getImageObject",
            "returns": [],
            "arguments": []
        },
        "getExtension": {
            "name": "getExtension",
            "summary": "Returns the extension of the image. If the file has jpg extension will return 'jpeg'.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getExtension());\n\/\/ (string) \"jpeg\""
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getExtension()\n  {\n    parent::getExtension();\n    if (!$this->ext2 && $this->file) {\n      if (function_exists('exif_imagetype')) {\n        if (exif_imagetype($this->file)) {\n          if (!in_array($this->ext, bbn\\File\\Image::$allowed_extensions)) {\n            $this->ext = false;\n          }\n        }\n        else{\n          $this->ext = false;\n        }\n      }\n\n      if ($this->ext) {\n        $this->ext2 = $this->ext;\n        if ($this->ext2 === 'jpg') {\n          $this->ext2 = 'jpeg';\n        }\n      }\n    }\n\n    return $this->ext;\n  }",
            "parent": {
                "name": "getExtension",
                "summary": "Return the extension of the file.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$file = new File('C:\/Test\/file.txt');\nX::dump($file->getExtension());\n\/\/(string) 'txt'"
                    }
                ],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getExtension()\n  {\n    if ($this->name && is_null($this->ext)) {\n      if (strrpos($this->name, '.')) {\n        $p = Str::fileExt($this->name, 1);\n        $this->ext = $p[1];\n        $this->title = $p[0];\n      }\n      else{\n        $this->ext = '';\n        $this->title = substr($this->name,-1) === '\/' ? substr($this->name,0,-1) : $this->name;\n      }\n    }\n\n    return $this->ext ?: '';\n  }",
                "parent": false,
                "trait": false,
                "startLine": 169,
                "endLine": 184,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getExtension",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Return the extension of the file.\n\n```php\n$file = new File('C:\/Test\/file.txt');\nX::dump($file->getExtension());\n\/\/(string) 'txt'\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the extension of the file.\n   *\n   * ```php\n   * $file = new File('C:\/Test\/file.txt');\n   * X::dump($file->getExtension());\n   * \/\/(string) 'txt'\n   * ```\n   *\n   * @return string|false\n   *\/"
            },
            "trait": false,
            "startLine": 299,
            "endLine": 323,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getExtension",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the extension of the image. If the file has jpg extension will return 'jpeg'.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getExtension());\n\/\/ (string) \"jpeg\"\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the extension of the image. If the file has jpg extension will return 'jpeg'.\n   *\n     * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * bbn\\X::dump($img->getExtension());\n     * \/\/ (string) \"jpeg\"\n   * ```\n   *\n     * @return string\n     *\/"
        },
        "test": {
            "name": "test",
            "summary": "Tests if the object is a image.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->test());\n\/\/ (bool) true\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/file.doc\");\nbbn\\X::dump($img->test());\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->make()) {\n      if ($this->error) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 340,
            "endLine": 351,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Tests if the object is a image.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->test());\n\/\/ (bool) true\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/file.doc\");\nbbn\\X::dump($img->test());\n\/\/ (bool) false\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Tests if the object is a image.\n   *\n   * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * bbn\\X::dump($img->test());\n     * \/\/ (bool) true\n     * $img = new bbn\\File\\Image(\"\/home\/data\/test\/file.doc\");\n   * bbn\\X::dump($img->test());\n     * \/\/ (bool) false\n   * ```\n   *\n     * @return boolean\n     *\/"
        },
        "make": {
            "name": "make",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function make()\n  {\n    parent::make();\n\n    \/* For images as string - to implement\n    if ( class_exists('\\\\Imagick') )\n    {\n     $this->img = new \\Imagick();\n     $this->img->readImageBlob(base64_decode($this->file));\n    }\n    else if ( function_exists('imagecreatefromstring') )\n     $this->img = imagecreatefromstring($this->file);\n    *\/\n    if ($this->file) {\n      if (!$this->img) {\n        if (self::isImagick()) {\n          try{\n            $this->img = new \\Imagick($this->file);\n            switch ($this->getExtension()) {\n              case 'gif':\n                $this->img->setInterlaceScheme(\\Imagick::INTERLACE_GIF);\n                break;\n\n              case 'jpeg':\n              case 'jpg':\n                $this->img->setInterlaceScheme(\\Imagick::INTERLACE_JPEG);\n                break;\n\n              case 'png':\n                $this->img->setInterlaceScheme(\\Imagick::INTERLACE_PNG);\n                break;\n\n              default:\n                $this->img->setInterlaceScheme(\\Imagick::INTERLACE_UNDEFINED);\n            }\n\n            $this->w = $this->img->getImageWidth();\n            $this->h = $this->img->getImageHeight();\n          }\n          catch (\\Exception $e){\n            $this->img   = false;\n            $this->error = X::_(\"There has been a problem\");\n          }\n        }\n        elseif (function_exists('imagecreatefrom'.$this->ext2)) {\n          if ($this->img = \\call_user_func('imagecreatefrom'.$this->ext2, $this->file)) {\n            imageinterlace($this->img, true);\n            $this->w = imagesx($this->img);\n            $this->h = imagesy($this->img);\n            if (imagealphablending($this->img,true)) {\n              imagesavealpha($this->img,true);\n            }\n          }\n          else{\n            $this->error = X::_(\"There has been a problem\");\n          }\n        }\n        else{\n          $this->error = X::_(\"There has been a problem\");\n        }\n      }\n    }\n    else{\n      $this->error = X::_(\"There has been a problem\");\n    }\n\n    return $this;\n  }",
            "parent": {
                "name": "make",
                "summary": "Creates a temporary file in tmp directory.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function make()\n  {\n    if ( !$this->file && strpos($this->path,'http:\/\/') === 0 ){\n      $d = getcwd();\n      chdir(__DIR__);\n      chdir('..\/tmp');\n      $f = tempnam('.','image');\n      try{\n        $c = file_get_contents($this->path.$this->name);\n        if ( file_put_contents($f, $c) ){\n          if ( substr($this->name,-1) == '\/' ){\n            $this->name = substr($this->name,0,-1);\n          }\n          chmod($f, 0644);\n          $this->file = $f;\n          $this->path = getcwd();\n        }\n        else{\n          $this->error = 'Impossible to get the file '.$this->path.$this->name;\n        }\n      }\n      catch ( Error $e )\n        { $this->error = 'Impossible to get the file '.$this->path.$this->name; }\n      chdir($d);\n    }\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 192,
                "endLine": 218,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "make",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Creates a temporary file in tmp directory.\n",
                    "params": [],
                    "return": "",
                    "todo": {
                        "tag": "todo",
                        "text": "of adjusting"
                    }
                },
                "comments": "  \/**\n   * Creates a temporary file in tmp directory.\n   *\n   * @todo of adjusting\n   * @return file\n   *\/"
            },
            "trait": false,
            "startLine": 358,
            "endLine": 425,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "make",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n     *\n     * @return void\n     *\/"
        },
        "display": {
            "name": "display",
            "summary": "Sends the image with Content-Type.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->display();"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function display()\n  {\n    if ($this->test()) {\n      if (!headers_sent()) {\n        header('Content-Type: image\/'.$this->ext2);\n      }\n\n      if (class_exists('\\\\Imagick')) {\n          echo $this;\n          $this->img->clear();\n          $this->img->destroy();\n      }\n      else{\n          \\call_user_func('image'.$this->ext2, $this->img);\n            imagedestroy($this->img);\n      }\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 438,
            "endLine": 456,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "display",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Sends the image with Content-Type.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->display();\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Sends the image with Content-Type.\n     *\n     * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->display();\n     * ```\n     *\n     * @return image\n     *\/"
        },
        "save": {
            "name": "save",
            "summary": "Save the image in a new destination if given or overwrite the file (default).",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$new_file=\"\/home\/data\/test\/Folder_test\/image_test.jpeg\";\n$img2=new bbn\\File\\Image($new_file);\nbbn\\X::dump($img2->test());\n\/\/ (bool) false\nbbn\\X::dump($img->save($new_file));\nbbn\\X::dump($img2->test());\n\/\/ (bool) true"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function save($dest=false)\n  {\n    if ($this->test()) {\n      if (!$dest) {\n        $dest = $this->file;\n      }\n\n      $ext = Str::fileExt($dest);\n      if (in_array($ext, self::$allowed_extensions)) {\n        if ($ext === 'jpg') {\n          $ext = 'jpeg';\n        }\n\n        if (self::isImagick()) {\n          if ($ext !== $this->ext2) {\n            $this->img->setImageFormat($ext);\n            $this->img->setOption('webp:exact', 'true'); \n          }\n\n          $this->img->writeImage($dest);\n        }\n        elseif (function_exists('image'.$ext)) {\n          if (!\\call_user_func('image'.$ext, $this->img, $dest)) {\n            $this->error = X::_(\"The function %s doesn't exist\", 'image'.$ext);\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
            "parent": {
                "name": "save",
                "summary": "That feature saves the file as a parameter, and accepts a string that contains the path where to save.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$file->save('\/home\/user\/desktop\/');"
                    }
                ],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function save($dest='.\/')\n  {\n    $new_name = false;\n    if ( substr($dest,-1) === '\/' ){\n      if ( is_dir($dest) ){\n        $new_name = 0;\n      }\n    }\n    else if ( is_dir($dest) ){\n      $dest .= '\/';\n      $new_name = 0;\n    }\n    else if ( is_dir(substr($dest,0,strrpos($dest,'\/'))) ){\n      $new_name = 1;\n    }\n    if ( $new_name !== false ){\n      if ( $new_name === 0 ){\n        $dest .= $this->name;\n      }\n      if ( null !== $_FILES ){\n        move_uploaded_file($this->file,$dest);\n        $this->file = $dest;\n        $this->uploaded = 1;\n      }\n      else{\n        copy($this->file, $dest);\n      }\n    }\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 310,
                "endLine": 339,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "save",
                "returns": [],
                "arguments": [
                    {
                        "name": "dest",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": ".\/",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "That feature saves the file as a parameter, and accepts a string that contains the path where to save.\n\n```php\n $file->save('\/home\/user\/desktop\/');\n```\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$dest"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * That feature saves the file as a parameter, and accepts a string that contains the path where to save.\n   *\n   * ```php\n   *  $file->save('\/home\/user\/desktop\/');\n   * ```\n   *\n   * @param string $dest\n   * @return file\n   *\/"
            },
            "trait": false,
            "startLine": 475,
            "endLine": 505,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "save",
            "returns": [],
            "arguments": [
                {
                    "name": "dest",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "The destination of the file to save. Default = false, the file will overwrited."
                }
            ],
            "doc": {
                "description": "Save the image in a new destination if given or overwrite the file (default).\n\n```php\n$new_file=\"\/home\/data\/test\/Folder_test\/image_test.jpeg\";\n$img2=new bbn\\File\\Image($new_file);\nbbn\\X::dump($img2->test());\n\/\/ (bool) false\nbbn\\X::dump($img->save($new_file));\nbbn\\X::dump($img2->test());\n\/\/ (bool) true\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$dest",
                        "description": "The destination of the file to save. Default = false, the file will overwrited."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n     * Save the image in a new destination if given or overwrite the file (default).\n     *\n     * ```php\n     * $new_file=\"\/home\/data\/test\/Folder_test\/image_test.jpeg\";\n     * $img2=new bbn\\File\\Image($new_file);\n     * bbn\\X::dump($img2->test());\n     * \/\/ (bool) false\n     * bbn\\X::dump($img->save($new_file));\n     * bbn\\X::dump($img2->test());\n     * \/\/ (bool) true\n     * ```\n     *\n     * @param string $dest The destination of the file to save. Default = false, the file will overwrited.\n     * @return image\n     *\/"
        },
        "getWidth": {
            "name": "getWidth",
            "summary": "If the file is an image will return its width in pixel.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getWidth());\n\/\/ (int) 265"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getWidth()\n  {\n    if ($this->w) {\n      return $this->w;\n    }\n\n    if ($this->test()) {\n      if (isset($this->w)) {\n        return $this->w;\n      }\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 519,
            "endLine": 532,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getWidth",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "If the file is an image will return its width in pixel.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getWidth());\n\/\/ (int) 265\n```\n",
                "params": [],
                "return": "| false"
            },
            "comments": "  \/**\n   * If the file is an image will return its width in pixel.\n   *\n     * ```php\n     * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n     * bbn\\X::dump($img->getWidth());\n     * \/\/ (int) 265\n   * ```\n   *\n     * @return int | false\n     *\/"
        },
        "getHeight": {
            "name": "getHeight",
            "summary": "If the file is an image will return its height in pixel.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getHeight());\n\/\/ (int) 190"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHeight()\n  {\n    if ($this->h) {\n      return $this->h;\n    }\n\n    if ($this->test()) {\n      if (isset($this->h)) {\n        return $this->h;\n      }\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 546,
            "endLine": 559,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHeight",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "If the file is an image will return its height in pixel.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getHeight());\n\/\/ (int) 190\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * If the file is an image will return its height in pixel.\n   *\n     * ```php\n     * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n     * bbn\\X::dump($img->getHeight());\n     * \/\/ (int) 190\n   * ```\n   *\n     * @return int|false\n     *\/"
        },
        "resize": {
            "name": "resize",
            "summary": "Resize the width and the height of the image. If is given only width or height the other dimension will be set on auto.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function resize($w = null, int $h = null, bool $crop = false, int $max_w = null, int $max_h = null): self\n  {\n    if (!$this->test()) {\n      throw new Exception(X::_(\"The image is not valid\"));\n    }\n\n    if (\\is_array($w)) {\n        $max_w = $w['max_w'] ?? null;\n        $max_h = $w['max_h'] ?? null;\n        $crop  = $w['crop'] ?? false;\n        $h     = $w['h'] ?? null;\n        $w     = $w['w'] ?? null;\n    }\n\n\n    if ($w || $h) {\n      if ($w && $h) {\n        $oratio = $this->w \/ $this->h;\n        $nratio = $w \/ $h;\n        if ($crop && ($oratio != $nratio)) {\n          if ($oratio < $nratio) {\n            $w2 = $w;\n            $h2 = floor(($w2 * $this->h) \/ $this->w);\n            $x  = 0;\n            $y  = floor(($h2 - $h) \/ 2);\n          }\n          else {\n            $h2 = $h;\n            $w2 = floor(($h2 * $this->w) \/ $this->h);\n            $y  = 0;\n            $x  = floor(($w2 - $w) \/ 2);\n          }\n        }\n        else{\n          $w2 = $w;\n          $h2 = $h;\n        }\n      }\n      else {\n        if ($w > 0) {\n          $w2 = $w;\n          $h2 = floor(($w2 * $this->h) \/ $this->w);\n        }\n\n        if ($h > 0) {\n          if (isset($h2)) {\n            if ($h2 > $h) {\n              $h2 = $h;\n              $w2 = floor(($h2 * $this->w) \/ $this->h);\n            }\n          }\n          else{\n            $h2 = $h;\n            $w2 = floor(($h2 * $this->w) \/ $this->h);\n          }\n        }\n      }\n\n      if (isset($w2, $h2)) {\n        if (self::isImagick()) {\n          $res = $this->img->resizeImage($w2, $h2, \\Imagick::FILTER_LANCZOS, 1);\n        }\n        else{\n          $image = imagecreatetruecolor($w2,$h2);\n          if (in_array($this->ext, ['png', 'gif', 'svg', 'webp'])) {\n            imagecolorallocatealpha($image, 0, 0, 0, 127);\n            imagealphablending($image, false);\n            imagesavealpha($image, true);\n          }\n\n          $res       = imagecopyresampled($image, $this->img, 0, 0, 0, 0, $w2, $h2, $this->w, $this->h);\n          $this->img = $image;\n        }\n\n        if ($res === true) {\n          if ($crop && isset($x, $y) && $this->crop($w, $h, $x, $y)) {\n            $this->w = $w;\n            $this->h = $h;\n          }\n          else {\n            $this->w = $w2;\n            $this->h = $h2;\n          }\n        }\n        else{\n          $this->error = X::_(\"There has been a problem while resizing\");\n        }\n      }\n      else{\n        $this->error = X::_(\"Width and\/or height is null\");\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 588,
            "endLine": 682,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "resize",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "w",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new width."
                },
                {
                    "name": "h",
                    "position": 1,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The new height."
                },
                {
                    "name": "crop",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If cropping the image. Default = false."
                },
                {
                    "name": "max_w",
                    "position": 3,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "w The maximum value for new width."
                },
                {
                    "name": "max_h",
                    "position": 4,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "h The maximum valure for new height."
                }
            ],
            "doc": {
                "description": "Resize the width and the height of the image. If is given only width or height the other dimension will be set on auto.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int|bool",
                        "name": "$w",
                        "description": "The new width."
                    },
                    {
                        "tag": "param",
                        "type": "int|bool",
                        "name": "$h",
                        "description": "The new height."
                    },
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$crop",
                        "description": "If cropping the image. Default = false."
                    },
                    {
                        "tag": "param",
                        "type": "int|bool",
                        "name": "$max",
                        "description": "w The maximum value for new width."
                    },
                    {
                        "tag": "param",
                        "type": "int|bool",
                        "name": "$max",
                        "description": "h The maximum valure for new height."
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "$max_h and $max_w doesn't work.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::hdump($img->getWidth(),$img->getHeight());\n\/\/ (int) 345  146\nbbn\\X::hdump($img->resize(200,\"\" ));\nbbn\\X::hdump($img->getWidth(),$img->getHeight());\n\/\/ (int) 200  84\nbbn\\X::hdump($img->getWidth(),$img->getHeight());\n\/\/ (int) 345  146\nbbn\\X::dump($img->resize(205, 100, 1));\nbbn\\X::dump($img->getWidth(),$img->getHeight());\n\/\/ (int) 205  100\n```"
                }
            },
            "comments": "  \/**\n   * Resize the width and the height of the image. If is given only width or height the other dimension will be set on auto.\n     *\n     * @todo $max_h and $max_w doesn't work.\n     *\n   * ```php\n     * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n     * bbn\\X::hdump($img->getWidth(),$img->getHeight());\n     * \/\/ (int) 345  146\n     * bbn\\X::hdump($img->resize(200,\"\" ));\n     * bbn\\X::hdump($img->getWidth(),$img->getHeight());\n     * \/\/ (int) 200  84\n     * bbn\\X::hdump($img->getWidth(),$img->getHeight());\n     * \/\/ (int) 345  146\n     * bbn\\X::dump($img->resize(205, 100, 1));\n   * bbn\\X::dump($img->getWidth(),$img->getHeight());\n   * \/\/ (int) 205  100\n   * ```\n   *\n   * @param int|bool $w     The new width.\n   * @param int|bool $h     The new height.\n   * @param boolean  $crop  If cropping the image. Default = false.\n   * @param int|bool $max_w The maximum value for new width.\n   * @param int|bool $max_h The maximum valure for new height.\n   * @return Image\n   *\/"
        },
        "autoresize": {
            "name": "autoresize",
            "summary": "Resize the image with constant values, if the width is not given it will be set to auto.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function autoresize(int $w = null, int $h = null)\n  {\n    if (!$w) {\n      $w = \\defined('BBN_MAX_WIDTH') ? BBN_MAX_WIDTH : self::$max_width;\n    }\n\n    if (!$h) {\n      $h = \\defined('BBN_MAX_HEIGHT') ? BBN_MAX_HEIGHT : self::$max_height;\n    }\n\n    if ($this->test() && is_numeric($w) && is_numeric($h)) {\n      if ($this->w > $w) {\n          $this->resize($w);\n      }\n\n      if ($this->h > $h) {\n          $this->resize(false,$h);\n      }\n    }\n    else{\n        $this->error = X::_(\"Arguments must be numeric\");\n    }\n\n      return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 702,
            "endLine": 726,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "autoresize",
            "returns": [],
            "arguments": [
                {
                    "name": "w",
                    "position": 0,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "default  BBN_MAX_WIDTH"
                },
                {
                    "name": "h",
                    "position": 1,
                    "type": "null|int",
                    "type_arr": [
                        "null",
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "default BBN_MAX_HEIGHT"
                }
            ],
            "doc": {
                "description": "Resize the image with constant values, if the width is not given it will be set to auto.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$w",
                        "description": "default  BBN_MAX_WIDTH"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$h",
                        "description": "default BBN_MAX_HEIGHT"
                    }
                ],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "BBN_MAX_WIDTH and BBN_MAX_HEIGHT ?\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getWidth(),$img->getHeight());\n\/\/ (int) 345  146\n$img->autoresize(\"\", 100);\nbbn\\X::dump($img->getWidth(),$img->getHeight());\n\/\/ (int) 236  100\n```"
                }
            },
            "comments": "  \/**\n   * Resize the image with constant values, if the width is not given it will be set to auto.\n   * @todo BBN_MAX_WIDTH and BBN_MAX_HEIGHT ?\n   *\n   * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * bbn\\X::dump($img->getWidth(),$img->getHeight());\n   * \/\/ (int) 345  146\n   * $img->autoresize(\"\", 100);\n   * bbn\\X::dump($img->getWidth(),$img->getHeight());\n   * \/\/ (int) 236  100\n   * ```\n   *\n   * @param integer $w default  BBN_MAX_WIDTH\n   * @param integer $h default BBN_MAX_HEIGHT\n   * @return image\n   *\/"
        },
        "crop": {
            "name": "crop",
            "summary": "Returns a crop of the image.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getWidth(),$img->getHeight());\n\/\/ (int) 345  146\n$img->crop(10, 10, 30, 30)->save(\"\/home\/data\/test\/img2.jpeg\");\n$img2 = new \\bbn\\File\\Image(\"\/home\/data\/test\/img2.jpeg\");\nbbn\\X::hdump($img2->getWidth(),$img2->getHeight());\n\/\/ (int) 10  10"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function crop($w, $h, $x, $y): self\n  {\n    if ($this->test()) {\n        $args = \\func_get_args();\n      foreach ($args as $arg){\n        if (!is_numeric($arg)) {\n          $this->error = X::_(\"Arguments must be numeric\");\n        }\n      }\n\n      if ($w + $x > $this->w) {\n        return false;\n      }\n\n      if ($h + $y > $this->h) {\n        return false;\n      }\n\n      if (self::isImagick()) {\n        if (!$this->img->cropImage($w,$h,$x,$y)) {\n          $this->error = X::_(\"There has been a problem\");\n        }\n      }\n      else\n        {\n          $img = imagecreatetruecolor($w,$h);\n        if ($this->ext == 'png' || $this->ext == 'gif' || $this->ext == 'svg') {\n          imagecolorallocatealpha($img, 0, 0, 0, 127);\n          imagealphablending($img, false);\n          imagesavealpha($img, true);\n        }\n\n        if (imagecopyresampled($img,$this->img,0,0,$x,$y,$w,$h,$w,$h)) {\n          $this->img = $img;\n        }\n        else{\n          $this->error = X::_(\"There has been a problem during the resampling\");\n        }\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 748,
            "endLine": 790,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "crop",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "w",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "the new width"
                },
                {
                    "name": "h",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "the new height"
                },
                {
                    "name": "x",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "X coordinate"
                },
                {
                    "name": "y",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Y coordinate"
                }
            ],
            "doc": {
                "description": "Returns a crop of the image.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::dump($img->getWidth(),$img->getHeight());\n\/\/ (int) 345  146\n$img->crop(10, 10, 30, 30)->save(\"\/home\/data\/test\/img2.jpeg\");\n$img2 = new \\bbn\\File\\Image(\"\/home\/data\/test\/img2.jpeg\");\nbbn\\X::hdump($img2->getWidth(),$img2->getHeight());\n\/\/ (int) 10  10\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$w",
                        "description": "the new width"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$h",
                        "description": "the new height"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$x",
                        "description": "X coordinate"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$y",
                        "description": "Y coordinate"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a crop of the image.\n   *\n   * ```php\n     * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n     * bbn\\X::dump($img->getWidth(),$img->getHeight());\n     * \/\/ (int) 345  146\n     * $img->crop(10, 10, 30, 30)->save(\"\/home\/data\/test\/img2.jpeg\");\n     * $img2 = new \\bbn\\File\\Image(\"\/home\/data\/test\/img2.jpeg\");\n     * bbn\\X::hdump($img2->getWidth(),$img2->getHeight());\n   * \/\/ (int) 10  10\n     * ```\n   *\n   * @param integer $w the new width\n   * @param integer $h the new height\n   * @param integer $x X coordinate\n   * @param integer $y Y coordinate\n   * @return image|false\n     *\/"
        },
        "rotate": {
            "name": "rotate",
            "summary": "Rotates the image.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->rotate( 90 )->save();"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function rotate($angle)\n  {\n      $ok = false;\n    if ($this->test()) {\n      if (self::isImagick()) {\n        if ($this->img->rotateImage(new \\ImagickPixel(),$angle)) {\n            $ok = 1;\n        }\n      }\n      elseif (function_exists('imagerotate')) {\n        if ($this->img = imagerotate($this->img, $angle, 0)) {\n          if ($this->ext == 'png' || $this->ext == 'gif' || $this->ext == 'svg') {\n            imagecolorallocatealpha($this->img, 0, 0, 0, 127);\n            imagealphablending($this->img, false);\n            imagesavealpha($this->img, true);\n          }\n\n          $ok = 1;\n        }\n      }\n\n      if ($ok) {\n        if ($angle == 90 || $angle == 270) {\n            $h       = $this->h;\n            $this->h = $this->w;\n            $this->w = $h;\n        }\n      }\n      else{\n          $this->error = X::_(\"There has been a problem\");\n      }\n    }\n\n      return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 804,
            "endLine": 838,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "rotate",
            "returns": [],
            "arguments": [
                {
                    "name": "angle",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The angle of rotation."
                }
            ],
            "doc": {
                "description": "Rotates the image.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->rotate( 90 )->save();\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$angle",
                        "description": "The angle of rotation."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Rotates the image.\n   *_\n   * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->rotate( 90 )->save();\n   * ```\n   *\n   * @param integer $angle The angle of rotation.\n   * @return image\n     *\/"
        },
        "flip": {
            "name": "flip",
            "summary": "Flips the image.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->flip()->save();\n$img->flip(\"h\")->save();\n$img->flip()->save();"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function flip($mode='v')\n  {\n    if ($this->test()) {\n      if (self::isImagick()) {\n        if ($mode == 'v') {\n          if (!$this->img->flipImage()) {\n                $this->error = X::_(\"There has been a problem\");\n          }\n        }\n        elseif (!$this->img->flopImage()) {\n          $this->error = X::_(\"There has been a problem\");\n        }\n      }\n      else\n        {\n              $w = imagesx($this->img);\n              $h = imagesy($this->img);\n        if ($mode == 'v') {\n            imageflip($this->img, IMG_FLIP_VERTICAL);\n        }\n        else{\n            imageflip($this->img, IMG_FLIP_HORIZONTAL);\n        }\n      }\n    }\n\n        return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 854,
            "endLine": 881,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "flip",
            "returns": [],
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "v",
                    "default_name": "",
                    "description": "Vertical (\"v\") or Horizontal (\"h\") flip, default: \"v\"."
                }
            ],
            "doc": {
                "description": "Flips the image.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->flip()->save();\n$img->flip(\"h\")->save();\n$img->flip()->save();\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "Vertical (\"v\") or Horizontal (\"h\") flip, default: \"v\"."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Flips the image.\n   *\n   * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->flip()->save();\n   * $img->flip(\"h\")->save();\n     * $img->flip()->save();\n   * ```\n     *\n   * @param string $mode Vertical (\"v\") or Horizontal (\"h\") flip, default: \"v\".\n   * @return image\n     *\/"
        },
        "quality": {
            "name": "quality",
            "summary": "Compresses and sets the image's quality (JPEG image only).",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->quality(60, 6)->save();"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function quality(int $q = 80, int $comp = 8)\n  {\n    if ($this->test()\n        && ((strtolower($this->getExtension()) === 'jpg')\n        || (strtolower($this->getExtension()) === 'jpeg'))\n    ) {\n      if (self::isImagick()) {\n        $this->img->setImageCompression($comp);\n        $this->img->setImageCompressionQuality($q);\n        $this->img->stripImage();\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 896,
            "endLine": 910,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "quality",
            "returns": [],
            "arguments": [
                {
                    "name": "q",
                    "position": 0,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 80,
                    "default_name": "",
                    "description": "The quality level (0-100)"
                },
                {
                    "name": "comp",
                    "position": 1,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 8,
                    "default_name": "",
                    "description": "The compression type"
                }
            ],
            "doc": {
                "description": "Compresses and sets the image's quality (JPEG image only).\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->quality(60, 6)->save();\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$q",
                        "description": "The quality level (0-100)"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$comp",
                        "description": "The compression type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Compresses and sets the image's quality (JPEG image only).\n   *\n     * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->quality(60, 6)->save();\n   * ```\n     *\n   * @param int $q    The quality level (0-100)\n   * @param int $comp The compression type\n   * @return image\n   *\/"
        },
        "brightness": {
            "name": "brightness",
            "summary": "Adjusts the image's brightness.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->brightness();\n$img->brightness(\"-\");"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function brightness($val='+')\n  {\n    if ($this->test()) {\n      if (self::isImagick()) {\n        $p = ( $val == '-' ) ? 90 : 110;\n        if (!$this->img->modulateImage($p,100,100)) {\n            $this->error = X::_(\"There has been a problem\");\n        }\n      }\n      elseif (function_exists('imagefilter')) {\n          $p = ( $val == '-' ) ? -20 : 20;\n        if (!imagefilter($this->img,IMG_FILTER_BRIGHTNESS,-20)) {\n          $this->error = X::_(\"There has been a problem\");\n        }\n      }\n    }\n\n      return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 925,
            "endLine": 943,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "brightness",
            "returns": [],
            "arguments": [
                {
                    "name": "val",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "+",
                    "default_name": "",
                    "description": "The value \"+\" (default) increases the brightness, the value (\"-\") reduces it."
                }
            ],
            "doc": {
                "description": "Adjusts the image's brightness.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->brightness();\n$img->brightness(\"-\");\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$val",
                        "description": "The value \"+\" (default) increases the brightness, the value (\"-\") reduces it."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adjusts the image's brightness.\n   *\n     * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->brightness();\n   * $img->brightness(\"-\");\n   * ```\n   *\n   * @param string $val The value \"+\" (default) increases the brightness, the value (\"-\") reduces it.\n   * @return image\n     *\/"
        },
        "contrast": {
            "name": "contrast",
            "summary": "Adjusts the image contrast.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->contrast(\"-\");\n$img->contrast();"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function contrast($val='+')\n  {\n    if ($this->test()) {\n      if (self::isImagick()) {\n        $p = ( $val == '-' ) ? 0 : 1;\n        if (!$this->img->contrastImage($p)) {\n            $this->error = X::_(\"There has been a problem\");\n        }\n      }\n      elseif (function_exists('imagefilter')) {\n          $p = ( $val == '-' ) ? -20 : 20;\n        if (!imagefilter($this->img,IMG_FILTER_CONTRAST,-20)) {\n          $this->error = X::_(\"There has been a problem\");\n        }\n      }\n    }\n\n      return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 958,
            "endLine": 976,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "contrast",
            "returns": [],
            "arguments": [
                {
                    "name": "val",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "+",
                    "default_name": "",
                    "description": "The value \"+\" (default), increases the contrast, the value (\"-\") reduces it."
                }
            ],
            "doc": {
                "description": "Adjusts the image contrast.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->contrast(\"-\");\n$img->contrast();\n```\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$val",
                        "description": "The value \"+\" (default), increases the contrast, the value (\"-\") reduces it."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adjusts the image contrast.\n   *\n   * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->contrast(\"-\");\n   * $img->contrast();\n   * ```\n   *\n   * @param string $val The value \"+\" (default), increases the contrast, the value (\"-\") reduces it.\n   * @return image\n     *\/"
        },
        "grayscale": {
            "name": "grayscale",
            "summary": "Converts the image's color to grayscale.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->grayscale()->save();"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function grayscale()\n  {\n    if ($this->test()) {\n      if (self::isImagick()) {\n        if (!$this->img->modulateImage(100,0,100)) {\n            $this->error = X::_(\"There has been a problem\");\n        }\n      }\n      elseif (function_exists('imagefilter')) {\n        if (!imagefilter($this->img,IMG_FILTER_GRAYSCALE)) {\n          $this->error = X::_(\"There has been a problem\");\n        }\n      }\n    }\n\n      return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 989,
            "endLine": 1005,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "grayscale",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Converts the image's color to grayscale.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->grayscale()->save();\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Converts the image's color to grayscale.\n   *\n   * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->grayscale()->save();\n   * ```\n   *\n     * @return image\n     *\/"
        },
        "negate": {
            "name": "negate",
            "summary": "Converts the image's color to negative.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->negate();"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function negate()\n  {\n    if ($this->test()) {\n      if (self::isImagick()) {\n        if (!$this->img->negateImage(false)) {\n            $this->error = X::_(\"There has been a problem\");\n        }\n      }\n      elseif (function_exists('imagefilter')) {\n        if (!imagefilter($this->img,IMG_FILTER_NEGATE)) {\n          $this->error = X::_(\"There has been a problem\");\n        }\n      }\n    }\n\n      return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1018,
            "endLine": 1034,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "negate",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Converts the image's color to negative.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->negate();\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Converts the image's color to negative.\n   *\n   * ```php\n     * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->negate();\n   * ```\n   *\n     * @return image\n     *\/"
        },
        "polaroid": {
            "name": "polaroid",
            "summary": "Converts the image's color with polaroid filter.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->polaroid()->save();"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function polaroid()\n  {\n    if ($this->test()) {\n      if (self::isImagick()) {\n        if (!$this->img->polaroidImage(new \\ImagickDraw(), 0)) {\n            $this->error = X::_(\"There has been a problem\");\n        }\n      }\n    }\n\n      return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1048,
            "endLine": 1059,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "polaroid",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Converts the image's color with polaroid filter.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->polaroid()->save();\n```\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Transparency of png files."
                }
            },
            "comments": "  \/**\n   * Converts the image's color with polaroid filter.\n   *\n   * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->polaroid()->save();\n   * ```\n   *\n     * @return image\n   * @todo Transparency of png files.\n     *\/"
        },
        "thumbs": {
            "name": "thumbs",
            "summary": "Creates miniature of the image",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->thumbs()->save(\/home\/data\/test\/image_test.jpg\");"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function thumbs($dest = '.', $sizes = null, $mask = '_%s', $crop = false, $bigger = false)\n  {\n    if ($this->test() && is_dir($dest)) {\n      if (!is_array($sizes)) {\n        $sizes = Str::isInteger($sizes) ? [[$sizes, false]] : self::$defaultThumbSizes;\n      }\n\n      $this->getExtension();\n      $w = $this->getWidth();\n      $h = $this->getHeight();\n      $d = $w >= $h ? 'w' : 'h';\n      $res = [];\n      if ($$d \/ ($d === 'w' ? $h : $w) < 5) {\n        $file = ($dest === '.' ? '' : $dest.'\/').$this->title;\n        \/\/die(var_dump($mask));\n        foreach ($sizes as $s){\n          if (Str::isInteger($s)) {\n            $s = [$s, false];\n          }\n\n          if ((!empty($s[0]) && ($w > $s[0]))\n              || (!empty($s[1]) && ($h > $s[1]))\n              || $bigger\n          ) {\n            $smask = [];\n            if (!empty($s[0])) {\n              $smask[] = 'w-' . $s[0];\n              if (!empty($s[1])) {\n                $mask .= '-%s';\n              }\n            }\n            if (!empty($s[1])) {\n              $smask[] = 'h-' . $s[1];\n            }\n            if ($crop) {\n              $mask .= '-%s';\n              $smask[] = 'c-1';\n            }\n            if ($s[0] && $s[1]) {\n              if ($crop) {\n                $this->resize($s[0], $s[1], true);\n              }\n              else{\n                $this->resize($d === 'w' ? $s[0] : false, $d === 'h' ? $s[1] : false, false, $s[0], $s[1]);\n              }\n            }\n            else{\n              $this->resize($s[0], $s[1], $crop);\n            }\n            $sm = sprintf($mask, ...$smask);\n            $fn = $file.$sm.'.'.$this->ext;\n            $this->save($fn);\n            $res[$sm] = $fn;\n          }\n        }\n\n        return $res;\n      }\n    }\n\n      return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1072,
            "endLine": 1133,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "thumbs",
            "returns": [],
            "arguments": [
                {
                    "name": "dest",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": ".",
                    "default_name": ""
                },
                {
                    "name": "sizes",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "mask",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "_%s",
                    "default_name": ""
                },
                {
                    "name": "crop",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "bigger",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Creates miniature of the image\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n$img->thumbs()->save(\/home\/data\/test\/image_test.jpg\");\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Creates miniature of the image\n   *\n   * ```php\n   * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * $img->thumbs()->save(\/home\/data\/test\/image_test.jpg\");\n   * ```\n   *\n     * @return image|false\n   *\/"
        },
        "toString": {
            "name": "toString",
            "summary": "Return the image as string.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::hdump($img->toString());\n\/\/ (string)"
                }
            ],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function toString()\n  {\n    if ($this->test()) {\n      if (self::isImagick()) {\n        $m = $this->img;\n      }\n      else\n        {\n          ob_start();\n          \\call_user_func('image'.$this->ext2,$this->img);\n          $m = ob_get_contents();\n          ob_end_clean();\n      }\n\n        return 'data:image\/'.$this->ext.';base64,'.base64_encode($m);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1147,
            "endLine": 1163,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "toString",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Return the image as string.\n\n```php\n$img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\nbbn\\X::hdump($img->toString());\n\/\/ (string)\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the image as string.\n   *\n     * ```php\n     * $img = new bbn\\File\\Image(\"\/home\/data\/test\/image.jpg\");\n   * bbn\\X::hdump($img->toString());\n   * \/\/ (string)\n     * ```\n   *\n     * @return string\n     *\/"
        },
        "replaceColor": {
            "name": "replaceColor",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File\\Image",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File\/Image.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function replaceColor($originalColor, $newColor = null, $precision = 0)\n  {\n    if (self::isImagick()) {\n      $this->img = new \\Imagick($this->file);\n\n      if ($newColor === null) {\n        $this->img->setImageFormat('png');\n        $this->img->transparentPaintImage($originalColor, 0.0, 0.1 * \\Imagick::getQuantum(), 0);\n\n      } else {\n        $this->img->opaquePaintImage(\n          $originalColor, $newColor, 0.1 * \\Imagick::getQuantum(), 0\n        );\n      }\n    }\n    elseif (function_exists('imagecolorset')) {\n      \n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1166,
            "endLine": 1186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "replaceColor",
            "returns": [],
            "arguments": [
                {
                    "name": "originalColor",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "newColor",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "precision",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getSize": {
            "name": "getSize",
            "summary": "Return the filesize in byte.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$file = new bbn\\File('C:\/Test\/file.txt');\nX::dump($file->getSize());\n\/\/ (int) 314"
                }
            ],
            "class": "bbn\\File",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSize()\n  {\n    if ($this->file && is_null($this->size)) {\n      $this->size = $this->fs->filesize($this->file);\n    }\n\n    return $this->size;\n  }",
            "parent": {
                "name": "getSize",
                "summary": "Return the filesize in byte.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$file = new bbn\\File('C:\/Test\/file.txt');\nX::dump($file->getSize());\n\/\/ (int) 314"
                    }
                ],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getSize()\n  {\n    if ($this->file && is_null($this->size)) {\n      $this->size = $this->fs->filesize($this->file);\n    }\n\n    return $this->size;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 138,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getSize",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Return the filesize in byte.\n\n```php\n$file = new bbn\\File('C:\/Test\/file.txt');\nX::dump($file->getSize());\n\/\/ (int) 314\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the filesize in byte.\n   *\n   * ```php\n   * $file = new bbn\\File('C:\/Test\/file.txt');\n   * X::dump($file->getSize());\n   * \/\/ (int) 314\n   * ```\n   *\n   * @return int\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getSize",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Return the filesize in byte.\n\n```php\n$file = new bbn\\File('C:\/Test\/file.txt');\nX::dump($file->getSize());\n\/\/ (int) 314\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the filesize in byte.\n   *\n   * ```php\n   * $file = new bbn\\File('C:\/Test\/file.txt');\n   * X::dump($file->getSize());\n   * \/\/ (int) 314\n   * ```\n   *\n   * @return int\n   *\/"
        },
        "iterateLines": {
            "name": "iterateLines",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\File",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function iterateLines()\/\/: Generator\n  {\n    if ( $this->file ){\n      $f = fopen($this->file, 'r');\n      try {\n        while ($line = fgets($f)) {\n          yield $line;\n        }\n      }\n      finally {\n        fclose($f);\n      }\n    }\n  }",
            "parent": {
                "name": "iterateLines",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function iterateLines()\/\/: Generator\n  {\n    if ( $this->file ){\n      $f = fopen($this->file, 'r');\n      try {\n        while ($line = fgets($f)) {\n          yield $line;\n        }\n      }\n      finally {\n        fclose($f);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 143,
                "endLine": 156,
                "isDeprecated": false,
                "isGenerator": true,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "iterateLines",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return Generator\n   *\/"
            },
            "trait": false,
            "startLine": 143,
            "endLine": 156,
            "isDeprecated": false,
            "isGenerator": true,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "iterateLines",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return Generator\n   *\/"
        },
        "download": {
            "name": "download",
            "summary": "Downloads the file. At the end of the script the user will be invited to choose the file's destination. If the file doesn't exist return an object with parameter file = null.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$f = new \\bbn\\File('C:\/Test\/file.png');\n$f->download();"
                }
            ],
            "class": "bbn\\File",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function download(): void\n  {\n    if ($this->file) {\n      if (!$this->size) {\n        $this->getSize();\n      }\n      \n      if (!$this->size) {\n        throw new Exception(X::_(\"Impossible to get the file %s\", $this->file));\n      }\n\n      while (@ob_end_flush());\n      header(\"Content-Encoding: none\");\n      ignore_user_abort(true);\n      ini_set('output_buffering', 'Off');\n      ini_set('zlib.output_compression', false);\n      header('Content-Description: File Transfer');\n      header('Content-Type: application\/octet-stream');\n      header('Content-Disposition: attachment; filename=\"' . Str::escapeDquotes(basename($this->name)) . '\"');\n      header('Expires: 0');\n      header('Cache-Control: must-revalidate');\n      header('Pragma: public');\n      header('Content-Length: ' . $this->size);\n      readfile($this->file);\n      exit;\n    }\n  }",
            "parent": {
                "name": "download",
                "summary": "Downloads the file. At the end of the script the user will be invited to choose the file's destination. If the file doesn't exist return an object with parameter file = null.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$f = new \\bbn\\File('C:\/Test\/file.png');\n$f->download();"
                    }
                ],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function download(): void\n  {\n    if ($this->file) {\n      if (!$this->size) {\n        $this->getSize();\n      }\n      \n      if (!$this->size) {\n        throw new Exception(X::_(\"Impossible to get the file %s\", $this->file));\n      }\n\n      while (@ob_end_flush());\n      header(\"Content-Encoding: none\");\n      ignore_user_abort(true);\n      ini_set('output_buffering', 'Off');\n      ini_set('zlib.output_compression', false);\n      header('Content-Description: File Transfer');\n      header('Content-Type: application\/octet-stream');\n      header('Content-Disposition: attachment; filename=\"' . Str::escapeDquotes(basename($this->name)) . '\"');\n      header('Expires: 0');\n      header('Cache-Control: must-revalidate');\n      header('Pragma: public');\n      header('Content-Length: ' . $this->size);\n      readfile($this->file);\n      exit;\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 230,
                "endLine": 256,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "download",
                "returns": [
                    "void"
                ],
                "arguments": [],
                "doc": {
                    "description": "Downloads the file. At the end of the script the user will be invited to choose the file's destination. If the file doesn't exist return an object with parameter file = null.\n\n```php\n$f = new \\bbn\\File('C:\/Test\/file.png');\n$f->download();\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Downloads the file. At the end of the script the user will be invited to choose the file's destination. If the file doesn't exist return an object with parameter file = null.\n   *\n   * ```php\n   * $f = new \\bbn\\File('C:\/Test\/file.png');\n   * $f->download();\n   * ```\n   *\n   * @return file\n   *\/"
            },
            "trait": false,
            "startLine": 230,
            "endLine": 256,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "download",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Downloads the file. At the end of the script the user will be invited to choose the file's destination. If the file doesn't exist return an object with parameter file = null.\n\n```php\n$f = new \\bbn\\File('C:\/Test\/file.png');\n$f->download();\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Downloads the file. At the end of the script the user will be invited to choose the file's destination. If the file doesn't exist return an object with parameter file = null.\n   *\n   * ```php\n   * $f = new \\bbn\\File('C:\/Test\/file.png');\n   * $f->download();\n   * ```\n   *\n   * @return file\n   *\/"
        },
        "getHash": {
            "name": "getHash",
            "summary": "Return the hash of the file.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "$file = new File('C:\/Test\/file.txt');\nX::dump($file->getHash());\n\/\/ (string) '9a3182g36a83adtd9c9c2l59ap2a719c'"
                }
            ],
            "class": "bbn\\File",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getHash()\n  {\n    if ( $this->file ){\n      return md5_file($this->file);\n    }\n    return '';\n  }",
            "parent": {
                "name": "getHash",
                "summary": "Return the hash of the file.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "$file = new File('C:\/Test\/file.txt');\nX::dump($file->getHash());\n\/\/ (string) '9a3182g36a83adtd9c9c2l59ap2a719c'"
                    }
                ],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getHash()\n  {\n    if ( $this->file ){\n      return md5_file($this->file);\n    }\n    return '';\n  }",
                "parent": false,
                "trait": false,
                "startLine": 269,
                "endLine": 275,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getHash",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Return the hash of the file.\n\n```php\n$file = new File('C:\/Test\/file.txt');\nX::dump($file->getHash());\n\/\/ (string) '9a3182g36a83adtd9c9c2l59ap2a719c'\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Return the hash of the file.\n   *\n   * ```php\n   * $file = new File('C:\/Test\/file.txt');\n   * X::dump($file->getHash());\n   * \/\/ (string) '9a3182g36a83adtd9c9c2l59ap2a719c'\n   * ```\n   *\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 269,
            "endLine": 275,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getHash",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Return the hash of the file.\n\n```php\n$file = new File('C:\/Test\/file.txt');\nX::dump($file->getHash());\n\/\/ (string) '9a3182g36a83adtd9c9c2l59ap2a719c'\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Return the hash of the file.\n   *\n   * ```php\n   * $file = new File('C:\/Test\/file.txt');\n   * X::dump($file->getHash());\n   * \/\/ (string) '9a3182g36a83adtd9c9c2l59ap2a719c'\n   * ```\n   *\n   * @return string\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes the file.",
            "description": "",
            "description_parts": [
                {
                    "type": "code",
                    "content": "X::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) true\n$file = new File('C:\/Test\/file.txt');\n$file->delete();\nX::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) false"
                }
            ],
            "class": "bbn\\File",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete()\n  {\n    if ( $this->file ){\n      unlink($this->file);\n    }\n    $this->file = false;\n    return $this;\n  }",
            "parent": {
                "name": "delete",
                "summary": "Deletes the file.",
                "description": "",
                "description_parts": [
                    {
                        "type": "code",
                        "content": "X::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) true\n$file = new File('C:\/Test\/file.txt');\n$file->delete();\nX::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) false"
                    }
                ],
                "class": "bbn\\File",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/File.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function delete()\n  {\n    if ( $this->file ){\n      unlink($this->file);\n    }\n    $this->file = false;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 291,
                "endLine": 298,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "delete",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Deletes the file.\n\n```php\nX::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) true\n$file = new File('C:\/Test\/file.txt');\n$file->delete();\nX::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) false\n```\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes the file.\n   *\n   * ```php\n   * X::hdump( is_file('C:\/Test\/file.txt') );\n   * \/\/ (bool) true\n   * $file = new File('C:\/Test\/file.txt');\n   * $file->delete();\n   * X::hdump( is_file('C:\/Test\/file.txt') );\n   * \/\/ (bool) false\n   * ```\n   *\n   * @return file\n   *\/"
            },
            "trait": false,
            "startLine": 291,
            "endLine": 298,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "delete",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Deletes the file.\n\n```php\nX::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) true\n$file = new File('C:\/Test\/file.txt');\n$file->delete();\nX::hdump( is_file('C:\/Test\/file.txt') );\n\/\/ (bool) false\n```\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the file.\n   *\n   * ```php\n   * X::hdump( is_file('C:\/Test\/file.txt') );\n   * \/\/ (bool) true\n   * $file = new File('C:\/Test\/file.txt');\n   * $file->delete();\n   * X::hdump( is_file('C:\/Test\/file.txt') );\n   * \/\/ (bool) false\n   * ```\n   *\n   * @return file\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 71,
            "endLine": 78,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        }
    },
    "properties": {
        "imageClassMode": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": ""
        },
        "allowed_extensions": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": [
                "jpg",
                "gif",
                "jpeg",
                "png",
                "svg",
                "webp"
            ]
        },
        "defaultThumbSizes": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": [
                [
                    false,
                    500
                ],
                [
                    false,
                    250
                ],
                [
                    false,
                    125
                ],
                [
                    false,
                    96
                ],
                [
                    false,
                    48
                ]
            ]
        },
        "exif": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "max_width": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": 5000
        },
        "ext2": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "w": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "h": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "img": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File\\Image"
            },
            "declaring_trait": "bbn\\File\\Image",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var mixed",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "size": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "int"
                    }
                ]
            },
            "parent": {
                "name": "size",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "int"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "ext": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed"
                    }
                ]
            },
            "parent": {
                "name": "ext",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "mixed"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "fs": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "File\\System",
                        "name": "$fs"
                    }
                ]
            },
            "parent": {
                "name": "fs",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "File\\System",
                            "name": "$fs"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "hash": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": {
                "name": "hash",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": {
                "name": "path",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "name": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "string"
                    }
                ]
            },
            "parent": {
                "name": "name",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "string"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "file": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed"
                    }
                ]
            },
            "parent": {
                "name": "file",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "mixed"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "title": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed"
                    }
                ]
            },
            "parent": {
                "name": "title",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "mixed"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "uploaded": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\File"
            },
            "declaring_trait": "bbn\\File",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "int"
                    }
                ]
            },
            "parent": {
                "name": "uploaded",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\File"
                },
                "declaring_trait": "bbn\\File",
                "promoted": false,
                "visibility": "public",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "int"
                        }
                    ]
                },
                "parent": false,
                "value": 0
            },
            "value": 0
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        }
    },
    "staticProperties": {
        "imageClassMode": "",
        "allowed_extensions": [
            "jpg",
            "gif",
            "jpeg",
            "png",
            "svg",
            "webp"
        ],
        "defaultThumbSizes": [
            [
                false,
                500
            ],
            [
                false,
                250
            ],
            [
                false,
                125
            ],
            [
                false,
                96
            ],
            [
                false,
                48
            ]
        ],
        "exif": false,
        "max_width": 5000
    },
    "constants": null,
    "uses": {
        "bbn": "bbn",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "Exception": "Exception"
    },
    "dummyComments": [
        "\/**\n * @package file\n *\/",
        "\/**\n * Image Class\n *\n *\n * This class is used to upload, delete and transform images, and create thumbnails.\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Apr 4, 2011, 23:23:55 +0000\n * @category Files ressources\n * @license http:\/\/www.opensource.org\/licenses\/lgpl-license.php LGPL\n * @version 0.2r89\n * @package bbn\\File\n * @todo Deal specifically with SVG\n * @todo Add a static function and var to check for available libraries (Imagick\/GD)\n *\/"
    ],
    "summary": "Image Class",
    "description": "This class is used to upload, delete and transform images, and create thumbnails.",
    "description_parts": [
        {
            "type": "text",
            "content": "This class is used to upload, delete and transform images, and create thumbnails."
        }
    ]
}