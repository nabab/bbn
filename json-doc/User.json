{
    "doc": {
        "description": "A user authentication Class\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Authentication",
            "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
            "version": "0.2r89",
            "todo": "Implement Cache for session requests' results?"
        }
    },
    "name": "bbn\\User",
    "namespace": true,
    "realName": "User",
    "realNamespace": "bbn",
    "traits": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\DbActions",
        "bbn\\User\\Common"
    ],
    "interfaces": {
        "bbn\\User\\Implementor": {
            "name": "bbn\\User\\Implementor"
        }
    },
    "fileName": "\/User.php",
    "startLine": 37,
    "endLine": 1718,
    "numMethods": 130,
    "numProperties": 42,
    "numConstants": 1,
    "numStaticProperties": 3,
    "interfaceNames": [
        "bbn\\User\\Implementor"
    ],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": {
                "0": "login failed",
                "2": "password sent",
                "3": "no email such as",
                "4": "too many attempts",
                "5": "impossible to create the user",
                "6": "wrong user and\/or password",
                "7": "different passwords",
                "8": "less than 5 mn between emailing password",
                "9": "user already exists",
                "10": "problem during user creation",
                "11": "no salt in session",
                "12": "login and password are mandatory",
                "13": "impossible to save the session",
                "14": "impossible to retrieve the session",
                "15": "no session in memory",
                "16": "impossible to add session in the database",
                "17": "non matching salt",
                "18": "incorrect magic string",
                "19": "wrong fingerprint",
                "20": "invalid token",
                "21": "invalid phone number",
                "22": "impossible to update the phone number or the verification code",
                "23": "unknown phone number",
                "24": "invalid verification code",
                "25": "you have exhausted the number of hotlinks sent, try again later",
                "26": "An email has been sent in order to reset your password",
                "27": "The hotlink is expired"
            },
            "table": "bbn_users",
            "tables": {
                "groups": "bbn_users_groups",
                "hotlinks": "bbn_users_hotlinks",
                "passwords": "bbn_users_passwords",
                "sessions": "bbn_users_sessions",
                "tokens": "bbn_users_tokens",
                "api_tokens": "bbn_users_api_tokens",
                "access_tokens": "bbn_users_access_tokens",
                "users": "bbn_users",
                "permission_accounts": "bbn_users_permission_accounts",
                "permission_tokens": "bbn_users_permission_account_tokens"
            },
            "arch": {
                "groups": {
                    "id": "id",
                    "group": "group",
                    "type": "type",
                    "code": "code",
                    "cfg": "cfg"
                },
                "hotlinks": {
                    "id": "id",
                    "id_user": "id_user",
                    "magic": "magic",
                    "expire": "expire"
                },
                "passwords": {
                    "id_user": "id_user",
                    "pass": "pass",
                    "added": "added"
                },
                "sessions": {
                    "id": "id",
                    "id_user": "id_user",
                    "sess_id": "sess_id",
                    "ip_address": "ip_address",
                    "user_agent": "user_agent",
                    "opened": "opened",
                    "creation": "creation",
                    "last_activity": "last_activity",
                    "cfg": "cfg"
                },
                "tokens": {
                    "id": "id",
                    "id_session": "id_session",
                    "content": "content",
                    "creation": "creation",
                    "dt_creation": "dt_creation",
                    "last": "last",
                    "dt_last": "dt_last"
                },
                "api_tokens": {
                    "id": "id",
                    "id_user": "id_user",
                    "token": "token",
                    "creation": "creation",
                    "last": "last",
                    "device_uid": "device_uid",
                    "device_platform": "device_platform",
                    "device_lang": "device_lang",
                    "notifications_token": "notifications_token"
                },
                "access_tokens": {
                    "id_user": "id_user",
                    "token": "token",
                    "pass": "pass",
                    "validity": "validity"
                },
                "users": {
                    "id": "id",
                    "id_group": "id_group",
                    "email": "email",
                    "username": "username",
                    "phone": "phone",
                    "login": "login",
                    "admin": "admin",
                    "dev": "dev",
                    "theme": "theme",
                    "cfg": "cfg",
                    "active": "active",
                    "enckey": "enckey"
                },
                "permission_accounts": {
                    "id": "id",
                    "id_user": "id_user",
                    "name": "name"
                },
                "permission_tokens": {
                    "id": "id",
                    "id_account": "id_account",
                    "access_token": "access_token",
                    "refresh_token": "refresh_token",
                    "expire": "expire"
                }
            },
            "fields": {
                "user": "user",
                "pass": "pass",
                "salt": "appui_salt",
                "key": "key",
                "id": "id",
                "pass1": "pass1",
                "pass2": "pass2",
                "action": "action",
                "token": "appui_token",
                "access_token": "appui_access_token",
                "access_token_pass": "appui_access_token_pass",
                "device_uid": "device_uid",
                "device_lang": "device_lang",
                "phone_number": "phone_number",
                "phone_verification_code": "phone_verification_code"
            },
            "encryption": "sha1",
            "conditions": [],
            "max_attempts": 10,
            "verification_code_length": 4,
            "max_sessions": 5,
            "hotlinks": false,
            "show": "username",
            "mailer": "\\bbn\\Mail",
            "ip_address": true
        },
        "retriever_instance": null,
        "retriever_exists": false,
        "_just_login": false,
        "_encryption_key": null,
        "sessIndex": "bbn_session",
        "userIndex": "bbn_user",
        "password_reset": false,
        "session": null,
        "user_agent": null,
        "ip_address": null,
        "email": null,
        "accept_lang": null,
        "sql": null,
        "id": null,
        "data": [],
        "id_group": null,
        "alert": null,
        "cfg": null,
        "sess_cfg": null,
        "db": null,
        "prev_time": null,
        "class_cfg": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "_isInitClassCfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "dbTraitFilterCfg": [],
        "dbTraitRelations": [],
        "dbTraitStructure": [],
        "_mailer": null,
        "auth": false,
        "path": null,
        "tmp_path": null,
        "api_request_output": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "User",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "User constructor.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db $db, array $params = [], array $cfg = [])\n  {\n    \/\/ The database connection\n    $this->db = $db;\n\n    \/\/ Setting up the class configuration\n    $this->initClassCfg($cfg);\n\n    $f = &$this->class_cfg['fields'];\n    self::retrieverInit($this);\n\n    if ($this->isToken() && !empty($params[$f['token']])) {\n\n      if ($this->isPhoneNumberCodeSendingRequest($params)) {\n        \/\/ Verify that the received token is associated with the device uid\n        if (!($user_id = $this->getUserByTokenAndDeviceUid($params[$f['token']], $params[$f['device_uid']]))) {\n          $this->setError(20);\n          return $this->api_request_output =  [\n            'success' => false,\n            'error'   => X::_('Invalid token'),\n            'errorCode' => 20\n          ];\n        }\n\n        \/\/ Check if the phone number is already registered\n        if (($exUser = $this->findByPhoneNumber($params[$f['phone_number']]))\n          && ($exUser[$f['id']] !== $user_id)\n          && $this->updateApiTokenUserByTokenDevice(\n            $params[$f['token']],\n            $params[$f['device_uid']],\n            $exUser[$f['id']],\n            !empty($params[$f['device_lang']]) ? str_replace('\"', '', $params[$f['device_lang']]) : ''\n          )\n        ) {\n          if (!$this->db->selectOne($this->class_cfg['table'], $this->class_cfg['arch']['users']['login'], [\n            $this->class_cfg['arch']['users']['id'] => $user_id\n          ])) {\n            $this->db->delete($this->class_cfg['table'], [\n              $this->class_cfg['arch']['users']['id'] => $user_id\n            ]);\n          }\n          $user_id = $exUser[$f['id']];\n        }\n\n        $this->id = $user_id;\n        \/\/ Generate a code\n        $code = random_int(1001, 9999);\n\n        try {\n          $phone = \\Brick\\PhoneNumber\\PhoneNumber::parse($params[$f['phone_number']]);\n        } catch (\\Brick\\PhoneNumber\\PhoneNumberParseException $e) {\n          $this->setError(21);\n          return $this->api_request_output = [\n            'success' => false,\n            'error' => X::_('Invalid phone number'),\n            'errorCode' => 21\n          ];\n        }\n\n        if (\n          !$this->hasSkipVerification()\n          && !$phone->isValidNumber()\n        ) {\n          $this->setError(21);\n          return $this->api_request_output = [\n            'success' => false,\n            'error' => X::_('Invalid phone number'),\n            'errorCode' => 21\n          ];\n        }\n\n        \/\/ Save it\n        if ($this->updatePhoneVerificationCode($params[$f['phone_number']], $code)) {\n          \/\/ Send the sms with code here\n          return $this->api_request_output = [\n            'success' => true,\n            'phone_verification_code' => $code\n          ];\n        } else {\n          $this->setError(22);\n          return [\n            'success' => false,\n            'error' => X::_('Impossible to update the phone number or the verification code'),\n            'errorCode' => 22\n          ];\n        }\n      } elseif ($this->isVerifyPhoneNumberRequest($params)) {\n        \/\/ Verify that the received token is associated to the device uid\n        if (!$this->verifyTokenAndDeviceUid($params[$f['device_uid']], $params[$f['token']])) {\n          $this->setError(20);\n          return $this->api_request_output =  [\n            'success' => false,\n            'error'   => X::_('Invalid token'),\n            'errorCode' => 20\n          ];\n        }\n\n        \/\/ find the user using phone_number in db\n        $user = $this->findByPhoneNumber($params[$f['phone_number']]);\n\n        if (!$user) {\n          $this->setError(23);\n          return $this->api_request_output =  [\n            'success' => false,\n            'error'   => X::_('Unknown phone number'),\n            'errorCode' => 23\n          ];\n        }\n\n        $this->id = $user[$this->class_cfg['arch']['users']['id']];\n        $this->id_group = $user[$this->class_cfg['arch']['users']['id_group']];\n\n        if (!$this->hasSkipVerification()) {\n          \/\/ Verify that the code is correct\n          $user_cgf = json_decode($user[$this->class_cfg['arch']['users']['cfg']], true);\n\n          if (\n            !$user_cgf\n            || !isset($user_cgf['phone_verification_code'])\n            || ((string)$user_cgf['phone_verification_code'] !== (string)$params[$f['phone_verification_code']])\n          ) {\n            $this->setError(24);\n            return $this->api_request_output =  [\n              'success' => false,\n              'error'   => X::_('Invalid verification code'),\n              'errorCode' => 24\n            ];\n          }\n        }\n\n        \/\/ Update verification code to null\n        $this->updatePhoneVerificationCode($params[$f['phone_number']], null);\n\n        \/\/ Generate a new token\n        $new_token = Str::genpwd(32, 16);\n\n        \/\/ Update user id and the new token in the row with the old token and device uid.\n        $this->db->update(\n          $this->class_cfg['tables']['api_tokens'],\n          [\n            $this->class_cfg['arch']['api_tokens']['id_user']  => $user[$this->class_cfg['arch']['users']['id']],\n            $this->class_cfg['arch']['api_tokens']['token']    => $new_token,\n          ],\n          [\n            $this->class_cfg['arch']['api_tokens']['token']      => $params[$f['token']],\n            $this->class_cfg['arch']['api_tokens']['device_uid'] => $params[$f['device_uid']],\n          ]\n        );\n\n        \/\/ Send the new token here\n        return $this->api_request_output =  [\n          'token'   => $new_token,\n          'success' => true\n        ];\n      } elseif ($this->isTokenLoginRequest($params)) {\n        \/\/ Find the token associated to the device uid in db then get it's associated user.\n        if (!$user = $this->findUserByApiTokenAndDeviceUid($params[$f['token']], $params[$f['device_uid']])) {\n          $this->setError(20);\n          return $this->api_request_output =  [\n            'success' => false,\n            'error'   => X::_('Invalid token'),\n            'errorCode' => 20\n          ];\n        }\n\n        \/\/ Update device_lang and last\n        $toUdp = [\n          $this->class_cfg['arch']['api_tokens']['last'] => date('Y-m-d H:i:S')\n        ];\n        if (isset($params[$f['device_lang']])) {\n          $toUdp[$this->class_cfg['arch']['api_tokens']['device_lang']] = $params[$f['device_lang']];\n        }\n        $this->db->update($this->class_cfg['tables']['api_tokens'], $toUdp, [\n          $this->class_cfg['arch']['api_tokens']['token']      => $params[$f['token']],\n          $this->class_cfg['arch']['api_tokens']['device_uid'] => $params[$f['device_uid']]\n        ]);\n\n        \/\/ Now the user is authenticated\n        $this->auth = true;\n        $this->id = $user[$this->class_cfg['arch']['users']['id']];\n        $this->id_group = $user[$this->class_cfg['arch']['users']['id_group']];\n\n        return $this->api_request_output = [\n          'token'   => $params[$f['token']],\n          'success' => true\n        ];\n      }\n    }\n    else {\n      \/\/ The client environment variables\n      $this->user_agent  = $_SERVER['HTTP_USER_AGENT'] ?? '';\n      $this->ip_address  = $this->class_cfg['ip_address'] && isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';\n      $this->accept_lang = $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? '';\n      if (empty($this->user_agent)) {\n        X::log([X::isCli(), $_SERVER], 'user_sess');\n      }\n\n      \/\/ Creating the session's variables if they don't exist yet\n      $this->_init_session();\n\n      \/\/ CLI user\n      if (x::isCli() && isset($params['id'])) {\n        $this->id = $params['id'];\n        $this->auth = true;\n      }\n\n      \/\/ The user logs in\n      if ($this->isLoginRequest($params)) {\n        \/** @todo separate credentials and salt checking *\/\n        if (!empty($this->sess_cfg['fingerprint'])\n            && $this->getPrint($this->_get_session('fingerprint')) === $this->sess_cfg['fingerprint']\n        ) {\n          \/** @todo separate credentials and salt checking *\/\n          $this->_check_credentials($params);\n        } else {\n          $this->setError(19);\n          $this->session->destroy();\n        }\n      }\n\n      \/** @todo revise the process: dying is not the solution! *\/\n      \/\/ The user is not known yet\n      elseif ($this->isResetPasswordRequest($params)) {\n        if ($id = $this->getIdFromMagicString($params[$f['id']], $params[$f['key']])) {\n          $this->password_reset = true;\n          if (($params[$f['pass1']] === $params[$f['pass2']])) {\n            $this->expireHotlink($params[$f['id']]);\n            $this->id = $id;\n            $this->forcePassword($params[$f['pass2']]);\n            $this->session->set([]);\n          }\n          else {\n            $this->setError(7);\n          }\n        }\n        elseif ($this->check()) {\n          $this->setError(18);\n        }\n      }\n      elseif (!empty($params[$f['access_token']])\n        && !empty($params[$f['access_token_pass']])\n        && ($idUser = $this->getIdByAccessToken($params[$f['access_token']], $params[$f['access_token_pass']]))\n      ) {\n        $this->id = $idUser;\n        $this->id_group = $this->db->selectOne(\n          $this->class_cfg['tables']['users'],\n          $this->class_cfg['arch']['users']['id_group'],\n          [$this->class_cfg['arch']['users']['id'] => $idUser]\n        );\n        $this->auth = true;\n      }\n      else {\n        $this->checkSession();\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 291,
            "endLine": 546,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "User constructor.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "db",
                        "name": "$db"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$params"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * User constructor.\n   *\n   * @param db    $db\n   * @param array $cfg\n   * @param array $params\n   *\/"
        },
        "isLoginRequest": {
            "name": "isLoginRequest",
            "summary": "Checks if the it's a login request.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isLoginRequest(array $params)\n  {\n    $f = $this->class_cfg['fields'];\n\n    return isset($params[$f['user']], $params[$f['pass']], $params[$f['salt']]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 554,
            "endLine": 559,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isLoginRequest",
            "returns": [],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the it's a login request.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$params"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the it's a login request.\n   *\n   * @param array $params\n   * @return bool\n   *\/"
        },
        "isResetPasswordRequest": {
            "name": "isResetPasswordRequest",
            "summary": "Checks if it's a reset password request.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isResetPasswordRequest(array $params)\n  {\n    $f = $this->class_cfg['fields'];\n\n    return isset(\n      $params[$f['key']],\n      $params[$f['id']],\n      $params[$f['pass1']],\n      $params[$f['pass2']],\n      $params[$f['action']]\n    )\n      && $params[$f['action']] === 'init_password';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 567,
            "endLine": 579,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isResetPasswordRequest",
            "returns": [],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if it's a reset password request.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$params"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if it's a reset password request.\n   *\n   * @param array $params\n   * @return bool\n   *\/"
        },
        "isReset": {
            "name": "isReset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isReset(): bool\n  {\n    return $this->password_reset;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 582,
            "endLine": 585,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isReset",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "getSalt": {
            "name": "getSalt",
            "summary": "Returns the salt string kept in session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSalt(): ?string\n  {\n    return $this->_get_session('salt');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 593,
            "endLine": 596,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getSalt",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the salt string kept in session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the salt string kept in session.\n   *\n   * @return null|string\n   *\/"
        },
        "checkSalt": {
            "name": "checkSalt",
            "summary": "Confronts the given string with the salt string kept in session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkSalt(string $salt): bool\n  {\n    return $this->getSalt() === $salt;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 604,
            "endLine": 607,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "checkSalt",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "salt",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Confronts the given string with the salt string kept in session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Confronts the given string with the salt string kept in session.\n   *\n   * @return bool\n   *\/"
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "Returns the current user's configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCfg($attr = '')\n  {\n    if ($this->check()) {\n      if (!$this->cfg) {\n        $this->cfg = $this->session->get('cfg');\n      }\n\n      if (empty($attr)) {\n        return $this->cfg;\n      }\n\n      if (isset($this->cfg[$attr])) {\n        return $this->cfg[$attr];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 616,
            "endLine": 633,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the current user's configuration.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$attr"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the current user's configuration.\n   *\n   * @param string $attr\n   * @return mixed\n   *\/"
        },
        "setData": {
            "name": "setData",
            "summary": "Stores or deletes data in the object for the current authenticated user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setData($index, $data = null): self\n  {\n    if (!$this->auth) {\n      throw new Exception(X::_(\"Impossible to store data on an unauthenticated user\"));\n    }\n\n    if (is_array($index) && X::isAssoc($index)) {\n      foreach ($index as $k => $v) {\n        \/\/ Unsetting if null\n        if (is_null($v) && array_key_exists($k, $this->data)) {\n          unset($this->data[$k]);\n        } else {\n          $this->data[$k] = $v;\n        }\n      }\n    } elseif (is_string($index)) {\n      $this->data[$index] = $data;\n    } else {\n      throw new Exception(X::_(\"Invalid parameters for function setData in user class\"));\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 644,
            "endLine": 666,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setData",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "index",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The name of the index to set, or an associative array of key\/values"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The data to store; if null the given index will be unset"
                }
            ],
            "doc": {
                "description": "Stores or deletes data in the object for the current authenticated user.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$index",
                        "description": "The name of the index to set, or an associative array of key\/values"
                    },
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$data",
                        "description": "The data to store; if null the given index will be unset"
                    }
                ],
                "return": "Chainable"
            },
            "comments": "  \/**\n   * Stores or deletes data in the object for the current authenticated user.\n   *\n   * @param string|array $index The name of the index to set, or an associative array of key\/values\n   * @param mixed        $data  The data to store; if null the given index will be unset\n   *\n   * @return self Chainable\n   *\/"
        },
        "updateInfo": {
            "name": "updateInfo",
            "summary": "Changes the data in the user's table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateInfo(array $d): bool\n  {\n    if ($this->checkSession()) {\n      $update = [];\n      foreach ($d as $key => $val) {\n        if (($key !== $this->fields['id'])\n          && ($key !== $this->fields['cfg'])\n          && ($key !== 'auth')\n          && ($key !== 'admin')\n          && ($key !== 'dev')\n          && ($key !== 'pass')\n        ) {\n          $update[$key] = $val;\n        }\n      }\n\n      if (\\count($update) > 0) {\n        $r = (bool)$this->dbTraitUpdate($this->getId(), $update);\n        \/** @todo Why did I do this?? *\/\n        if ($r) {\n          \/** @todo WTF?? *\/\n          $this->setSession(['cfg' => false]);\n          $this->_user_info();\n        }\n      }\n      return $r ?? false;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 675,
            "endLine": 704,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "updateInfo",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The new data"
                }
            ],
            "doc": {
                "description": "Changes the data in the user's table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$d",
                        "description": "The new data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the data in the user's table.\n   *\n   * @param array $d The new data\n   * @return bool\n   *\/"
        },
        "getPassword": {
            "name": "getPassword",
            "summary": "Encrypts the given string to match the password.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPassword(string $st): string\n  {\n    return $this->_hash($st);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 713,
            "endLine": 716,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPassword",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Encrypts the given string to match the password.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Encrypts the given string to match the password.\n   *\n   * @param string $st\n   * @return string\n   *\/"
        },
        "isJustLogin": {
            "name": "isJustLogin",
            "summary": "Returns true after the log in moment.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isJustLogin(): bool\n  {\n    return (bool)$this->_just_login;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 724,
            "endLine": 727,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isJustLogin",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true after the log in moment.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true after the log in moment.\n   *\n   * @return bool\n   *\/"
        },
        "setSession": {
            "name": "setSession",
            "summary": "Sets the given attribute(s) in the user's session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setSession($attr): self\n  {\n    if ($this->session->has($this->userIndex)) {\n      $args = \\func_get_args();\n      if ((\\count($args) === 2) && \\is_string($args[0])) {\n        $attr = [$args[0] => $args[1]];\n      }\n\n      if (is_array($attr)) {\n        foreach ($attr as $key => $val) {\n          if (\\is_string($key)) {\n            $this->session->set($val, $this->userIndex, $key);\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 735,
            "endLine": 753,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setSession",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the given attribute(s) in the user's session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the given attribute(s) in the user's session.\n   *\n   * @return self\n   *\/"
        },
        "unsetSession": {
            "name": "unsetSession",
            "summary": "Unsets the given attribute(s) in the user's session if exists.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetSession(): self\n  {\n    $args = \\func_get_args();\n    array_unshift($args, $this->userIndex);\n    if ($this->session->has(...$args)) {\n      $this->session->uset(...$args);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 761,
            "endLine": 770,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "unsetSession",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Unsets the given attribute(s) in the user's session if exists.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Unsets the given attribute(s) in the user's session if exists.\n   *\n   * @return self\n   *\/"
        },
        "getSession": {
            "name": "getSession",
            "summary": "Returns session property from the session's user array (userIndex).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getSession($attr = null)\n  {\n    if ($this->session && $this->session->has($this->userIndex)) {\n      return $attr ? $this->session->get($this->userIndex, $attr) : $this->session->get($this->userIndex);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 779,
            "endLine": 786,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getSession",
            "returns": [],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The property to get"
                }
            ],
            "doc": {
                "description": "Returns session property from the session's user array (userIndex).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "description": "The property to get"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns session property from the session's user array (userIndex).\n   *\n   * @param null|string The property to get\n   * @return mixed\n   *\/"
        },
        "getOsession": {
            "name": "getOsession",
            "summary": "Gets an attribute or the whole the \"session\" part of the session  (sessIndex).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOsession($attr = null)\n  {\n    return $this->_get_session($attr);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 795,
            "endLine": 798,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getOsession",
            "returns": [],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Name of the attribute to get."
                }
            ],
            "doc": {
                "description": "Gets an attribute or the whole the \"session\" part of the session  (sessIndex).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$attr",
                        "description": "Name of the attribute to get."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets an attribute or the whole the \"session\" part of the session  (sessIndex).\n   *\n   * @param string|null $attr Name of the attribute to get.\n   * @return mixed|null\n   *\/"
        },
        "setOsession": {
            "name": "setOsession",
            "summary": "Sets an attribute the \"session\" part of the session (sessIndex).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setOsession(): self\n  {\n    return $this->_set_session(...func_get_args());\n  }",
            "parent": false,
            "trait": false,
            "startLine": 806,
            "endLine": 809,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "setOsession",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Sets an attribute the \"session\" part of the session (sessIndex).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Sets an attribute the \"session\" part of the session (sessIndex).\n   *\n   * @return self\n   *\/"
        },
        "hasSession": {
            "name": "hasSession",
            "summary": "Checks if the given attribute exists in the user's session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSession($attr): bool\n  {\n    return $this->session->has($this->userIndex, $attr);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 817,
            "endLine": 820,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasSession",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks if the given attribute exists in the user's session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if the given attribute exists in the user's session.\n   *\n   * @return bool\n   *\/"
        },
        "updateActivity": {
            "name": "updateActivity",
            "summary": "Updates last activity value for the session in database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updateActivity(): self\n  {\n    if (($id_session = $this->getIdSession()) && $this->check()) {\n      $p = &$this->class_cfg['arch']['sessions'];\n      $this->db->update(\n        $this->class_cfg['tables']['sessions'],\n        [$p['last_activity'] => date('Y-m-d H:i:s')],\n        [$p['id'] => $id_session]\n      );\n    } else {\n      $this->setError(13);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 828,
            "endLine": 842,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "updateActivity",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Updates last activity value for the session in database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Updates last activity value for the session in database.\n   *\n   * @return self\n   *\/"
        },
        "saveSession": {
            "name": "saveSession",
            "summary": "Saves the session config in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function saveSession(bool $force = false): self\n  {\n    $id_session = $this->getIdSession();\n    if ($this->check()) {\n      if ($id_session) {\n        $p = &$this->class_cfg['arch']['sessions'];\n        \/\/ It is normal this is sometimes not changing as different actions can happen in the same\n        $time = time();\n        if ($force || empty($this->sess_cfg['last_renew']) || ($time - $this->sess_cfg['last_renew'] >= 2)) {\n          $this->sess_cfg['last_renew'] = $time;\n          $this->db->update(\n            $this->class_cfg['tables']['sessions'],\n            [\n              $p['id_user'] => $this->id,\n              $p['sess_id'] => $this->session->getId(),\n              $p['ip_address'] => $this->ip_address,\n              $p['user_agent'] => $this->user_agent,\n              $p['opened'] => 1,\n              $p['last_activity'] => date('Y-m-d H:i:s', $time),\n              $p['cfg'] => json_encode($this->sess_cfg)\n            ],\n            [$p['id'] => $id_session]\n          );\n        }\n      } else {\n        $this->setError(13);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 851,
            "endLine": 881,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "saveSession",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "force",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Saves the session config in the database.\n",
                "params": [],
                "return": "",
                "todo": {
                    "tag": "todo",
                    "text": "Use it only when needed!"
                }
            },
            "comments": "  \/**\n   * Saves the session config in the database.\n   *\n   * @todo Use it only when needed!\n   * @return self\n   *\/"
        },
        "closeSession": {
            "name": "closeSession",
            "summary": "Closes the session in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function closeSession($with_session = false): self\n  {\n    if ($this->id) {\n      if ($this->session) {\n        $p = &$this->class_cfg['arch']['sessions'];\n        $this->db->update(\n          $this->class_cfg['tables']['sessions'],\n          [\n            $p['ip_address'] => $this->ip_address,\n            $p['user_agent'] => $this->user_agent,\n            $p['opened'] => 0,\n            $p['last_activity'] => date('Y-m-d H:i:s'),\n            $p['cfg'] => json_encode($this->sess_cfg)\n          ],\n          [\n            $p['id_user'] => $this->id,\n            $p['sess_id'] => $this->session->getId()\n          ]\n        );\n        if ($with_session) {\n          $this->session->set([]);\n        } else {\n          $this->session->set([], $this->userIndex);\n        }\n      }\n      $this->auth     = false;\n      $this->id       = null;\n      $this->sess_cfg = null;\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 890,
            "endLine": 920,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "closeSession",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "with_session",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "session If true deletes also the session information"
                }
            ],
            "doc": {
                "description": "Closes the session in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "session If true deletes also the session information"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Closes the session in the database.\n   *\n   * @param bool $with_session If true deletes also the session information\n   * @return self\n   *\/"
        },
        "checkAttempts": {
            "name": "checkAttempts",
            "summary": "Returns false if the max number of connections attempts has been reached",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkAttempts(): bool\n  {\n    if (!isset($this->cfg)) {\n      return true;\n    }\n\n    if (isset($this->cfg['num_attempts']) && $this->cfg['num_attempts'] > $this->class_cfg['max_attempts']) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 927,
            "endLine": 938,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkAttempts",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns false if the max number of connections attempts has been reached\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns false if the max number of connections attempts has been reached\n   * @return bool\n   *\/"
        },
        "saveCfg": {
            "name": "saveCfg",
            "summary": "Saves the user's config in the cfg field of the users' table.",
            "description": "return self",
            "description_parts": [
                {
                    "type": "text",
                    "content": "return self"
                }
            ],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function saveCfg(): self\n  {\n    if ($this->check()) {\n      $this->db->update(\n        $this->class_cfg['tables']['users'],\n        [$this->fields['cfg'] => json_encode($this->cfg)],\n        [$this->fields['id'] => $this->id]\n      );\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 946,
            "endLine": 957,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "saveCfg",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Saves the user's config in the cfg field of the users' table.\n\nreturn self",
                "tags": []
            },
            "comments": "  \/**\n   * Saves the user's config in the cfg field of the users' table.\n   *\n   * return self\n   *\/"
        },
        "setCfg": {
            "name": "setCfg",
            "summary": "Saves the attribute(s) values into the session config.",
            "description": "return self",
            "description_parts": [
                {
                    "type": "text",
                    "content": "return self"
                }
            ],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setCfg($attr): self\n  {\n    if (null !== $this->cfg) {\n      $args = \\func_get_args();\n      if ((\\count($args) === 2) && \\is_string($attr)) {\n        \/** @var array $attr *\/\n        $attr = [$args[0] => $args[1]];\n      }\n\n      if (is_array($attr)) {\n        foreach ($attr as $key => $val) {\n          if (\\is_string($key)) {\n            $this->cfg[$key] = $val;\n          }\n        }\n\n        $this->setSession(['cfg' => $this->cfg]);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 965,
            "endLine": 986,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setCfg",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Saves the attribute(s) values into the session config.\n\nreturn self",
                "tags": []
            },
            "comments": "  \/**\n   * Saves the attribute(s) values into the session config.\n   *\n   * return self\n   *\/"
        },
        "unsetCfg": {
            "name": "unsetCfg",
            "summary": "Unsets the attribute(s) in the session config.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unsetCfg($attr): self\n  {\n    if (null !== $this->cfg) {\n      if (\\is_string($attr)) {\n        \/** @var array $attr *\/\n        $attr = [$attr];\n      }\n\n      if (is_array($attr)) {\n        foreach ($attr as $key) {\n          if (isset($key)) {\n            unset($this->cfg[$key]);\n          }\n        }\n\n        $this->setSession(['cfg' => $this->cfg]);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 995,
            "endLine": 1015,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "unsetCfg",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Unsets the attribute(s) in the session config.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "$attr"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Unsets the attribute(s) in the session config.\n   *\n   * @param $attr\n   * @return self\n   *\/"
        },
        "refreshInfo": {
            "name": "refreshInfo",
            "summary": "Regathers information from the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function refreshInfo(): self\n  {\n    if ($this->check()) {\n      $this->_user_info();\n      $this->_sess_info();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1023,
            "endLine": 1031,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "refreshInfo",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Regathers information from the database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Regathers information from the database.\n   *\n   * @return self\n   *\/"
        },
        "checkSession": {
            "name": "checkSession",
            "summary": "Retrieves user's info from session if needed and checks if authenticated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function checkSession(): bool\n  {\n    if ($this->check()) {\n      $this->_retrieve_session();\n      return $this->auth;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1039,
            "endLine": 1047,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "checkSession",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Retrieves user's info from session if needed and checks if authenticated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves user's info from session if needed and checks if authenticated.\n   *\n   * @return bool\n   *\/"
        },
        "isAdmin": {
            "name": "isAdmin",
            "summary": "Checks whether the user is an admin or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAdmin(): bool\n  {\n    return (bool)$this->getSession('admin');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1055,
            "endLine": 1058,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isAdmin",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks whether the user is an admin or not.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the user is an admin or not.\n   *\n   * @return bool\n   *\/"
        },
        "isDev": {
            "name": "isDev",
            "summary": "Checks whether the user is an (admin or developer) or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDev(): bool\n  {\n    return (bool)($this->isAdmin() || (bool)$this->getSession('dev'));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1066,
            "endLine": 1069,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDev",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Checks whether the user is an (admin or developer) or not.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the user is an (admin or developer) or not.\n   *\n   * @return bool\n   *\/"
        },
        "getManager": {
            "name": "getManager",
            "summary": "Gets a bbn\\User\\Manager instance.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getManager()\n  {\n    return new User\\Manager($this);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1077,
            "endLine": 1080,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getManager",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Gets a bbn\\User\\Manager instance.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a bbn\\User\\Manager instance.\n   *\n   * @return User\\Manager\n   *\/"
        },
        "setPassword": {
            "name": "setPassword",
            "summary": "Change the password in the database after checking the current one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setPassword(string $old_pass, string $new_pass): bool\n  {\n    if ($this->auth) {\n      $pwt         = $this->class_cfg['tables']['passwords'];\n      $pwa         = $this->class_cfg['arch']['passwords'];\n      $stored_pass = $this->db->selectOne(\n        $pwt,\n        $pwa['pass'],\n        [\n          $this->class_cfg['arch']['passwords']['id_user'] => $this->id\n        ],\n        [\n          $this->class_cfg['arch']['passwords']['added'] => 'DESC'\n        ]\n      );\n      if ($this->_check_password($old_pass, $stored_pass)) {\n        return $this->forcePassword($new_pass);\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1090,
            "endLine": 1111,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "setPassword",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "old_pass",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "pass The current password"
                },
                {
                    "name": "new_pass",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "pass The new password"
                }
            ],
            "doc": {
                "description": "Change the password in the database after checking the current one.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$old",
                        "description": "pass The current password"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$new",
                        "description": "pass The new password"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Change the password in the database after checking the current one.\n   *\n   * @param string $old_pass The current password\n   * @param string $new_pass The new password\n   * @return bool\n   *\/"
        },
        "getName": {
            "name": "getName",
            "summary": "Returns the full name of the given user or the current one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getName($usr = null): ?string\n  {\n    if ($this->auth) {\n      if (\\is_null($usr)) {\n        $usr = $this->getSession();\n      } elseif (str::isUid($usr)) {\n        $mgr = $this->getManager();\n        $usr = $mgr->getUser($usr);\n      }\n\n      if (isset($this->class_cfg['show'], $usr[$this->class_cfg['show']])) {\n        return $usr[$this->class_cfg['show']];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1119,
            "endLine": 1135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getName",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "usr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the full name of the given user or the current one.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the full name of the given user or the current one.\n   *\n   * @return string|null\n   *\/"
        },
        "addToken": {
            "name": "addToken",
            "summary": "Generates and insert a token in database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToken(): ?string\n  {\n    if ($this->auth) {\n      $token = Str::genpwd(32, 16);\n      $f     = &$this->class_cfg['arch']['tokens'];\n      if ($this->db->insert(\n        $this->class_cfg['tables']['tokens'],\n        [\n          $f['id_session'] => $this->getIdSession(),\n          $f['content'] => $token,\n          $f['creation'] => X::microtime(),\n          $f['last'] => X::microtime()\n        ]\n      )) {\n        return $token;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1143,
            "endLine": 1162,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "addToken",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Generates and insert a token in database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Generates and insert a token in database.\n   *\n   * @return string|null\n   *\/"
        },
        "getEmail": {
            "name": "getEmail",
            "summary": "Returns the email of the given user or the current one.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEmail($usr = null): ?string\n  {\n    if ($this->auth) {\n      if (\\is_null($usr)) {\n        $usr = $this->getSession();\n      } elseif (Str::isUid($usr) && ($mgr = $this->getManager())) {\n        $usr = $mgr->getUser($usr);\n      }\n\n      if (isset($this->fields['email'], $usr[$this->fields['email']])) {\n        return $usr[$this->fields['email']];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1170,
            "endLine": 1185,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getEmail",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "usr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the email of the given user or the current one.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the email of the given user or the current one.\n   *\n   * @return string|null\n   *\/"
        },
        "getUser": {
            "name": "getUser",
            "summary": "Returns the latest created connection, ie the current user's object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getUser(): ?self\n  {\n    return self::getInstance();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1192,
            "endLine": 1195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUser",
            "returns": [
                null,
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the latest created connection, ie the current user's object.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the latest created connection, ie the current user's object.\n   * @return self\n   *\/"
        },
        "getDataPath": {
            "name": "getDataPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDataPath(string|null $plugin = null): ?string\n  {\n    if ($this->check()) {\n      return Mvc::getUserDataPath($this->id, $plugin);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1197,
            "endLine": 1204,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getDataPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getTmpPath": {
            "name": "getTmpPath",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTmpPath(string|null $plugin = null): ?string\n  {\n    if ($this->check()) {\n      return Mvc::getUserTmpPath($this->id, $plugin);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1206,
            "endLine": 1213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getTmpPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "plugin",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "logIn": {
            "name": "logIn",
            "summary": "Completes the steps for a full authentication of the user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function logIn($id): self\n  {\n    $this->error = null;\n    if ($this->check() && $id) {\n      $this->_authenticate($id)->_user_info(true)->_init_dir(true)->saveSession();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1222,
            "endLine": 1230,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "logIn",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Completes the steps for a full authentication of the user.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Completes the steps for a full authentication of the user.\n   *\n   * @param string $id\n   * @return self\n   *\/"
        },
        "getPrint": {
            "name": "getPrint",
            "summary": "Returns a \"print\" based on the user agent + the fingerprint.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getPrint(string|null $fp = null): ?string\n  {\n    if (!$fp) {\n      $fp = $this->_get_session('fingerprint');\n    }\n\n    if ($fp) {\n      return sha1($this->user_agent . $this->accept_lang . $fp);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1239,
            "endLine": 1250,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getPrint",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "fp",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns a \"print\" based on the user agent + the fingerprint.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "null|string",
                        "name": "$fp"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns a \"print\" based on the user agent + the fingerprint.\n   *\n   * @param null|string $fp\n   * @return null|string\n   *\/"
        },
        "getIdSession": {
            "name": "getIdSession",
            "summary": "Returns the database ID for the session's row if it is in the session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getIdSession(): ?string\n  {\n    return $this->_get_session('id_session');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1258,
            "endLine": 1261,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getIdSession",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the database ID for the session's row if it is in the session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the database ID for the session's row if it is in the session.\n   *\n   * @return null|string\n   *\/"
        },
        "recordAttempt": {
            "name": "recordAttempt",
            "summary": "Increments the num_attempt variable (after unsuccessful login attempt).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function recordAttempt(): self\n  {\n    $this->cfg['num_attempts'] = isset($this->cfg['num_attempts']) ? $this->cfg['num_attempts'] + 1 : 1;\n    $this->_set_session('num_attempts', $this->cfg['num_attempts']);\n    $this->saveSession();\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1269,
            "endLine": 1275,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "recordAttempt",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Increments the num_attempt variable (after unsuccessful login attempt).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Increments the num_attempt variable (after unsuccessful login attempt).\n   *\n   * @return self\n   *\/"
        },
        "getIdByAccessToken": {
            "name": "getIdByAccessToken",
            "summary": "Returns the user's ID from the magic string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getIdByAccessToken(string $accessToken, string $accessTokenPass): ?string\n  {\n    return $this->db->selectOne([\n      'table' => $this->class_cfg['tables']['access_tokens'],\n      'fields' => $this->class_cfg['arch']['access_tokens']['id_user'],\n      'where' => [[\n        'field' => $this->class_cfg['arch']['access_tokens']['token'],\n        'value' => $accessToken\n      ], [\n        'field' => $this->class_cfg['arch']['access_tokens']['pass'],\n        'value' => \\bbn\\Util\\Enc::decrypt64($accessTokenPass)\n      ], [\n        'logic' => 'OR',\n        'conditions' => [[\n          'field' => $this->class_cfg['arch']['access_tokens']['validity'],\n          'operator' => 'isnull'\n        ], [\n          'field' => $this->class_cfg['arch']['access_tokens']['validity'],\n          'operator' => '<=',\n          'value' => date('Y-m-d H:i:s')\n        ]]\n      ]]\n    ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1281,
            "endLine": 1304,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getIdByAccessToken",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "accessToken",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "accessTokenPass",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the user's ID from the magic string.",
                "tags": []
            },
            "comments": "  \/**\n   * Returns the user's ID from the magic string.\n   *\/"
        },
        "_init_session": {
            "name": "_init_session",
            "summary": "Gets or creates (also in database) the user's session for the first time.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _init_session($defaults = []): self\n  {\n    \/\/ Getting or creating the session is it doesn't exist yet\n    \/** @var User\\Session *\/\n    $this->session = User\\Session::getInstance();\n    if (!$this->session) {\n      $session_cls   = defined('BBN_SESSION')\n        && is_string(constant('BBN_SESSION'))\n        && class_exists(constant('BBN_SESSION')) ? constant('BBN_SESSION') : '\\\\bbn\\\\User\\\\Session';\n      $this->session = new $session_cls($defaults);\n    }\n\n    \/** @var int $id_session The ID of the session row in the DB *\/\n    if (\n      !($id_session = $this->getIdSession())\n      || !($tmp = $this->db->selectOne(\n        $this->class_cfg['tables']['sessions'],\n        $this->class_cfg['arch']['sessions']['cfg'],\n        [$this->class_cfg['arch']['sessions']['id'] => $id_session]\n      ))\n    ) {\n      \/** @var string $salt *\/\n      $salt = self::makeFingerprint();\n\n      \/** @var string $fingerprint *\/\n      $fingerprint = self::makeFingerprint();\n\n      \/** @var array $p The fields of the sessions table *\/\n      $p = &$this->class_cfg['arch']['sessions'];\n\n      $this->sess_cfg = [\n        'fingerprint' => $this->getPrint($fingerprint),\n        'last_renew' => time()\n      ];\n\n      $id_session = $this->session->getId();\n\n      \/\/ Inserting the session in the database\n      if (\n        $id_session && $this->db->insert(\n          $this->class_cfg['tables']['sessions'],\n          [\n            $p['sess_id'] => $id_session,\n            $p['ip_address'] => $this->ip_address,\n            $p['user_agent'] => $this->user_agent,\n            $p['opened'] => 1,\n            $p['last_activity'] => date('Y-m-d H:i:s'),\n            $p['creation'] => date('Y-m-d H:i:s'),\n            $p['cfg'] => json_encode($this->sess_cfg)\n          ]\n        )\n      ) {\n        \/\/ Setting the session with its ID\n        $id = $this->db->lastId();\n        if (!$id) {\n          throw new Exception(X::_(\"No session ID, check if your tables have the indexes defined\"));\n        }\n\n        $this->session->set(\n          [\n            'fingerprint' => $fingerprint,\n            'tokens' => [],\n            'id_session' => $id,\n            'salt' => $salt\n          ],\n          $this->sessIndex\n        );\n\n        $this->saveSession();\n      } else {\n        $this->setError(16);\n      }\n    } else {\n      $this->sess_cfg = json_decode($tmp, true);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1312,
            "endLine": 1389,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_init_session",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "defaults",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets or creates (also in database) the user's session for the first time.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gets or creates (also in database) the user's session for the first time.\n   *\n   * @return self\n   *\/"
        },
        "_get_session": {
            "name": "_get_session",
            "summary": "Gets an attribute or the whole the \"session\" part of the session (sessIndex).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _get_session(string|null $attr = null)\n  {\n    if ($this->session->has($this->sessIndex)) {\n      return $attr ? $this->session->get($this->sessIndex, $attr) : $this->session->get($this->sessIndex);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1398,
            "endLine": 1405,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_session",
            "returns": [],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "Name of the attribute to get."
                }
            ],
            "doc": {
                "description": "Gets an attribute or the whole the \"session\" part of the session (sessIndex).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$attr",
                        "description": "Name of the attribute to get."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets an attribute or the whole the \"session\" part of the session (sessIndex).\n   *\n   * @param string|null $attr Name of the attribute to get.\n   * @return mixed\n   *\/"
        },
        "_check_credentials": {
            "name": "_check_credentials",
            "summary": "Checks the credentials of a user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _check_credentials($params, bool $makeHotlink = true): bool\n  {\n    if ($this->check()) {\n\n      \/** @var array $f The form fields sent to identify the users *\/\n      $f = &$this->class_cfg['fields'];\n\n      if (!isset($params[$f['salt']])) {\n        $this->setError(11);\n      } else {\n        if (!$this->checkSalt($params[$f['salt']])) {\n          $this->setError(17);\n          $this->session->destroy();\n        }\n      }\n\n      if ($this->check()) {\n        if (isset($params[$f['user']], $params[$f['pass']])) {\n          \/\/ Table structure\n          $arch = &$this->class_cfg['arch'];\n\n          $this->_just_login = 1;\n          if (!$this->check()) {\n            $this->setError(19);\n            \/\/$this->session->destroy();\n            \/\/$this->_init_session();\n          }\n\n          \/\/ Database Query\n          elseif ($id = $this->db->selectOne(\n            $this->class_cfg['tables']['users'],\n            $this->fields['id'],\n            X::mergeArrays(\n              $this->class_cfg['conditions'],\n              [$arch['users']['active'] => 1],\n              [($arch['users']['login'] ?? $arch['users']['email']) => $params[$f['user']]]\n            )\n          )) {\n            $numPasses = $this->db->count(\n              $this->class_cfg['tables']['passwords'],\n              [$arch['passwords']['id_user'] => $id]\n            );\n            \/\/ If no password is recorded we send a connection link\n            if (!$numPasses) {\n              $cfg = json_decode($this->db->selectOne($this->class_cfg['tables']['users'], $this->fields['cfg'], [$arch['users']['id'] => $id]) ?: '[]', true);\n              if (empty($cfg['empty_attempts'])) {\n                $cfg['empty_attempts'] = [\n                  'num' => 0,\n                  'last' => time()\n                ];\n\n              }\n              if ($cfg['empty_attempts']['num'] >= self::MAX_EMPTY_ATTEMPTS) {\n                if ($cfg['empty_attempts']['last'] > (time() - (3*3600))) {\n                  $this->setError(25);\n                }\n                else {\n                  $cfg['empty_attempts']['num'] = 0;\n                  $cfg['empty_attempts']['last'] = time();\n                }\n              }\n\n              if ($this->check()) {\n                $cfg['empty_attempts']['num']++;\n                $this->db->update($this->class_cfg['tables']['users'], [$this->fields['cfg'] => json_encode($cfg)], [$arch['users']['id'] => $id]);\n                if ($makeHotlink) {\n                  $this->getManager()->makeHotlink($id);\n                  $this->setError(26);\n                }\n              }\n            }\n            else {\n              $pass = $this->db->selectOne(\n                $this->class_cfg['tables']['passwords'],\n                $arch['passwords']['pass'],\n                [$arch['passwords']['id_user'] => $id],\n                [$arch['passwords']['added'] => 'DESC']\n              );\n              if ($this->_check_password($params[$f['pass']], $pass)) {\n                $this->_login($id);\n              } else {\n                $this->recordAttempt();\n                \/\/ Canceling authentication if num_attempts > max_attempts\n                $this->setError($this->checkAttempts() ? 6 : 4);\n              }\n            }\n          } else {\n            $this->setError(6);\n          }\n        } else {\n          $this->setError(12);\n        }\n      }\n    }\n\n    return $this->auth;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1414,
            "endLine": 1510,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_check_credentials",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Credentials"
                },
                {
                    "name": "makeHotlink",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks the credentials of a user.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$params",
                        "description": "Credentials"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks the credentials of a user.\n   *\n   * @param array $params Credentials\n   * @return bool\n   *\/"
        },
        "_login": {
            "name": "_login",
            "summary": "Initialize and saves the session after authentication.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _login($id): self\n  {\n    if ($this->check() && $id) {\n      $this->_authenticate($id)->_user_info()->_init_dir(true)->saveSession();\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1519,
            "endLine": 1526,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_login",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The user's ID (as stored in the database)."
                }
            ],
            "doc": {
                "description": "Initialize and saves the session after authentication.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "The user's ID (as stored in the database)."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize and saves the session after authentication.\n   *\n   * @param string $id The user's ID (as stored in the database).\n   * @return self\n   *\/"
        },
        "_user_info": {
            "name": "_user_info",
            "summary": "Gathers the user's data from the database and puts it in the session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _user_info(bool $force = false): self\n  {\n    if ($this->getId()) {\n      \/\/ Removing the encryption key to prevent it being saved in the session\n      if (isset($this->fields['enckey'])) {\n        unset($this->fields['enckey']);\n      }\n\n      if (!empty($this->getSession('cfg') && !$force)) {\n        $this->cfg      = $this->getSession('cfg');\n        $this->id_group = $this->getSession('id_group');\n      } elseif ($d = $this->db->rselect(\n        $this->class_cfg['tables']['users'],\n        array_unique(array_values($this->fields)),\n        X::mergeArrays(\n          $this->class_cfg['conditions'],\n          [$this->fields['active'] => 1],\n          [$this->fields['id'] => $this->id]\n        )\n      )) {\n        $r = [];\n        foreach ($d as $key => $val) {\n          $this->$key = $val;\n          $r[$key]    = ($key === $this->fields['cfg']) && $val ? json_decode($val, true) : $val;\n        }\n\n        $this->cfg = $r['cfg'] ?? [];\n        \/\/ Group\n        $this->id_group = $r['id_group'];\n        $this->session->set($r, $this->userIndex);\n        $this->saveSession();\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1534,
            "endLine": 1569,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_user_info",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "force",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gathers the user's data from the database and puts it in the session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Gathers the user's data from the database and puts it in the session.\n   *\n   * @return self\n   *\/"
        },
        "_sess_info": {
            "name": "_sess_info",
            "summary": "Gathers all the information about the user's session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _sess_info(string|null $id_session = null): self\n  {\n    if (!Str::isUid($id_session)) {\n      $id_session = $this->getIdSession();\n    } else {\n      $cfg = $this->_get_session('cfg');\n    }\n\n    if (\n      empty($cfg)\n      && Str::isUid($id_session)\n      && ($id = $this->getSession('id'))\n      && ($d = $this->db->rselect(\n        $this->class_cfg['tables']['sessions'],\n        $this->class_cfg['arch']['sessions'],\n        [\n          $this->class_cfg['arch']['sessions']['id'] => $id_session,\n          $this->class_cfg['arch']['sessions']['id_user'] => $id,\n          $this->class_cfg['arch']['sessions']['opened'] => 1,\n        ]\n      ))\n    ) {\n      $cfg = json_decode($d['cfg'], true);\n    }\n\n    if (isset($cfg) && \\is_array($cfg)) {\n      $this->sess_cfg = $cfg;\n    } else {\n      if (isset($id_session, $id)) {\n        $this->_init_session();\n        $new_id_session = $this->getIdSession();\n        if ($id_session !== $new_id_session) {\n          return $this->_sess_info($new_id_session);\n        }\n      }\n\n      $this->setError(14);\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1579,
            "endLine": 1619,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_sess_info",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "id_session",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "session The session's table data or its ID"
                }
            ],
            "doc": {
                "description": "Gathers all the information about the user's session.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "session The session's table data or its ID"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gathers all the information about the user's session.\n   *\n   * @param string $id_session The session's table data or its ID\n   * @return self\n   *\/"
        },
        "_check_password": {
            "name": "_check_password",
            "summary": "Checks the conformity of a given string with a hash.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _check_password(string $pass_given, string $pass_stored): bool\n  {\n    return $this->_hash($pass_given) === $pass_stored;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1629,
            "endLine": 1632,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_check_password",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "pass_given",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "given  The password to check"
                },
                {
                    "name": "pass_stored",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "stored The stored encrypted password to check against"
                }
            ],
            "doc": {
                "description": "Checks the conformity of a given string with a hash.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$pass",
                        "description": "given  The password to check"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$pass",
                        "description": "stored The stored encrypted password to check against"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks the conformity of a given string with a hash.\n   *\n   * @param string $pass_given  The password to check\n   * @param string $pass_stored The stored encrypted password to check against\n   * @return bool\n   *\/"
        },
        "_retrieve_session": {
            "name": "_retrieve_session",
            "summary": "Retrieves all user info from its session and populates the object.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _retrieve_session(bool $force = false): self\n  {\n    \/\/ $id mustn't be already defined\n    if (!$this->id || $force) {\n      \/\/ The user ID must be in the session\n      $id_session = $this->getIdSession();\n      $id         = $this->getSession('id');\n      if ($id_session && $id) {\n        $this->_sess_info($id_session);\n        if (\n          isset($this->sess_cfg['fingerprint'])\n          && ($this->getPrint($this->_get_session('fingerprint')) === $this->sess_cfg['fingerprint'])\n        ) {\n          $this->_authenticate($id)->_user_info()->_init_dir()->saveSession();\n        } else {\n          $this->setError(19);\n        }\n      } else {\n        $this->setError(15);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1641,
            "endLine": 1664,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_retrieve_session",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "force",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves all user info from its session and populates the object.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$force"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves all user info from its session and populates the object.\n   *\n   * @param bool $force\n   * @return self\n   *\/"
        },
        "_set_session": {
            "name": "_set_session",
            "summary": "Sets an attribute the \"session\" part of the session (sessIndex).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _set_session($attr): self\n  {\n    if ($this->session->has($this->sessIndex)) {\n      $args = \\func_get_args();\n      if ((\\count($args) === 2) && \\is_string($args[0])) {\n        $attr = [$args[0] => $args[1]];\n      }\n\n      if (is_array($attr)) {\n        foreach ($attr as $key => $val) {\n          if (\\is_string($key)) {\n            $this->session->set($val, $this->sessIndex, $key);\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1673,
            "endLine": 1691,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_set_session",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Attribute if value follows, or an array with attribute of value key pairs"
                }
            ],
            "doc": {
                "description": "Sets an attribute the \"session\" part of the session (sessIndex).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "mixed",
                        "name": "$attr",
                        "description": "Attribute if value follows, or an array with attribute of value key pairs"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets an attribute the \"session\" part of the session (sessIndex).\n   *\n   * @param mixed $attr Attribute if value follows, or an array with attribute of value key pairs\n   * @return self\n   *\/"
        },
        "_authenticate": {
            "name": "_authenticate",
            "summary": "Sets a user as authenticated ($this->auth = true).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _authenticate(string $id): self\n  {\n    if ($this->check() && $id) {\n      $this->id   = $id;\n      $this->auth = true;\n      $this->db->update(\n        $this->class_cfg['tables']['sessions'],\n        [\n          $this->class_cfg['arch']['sessions']['id_user'] => $id\n        ],\n        [\n          $this->class_cfg['arch']['sessions']['id'] => $this->getIdSession()\n        ]\n      );\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1700,
            "endLine": 1717,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_authenticate",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets a user as authenticated ($this->auth = true).\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets a user as authenticated ($this->auth = true).\n   *\n   * @param string $id\n   * @return self\n   *\/"
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "Checks if an error has been thrown or not.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check()\n  {\n    return $this->getError() ? false : true;\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\User\\Common",
            "startLine": 230,
            "endLine": 233,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks if an error has been thrown or not.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if an error has been thrown or not.\n   *\n   * @return bool\n   *\/"
        },
        "setError": {
            "name": "setError",
            "summary": "Sets the error property once and for all.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null): self\n  {\n    $this->log([$err, $this->class_cfg['errors'][$err] ?? null], 'userError');\n    if (!$this->error) {\n      $this->error = $err;\n    }\n\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\User\\Common",
            "startLine": 421,
            "endLine": 429,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "error code"
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the error property once and for all.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$err",
                        "description": "error code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the error property once and for all.\n   *\n   * @param int $err error code\n   * @return self\n   *\/"
        },
        "getError": {
            "name": "getError",
            "summary": "Returns the first error in an array with the code and description.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError(): ?array\n  {\n    if ($this->error) {\n      return [\n        'code' => $this->error,\n        'text' => $this->class_cfg['errors'][$this->error]\n      ];\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": "bbn\\User\\Common",
            "startLine": 437,
            "endLine": 447,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the first error in an array with the code and description.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the first error in an array with the code and description.\n   *\n   * @return null|array\n   *\/"
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "retrieverInit": {
            "name": "retrieverInit",
            "summary": "Initialize the retriever by putting its own instance as static property.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function retrieverInit(self $instance): void\n  {\n    self::$retriever_exists = true;\n    if (!self::$retriever_instance) {\n      self::$retriever_instance = $instance;\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 31,
            "endLine": 37,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "retrieverInit",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "instance",
                    "position": 0,
                    "type": "self",
                    "type_arr": [
                        "self"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The instance object."
                }
            ],
            "doc": {
                "description": "Initialize the retriever by putting its own instance as static property.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "self",
                        "name": "$instance",
                        "description": "The instance object."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Initialize the retriever by putting its own instance as static property.\n   *\n   * @param self $instance The instance object.\n   * @return void\n   *\/"
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function getInstance(): ?self\n  {\n    return self::$retriever_instance;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 44,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getInstance",
            "returns": [
                null,
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the instance of the singleton or null.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the instance of the singleton or null.\n   * \n   * @return self\n   *\/"
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Retriever.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function retrieverExists(): bool\n  {\n    return self::$retriever_exists;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\Retriever",
            "startLine": 54,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "retrieverExists",
            "returns": [
                "bool"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns true if an instance as been initiated.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if an instance as been initiated.\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(IFNULL(' . $this->db->csn($col, true) . ' ,\"{}\")';\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n\n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string|null $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSingleSelection": {
            "name": "dbTraitSingleSelection",
            "summary": "Gets a single row and returns it",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSingleSelection(\n    string|array $filter,\n    array $order,\n    string $mode = 'array',\n    array $fields = []\n  ): mixed\n  {\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (isset($cfg)\n        && ($res = $this->dbTraitSelection($cfg, $order, 1, 0, $mode, $fields))\n    ) {\n      return $res[0];\n    }\n\n    return null;\n\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 321,
            "endLine": 344,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitSingleSelection",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mode",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets a single row and returns it\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets a single row and returns it\n   *\n   * @param string|array $filter\n   * @param array $order\n   * @param string $mode\n   * @return mixed\n   *\/"
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the class configuration.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array|null $cfg = null)\n  {\n    $arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n\n      foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 59,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 118,
            "endLine": 121,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 41,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 96,
            "endLine": 136,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 144,
            "endLine": 147,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 152,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 164,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string|null $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 205,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string|null $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 226,
            "endLine": 253,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "dbTraitSelection": {
            "name": "dbTraitSelection",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitSelection(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    string $mode = 'array',\n    array $fields = []\n  ): array\n  {\n    $returnObject = $mode === 'object';\n    $req = $this->dbTraitGetRequestCfg($filter, $order, $limit, $start, $fields);\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    $method = $mode === 'object' ? 'selectAll' : ($mode === 'value' ? 'getColumnValues' : 'rselectAll');\n    $res = $this->db->$method($req);\n    if ($res) {\n      if (!empty($f['cfg'])) {\n        foreach ($res as &$r) {\n          if ($returnObject && !empty($r->{$f['cfg']})) {\n            $cfg = json_decode($r->{$f['cfg']});\n            $r = X::mergeObjects($cfg, $r);\n            unset($r->{$f['cfg']});\n          }\n          elseif (!$returnObject && !empty($r[$f['cfg']])) {\n            $cfg = json_decode($r[$f['cfg']], true);\n            $r = array_merge($cfg, $r);\n            unset($r[$f['cfg']]);\n          }\n        }\n\n        unset($r);\n      }\n\n      return $res;\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitSelection",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "mode",
                    "position": 4,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "array",
                    "default_name": "",
                    "description": "The mode of result ('array', 'object', 'value')."
                },
                {
                    "name": "fields",
                    "position": 5,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Returns an array of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$mode",
                        "description": "The mode of result ('array', 'object', 'value')."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The result set."
            },
            "comments": "  \/**\n   * Returns an array of rows from the table for the given conditions.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param string $mode The mode of result ('array', 'object', 'value').\n   * @param array $fields Fields to select.\n   *\n   * @return array The result set.\n   *\/"
        },
        "dbTraitGetRequestCfg": {
            "name": "dbTraitGetRequestCfg",
            "summary": "Prepares the request configuration for a database query.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function dbTraitGetRequestCfg(\n    array $filter,\n    array $order,\n    int $limit,\n    int $start,\n    array $fields = []\n  ): array\n  {\n    \/\/ Ensure table index is defined\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    \/\/ Validate fields\n    if (!empty($fields)) {\n      foreach (array_values($fields) as $f) {\n        if (!in_array($f, $this->class_cfg['arch'][$this->class_table_index])) {\n          throw new Exception(X::_(\"The field %s does not exist\", $f));\n        }\n      }\n\n      $properFields = $fields;\n    }\n    else {\n      $fields = $this->class_cfg['arch'][$this->class_table_index];\n    }\n\n    $ccfg = $this->getClassCfg();\n    if (isset($fields['cfg']) && !empty($ccfg['cfg'])) {\n      $cfgCol = $fields['cfg'];\n      unset($fields['cfg']);\n      if (!isset($properFields)) {\n        $properFields = array_values($fields);\n      }\n\n      foreach ($ccfg['cfg'] as $v) {\n        if ($v['field'] && !in_array($v['field'], $properFields)) {\n          $properFields[$v['field']] = \"IF(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              . \"') = 'null', NULL, JSON_UNQUOTE(JSON_EXTRACT(\"\n              . $this->db->csn($cfgCol, true) . \", '\\$.\" . $v['field']\n              .\"')))\";\n        }\n      }\n    }\n    elseif (!isset($properFields)) {\n      $properFields = array_values($fields);\n    }\n\n    \/\/ Build the request configuration\n    $req = [\n      'table' => $this->class_table,\n      'fields' => $properFields,\n      'where' => $this->dbTraitGetFilterCfg($filter),\n      'order' => $order\n    ];\n\n    if ($limit) {\n      $req['limit'] = $limit;\n      $req['start'] = $start;\n    }\n\n    return $req;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 317,
            "endLine": 380,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 4,
            "shortName": "dbTraitGetRequestCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Filter conditions."
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Order by conditions."
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Maximum number of rows to return."
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Offset of the first row to return."
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "Fields to select."
                }
            ],
            "doc": {
                "description": "Prepares the request configuration for a database query.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter",
                        "description": "Filter conditions."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order",
                        "description": "Order by conditions."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit",
                        "description": "Maximum number of rows to return."
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start",
                        "description": "Offset of the first row to return."
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$fields",
                        "description": "Fields to select."
                    }
                ],
                "return": "The request configuration.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the table index is not defined or a field does not exist."
                }
            },
            "comments": "  \/**\n   * Prepares the request configuration for a database query.\n   *\n   * @param array $filter Filter conditions.\n   * @param array $order Order by conditions.\n   * @param int $limit Maximum number of rows to return.\n   * @param int $start Offset of the first row to return.\n   * @param array $fields Fields to select.\n   *\n   * @return array The request configuration.\n   * @throws Exception If the table index is not defined or a field does not exist.\n   *\/"
        },
        "isVerifyPhoneNumberRequest": {
            "name": "isVerifyPhoneNumberRequest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isVerifyPhoneNumberRequest(array $params)\n  {\n    $f = $this->class_cfg['fields'];\n\n    return isset($params[$f['phone_number']], $params[$f['phone_verification_code']], $params[$f['device_uid']], $params[$f['token']])\n      && $params[$f['action']] === 'verifyCode';\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 65,
            "endLine": 71,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isVerifyPhoneNumberRequest",
            "returns": [],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isPhoneNumberCodeSendingRequest": {
            "name": "isPhoneNumberCodeSendingRequest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isPhoneNumberCodeSendingRequest(array $params)\n  {\n    $f = $this->class_cfg['fields'];\n\n    return isset($params[$f['phone_number']], $params[$f['device_uid']], $params[$f['token']])\n      && $params[$f['action']] === 'sendSmsCode';\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 73,
            "endLine": 79,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isPhoneNumberCodeSendingRequest",
            "returns": [],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isTokenLoginRequest": {
            "name": "isTokenLoginRequest",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isTokenLoginRequest(array $params): bool\n  {\n    $f = $this->class_cfg['fields'];\n    return X::hasProps($params, [$f['token'], $f['device_uid']], true);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 81,
            "endLine": 85,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "isTokenLoginRequest",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "params",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isToken": {
            "name": "isToken",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isToken(): bool\n  {\n    return (bool)$this->class_cfg['tables']['api_tokens'];\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 87,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isToken",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "getData": {
            "name": "getData",
            "summary": "Retrieves data stored in the data property of the user, only if authenticated.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getData(string $idx)\n  {\n    if (!$this->auth) {\n      throw new Exception(X::_(\"Impossible to retrieve data for an authenticated user\"));\n    }\n\n    return $this->data[$idx] ?? null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 100,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getData",
            "returns": [],
            "arguments": [
                {
                    "name": "idx",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves data stored in the data property of the user, only if authenticated.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$idx"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves data stored in the data property of the user, only if authenticated.\n   *\n   * @param string $idx\n   *\n   * @return void\n   *\/"
        },
        "getPath": {
            "name": "getPath",
            "summary": "Returns the directory path for the user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPath(): ?string\n  {\n    return $this->path;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 115,
            "endLine": 118,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getPath",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the directory path for the user.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the directory path for the user.\n   *\n   * @return string\n   *\/"
        },
        "getTmpDir": {
            "name": "getTmpDir",
            "summary": "Returns the tmp directory path for the user.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getTmpDir(): ?string\n  {\n    return $this->tmp_path;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 126,
            "endLine": 129,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTmpDir",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the tmp directory path for the user.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the tmp directory path for the user.\n   *\n   * @return string\n   *\/"
        },
        "isAuth": {
            "name": "isAuth",
            "summary": "Returns true if authenticated false otherwise.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isAuth()\n  {\n    return $this->auth;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 137,
            "endLine": 140,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isAuth",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns true if authenticated false otherwise.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns true if authenticated false otherwise.\n   *\n   * @return bool\n   *\/"
        },
        "getId": {
            "name": "getId",
            "summary": "Returns the user's ID if there is no error.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getId(): ?string\n  {\n    if ($this->check()) {\n      return $this->id;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 148,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getId",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the user's ID if there is no error.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the user's ID if there is no error.\n   *\n   * @return null|string\n   *\/"
        },
        "getGroup": {
            "name": "getGroup",
            "summary": "Returns the user's group's ID if there is no error.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getGroup(): ?string\n  {\n    if ($this->check()) {\n      return $this->id_group;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 163,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getGroup",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns the user's group's ID if there is no error.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the user's group's ID if there is no error.\n   *\n   * @return null|string\n   *\/"
        },
        "expireHotlink": {
            "name": "expireHotlink",
            "summary": "Expires an hotlink by setting the expire column to now.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function expireHotlink($id): int\n  {\n    if ($this->check()) {\n      return $this->db->update(\n        $this->class_cfg['tables']['hotlinks'],\n        [$this->class_cfg['arch']['hotlinks']['expire'] => date('Y-m-d H:i:s')],\n        [$this->class_cfg['arch']['hotlinks']['id'] => $id]\n      );\n    }\n\n    return 0;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 178,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "expireHotlink",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Expires an hotlink by setting the expire column to now.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Expires an hotlink by setting the expire column to now.\n   *\n   * @return int\n   *\/"
        },
        "getIdFromMagicString": {
            "name": "getIdFromMagicString",
            "summary": "Retrieves a user's ID from the hotlink's magic string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getIdFromMagicString(string $id, string $key): ?string\n  {\n    if ($val = $this->db->rselect(\n      $this->class_cfg['tables']['hotlinks'], [\n      'magic' => $this->class_cfg['arch']['hotlinks']['magic'],\n      'id_user' => $this->class_cfg['arch']['hotlinks']['id_user'],\n      'expire' => $this->class_cfg['arch']['hotlinks']['expire'],\n      ],[\n      $this->class_cfg['arch']['hotlinks']['id'] => $id\n      ]\n    )\n    ) {\n      if ($val['expire'] < date('Y-m-d H:i:s')) {\n        if (method_exists($this, 'setError')) {\n          $this->setError(27);\n        }\n      }\n      elseif (self::isMagicString($key, $val['magic'])) {\n        return $val['id_user'];\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 199,
            "endLine": 222,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getIdFromMagicString",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a user's ID from the hotlink's magic string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$key"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a user's ID from the hotlink's magic string.\n   *\n   * @param string $id\n   * @param string $key\n   * @return null|string\n   *\/"
        },
        "logout": {
            "name": "logout",
            "summary": "Unauthenticates, resets the config and destroys the session.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function logout()\n  {\n    $this->auth = false;\n    $this->cfg  = [];\n    $this->closeSession();\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 241,
            "endLine": 246,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "logout",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Unauthenticates, resets the config and destroys the session.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Unauthenticates, resets the config and destroys the session.\n   *\n   * @return void\n   *\/"
        },
        "getMailer": {
            "name": "getMailer",
            "summary": "Returns an instance of the mailer class.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getMailer()\n  {\n    if (!$this->_mailer) {\n      if (class_exists($this->class_cfg['mailer'])) {\n        $this->_mailer = new $this->class_cfg['mailer']();\n      }\n      else {\n        throw new Exception(X::_(\"Impossible to find the mailer class %s\", (string)$this->class_cfg['mailer']));\n      }\n    }\n\n    return $this->_mailer;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 255,
            "endLine": 267,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getMailer",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns an instance of the mailer class.\n",
                "params": [],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * Returns an instance of the mailer class.\n   *\n   * @return Mail\n   * @throws Exception\n   *\/"
        },
        "forcePassword": {
            "name": "forcePassword",
            "summary": "Changes the password in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function forcePassword($pass): bool\n  {\n    if ($this->id) {\n      return (bool)$this->db->insert(\n        $this->class_cfg['tables']['passwords'], [\n        $this->class_cfg['arch']['passwords']['pass'] => $this->_hash($pass),\n        $this->class_cfg['arch']['passwords']['id_user'] => $this->id,\n        $this->class_cfg['arch']['passwords']['added'] => date('Y-m-d H:i:s')\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 275,
            "endLine": 288,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "forcePassword",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "pass",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Changes the password in the database.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Changes the password in the database.\n   *\n   * @return bool\n   *\/"
        },
        "addToTmp": {
            "name": "addToTmp",
            "summary": "Adds a file to the tmp folder of the user and returns its path.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function addToTmp(string $file, string|null $name = null, $move = true):? string\n  {\n    if ($this->auth) {\n      $fs   = new System();\n      $path = $this->getTmpDir().microtime(true).'\/';\n      if ($fs->isFile($file) && $fs->createPath($path)) {\n        $dest = $path.($name ?: X::basename($file));\n        if ($move) {\n          if ($fs->move($file, X::dirname($dest)) && $fs->rename(X::dirname($dest).'\/'.X::basename($file), X::basename($dest))) {\n            return $dest;\n          }\n        }\n        elseif ($fs->copy($file, $dest)) {\n          return $dest;\n        }\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 323,
            "endLine": 342,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "addToTmp",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "move",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Adds a file to the tmp folder of the user and returns its path.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$name"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$move"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Adds a file to the tmp folder of the user and returns its path.\n   *\n   * @param string $file\n   * @param string $name\n   * @param bool   $move\n   * @return string|null\n   *\/"
        },
        "crypt": {
            "name": "crypt",
            "summary": "Encrypts the given string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function crypt(string $st): ?string\n  {\n    if ($enckey = $this->_get_encryption_key()) {\n      return Enc::crypt($st, $enckey) ?: null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 351,
            "endLine": 358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "crypt",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Encrypts the given string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Encrypts the given string.\n   *\n   * @param string $st\n   * @return string|null\n   *\/"
        },
        "decrypt": {
            "name": "decrypt",
            "summary": "Decrypts the given string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function decrypt(string $st): ?string\n  {\n    if ($enckey = $this->_get_encryption_key()) {\n      return Enc::decrypt($st, $enckey) ?: null;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 367,
            "endLine": 374,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "decrypt",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Decrypts the given string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Decrypts the given string.\n   *\n   * @param string $st\n   * @return string|null\n   *\/"
        },
        "makeFingerprint": {
            "name": "makeFingerprint",
            "summary": "Generates a random long string (16-32 chars) used as unique fingerprint.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function makeFingerprint(): string\n  {\n    return Str::genpwd(32, 16);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 381,
            "endLine": 384,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeFingerprint",
            "returns": [
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Generates a random long string (16-32 chars) used as unique fingerprint.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a random long string (16-32 chars) used as unique fingerprint.\n   * @return string\n   *\/"
        },
        "makeMagicString": {
            "name": "makeMagicString",
            "summary": "Returns an array with a key and a magic string used for making hotlinks.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function makeMagicString(): array\n  {\n    $key = self::makeFingerprint();\n    return [\n      'key' => $key,\n      'hash' => hash('sha256', $key)\n    ];\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 392,
            "endLine": 399,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "makeMagicString",
            "returns": [
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "Returns an array with a key and a magic string used for making hotlinks.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array with a key and a magic string used for making hotlinks.\n   *\n   * @return array\n   *\/"
        },
        "isMagicString": {
            "name": "isMagicString",
            "summary": "Checks if a given string corresponds to the given hash.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function isMagicString(string $key, string $hash): bool\n  {\n    return hash('sha256', $key) === $hash;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 409,
            "endLine": 412,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "isMagicString",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The key"
                },
                {
                    "name": "hash",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The corresponding hash"
                }
            ],
            "doc": {
                "description": "Checks if a given string corresponds to the given hash.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$key",
                        "description": "The key"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$hash",
                        "description": "The corresponding hash"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks if a given string corresponds to the given hash.\n   *\n   * @param string $key  The key\n   * @param string $hash The corresponding hash\n   * @return bool\n   *\/"
        },
        "_get_encryption_key": {
            "name": "_get_encryption_key",
            "summary": "Retrieves the encryption key from database if not defined and saves it.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _get_encryption_key(): ?string\n  {\n    if (is_null($this->_encryption_key)) {\n      if ($this->auth) {\n        $this->_encryption_key = $this->db->selectOne(\n          $this->class_cfg['table'],\n          $this->class_cfg['arch']['users']['enckey'],\n          ['id' => $this->id]\n        );\n        if (!$this->_encryption_key) {\n          $this->_encryption_key = Str::genpwd(32, 16);\n          $this->db->update(\n            $this->class_cfg['table'],\n            [$this->class_cfg['arch']['users']['enckey'] => $this->_encryption_key],\n            ['id' => $this->id]\n          );\n        }\n      }\n    }\n\n    return $this->_encryption_key;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 454,
            "endLine": 475,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "_get_encryption_key",
            "returns": [
                null,
                "string"
            ],
            "arguments": [],
            "doc": {
                "description": "Retrieves the encryption key from database if not defined and saves it.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves the encryption key from database if not defined and saves it.\n   *\n   * @return string|null\n   *\/"
        },
        "_hash": {
            "name": "_hash",
            "summary": "Use the configured hash function to encrypt a password string.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _hash(string $st): string\n  {\n    if (empty($this->class_cfg['encryption']) || !function_exists($this->class_cfg['encryption'])) {\n      return hash('sha256', $st);\n    }\n\n    return $this->class_cfg['encryption']($st);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 484,
            "endLine": 491,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_hash",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The string to crypt"
                }
            ],
            "doc": {
                "description": "Use the configured hash function to encrypt a password string.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$st",
                        "description": "The string to crypt"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n    * Use the configured hash function to encrypt a password string.\n    *\n    * @param string $st The string to crypt\n    * @return string\n    *\/"
        },
        "_init_dir": {
            "name": "_init_dir",
            "summary": "Defines user's directory and constant BBN_USER_PATH if not done yet.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _init_dir(bool $create = false): self\n  {\n    if (\\defined('BBN_DATA_PATH') && $this->getId()) {\n      $this->path     = Mvc::getUserDataPath($this->getId());\n      $this->tmp_path = Mvc::getUserTmpPath($this->getId());\n      if (!\\defined('BBN_USER_PATH')) {\n        define('BBN_USER_PATH', $this->path);\n      }\n\n      if ($create && !empty($this->path) && !empty($this->tmp_path)) {\n        Dir::createPath($this->path);\n        Dir::createPath($this->tmp_path);\n        Dir::delete($this->tmp_path, false);\n      }\n    }\n\n    return $this;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 502,
            "endLine": 519,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "_init_dir",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "create",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "If true creates it and remove temp files if any"
                }
            ],
            "doc": {
                "description": "Defines user's directory and constant BBN_USER_PATH if not done yet.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$create",
                        "description": "If true creates it and remove temp files if any"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n    * Defines user's directory and constant BBN_USER_PATH if not done yet.\n    *\n    * @param bool $create If true creates it and remove temp files if any\n    * @return self\n    *\/"
        },
        "saveNewPermissionTokens": {
            "name": "saveNewPermissionTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function saveNewPermissionTokens(string $access_token, string $refresh_token, int $expires_in, string $account_name): bool\n  {\n    if ($this->id) {\n      $account_exists = $this->db->count(\n        $this->class_cfg['tables']['permission_accounts'],\n        [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      );\n      \n      if ($account_exists > 0 ){\n        throw new Exception(X::_('Account already exists!'));\n      }\n      \n      if ($this->db->insert(\n          $this->class_cfg['tables']['permission_accounts'], [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      )) {\n        return (bool)$this->db->insert(\n          $this->class_cfg['tables']['permission_tokens'], [\n            $this->class_cfg['arch']['permission_tokens']['id_account']    => $this->db->lastId(),\n            $this->class_cfg['arch']['permission_tokens']['access_token']  => $access_token,\n            $this->class_cfg['arch']['permission_tokens']['refresh_token'] => $refresh_token,\n            $this->class_cfg['arch']['permission_tokens']['expire']        => time() + $expires_in,\n          ]\n        );\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 530,
            "endLine": 563,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "saveNewPermissionTokens",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "access_token",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "token"
                },
                {
                    "name": "refresh_token",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "token"
                },
                {
                    "name": "expires_in",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "in"
                },
                {
                    "name": "account_name",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$access",
                        "description": "token"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$refresh",
                        "description": "token"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$expires",
                        "description": "in"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$account",
                        "description": "name"
                    }
                ],
                "return": "",
                "throws": {
                    "tag": "throws",
                    "type": "Exception"
                }
            },
            "comments": "  \/**\n   * @param string $access_token\n   * @param string $refresh_token\n   * @param int $expires_in\n   * @param string $account_name\n   * @return bool\n   * @throws Exception\n   *\/"
        },
        "getPermissionAccountFromName": {
            "name": "getPermissionAccountFromName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPermissionAccountFromName(string $account_name)\n  {\n    if ($this->id) {\n      return $this->db->rselect(\n        $this->class_cfg['tables']['permission_accounts'],\n        $this->class_cfg['arch']['permission_accounts'],\n        [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 565,
            "endLine": 579,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPermissionAccountFromName",
            "returns": [],
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPermissionTokensFromAccountName": {
            "name": "getPermissionTokensFromAccountName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPermissionTokensFromAccountName(string $account_name)\n  {\n    if ($this->id) {\n      if ($account = $this->getPermissionAccountFromName($account_name)) {\n        return $this->db->rselect(\n          $this->class_cfg['tables']['permission_tokens'],\n          $this->class_cfg['arch']['permission_tokens'],\n          [\n            $this->class_cfg['arch']['permission_tokens']['id_account'] => $account[$this->class_cfg['arch']['permission_accounts']['id']],\n          ]\n        ); \n      }\n    }\n    \n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 585,
            "endLine": 600,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getPermissionTokensFromAccountName",
            "returns": [],
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$account",
                        "description": "name"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $account_name\n   * @return array|false|null\n   *\/"
        },
        "updatePermissionTokens": {
            "name": "updatePermissionTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function updatePermissionTokens(string $account_name, string $access_token, string $refresh_token, int $expire_in)\n  {\n    if ($this->id && $account = $this->getPermissionAccountFromName($account_name)) {\n        return $this->db->update(\n          $this->class_cfg['tables']['permission_tokens'], [\n          $this->class_cfg['arch']['permission_tokens']['access_token']   => $access_token,\n          $this->class_cfg['arch']['permission_tokens']['refresh_token']  => $refresh_token,\n          $this->class_cfg['arch']['permission_tokens']['expire']         => time() + $expire_in,\n        ], [\n            $this->class_cfg['arch']['permission_tokens']['id_account'] => $account[$this->class_cfg['arch']['permission_accounts']['id']]\n          ]\n        );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 602,
            "endLine": 617,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "shortName": "updatePermissionTokens",
            "returns": [],
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "access_token",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "refresh_token",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "expire_in",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "findByPhoneNumber": {
            "name": "findByPhoneNumber",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function findByPhoneNumber(string $phone_number)\n  {\n    try {\n      $phone = PhoneNumber::parse($phone_number);\n    }\n    catch (PhoneNumberParseException $e) {\n      return false;\n    }\n    $phone_number = $phone->format(PhoneNumberFormat::E164);\n    $user = $this->db->rselect(\n      $this->class_cfg['tables']['users'],\n      $this->class_cfg['arch']['users'],\n      [\n        $this->class_cfg['arch']['users']['login'] => $phone_number\n      ]\n    );\n    return !empty($user) && !$this->hasSkipVerification($user[$this->class_cfg['arch']['users']['id']]) && !$phone->isValidNumber() ? false : $user;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 623,
            "endLine": 640,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "findByPhoneNumber",
            "returns": [],
            "arguments": [
                {
                    "name": "phone_number",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "number"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$phone",
                        "description": "number"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $phone_number\n   * @return array|null\n   *\/"
        },
        "findUserByApiTokenAndDeviceUid": {
            "name": "findUserByApiTokenAndDeviceUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function findUserByApiTokenAndDeviceUid(string $token, $device_uid)\n  {\n    if ($user_id = $this->getUserByTokenAndDeviceUid($token, $device_uid)) {\n\n      return $this->db->rselect(\n        $this->class_cfg['tables']['users'],\n        $this->class_cfg['arch']['users'],\n        [\n          $this->class_cfg['arch']['users']['id'] => $user_id\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 647,
            "endLine": 661,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "findUserByApiTokenAndDeviceUid",
            "returns": [],
            "arguments": [
                {
                    "name": "token",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "device_uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$token"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $token\n   * @return array|null\n   *\/"
        },
        "updatePhoneVerificationCode": {
            "name": "updatePhoneVerificationCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function updatePhoneVerificationCode($phone_number, ?string $code): bool\n  {\n    if ($oldCfg = $this->db->selectOne($this->class_cfg['tables']['users'], $this->class_cfg['arch']['users']['cfg'], [\n      $this->class_cfg['arch']['users']['id'] => $this->id\n    ])) {\n      $oldCfg = json_decode($oldCfg, true);\n    }\n    else {\n      $oldCfg = [];\n    }\n    $cfg = json_encode(\\array_merge($oldCfg, ['phone_verification_code' => $code]));\n    try {\n      $phone = PhoneNumber::parse($phone_number);\n    }\n    catch (PhoneNumberParseException $e) {\n      return false;\n    }\n    \n    if (!$this->hasSkipVerification() && !$phone->isValidNumber()) {\n      return false;\n    }\n\n\n    $number = $phone->format(PhoneNumberFormat::E164);\n\n    return (bool)$this->db->update(\n      $this->class_cfg['tables']['users'],\n      [\n        $this->class_cfg['arch']['users']['login'] => $number,\n        $this->class_cfg['arch']['users']['phone'] => $number,\n        $this->class_cfg['arch']['users']['cfg'] => $cfg\n      ],\n      [$this->class_cfg['arch']['users']['id'] => $this->id]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 667,
            "endLine": 701,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "updatePhoneVerificationCode",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "phone_number",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string|null $code\n   * @return int|null\n   *\/"
        },
        "verifyTokenAndDeviceUid": {
            "name": "verifyTokenAndDeviceUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function verifyTokenAndDeviceUid($device_uid, $token)\n  {\n    return $this->db->count(\n      $this->class_cfg['tables']['api_tokens'],\n      [\n        $this->class_cfg['arch']['api_tokens']['token']      => $token,\n        $this->class_cfg['arch']['api_tokens']['device_uid'] => $device_uid,\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 705,
            "endLine": 714,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "verifyTokenAndDeviceUid",
            "returns": [],
            "arguments": [
                {
                    "name": "device_uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "token",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUserByTokenAndDeviceUid": {
            "name": "getUserByTokenAndDeviceUid",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getUserByTokenAndDeviceUid($token, $device_uid)\n  {\n    return $this->db->selectOne(\n      $this->class_cfg['tables']['api_tokens'],\n      $this->class_cfg['arch']['api_tokens']['id_user'],\n      [\n        $this->class_cfg['arch']['api_tokens']['token']      => $token,\n        $this->class_cfg['arch']['api_tokens']['device_uid'] => $device_uid,\n      ]\n    );\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 716,
            "endLine": 726,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getUserByTokenAndDeviceUid",
            "returns": [],
            "arguments": [
                {
                    "name": "token",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "device_uid",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateApiTokenUserByTokenDevice": {
            "name": "updateApiTokenUserByTokenDevice",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function updateApiTokenUserByTokenDevice(string $token, string $deviceUid, string $idUser, string $deviceLang = ''): bool\n  {\n    if (!empty($token) && !empty($deviceUid) && !empty($idUser)) {\n      return (bool)$this->db->update(\n        $this->class_cfg['tables']['api_tokens'],\n        [\n          $this->class_cfg['arch']['api_tokens']['id_user'] => $idUser,\n          $this->class_cfg['arch']['api_tokens']['device_lang'] => $deviceLang\n        ],\n        [\n          $this->class_cfg['arch']['api_tokens']['token'] => $token,\n          $this->class_cfg['arch']['api_tokens']['device_uid'] => $deviceUid\n        ]\n      );\n    }\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 728,
            "endLine": 744,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "updateApiTokenUserByTokenDevice",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "token",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deviceUid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "idUser",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "deviceLang",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getApiRequestOutput": {
            "name": "getApiRequestOutput",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApiRequestOutput()\n  {\n    return $this->api_request_output;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 746,
            "endLine": 749,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getApiRequestOutput",
            "returns": [],
            "arguments": []
        },
        "getApiNotificationsToken": {
            "name": "getApiNotificationsToken",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getApiNotificationsToken(string $idUser = ''): ?string\n  {\n    return $this->db->selectOne([\n      'table' => $this->class_cfg['tables']['api_tokens'],\n      'fields' => $this->class_cfg['arch']['api_tokens']['notifications_token'],\n      'where' => [ \n        $this->class_cfg['arch']['api_tokens']['id_user'] => $idUser ?: $this->id\n      ],\n      'order' => [[\n        'field' => $this->class_cfg['arch']['api_tokens']['last'],\n        'dir' => 'DESC'\n      ]]\n    ]);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 751,
            "endLine": 764,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getApiNotificationsToken",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idUser",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPhoneNumber": {
            "name": "getPhoneNumber",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getPhoneNumber(string $idUser = ''): ?string\n  {\n    return $this->db->selectOne($this->class_cfg['table'], $this->class_cfg['arch']['users']['phone'], [\n      $this->class_cfg['arch']['users']['id'] => $idUser ?: $this->id\n    ]);\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 766,
            "endLine": 771,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "getPhoneNumber",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "idUser",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasSkipVerification": {
            "name": "hasSkipVerification",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasSkipVerification(string $id = ''): bool\n  {\n    if ($cfg = $this->db->selectOne(\n      $this->class_cfg['tables']['users'],\n      $this->class_cfg['arch']['users']['cfg'],\n      [\n        $this->class_cfg['arch']['users']['id'] => $id ?: $this->id\n      ]\n    )) {\n      $cfg = json_decode($cfg);\n      return !empty($cfg->skip_verification);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 774,
            "endLine": 787,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "hasSkipVerification",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDbInstance": {
            "name": "getDbInstance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\User",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/User\/Common.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getDbInstance(): Db\n  {\n    return $this->db;\n  }",
            "parent": false,
            "trait": "bbn\\User\\Common",
            "startLine": 792,
            "endLine": 795,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getDbInstance",
            "returns": [
                "bbn\\Db"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": "db"
            },
            "comments": "  \/**\n   * @return Db db\n   *\/"
        }
    },
    "properties": {
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "Sets if the hotlinks features should be in used\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool"
                    }
                ]
            },
            "parent": false,
            "value": {
                "errors": {
                    "0": "login failed",
                    "2": "password sent",
                    "3": "no email such as",
                    "4": "too many attempts",
                    "5": "impossible to create the user",
                    "6": "wrong user and\/or password",
                    "7": "different passwords",
                    "8": "less than 5 mn between emailing password",
                    "9": "user already exists",
                    "10": "problem during user creation",
                    "11": "no salt in session",
                    "12": "login and password are mandatory",
                    "13": "impossible to save the session",
                    "14": "impossible to retrieve the session",
                    "15": "no session in memory",
                    "16": "impossible to add session in the database",
                    "17": "non matching salt",
                    "18": "incorrect magic string",
                    "19": "wrong fingerprint",
                    "20": "invalid token",
                    "21": "invalid phone number",
                    "22": "impossible to update the phone number or the verification code",
                    "23": "unknown phone number",
                    "24": "invalid verification code",
                    "25": "you have exhausted the number of hotlinks sent, try again later",
                    "26": "An email has been sent in order to reset your password",
                    "27": "The hotlink is expired"
                },
                "table": "bbn_users",
                "tables": {
                    "groups": "bbn_users_groups",
                    "hotlinks": "bbn_users_hotlinks",
                    "passwords": "bbn_users_passwords",
                    "sessions": "bbn_users_sessions",
                    "tokens": "bbn_users_tokens",
                    "api_tokens": "bbn_users_api_tokens",
                    "access_tokens": "bbn_users_access_tokens",
                    "users": "bbn_users",
                    "permission_accounts": "bbn_users_permission_accounts",
                    "permission_tokens": "bbn_users_permission_account_tokens"
                },
                "arch": {
                    "groups": {
                        "id": "id",
                        "group": "group",
                        "type": "type",
                        "code": "code",
                        "cfg": "cfg"
                    },
                    "hotlinks": {
                        "id": "id",
                        "id_user": "id_user",
                        "magic": "magic",
                        "expire": "expire"
                    },
                    "passwords": {
                        "id_user": "id_user",
                        "pass": "pass",
                        "added": "added"
                    },
                    "sessions": {
                        "id": "id",
                        "id_user": "id_user",
                        "sess_id": "sess_id",
                        "ip_address": "ip_address",
                        "user_agent": "user_agent",
                        "opened": "opened",
                        "creation": "creation",
                        "last_activity": "last_activity",
                        "cfg": "cfg"
                    },
                    "tokens": {
                        "id": "id",
                        "id_session": "id_session",
                        "content": "content",
                        "creation": "creation",
                        "dt_creation": "dt_creation",
                        "last": "last",
                        "dt_last": "dt_last"
                    },
                    "api_tokens": {
                        "id": "id",
                        "id_user": "id_user",
                        "token": "token",
                        "creation": "creation",
                        "last": "last",
                        "device_uid": "device_uid",
                        "device_platform": "device_platform",
                        "device_lang": "device_lang",
                        "notifications_token": "notifications_token"
                    },
                    "access_tokens": {
                        "id_user": "id_user",
                        "token": "token",
                        "pass": "pass",
                        "validity": "validity"
                    },
                    "users": {
                        "id": "id",
                        "id_group": "id_group",
                        "email": "email",
                        "username": "username",
                        "phone": "phone",
                        "login": "login",
                        "admin": "admin",
                        "dev": "dev",
                        "theme": "theme",
                        "cfg": "cfg",
                        "active": "active",
                        "enckey": "enckey"
                    },
                    "permission_accounts": {
                        "id": "id",
                        "id_user": "id_user",
                        "name": "name"
                    },
                    "permission_tokens": {
                        "id": "id",
                        "id_account": "id_account",
                        "access_token": "access_token",
                        "refresh_token": "refresh_token",
                        "expire": "expire"
                    }
                },
                "fields": {
                    "user": "user",
                    "pass": "pass",
                    "salt": "appui_salt",
                    "key": "key",
                    "id": "id",
                    "pass1": "pass1",
                    "pass2": "pass2",
                    "action": "action",
                    "token": "appui_token",
                    "access_token": "appui_access_token",
                    "access_token_pass": "appui_access_token_pass",
                    "device_uid": "device_uid",
                    "device_lang": "device_lang",
                    "phone_number": "phone_number",
                    "phone_verification_code": "phone_verification_code"
                },
                "encryption": "sha1",
                "conditions": [],
                "max_attempts": 10,
                "verification_code_length": 4,
                "max_sessions": 5,
                "hotlinks": false,
                "show": "username",
                "mailer": "\\bbn\\Mail",
                "ip_address": true
            }
        },
        "_just_login": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool Will be true when the user has just logged in.",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "_encryption_key": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": null
        },
        "sessIndex": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string The name of the session index in for session data",
                "tags": []
            },
            "parent": false,
            "value": "bbn_session"
        },
        "userIndex": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string The name of the session index in for user data",
                "tags": []
            },
            "parent": false,
            "value": "bbn_user"
        },
        "password_reset": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": false
        },
        "session": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var User\\Session",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "user_agent": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "ip_address": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "email": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "accept_lang": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "sql": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "id": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "data": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "id_group": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var int",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "alert": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var mixed",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "sess_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var Db",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "prev_time": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var mixed",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array $class_cfg",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "retriever_instance": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "self",
                        "description": "An instance of the current class."
                    }
                ]
            },
            "parent": false,
            "value": null
        },
        "retriever_exists": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Retriever",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "bool",
                        "description": "Will be true from the moment an instance exists."
                    }
                ]
            },
            "parent": false,
            "value": false
        },
        "_isInitClassCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "dbTraitRelations": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "dbTraitStructure": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Cached relations for the current table."
                    }
                ]
            },
            "parent": false,
            "value": []
        },
        "_mailer": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "auth": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var bool",
                "tags": []
            },
            "parent": false,
            "value": false
        },
        "path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "tmp_path": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "api_request_output": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\User"
            },
            "declaring_trait": "bbn\\User\\Common",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "An output string to be returned when in api requests.\nWill be mainly used to return tokens response in api request.\n",
                "tags": [
                    {
                        "tag": "var",
                        "type": "mixed"
                    }
                ]
            },
            "parent": false,
            "value": null
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "errors": {
                "0": "login failed",
                "2": "password sent",
                "3": "no email such as",
                "4": "too many attempts",
                "5": "impossible to create the user",
                "6": "wrong user and\/or password",
                "7": "different passwords",
                "8": "less than 5 mn between emailing password",
                "9": "user already exists",
                "10": "problem during user creation",
                "11": "no salt in session",
                "12": "login and password are mandatory",
                "13": "impossible to save the session",
                "14": "impossible to retrieve the session",
                "15": "no session in memory",
                "16": "impossible to add session in the database",
                "17": "non matching salt",
                "18": "incorrect magic string",
                "19": "wrong fingerprint",
                "20": "invalid token",
                "21": "invalid phone number",
                "22": "impossible to update the phone number or the verification code",
                "23": "unknown phone number",
                "24": "invalid verification code",
                "25": "you have exhausted the number of hotlinks sent, try again later",
                "26": "An email has been sent in order to reset your password",
                "27": "The hotlink is expired"
            },
            "table": "bbn_users",
            "tables": {
                "groups": "bbn_users_groups",
                "hotlinks": "bbn_users_hotlinks",
                "passwords": "bbn_users_passwords",
                "sessions": "bbn_users_sessions",
                "tokens": "bbn_users_tokens",
                "api_tokens": "bbn_users_api_tokens",
                "access_tokens": "bbn_users_access_tokens",
                "users": "bbn_users",
                "permission_accounts": "bbn_users_permission_accounts",
                "permission_tokens": "bbn_users_permission_account_tokens"
            },
            "arch": {
                "groups": {
                    "id": "id",
                    "group": "group",
                    "type": "type",
                    "code": "code",
                    "cfg": "cfg"
                },
                "hotlinks": {
                    "id": "id",
                    "id_user": "id_user",
                    "magic": "magic",
                    "expire": "expire"
                },
                "passwords": {
                    "id_user": "id_user",
                    "pass": "pass",
                    "added": "added"
                },
                "sessions": {
                    "id": "id",
                    "id_user": "id_user",
                    "sess_id": "sess_id",
                    "ip_address": "ip_address",
                    "user_agent": "user_agent",
                    "opened": "opened",
                    "creation": "creation",
                    "last_activity": "last_activity",
                    "cfg": "cfg"
                },
                "tokens": {
                    "id": "id",
                    "id_session": "id_session",
                    "content": "content",
                    "creation": "creation",
                    "dt_creation": "dt_creation",
                    "last": "last",
                    "dt_last": "dt_last"
                },
                "api_tokens": {
                    "id": "id",
                    "id_user": "id_user",
                    "token": "token",
                    "creation": "creation",
                    "last": "last",
                    "device_uid": "device_uid",
                    "device_platform": "device_platform",
                    "device_lang": "device_lang",
                    "notifications_token": "notifications_token"
                },
                "access_tokens": {
                    "id_user": "id_user",
                    "token": "token",
                    "pass": "pass",
                    "validity": "validity"
                },
                "users": {
                    "id": "id",
                    "id_group": "id_group",
                    "email": "email",
                    "username": "username",
                    "phone": "phone",
                    "login": "login",
                    "admin": "admin",
                    "dev": "dev",
                    "theme": "theme",
                    "cfg": "cfg",
                    "active": "active",
                    "enckey": "enckey"
                },
                "permission_accounts": {
                    "id": "id",
                    "id_user": "id_user",
                    "name": "name"
                },
                "permission_tokens": {
                    "id": "id",
                    "id_account": "id_account",
                    "access_token": "access_token",
                    "refresh_token": "refresh_token",
                    "expire": "expire"
                }
            },
            "fields": {
                "user": "user",
                "pass": "pass",
                "salt": "appui_salt",
                "key": "key",
                "id": "id",
                "pass1": "pass1",
                "pass2": "pass2",
                "action": "action",
                "token": "appui_token",
                "access_token": "appui_access_token",
                "access_token_pass": "appui_access_token_pass",
                "device_uid": "device_uid",
                "device_lang": "device_lang",
                "phone_number": "phone_number",
                "phone_verification_code": "phone_verification_code"
            },
            "encryption": "sha1",
            "conditions": [],
            "max_attempts": 10,
            "verification_code_length": 4,
            "max_sessions": 5,
            "hotlinks": false,
            "show": "username",
            "mailer": "\\bbn\\Mail",
            "ip_address": true
        },
        "retriever_instance": {
            "prev_time": null
        },
        "retriever_exists": true
    },
    "constants": {
        "MAX_EMPTY_ATTEMPTS": {
            "name": "MAX_EMPTY_ATTEMPTS",
            "value": 5,
            "class": "bbn\\User",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "",
                "tags": []
            }
        }
    },
    "uses": {
        "AllowDynamicProperties": "AllowDynamicProperties",
        "Exception": "Exception",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Models\\Tts\\Retriever": "Retriever",
        "bbn\\Models\\Tts\\DbActions": "DbActions",
        "bbn\\Models\\Cls\\Basic": "Basic",
        "bbn\\User\\Common": "Common",
        "bbn\\User\\Implementor": "Implementor",
        "bbn\\User\\Manager": "Manager",
        "bbn\\Models\\Tts\\DbUauth": "DbUauth"
    },
    "dummyComments": [
        "\/**\n * @package user\n *\/",
        "\/**\n * A user authentication Class\n *\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Apr 4, 2011, 23:23:55 +0000\n * @category  Authentication\n * @license   http:\/\/opensource.org\/licenses\/MIT MIT\n * @version 0.2r89\n * @todo Groups and hotlinks features\n * @todo Implement Cache for session requests' results?\n *\/"
    ],
    "summary": "A user authentication Class",
    "description": "",
    "description_parts": []
}