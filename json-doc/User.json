{
    "doc": {
        "description": "A user authentication Class",
        "tags": {
            "copyright": "BBN Solutions",
            "since": "Apr 4, 2011, 23:23:55 +0000",
            "category": "Authentication",
            "license": "http:\/\/opensource.org\/licenses\/MIT MIT",
            "version": "0.2r89",
            "todo": "Implement Cache for session requests' results?"
        }
    },
    "name": "bbn\\User",
    "namespace": true,
    "traits": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "interfaces": [],
    "fileName": "\/home\/thomas\/domains\/apstapp.thomas.lan\/_appui\/vendor\/bbn\/bbn\/src\/bbn\/User.php",
    "startLine": 21,
    "endLine": 2301,
    "contentConstructor": {
        "file": "bbn\\User",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "User constructor.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db, array $params = [], array $cfg = [])\n  {\n    \/\/ The database connection\n    $this->db = $db;\n\n    \/\/ Setting up the class configuration\n    $this->_init_class_cfg($cfg);\n\n    $f =& $this->class_cfg['fields'];\n    self::retrieverInit($this);\n\n    if ($this->isToken() && !empty($params[$f['token']])) {\n\n      if ($this->isPhoneNumberCodeSendingRequest($params)) {\n        \/\/ Verify that the received token is associated with the device uid\n        if (!($user_id = $this->getUserByTokenAndDeviceUid($params[$f['token']], $params[$f['device_uid']]))) {\n          throw new \\Exception(X::_('Invalid token'));\n        }\n\n        \/\/ Check if the phone number is already registered\n        if (($exUser = $this->findByPhoneNumber($params[$f['phone_number']]))\n          && ($exUser[$f['id']] !== $user_id)\n          && $this->updateApiTokenUserByTokenDevice(\n            $params[$f['token']],\n            $params[$f['device_uid']],\n            $exUser[$f['id']],\n            $params[$f['device_lang']] ?? ''\n          )\n        ) {\n          if (!$this->db->selectOne($this->class_cfg['table'], $this->class_cfg['arch']['users']['login'], [\n            $this->class_cfg['arch']['users']['id'] => $user_id\n          ])) {\n            $this->db->delete($this->class_cfg['table'], [\n              $this->class_cfg['arch']['users']['id'] => $user_id\n            ]);\n          }\n          $user_id = $exUser[$f['id']];\n        }\n\n        $this->id = $user_id;\n        \/\/ Generate a code\n        $code = random_int(1001, 9999);\n\n        \/\/ Save it\n        if ($this->updatePhoneVerificationCode($params[$f['phone_number']], $code)) {\n          \/\/ Send the sms with code here\n\n          return $this->api_request_output = [\n            'success' => true,\n            'phone_verification_code' => $code\n          ];\n        }\n        else {\n          throw new \\Exception(X::_('Impossible to update the user'));\n        }\n\n\n      }\n      elseif ($this->isVerifyPhoneNumberRequest($params)) {\n        \/\/ Verify that the received token is associated to the device uid\n        if (!$this->verifyTokenAndDeviceUid($params[$f['device_uid']], $params[$f['token']])) {\n          throw new \\Exception(X::_('Invalid token'));\n        }\n\n        \/\/ find the user using phone_number in db\n        $user = $this->findByPhoneNumber($params[$f['phone_number']]);\n\n        if (!$user) {\n          throw new \\Exception(X::_('Unknown phone number'));\n        }\n\n        $this->id = $user[$this->class_cfg['arch']['users']['id']];\n\n        if (!$this->hasSkipVerification()) {\n          \/\/ Verify that the code is correct\n          $user_cgf = json_decode($user[$this->class_cfg['arch']['users']['cfg']], true);\n\n          if (!$user_cgf || !isset($user_cgf['phone_verification_code'])) {\n            throw new \\Exception(X::_('Invalid code'));\n          }\n\n          if (((string)$user_cgf['phone_verification_code']) !== ((string)$params[$f['phone_verification_code']])) {\n            throw new \\Exception(X::_('Invalid code'));\n          }\n        }\n\n        \/\/ Update verification code to null\n        $this->updatePhoneVerificationCode($params[$f['phone_number']], null);\n\n        \/\/ Generate a new token\n        $new_token = Str::genpwd(32, 16);\n\n        \/\/ Update user id and the new token in the row with the old token and device uid.\n        $this->db->update(\n            $this->class_cfg['tables']['api_tokens'], [\n            $this->class_cfg['arch']['api_tokens']['id_user']  => $user[$this->class_cfg['arch']['users']['id']],\n            $this->class_cfg['arch']['api_tokens']['token']    => $new_token,\n          ], [\n            $this->class_cfg['arch']['api_tokens']['token']      => $params[$f['token']],\n            $this->class_cfg['arch']['api_tokens']['device_uid'] => $params[$f['device_uid']],\n          ]\n        );\n\n        \/\/ Send the new token here\n        return $this->api_request_output =  [\n          'token'   => $new_token,\n          'success' => true\n        ];\n\n      }\n      elseif ($this->isTokenLoginRequest($params)) {\n        \/\/ Find the token associated to the device uid in db then get it's associated user.\n        if (! $user = $this->findUserByApiTokenAndDeviceUid($params[$f['token']], $params[$f['device_uid']])) {\n          throw new \\Exception(X::_('Invalid token').' '.$params[$f['token']].' \/ '.$params[$f['device_uid']]);\n        }\n\n        \/\/ Update device_lang and last \n        $this->db->update($this->class_cfg['tables']['api_tokens'], [\n          $this->class_cfg['arch']['api_tokens']['device_lang'] => $params[$f['device_lang']] ?? '',\n          $this->class_cfg['arch']['api_tokens']['last'] => date('Y-m-d H:i:S')\n        ], [\n          $this->class_cfg['arch']['api_tokens']['token']      => $params[$f['token']],\n          $this->class_cfg['arch']['api_tokens']['device_uid'] => $params[$f['device_uid']]\n        ]);\n\n        \/\/ Now the user is authenticated\n        $this->id = $user[$this->class_cfg['arch']['users']['id']];\n\n        return $this->api_request_output = [\n          'token'   => $params[$f['token']],\n          'success' => true\n        ];\n\n      }\n    }\n    else {\n      \/\/ The client environment variables\n      $this->user_agent  = $_SERVER['HTTP_USER_AGENT'] ?? '';\n      $this->ip_address  = $_SERVER['REMOTE_ADDR'] ?? '';\n      $this->accept_lang = $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? '';\n\n      \/\/ Creating the session's variables if they don't exist yet\n      $this->_init_session();\n\n      \/*\n      if (x::isCli() && isset($params['id'])) {\n        $this->id = $params['id'];\n        $this->auth = true;\n      }\n      *\/\n      \/\/ The user logs in\n      if ($this->isLoginRequest($params)) {\n        \/** @todo separate credentials and salt checking *\/\n        if (!empty($this->sess_cfg['fingerprint'])\n          && $this->getPrint($this->_get_session('fingerprint')) === $this->sess_cfg['fingerprint']\n        ) {\n          \/** @todo separate credentials and salt checking *\/\n          $this->_check_credentials($params);\n        }\n        else{\n          $this->setError(19);\n          $this->session->destroy();\n        }\n      }\n\n      \/** @todo revise the process: dying is not the solution! *\/\n      \/\/ The user is not known yet\n      elseif ($this->isResetPasswordRequest($params)) {\n        if ($id = $this->getIdFromMagicString($params[$f['id']], $params[$f['key']])) {\n          $this->password_reset = true;\n          if (($params[$f['pass1']] === $params[$f['pass2']])) {\n            $this->expireHotlink($params[$f['id']]);\n            $this->id = $id;\n            $this->forcePassword($params[$f['pass2']]);\n            $this->session->set([]);\n          }\n          else{\n            $this->setError(7);\n          }\n        }\n        else{\n          $this->setError(18);\n        }\n      }\n      else {\n        $this->checkSession();\n      }\n    }\n  }",
            "startLine": 272,
            "endLine": 460,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "params",
                    "position": 1,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 2,
                    "type": "array",
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "isReset": {
            "name": "isReset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->password_reset;\n  }",
            "startLine": 523,
            "endLine": 526,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getSalt": {
            "name": "getSalt",
            "summary": "Returns the salt string kept in session.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_get_session('salt');\n  }",
            "startLine": 534,
            "endLine": 537,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "checkSalt": {
            "name": "checkSalt",
            "summary": "Confronts the given string with the salt string kept in session.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($salt)\n  {\n    return $this->getSalt() === $salt;\n  }",
            "startLine": 545,
            "endLine": 548,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "salt",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getCfg": {
            "name": "getCfg",
            "summary": "Returns the current user's configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($attr = '')\n  {\n    if ($this->check()) {\n      if (!$this->cfg) {\n        $this->cfg = $this->session->get('cfg');\n      }\n\n      if (empty($attr)) {\n        return $this->cfg;\n      }\n\n      if (isset($this->cfg[$attr])) {\n        return $this->cfg[$attr];\n      }\n    }\n\n    return null;\n  }",
            "startLine": 557,
            "endLine": 574,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "setData": {
            "name": "setData",
            "summary": "Stores or deletes data in the object for the current authenticated user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($index, $data = NULL)\n  {\n    if (!$this->auth) {\n      throw new \\Exception(X::_(\"Impossible to store data on an unauthenticated user\"));\n    }\n\n    if (is_array($index) && X::isAssoc($index)) {\n      foreach ($index as $k => $v) {\n        \/\/ Unsetting if null\n        if (is_null($v) && array_key_exists($k, $this->data)) {\n          unset($this->data[$k]);\n        }\n        else {\n          $this->data[$k] = $v;\n        }\n      }\n    }\n    elseif (is_string($index)) {\n      $this->data[$index] = $data;\n    }\n    else {\n      throw new \\Exception(X::_(\"Invalid parameters for function setData in user class\"));\n    }\n\n    return $this;\n  }",
            "startLine": 585,
            "endLine": 610,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "index",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to store; if null the given index will be unset"
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getData": {
            "name": "getData",
            "summary": "Retrieves data stored in the data property of the user, only if authenticated.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($idx)\n  {\n    if (!$this->auth) {\n      throw new \\Exception(X::_(\"Impossible to retrieve data for an authenticated user\"));\n    }\n\n    return $this->data[$idx] ?? null;\n  }",
            "startLine": 620,
            "endLine": 627,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "idx",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the current configuration of this very class.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->class_cfg;\n  }",
            "startLine": 635,
            "endLine": 638,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "getPath": {
            "name": "getPath",
            "summary": "Returns the directory path for the user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->path;\n  }",
            "startLine": 646,
            "endLine": 649,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getTmpDir": {
            "name": "getTmpDir",
            "summary": "Returns the tmp directory path for the user.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->tmp_path;\n  }",
            "startLine": 657,
            "endLine": 660,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getTables": {
            "name": "getTables",
            "summary": "Returns the list of tables used by the current class.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!empty($this->class_cfg)) {\n      return $this->class_cfg['tables'];\n    }\n\n    return null;\n  }",
            "startLine": 667,
            "endLine": 674,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the list of fields of the given table, and if empty for each table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($table = '')\n  {\n    if (!empty($this->class_cfg)) {\n      if ($table) {\n        return $this->class_cfg['arch'][$table] ?? null;\n      }\n\n      return $this->class_cfg['arch'];\n    }\n\n    return null;\n  }",
            "startLine": 683,
            "endLine": 694,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateInfo": {
            "name": "updateInfo",
            "summary": "Changes the data in the user's table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $d)\n  {\n    if ($this->checkSession()) {\n      $update = [];\n      foreach ($d as $key => $val){\n        if (($key !== $this->fields['id'])\n            && ($key !== $this->fields['cfg'])\n            && ($key !== 'auth')\n            && ($key !== 'pass')\n            && \\in_array($key, $this->fields)\n        ) {\n          $update[$key] = $val;\n        }\n      }\n\n      if (\\count($update) > 0) {\n        $r = (bool)$this->db->update(\n          $this->class_cfg['tables']['users'],\n          $update,\n          [$this->fields['id'] => $this->id]\n        );\n        \/** @todo Why did I do this?? *\/\n        if ($r) {\n          $this->setSession(['cfg' => false]);\n          $this->_user_info();\n        }\n      }\n      return $r ?? false;\n    }\n\n    return false;\n  }",
            "startLine": 703,
            "endLine": 734,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "d",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPassword": {
            "name": "getPassword",
            "summary": "Encrypts the given string to match the password.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    return $this->_hash($st);\n  }",
            "startLine": 743,
            "endLine": 746,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isJustLogin": {
            "name": "isJustLogin",
            "summary": "Returns true after the log in moment.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return (bool)$this->_just_login;\n  }",
            "startLine": 754,
            "endLine": 757,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setSession": {
            "name": "setSession",
            "summary": "Sets the given attribute(s) in the user's session.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($attr)\n  {\n    if ($this->session->has($this->userIndex)) {\n      $args = \\func_get_args();\n      if ((\\count($args) === 2) && \\is_string($args[0])) {\n        $attr = [$args[0] => $args[1]];\n      }\n\n      if(is_array($attr)) {\n        foreach ($attr as $key => $val){\n          if (\\is_string($key)) {\n            $this->session->set($val, $this->userIndex, $key);\n          }\n        }\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 765,
            "endLine": 783,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsetSession": {
            "name": "unsetSession",
            "summary": "Unsets the given attribute(s) in the user's session if exists.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $args = \\func_get_args();\n    array_unshift($args, $this->userIndex);\n    if ($this->session->has(...$args)) {\n      $this->session->uset(...$args);\n    }\n\n    return $this;\n  }",
            "startLine": 791,
            "endLine": 800,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "getSession": {
            "name": "getSession",
            "summary": "Returns session property from the session's user array (userIndex).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($attr = NULL)\n  {\n    if ($this->session && $this->session->has($this->userIndex)) {\n      return $attr ? $this->session->get($this->userIndex, $attr) : $this->session->get($this->userIndex);\n    }\n\n    return null;\n  }",
            "startLine": 809,
            "endLine": 816,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getOsession": {
            "name": "getOsession",
            "summary": "Gets an attribute or the whole the \"session\" part of the session  (sessIndex).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($attr = NULL)\n  {\n    return $this->_get_session($attr);\n  }",
            "startLine": 825,
            "endLine": 828,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "setOsession": {
            "name": "setOsession",
            "summary": "Sets an attribute the \"session\" part of the session (sessIndex).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->_set_session(...func_get_args());\n  }",
            "startLine": 836,
            "endLine": 839,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "hasSession": {
            "name": "hasSession",
            "summary": "Checks if the given attribute exists in the user's session.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($attr)\n  {\n    return $this->session->has($this->userIndex, $attr);\n  }",
            "startLine": 847,
            "endLine": 850,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "updateActivity": {
            "name": "updateActivity",
            "summary": "Updates last activity value for the session in database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($id_session = $this->getIdSession() && $this->check()) {\n      $p =& $this->class_cfg['arch']['sessions'];\n      $this->db->update(\n        $this->class_cfg['tables']['sessions'], [\n        $p['last_activity'] => date('Y-m-d H:i:s')\n        ], [\n        $p['id'] => $id_session\n        ]\n      );\n    }\n    else{\n      $this->setError(13);\n    }\n\n    return $this;\n  }",
            "startLine": 858,
            "endLine": 875,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "saveSession": {
            "name": "saveSession",
            "summary": "Saves the session config in the database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($force = false)\n  {\n    $id_session = $this->getIdSession();\n\n    if ($this->check()) {\n      if ($id_session) {\n        $p =& $this->class_cfg['arch']['sessions'];\n        \/\/ It is normal this is sometimes not changing as different actions can happen in the same\n        $time = time();\n        if ($force || empty($this->sess_cfg['last_renew']) || ($time - $this->sess_cfg['last_renew'] >= 2)) {\n          $this->sess_cfg['last_renew'] = $time;\n          $this->db->update(\n            $this->class_cfg['tables']['sessions'],\n            [\n              $p['id_user'] => $this->id,\n              $p['sess_id'] => $this->session->getId(),\n              $p['ip_address'] => $this->ip_address,\n              $p['user_agent'] => $this->user_agent,\n              $p['opened'] => 1,\n              $p['last_activity'] => date('Y-m-d H:i:s', $time),\n              $p['cfg'] => json_encode($this->sess_cfg)\n            ],\n            [$p['id'] => $id_session]\n          );\n        }\n      }\n      else{\n        $this->setError(13);\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 884,
            "endLine": 916,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "force",
                    "position": 0,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "closeSession": {
            "name": "closeSession",
            "summary": "Closes the session in the database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($with_session = false)\n  {\n    if ($this->id) {\n      if ($this->session) {\n        $p =& $this->class_cfg['arch']['sessions'];\n        $this->db->update(\n          $this->class_cfg['tables']['sessions'], [\n            $p['ip_address'] => $this->ip_address,\n            $p['user_agent'] => $this->user_agent,\n            $p['opened'] => 0,\n            $p['last_activity'] => date('Y-m-d H:i:s'),\n            $p['cfg'] => json_encode($this->sess_cfg)\n          ],[\n            $p['id_user'] => $this->id,\n            $p['sess_id'] => $this->session->getId()\n          ]\n        );\n        if ($with_session) {\n          $this->session->set([]);\n        }\n        else{\n          $this->session->set([], $this->userIndex);\n        }\n      }\n      $this->auth     = false;\n      $this->id       = null;\n      $this->sess_cfg = null;\n    }\n    return $this;\n  }",
            "startLine": 925,
            "endLine": 954,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "with_session",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "checkAttempts": {
            "name": "checkAttempts",
            "summary": "Returns false if the max number of connections attempts has been reached",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!isset($this->cfg)) {\n      return true;\n    }\n\n    if (isset($this->cfg['num_attempts']) && $this->cfg['num_attempts'] > $this->class_cfg['max_attempts']) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 961,
            "endLine": 972,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "saveCfg": {
            "name": "saveCfg",
            "summary": "Saves the user's config in the cfg field of the users' table.",
            "description": "*\nreturn self",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*\nreturn self<\/p>"
                }
            ],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      $this->db->update(\n        $this->class_cfg['tables']['users'],\n        [$this->fields['cfg'] => json_encode($this->cfg)],\n        [$this->fields['id'] => $this->id]\n      );\n    }\n\n    return $this;\n  }",
            "startLine": 980,
            "endLine": 991,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "setCfg": {
            "name": "setCfg",
            "summary": "Saves the attribute(s) values into the session config.",
            "description": "*\nreturn self",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>*\nreturn self<\/p>"
                }
            ],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($attr)\n  {\n    if (null !== $this->cfg) {\n      $args = \\func_get_args();\n      if ((\\count($args) === 2) && \\is_string($attr)) {\n        \/** @var array $attr *\/\n        $attr = [$args[0] => $args[1]];\n      }\n\n      if (is_array($attr)) {\n        foreach ($attr as $key => $val){\n          if (\\is_string($key)) {\n            $this->cfg[$key] = $val;\n          }\n        }\n\n        $this->setSession(['cfg' => $this->cfg]);\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 999,
            "endLine": 1020,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "unsetCfg": {
            "name": "unsetCfg",
            "summary": "Unsets the attribute(s) in the session config.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($attr)\n  {\n    if (null !== $this->cfg) {\n      if (\\is_string($attr)) {\n        \/** @var array $attr *\/\n        $attr = [$attr];\n      }\n\n      if (is_array($attr)) {\n        foreach ($attr as $key){\n          if (isset($key)) {\n            unset($this->cfg[$key]);\n          }\n        }\n\n        $this->setSession(['cfg' => $this->cfg]);\n      }\n    }\n\n    return $this;\n  }",
            "startLine": 1029,
            "endLine": 1049,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "attr",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "refreshInfo": {
            "name": "refreshInfo",
            "summary": "Regathers information from the database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      $this->_user_info();\n      $this->_sess_info();\n    }\n\n    return $this;\n  }",
            "startLine": 1057,
            "endLine": 1065,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self"
            ],
            "parent": false,
            "arguments": []
        },
        "isAuth": {
            "name": "isAuth",
            "summary": "Returns true if authenticated false otherwise.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n      return $this->auth;\n  }",
            "startLine": 1073,
            "endLine": 1076,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "checkSession": {
            "name": "checkSession",
            "summary": "Retrieves user's info from session if needed and checks if authenticated.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      $this->_retrieve_session();\n      return $this->auth;\n    }\n\n    return false;\n  }",
            "startLine": 1084,
            "endLine": 1092,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getId": {
            "name": "getId",
            "summary": "Returns the user's ID if there is no error.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      return $this->id;\n    }\n\n    return null;\n  }",
            "startLine": 1100,
            "endLine": 1107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getGroup": {
            "name": "getGroup",
            "summary": "Returns the user's group's ID if there is no error.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->check()) {\n      return $this->id_group;\n    }\n\n    return null;\n  }",
            "startLine": 1115,
            "endLine": 1122,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "expireHotlink": {
            "name": "expireHotlink",
            "summary": "Expires an hotlink by setting the expire column to now.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ($this->check()) {\n      return $this->db->update(\n        $this->class_cfg['tables']['hotlinks'],\n        [$this->class_cfg['arch']['hotlinks']['expire'] => date('Y-m-d H:i:s')],\n        [$this->class_cfg['arch']['hotlinks']['id'] => $id]\n      );\n    }\n\n    return 0;\n  }",
            "startLine": 1130,
            "endLine": 1141,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "int"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getIdFromMagicString": {
            "name": "getIdFromMagicString",
            "summary": "Retrieves a user's ID from the hotlink's magic string.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $key)\n  {\n    if ($val = $this->db->rselect(\n      $this->class_cfg['tables']['hotlinks'], [\n      $this->class_cfg['arch']['hotlinks']['magic'],\n      $this->class_cfg['arch']['hotlinks']['id_user'],\n      ],[\n      $this->class_cfg['arch']['hotlinks']['id'] => $id,\n      [$this->class_cfg['arch']['hotlinks']['expire'], '>', date('Y-m-d H:i:s')]\n      ]\n    )\n    ) {\n      if (self::isMagicString($key, $val[$this->class_cfg['arch']['hotlinks']['magic']])) {\n        return $val['id_user'];\n      }\n    }\n\n    return null;\n  }",
            "startLine": 1151,
            "endLine": 1169,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "key",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isAdmin": {
            "name": "isAdmin",
            "summary": "Checks whether the user is an admin or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return (bool)$this->getSession('admin');\n  }",
            "startLine": 1177,
            "endLine": 1180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "isDev": {
            "name": "isDev",
            "summary": "Checks whether the user is an (admin or developer) or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return (bool)($this->isAdmin() || !!$this->getSession('dev'));\n  }",
            "startLine": 1188,
            "endLine": 1191,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "getManager": {
            "name": "getManager",
            "summary": "Gets a bbn\\User\\Manager instance.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return new User\\Manager($this);\n  }",
            "startLine": 1199,
            "endLine": 1202,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks if an error has been thrown or not.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->getError() ? false : true;\n  }",
            "startLine": 1210,
            "endLine": 1213,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "logout": {
            "name": "logout",
            "summary": "Unauthenticates, resets the config and destroys the session.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->auth = false;\n    $this->cfg  = [];\n    $this->closeSession();\n  }",
            "startLine": 1221,
            "endLine": 1226,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getMailer": {
            "name": "getMailer",
            "summary": "Returns an instance of the mailer class.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if (!$this->_mailer) {\n      if (class_exists($this->class_cfg['mailer'])) {\n        $this->_mailer = new $this->class_cfg['mailer']();\n      }\n      else {\n        throw new \\Exception(X::_(\"Impossible to find the mailer class %s\", (string)$this->class_cfg['mailer']));\n      }\n    }\n\n    return $this->_mailer;\n  }",
            "startLine": 1235,
            "endLine": 1247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "setPassword": {
            "name": "setPassword",
            "summary": "Change the password in the database after checking the current one.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($old_pass, $new_pass)\n  {\n    if ($this->auth) {\n      $pwt         = $this->class_cfg['tables']['passwords'];\n      $pwa         = $this->class_cfg['arch']['passwords'];\n      $stored_pass = $this->db->selectOne(\n        $pwt, $pwa['pass'], [\n        $this->class_cfg['arch']['passwords']['id_user'] => $this->id\n        ], [\n        $this->class_cfg['arch']['passwords']['added'] => 'DESC'\n        ]\n      );\n      if ($this->_check_password($old_pass, $stored_pass)) {\n        return $this->forcePassword($new_pass);\n      }\n    }\n\n    return false;\n  }",
            "startLine": 1257,
            "endLine": 1275,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "old_pass",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "pass The new password"
                },
                {
                    "name": "new_pass",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "forcePassword": {
            "name": "forcePassword",
            "summary": "Changes the password in the database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($pass)\n  {\n    if ($this->id) {\n      return (bool)$this->db->insert(\n        $this->class_cfg['tables']['passwords'], [\n        $this->class_cfg['arch']['passwords']['pass'] => $this->_hash($pass),\n        $this->class_cfg['arch']['passwords']['id_user'] => $this->id,\n        $this->class_cfg['arch']['passwords']['added'] => date('Y-m-d H:i:s')\n        ]\n      );\n    }\n\n    return false;\n  }",
            "startLine": 1283,
            "endLine": 1296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "pass",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getName": {
            "name": "getName",
            "summary": "Returns the full name of the given user or the current one.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($usr = NULL)\n  {\n    if ($this->auth) {\n      if (\\is_null($usr)) {\n        $usr = $this->getSession();\n      }\n      elseif (str::isUid($usr)) {\n        $mgr = $this->getManager();\n        $usr = $mgr->getUser($usr);\n      }\n\n      if (isset($this->class_cfg['show'], $usr[$this->class_cfg['show']])) {\n        return $usr[$this->class_cfg['show']];\n      }\n    }\n\n    return null;\n  }",
            "startLine": 1304,
            "endLine": 1321,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "usr",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "addToken": {
            "name": "addToken",
            "summary": "Generates and insert a token in database.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->auth) {\n      $token = Str::genpwd(32, 16);\n      $f     =& $this->class_cfg['arch']['tokens'];\n      if ($this->db->insert(\n        $this->class_cfg['tables']['tokens'],\n        [\n          $f['id_session'] => $this->getIdSession(),\n          $f['content'] => $token,\n          $f['creation'] => X::microtime(),\n          $f['last'] => X::microtime()\n        ]\n      )\n      ) {\n        return $token;\n      }\n    }\n\n    return null;\n  }",
            "startLine": 1329,
            "endLine": 1349,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "getEmail": {
            "name": "getEmail",
            "summary": "Returns the email of the given user or the current one.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($usr = NULL)\n  {\n    if ($this->auth) {\n      if (\\is_null($usr)) {\n        $usr = $this->getSession();\n      }\n      elseif (str::isUid($usr) && ($mgr = $this->getManager())) {\n        $usr = $mgr->getUser($usr);\n      }\n\n      if (isset($this->fields['email'], $usr[$this->fields['email']])) {\n        return $usr[$this->fields['email']];\n      }\n    }\n\n    return null;\n  }",
            "startLine": 1357,
            "endLine": 1373,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "usr",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "addToTmp": {
            "name": "addToTmp",
            "summary": "Adds a file to the tmp folder of the user and returns its path.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($file, $name = NULL, $move = true)\n  {\n    if ($this->auth) {\n      $fs   = new File\\System();\n      $path = $this->getTmpDir().microtime(true).'\/';\n      if ($fs->isFile($file) && $fs->createPath($path)) {\n        $dest = $path.($name ?: basename($file));\n        if ($move) {\n          if ($fs->move($file, dirname($dest)) && $fs->rename(dirname($dest).'\/'.basename($file), basename($dest))) {\n            return $dest;\n          }\n        }\n        elseif ($fs->copy($file, $dest)) {\n          return $dest;\n        }\n      }\n    }\n\n    return null;\n  }",
            "startLine": 1384,
            "endLine": 1403,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "file",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "name",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "move",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "crypt": {
            "name": "crypt",
            "summary": "Encrypts the given string.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if ($enckey = $this->_get_encryption_key()) {\n      return Util\\Enc::crypt($st, $enckey) ?: null;\n    }\n\n    return null;\n  }",
            "startLine": 1412,
            "endLine": 1419,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "decrypt": {
            "name": "decrypt",
            "summary": "Decrypts the given string.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if ($enckey = $this->_get_encryption_key()) {\n      return Util\\Enc::decrypt($st, $enckey) ?: null;\n    }\n\n    return null;\n  }",
            "startLine": 1428,
            "endLine": 1435,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getUser": {
            "name": "getUser",
            "summary": "Returns the latest created connection, ie the current user's object.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::getInstance();\n  }",
            "startLine": 1442,
            "endLine": 1445,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "makeFingerprint": {
            "name": "makeFingerprint",
            "summary": "Generates a random long string (16-32 chars) used as unique fingerprint.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return Str::genpwd(32, 16);\n  }",
            "startLine": 1452,
            "endLine": 1455,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string"
            ],
            "parent": false,
            "arguments": []
        },
        "makeMagicString": {
            "name": "makeMagicString",
            "summary": "Returns an array with a key and a magic string used for making hotlinks.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $key = self::makeFingerprint();\n    return [\n      'key' => $key,\n      'hash' => hash('sha256', $key)\n    ];\n  }",
            "startLine": 1463,
            "endLine": 1470,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": []
        },
        "isMagicString": {
            "name": "isMagicString",
            "summary": "Checks if a given string corresponds to the given hash.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($key, $hash)\n  {\n    return hash('sha256', $key) === $hash;\n  }",
            "startLine": 1480,
            "endLine": 1483,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "key",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The corresponding hash"
                },
                {
                    "name": "hash",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "Returns the first error in an array with the code and description.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return [\n        'code' => $this->error,\n        'text' => $this->class_cfg['errors'][$this->error]\n      ];\n    }\n\n    return null;\n  }",
            "startLine": 1507,
            "endLine": 1517,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "array",
                null
            ],
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "saveNewPermissionTokens": {
            "name": "saveNewPermissionTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($access_token, $refresh_token, $expires_in, $account_name)\n  {\n    if ($this->id) {\n      $account_exists = $this->db->count(\n        $this->class_cfg['tables']['permission_accounts'],\n        [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      );\n      \n      if ($account_exists > 0 ){\n        throw new \\Exception(X::_('Account already exists!'));\n      }\n      \n      if ($this->db->insert(\n          $this->class_cfg['tables']['permission_accounts'], [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      )) {\n        return (bool)$this->db->insert(\n          $this->class_cfg['tables']['permission_tokens'], [\n            $this->class_cfg['arch']['permission_tokens']['id_account']    => $this->db->lastId(),\n            $this->class_cfg['arch']['permission_tokens']['access_token']  => $access_token,\n            $this->class_cfg['arch']['permission_tokens']['refresh_token'] => $refresh_token,\n            $this->class_cfg['arch']['permission_tokens']['expire']        => time() + $expires_in,\n          ]\n        );\n      }\n    }\n\n    return false;\n  }",
            "startLine": 2036,
            "endLine": 2069,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "access_token",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "token"
                },
                {
                    "name": "refresh_token",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "token"
                },
                {
                    "name": "expires_in",
                    "position": 2,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "in"
                },
                {
                    "name": "account_name",
                    "position": 3,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ]
        },
        "getPermissionAccountFromName": {
            "name": "getPermissionAccountFromName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($account_name)\n  {\n    if ($this->id) {\n      return $this->db->rselect(\n        $this->class_cfg['tables']['permission_accounts'],\n        $this->class_cfg['arch']['permission_accounts'],\n        [\n          $this->class_cfg['arch']['permission_accounts']['id_user'] => $this->id,\n          $this->class_cfg['arch']['permission_accounts']['name']    => $account_name,\n        ]\n      );\n    }\n\n    return false;\n  }",
            "startLine": 2071,
            "endLine": 2085,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPermissionTokensFromAccountName": {
            "name": "getPermissionTokensFromAccountName",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($account_name)\n  {\n    if ($this->id) {\n      if ($account = $this->getPermissionAccountFromName($account_name)) {\n        return $this->db->rselect(\n          $this->class_cfg['tables']['permission_tokens'],\n          $this->class_cfg['arch']['permission_tokens'],\n          [\n            $this->class_cfg['arch']['permission_tokens']['id_account'] => $account[$this->class_cfg['arch']['permission_accounts']['id']],\n          ]\n        ); \n      }\n    }\n    \n    return false;\n  }",
            "startLine": 2091,
            "endLine": 2106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ]
        },
        "updatePermissionTokens": {
            "name": "updatePermissionTokens",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($account_name, $access_token, $refresh_token, $expire_in)\n  {\n    if ($this->id && $account = $this->getPermissionAccountFromName($account_name)) {\n        return $this->db->update(\n          $this->class_cfg['tables']['permission_tokens'], [\n          $this->class_cfg['arch']['permission_tokens']['access_token']   => $access_token,\n          $this->class_cfg['arch']['permission_tokens']['refresh_token']  => $refresh_token,\n          $this->class_cfg['arch']['permission_tokens']['expire']         => time() + $expire_in,\n        ], [\n            $this->class_cfg['arch']['permission_tokens']['id_account'] => $account[$this->class_cfg['arch']['permission_accounts']['id']]\n          ]\n        );\n    }\n\n    return false;\n  }",
            "startLine": 2108,
            "endLine": 2123,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 4,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "account_name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "access_token",
                    "position": 1,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "refresh_token",
                    "position": 2,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "expire_in",
                    "position": 3,
                    "type": "int",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getApiRequestOutput": {
            "name": "getApiRequestOutput",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->api_request_output;\n  }",
            "startLine": 2252,
            "endLine": 2255,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "getApiNotificationsToken": {
            "name": "getApiNotificationsToken",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($idUser = '')\n  {\n    return $this->db->selectOne([\n      'table' => $this->class_cfg['tables']['api_tokens'],\n      'fields' => $this->class_cfg['arch']['api_tokens']['notifications_token'],\n      'where' => [ \n        $this->class_cfg['arch']['api_tokens']['id_user'] => $idUser ?: $this->id\n      ],\n      'order' => [[\n        'field' => $this->class_cfg['arch']['api_tokens']['last'],\n        'dir' => 'DESC'\n      ]]\n    ]);\n  }",
            "startLine": 2257,
            "endLine": 2270,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idUser",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getPhoneNumber": {
            "name": "getPhoneNumber",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($idUser = '')\n  {\n    return $this->db->selectOne($this->class_cfg['table'], $this->class_cfg['arch']['users']['phone'], [\n      $this->class_cfg['arch']['users']['id'] => $idUser ?: $this->id\n    ]);\n  }",
            "startLine": 2272,
            "endLine": 2277,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "idUser",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hasSkipVerification": {
            "name": "hasSkipVerification",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id = '')\n  {\n    if ($cfg = $this->db->selectOne(\n      $this->class_cfg['tables']['users'],\n      $this->class_cfg['arch']['users']['cfg'],\n      [\n        $this->class_cfg['arch']['users']['id'] => $id ?: $this->id\n      ]\n    )) {\n      $cfg = json_decode($cfg);\n      return !empty($cfg->skip_verification);\n    }\n    return false;\n  }",
            "startLine": 2279,
            "endLine": 2292,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getDbInstance": {
            "name": "getDbInstance",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->db;\n  }",
            "startLine": 2297,
            "endLine": 2300,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bbn\\Db"
            ],
            "parent": false,
            "arguments": []
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getInstance": {
            "name": "getInstance",
            "summary": "Returns the instance of the singleton or null.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_instance;\n  }",
            "startLine": 44,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "self",
                null
            ],
            "parent": false,
            "arguments": []
        },
        "retrieverExists": {
            "name": "retrieverExists",
            "summary": "Returns true if an instance as been initiated.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$retriever_exists;\n  }",
            "startLine": 54,
            "endLine": 57,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": []
        },
        "exists": {
            "name": "exists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $res = $this->db->count(\n      $this->class_table, [\n      $this->class_cfg['arch'][$this->class_table_index]['id'] => $id\n      ]\n    );\n    return (bool)$res;\n  }",
            "startLine": 33,
            "endLine": 45,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "insert": {
            "name": "insert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $data)\n  {\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if ($this->db->insert($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "startLine": 77,
            "endLine": 87,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "string",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ($data = $this->exists($id)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return !!$this->db->delete($ccfg['table'], [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 97,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, array $data, $addCfg = false)\n  {\n    if (!$this->exists($id)) {\n      throw new \\Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($addCfg) {\n      $data = array_merge($this->select($id), $data);\n    }\n\n    if ($data = $this->prepare($data)) {\n      $ccfg = $this->getClassCfg();\n      $f = $ccfg['arch'][$this->class_table_index];\n      return !!$this->db->update($ccfg['table'], $data, [$f['id'] => $id]);\n    }\n\n    return false;\n  }",
            "startLine": 117,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "returns": [
                "bool"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "addCfg",
                    "position": 2,
                    "type": "bool",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "select": {
            "name": "select",
            "summary": "Retrieves a row from the table through its id.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ($this->exists($id)) {\n      $f = $this->class_cfg['arch'][$this->class_table_index];\n      if ($arr = $this->db->rselect(\n        $this->class_table, array_values($f), [\n          $f['id'] => $id\n        ]\n      )) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n\n        return $arr;\n      }\n    }\n\n    return null;\n\n  }",
            "startLine": 144,
            "endLine": 165,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array",
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "selectAll": {
            "name": "selectAll",
            "summary": "Returns an array of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\User",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cond)\n  {\n    if (!$this->class_table_index) {\n      throw new \\Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if ($arrs = $this->db->rselectAll($this->class_table, array_values($f), $cond)) {\n      foreach ($arrs as &$arr) {\n        if (!empty($f['cfg']) && !empty($arr[$f['cfg']])) {\n          $cfg = json_decode($arr[$f['cfg']], true);\n          $arr = array_merge($cfg, $arr);\n          unset($arr[$f['cfg']]);\n        }\n      }\n      unset($arr);\n\n      return $arrs;\n    }\n\n    return [];\n  }",
            "startLine": 175,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [
                "array"
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cond",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "prev_time": {
            "visibility": "public",
            "doc": {
                "description": "@var mixed",
                "tags": []
            }
        }
    },
    "staticProperties": {
        "default_class_cfg": {
            "errors": {
                "0": "login failed",
                "2": "password sent",
                "3": "no email such as",
                "4": "too many attempts",
                "5": "impossible to create the user",
                "6": "wrong user and\/or password",
                "7": "different passwords",
                "8": "less than 5 mn between emailing password",
                "9": "user already exists",
                "10": "problem during user creation",
                "11": "no salt in session",
                "12": "login and password are mandatory",
                "13": "impossible to save the session",
                "14": "impossible to retrieve the session",
                "15": "no session in memory",
                "16": "impossible to add session in the database",
                "17": "non matching salt",
                "18": "incorrect magic string",
                "19": "wrong fingerprint"
            },
            "table": "bbn_users",
            "tables": {
                "groups": "bbn_users_groups",
                "hotlinks": "bbn_users_hotlinks",
                "passwords": "bbn_users_passwords",
                "sessions": "bbn_users_sessions",
                "tokens": "bbn_users_tokens",
                "api_tokens": "bbn_users_api_tokens",
                "users": "bbn_users",
                "permission_accounts": "bbn_users_permission_accounts",
                "permission_tokens": "bbn_users_permission_account_tokens"
            },
            "arch": {
                "groups": {
                    "id": "id",
                    "group": "group",
                    "type": "type",
                    "code": "code",
                    "cfg": "cfg"
                },
                "hotlinks": {
                    "id": "id",
                    "id_user": "id_user",
                    "magic": "magic",
                    "expire": "expire"
                },
                "passwords": {
                    "id_user": "id_user",
                    "pass": "pass",
                    "added": "added"
                },
                "sessions": {
                    "id": "id",
                    "id_user": "id_user",
                    "sess_id": "sess_id",
                    "ip_address": "ip_address",
                    "user_agent": "user_agent",
                    "opened": "opened",
                    "creation": "creation",
                    "last_activity": "last_activity",
                    "cfg": "cfg"
                },
                "tokens": {
                    "id": "id",
                    "id_session": "id_session",
                    "content": "content",
                    "creation": "creation",
                    "dt_creation": "dt_creation",
                    "last": "last",
                    "dt_last": "dt_last"
                },
                "api_tokens": {
                    "id": "id",
                    "id_user": "id_user",
                    "token": "token",
                    "creation": "creation",
                    "last": "last",
                    "device_uid": "device_uid",
                    "device_lang": "device_lang",
                    "notifications_token": "notifications_token"
                },
                "users": {
                    "id": "id",
                    "id_group": "id_group",
                    "email": "email",
                    "username": "username",
                    "phone": "phone",
                    "login": "login",
                    "admin": "admin",
                    "dev": "dev",
                    "theme": "theme",
                    "cfg": "cfg",
                    "active": "active",
                    "enckey": "enckey"
                },
                "permission_accounts": {
                    "id": "id",
                    "id_user": "id_user",
                    "name": "name"
                },
                "permission_tokens": {
                    "id": "id",
                    "id_account": "id_account",
                    "access_token": "access_token",
                    "refresh_token": "refresh_token",
                    "expire": "expire"
                }
            },
            "fields": {
                "user": "user",
                "pass": "pass",
                "salt": "appui_salt",
                "key": "key",
                "id": "id",
                "pass1": "pass1",
                "pass2": "pass2",
                "action": "action",
                "token": "appui_token",
                "device_uid": "device_uid",
                "device_lang": "device_lang",
                "phone_number": "phone_number",
                "phone_verification_code": "phone_verification_code"
            },
            "encryption": "sha1",
            "conditions": [],
            "max_attempts": 10,
            "verification_code_length": 4,
            "max_sessions": 5,
            "hotlinks": false,
            "show": "name",
            "mailer": "\\bbn\\Mail"
        },
        "retriever_instance": {
            "prev_time": null
        },
        "retriever_exists": true
    },
    "constants": null,
    "numMethods": 77,
    "numProperties": 1,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [
        "bbn\\Models\\Tts\\Retriever",
        "bbn\\Models\\Tts\\Dbconfig"
    ],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "default_class_cfg": {
            "errors": {
                "0": "login failed",
                "2": "password sent",
                "3": "no email such as",
                "4": "too many attempts",
                "5": "impossible to create the user",
                "6": "wrong user and\/or password",
                "7": "different passwords",
                "8": "less than 5 mn between emailing password",
                "9": "user already exists",
                "10": "problem during user creation",
                "11": "no salt in session",
                "12": "login and password are mandatory",
                "13": "impossible to save the session",
                "14": "impossible to retrieve the session",
                "15": "no session in memory",
                "16": "impossible to add session in the database",
                "17": "non matching salt",
                "18": "incorrect magic string",
                "19": "wrong fingerprint"
            },
            "table": "bbn_users",
            "tables": {
                "groups": "bbn_users_groups",
                "hotlinks": "bbn_users_hotlinks",
                "passwords": "bbn_users_passwords",
                "sessions": "bbn_users_sessions",
                "tokens": "bbn_users_tokens",
                "api_tokens": "bbn_users_api_tokens",
                "users": "bbn_users",
                "permission_accounts": "bbn_users_permission_accounts",
                "permission_tokens": "bbn_users_permission_account_tokens"
            },
            "arch": {
                "groups": {
                    "id": "id",
                    "group": "group",
                    "type": "type",
                    "code": "code",
                    "cfg": "cfg"
                },
                "hotlinks": {
                    "id": "id",
                    "id_user": "id_user",
                    "magic": "magic",
                    "expire": "expire"
                },
                "passwords": {
                    "id_user": "id_user",
                    "pass": "pass",
                    "added": "added"
                },
                "sessions": {
                    "id": "id",
                    "id_user": "id_user",
                    "sess_id": "sess_id",
                    "ip_address": "ip_address",
                    "user_agent": "user_agent",
                    "opened": "opened",
                    "creation": "creation",
                    "last_activity": "last_activity",
                    "cfg": "cfg"
                },
                "tokens": {
                    "id": "id",
                    "id_session": "id_session",
                    "content": "content",
                    "creation": "creation",
                    "dt_creation": "dt_creation",
                    "last": "last",
                    "dt_last": "dt_last"
                },
                "api_tokens": {
                    "id": "id",
                    "id_user": "id_user",
                    "token": "token",
                    "creation": "creation",
                    "last": "last",
                    "device_uid": "device_uid",
                    "device_lang": "device_lang",
                    "notifications_token": "notifications_token"
                },
                "users": {
                    "id": "id",
                    "id_group": "id_group",
                    "email": "email",
                    "username": "username",
                    "phone": "phone",
                    "login": "login",
                    "admin": "admin",
                    "dev": "dev",
                    "theme": "theme",
                    "cfg": "cfg",
                    "active": "active",
                    "enckey": "enckey"
                },
                "permission_accounts": {
                    "id": "id",
                    "id_user": "id_user",
                    "name": "name"
                },
                "permission_tokens": {
                    "id": "id",
                    "id_account": "id_account",
                    "access_token": "access_token",
                    "refresh_token": "refresh_token",
                    "expire": "expire"
                }
            },
            "fields": {
                "user": "user",
                "pass": "pass",
                "salt": "appui_salt",
                "key": "key",
                "id": "id",
                "pass1": "pass1",
                "pass2": "pass2",
                "action": "action",
                "token": "appui_token",
                "device_uid": "device_uid",
                "device_lang": "device_lang",
                "phone_number": "phone_number",
                "phone_verification_code": "phone_verification_code"
            },
            "encryption": "sha1",
            "conditions": [],
            "max_attempts": 10,
            "verification_code_length": 4,
            "max_sessions": 5,
            "hotlinks": false,
            "show": "name",
            "mailer": "\\bbn\\Mail"
        },
        "retriever_instance": {
            "prev_time": null
        },
        "retriever_exists": true,
        "_mailer": null,
        "_just_login": false,
        "_encryption_key": null,
        "sessIndex": "bbn_session",
        "userIndex": "bbn_user",
        "password_reset": false,
        "session": null,
        "error": null,
        "user_agent": null,
        "ip_address": null,
        "accept_lang": null,
        "auth": false,
        "path": null,
        "tmp_path": null,
        "sql": null,
        "id": null,
        "data": [],
        "id_group": null,
        "alert": null,
        "cfg": null,
        "sess_cfg": null,
        "db": null,
        "prev_time": null,
        "class_cfg": null,
        "api_request_output": null,
        "errors": [],
        "debug": false,
        "log": [],
        "_is_init_class_cfg": false,
        "fields": null,
        "class_table": null,
        "class_table_index": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn",
    "shortName": "User",
    "summary": "A user authentication Class"
}