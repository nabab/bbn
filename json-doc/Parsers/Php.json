{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Parsers\\Php",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Parsers\/Php.php",
    "startLine": 10,
    "endLine": 1004,
    "numMethods": 18,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 0,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Models\\Cls\\Basic",
    "isSubclassOf": false,
    "defaultProperties": {
        "errors": [],
        "error": false,
        "debug": false,
        "log": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Parsers",
    "shortName": "Php",
    "contentConstructor": {
        "file": "bbn\\Parsers\\Php",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "Construct function",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->docParser = \\phpDocumentor\\Reflection\\DocBlockFactory::createInstance();\n    $this->parser    = new Doc('', 'php');\n  }",
            "startLine": 17,
            "endLine": 21,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": false,
            "arguments": []
        },
        "analyzeMethod": {
            "name": "analyzeMethod",
            "summary": "Function to take all the information related to the method sought and if it also contains the method of its relative",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $meth, $cls)\n  {\n    if (is_string($cls)) {\n      $cls = new \\ReflectionClass($cls);\n    }\n\n    $arr = null;\n    if (\n        !empty($meth)\n        && !empty($cls)\n        && $cls->hasMethod($meth)\n    ) {\n      $f = &$this;\n\n      \/\/get method in current class\n      $arr = $this->_get_method_info($cls->getMethod($meth));\n\n      \/\/get method in parent class\n      $parent = $cls->getParentClass();\n\n      while ($parent) {\n        if ($parent->hasMethod($meth)) {\n          $arr['parent'] = $this->_get_method_info($parent->getMethod($meth));\n        }\n\n        $parent = $parent->getParentClass();\n      }\n    }\n\n    return $arr ?: null;\n  }",
            "startLine": 31,
            "endLine": 61,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "meth",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Name of the method to search for to take information"
                },
                {
                    "name": "cls",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeProperty": {
            "name": "analyzeProperty",
            "summary": "Function to take all the information relating to the property sought and if it also contains that of his relative",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $prop, ReflectionClass $cls)\n  {\n    if ($arr = $this->_get_property_info($prop, $cls)) {\n      $parent = $cls->getParentClass();\n      while ($parent) {\n        if ($arr_parent = $this->_get_property_info($prop, $parent)) {\n          $arr['parent'] = $arr_parent;\n          break;\n        }\n\n        $parent = $parent->getParentClass();\n      }\n    }\n\n    return $arr ?: null;\n  }",
            "startLine": 71,
            "endLine": 86,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "prop",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Name of the property to be searched"
                },
                {
                    "name": "cls",
                    "position": 1,
                    "type": "ReflectionClass",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeConstant": {
            "name": "analyzeConstant",
            "summary": "Function that analyzes the constant passed to him and even if it contains the relative parent of the class of belonging",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $const, ReflectionClass $cls)\n  {\n    if (\n        !empty($const)\n        && !empty($cls)\n        && $cls->hasConstant($const)\n    ) {\n      $cst    = $cls->getReflectionConstant($const);\n      $arr    = [\n        'name' => $cst->name,\n        'value' => $cls->getConstant($const),\n        'class' => $cls->name,\n        'parent' => false,\n        'private' => $cst->isPrivate(),\n        'protected' => $cst->isProtected(),\n        'public' => $cst->isPublic(),\n        'doc' => $this->parsePropertyComments($cst->getDocComment()),\n      ];\n      $parent = $cls->getParentClass();\n      while ($parent) {\n        if ($parent->hasConstant($const)) {\n          $cst           = $cls->getReflectionConstant($const);\n          $arr['parent'] = [\n            'name' => $cst->name,\n            'doc' => $this->parsePropertyComments($cst->getDocComment()),\n            'value' => $parent->getConstant($const),\n            'protected' => $cst->isProtected(),\n            'public' => $cst->isPublic(),\n            'class' => $parent->name,\n            'parent' => false\n          ];\n        }\n\n        $parent = $parent->getParentClass();\n      }\n    }\n\n    if (isset($arr)) {\n      return $arr;\n    }\n\n    return null;\n  }",
            "startLine": 96,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "const",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Name of constant to search for information"
                },
                {
                    "name": "cls",
                    "position": 1,
                    "type": "ReflectionClass",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeClass": {
            "name": "analyzeClass",
            "summary": "Function that analyzes the desired class by returning the information belonging to it",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $cls, string $path = '')\n  {\n    $rc = new \\ReflectionClass($cls);\n    if (!empty($cls) && is_object($rc)) {\n      $constructor = $rc->getConstructor();\n      $methods     = $rc->getMethods(\\ReflectionMethod::IS_PUBLIC);\n      $props       = $rc->getProperties(\\ReflectionMethod::IS_PUBLIC);\n      $statprops   = $rc->getStaticProperties();\n      $constants   = $rc->getConstants();\n      $parent      = $rc->getParentClass();\n      $res         = [\n        'doc' => $this->parseClassComments($rc->getDocComment()),\n        'name' => $rc->getName(),\n        'namespace' => $rc->getNamespaceName(),\n        'traits' => $rc->getTraitNames(),\n        'interfaces' => $rc->getInterfaces(),\n        \/\/'isInstantiable' => $rc->isInstantiable(),\n        \/\/'cloneable' =>  $rc->isCloneable(),\n        'fileName' => substr($rc->getFileName(), strlen($path)),\n        'startLine' => $rc->getStartLine(),\n        'endLine' => $rc->getEndLine(),\n        'numMethods' => $methods ? count($methods) : 0,\n        'numProperties' => $props ? count($props) : 0,\n        'numConstants' => $constants ? count($constants) : 0,\n        'numStaticProperties' => $statprops ? count($statprops) : 0,\n        'interfaces' => $rc->getInterfaces(),\n        'interfaceNames' => $rc->getInterfaceNames(),\n        'isInterface' => $rc->isInterface(),\n        'traitNames' => $rc->getTraitNames(),\n        'traitAliases' => $rc->getTraitAliases(),\n        'isTrait' => $rc->isTrait(),\n        'isAbstract' => $rc->isAbstract(),\n        'isFinal' => $rc->isFinal(),\n        'modifiers' => $rc->getModifiers(),\n        'parentClass' => $parent ? $parent->name : null,\n        'isSubclassOf' => $rc->isSubclassOf($cls),\n        'defaultProperties' => $rc->getDefaultProperties(),\n        'isIterable' => $rc->isIterable(),\n      \/\/'implementsInterface' => $rc->implementsInterface(),\n        'extensionName' => $rc->getExtensionName(),\n        'namespace' => $rc->inNamespace(),\n        'namespaceName' => $rc->getNamespaceName(),\n        'shortName' => $rc->getShortName(),\n        'contentConstructor' => !empty($constructor) ? array_filter(\n            $this->analyzeMethod($constructor->name, $rc),\n            function ($m, $i) {\n                return in_array($i, ['file', 'returns']);\n            },\n            ARRAY_FILTER_USE_BOTH\n        ) : null,\n        'methods' => $methods ? $this->orderElement($methods, 'methods', $rc) : null,\n        'properties' => $props ? $this->orderElement($props, 'properties', $rc) : null,\n        'staticProperties' => $statprops,\n        'constants' => $constants ? $this->orderElement($constants, 'costants', $rc) : null\n      ];\n      if (\n          $res['doc']\n          && ($extracted = $this->_extract_description($res['doc']['description']))\n      ) {\n        $res = X::mergeArrays($res, $extracted);\n      }\n\n      return $res;\n    }\n  }",
            "startLine": 148,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "cls",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "path",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "analyzeLibrary": {
            "name": "analyzeLibrary",
            "summary": "Function that analyzes the whole library with the same name space returning all the information of all the classes making part of it",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $path, string $namespace = '')\n  {\n    if (\n        !empty($path)\n        && !empty($namespace)\n    ) {\n      $fs = new System();\n      if ($fs->cd($path)) {\n        $files = $fs->scan('.', '.php', false);\n        $arr   = [];\n        if (is_array($files) && count($files)) {\n          foreach ($files as $file) {\n            $bits  = X::split($file, '\/');\n            $name  = X::basename(array_pop($bits), '.php');\n            $class = $namespace . '\\\\' . (empty($bits) ? '' : X::join($bits, '\\\\') . '\\\\') . $name;\n            if (class_exists($class, true) || interface_exists($class, true) || trait_exists($class, true)) {\n              try {\n                $arr[$file] = $this->analyzeCLass($class, $path);\n              }\n              catch (\\Exception $e) {\n                die(var_dump($file, $e));\n                if (isset($arr[$file])) {\n                  unset($arr[$file]);\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return $arr;\n    }\n\n    return null;\n  }",
            "startLine": 222,
            "endLine": 256,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "path",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "of the library"
                },
                {
                    "name": "namespace",
                    "position": 1,
                    "type": "string",
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": "",
                    "description": "of the class"
                }
            ]
        },
        "iparse": {
            "name": "iparse",
            "summary": "Generally analyzes a docBLock returning the information in a structured way",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $text)\n  {\n    if ($text) {\n      $docblock = $this->docParser->create($text);\n      $res      = [\n        'summary' => $docblock->getSummary(),\n        'tags' => [],\n        'description' => (string)$docblock->getDescription()\n      ];\n      $tags     = $docblock->getTags();\n      \/\/ Contains \\phpDocumentor\\Reflection\\DocBlock\\Description object\n      $res['description_obj'] = $docblock->getDescription();\n      foreach ($tags as $i => $t) {\n        $desc          = $t->getDescription() ?: false;\n        $res['tags'][] = [\n          'index' => $i,\n          'type' => method_exists($t, 'getType') ? $t->getType() : null,\n          'varname' => method_exists($t, 'getVariableName') ? $t->getVariableName() : null,\n          'isVariadic' => method_exists($t, 'isVariadic') ? $t->isVariadic() : null,\n          'name' => $t->getName(),\n          'desc0' => (string)$desc,\n          'desc1' => $desc ? $t->getDescription()->getTags() : '',\n          'desc2' => $desc ? $t->getDescription()->render() : ''\n        ];\n      }\n\n      return $res;\n    }\n\n    return false;\n  }",
            "startLine": 265,
            "endLine": 295,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "text",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "parse": {
            "name": "parse",
            "summary": "Function that analyzes the class by returning the information in detail",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $class_name)\n  {\n    $rc = new \\ReflectionClass($class_name);\n    \/\/die(var_dump($rc->hasConstant('PARAM_BOOL')));\n    $constants        = $rc->getConstants();\n    $parent           = $rc->getParentClass();\n    $parent_constants = [];\n    if ($parent) {\n      $parent_constants = $parent->getConstants();\n    }\n\n    $cparser =& $this;\n    $cls     = [\n      'doc' => [\n        'title' => $this->iparse($rc->getDocComment()),\n      ],\n      'name' => $rc->getName(),\n      'constants' => array_map(\n          function ($a) use ($constants, $parent_constants) {\n            return [\n            'name' => $a->name,\n            'value' => $constants[$a->name]\n            ];\n          },\n          array_filter(\n              $rc->getReflectionConstants(),\n              function ($a) use ($parent_constants, $constants) {\n                return !array_key_exists($a->name, $parent_constants) || ($parent_constants[$a->name] !== $constants[$a->name]);\n              }\n          )\n      ),\n      'namespace' => $rc->getNamespaceName(),\n      'traits' => $rc->getTraits(),\n      'interfaces' => $rc->getInterfaces(),\n      'parent' => $parent ? $parent->getName() : null,\n      'properties' => array_map(\n          function ($m) use ($cparser) {\n            \/\/$m->setAccessible(true);\n            return [\n            'name' => $m->getName(),\n            \/\/'value' => $m->getValue(),\n            'static' => $m->isStatic(),\n            'private' => $m->isPrivate(),\n            'protected' => $m->isProtected(),\n            'public' => $m->isPublic(),\n            'doc' => $cparser->iparse($m->getDocComment())\n            ];\n          },\n          $rc->getProperties()\n      ),\n      'methods' => array_map(\n          function ($m) use ($cparser) {\n            $ret = null;\n            if ($m->hasReturnType()) {\n              $type = $m->getReturnType();\n              $ret  = [(string)$type];\n              if ($type->allowsNull()) {\n                $ret[] = null;\n              }\n            }\n\n            return [\n            'name' => $m->getName(),\n            'static' => $m->isStatic(),\n            'private' => $m->isPrivate(),\n            'protected' => $m->isProtected(),\n            'public' => $m->isPublic(),\n            'final' => $m->isFinal(),\n            'code' => $this->_closureSource($m),\n            'doc' => $cparser->iparse($m->getDocComment()),\n            'returns' => $ret,\n            'arguments' => array_map(\n                function ($p) use ($m) {\n                  return [\n                  'name' => $p->getName(),\n                  'position' => $p->getPosition(),\n                  'type' => $p->getType(),\n                  'required' => !$p->isOptional(),\n                  'has_default' => $p->isDefaultValueAvailable(),\n                  'default' => $p->isDefaultValueAvailable() ? $p->getDefaultValue() : '',\n                  'default_name' => $p->isDefaultValueAvailable() && $p->isDefaultValueConstant() ? $p->getDefaultValueConstantName() : ''\n                  ];\n                },\n                $m->getParameters()\n            )\n            ];\n          },\n          $rc->getMethods()\n      )\n    ];\n\n    \/*\n    try {\n      $obj = $parser->parse($code);\n      $arr = json_decode(json_encode($obj), true);\n      foreach ( $arr[0]['stmts'] as $node ){\n        if ( $node['nodeType'] === 'Stmt_Class' ){\n          $res['class'] = $node['name']['name'];\n          $res['elements'] = [];\n          foreach ( $node['stmts'] as $stmts ){\n            if ( isset($stmts['attributes'], $stmts['attributes']['comments']) ){\n              foreach ( $stmts['attributes']['comments'] as $c ){\n                $docblock = $doc_parser->create($c['text']);\n\n                \/\/ Contains the summary for this DocBlock\n                $res['summary'] = $docblock->getSummary();\n\n                $tags = $docblock->getTags();\n                \/\/ Contains \\phpDocumentor\\Reflection\\DocBlock\\Description object\n                $res['description_obj'] = $docblock->getDescription();\n                foreach ( $tags as $i => $t ){\n                  X::hdump($i, (string)$t->getType(), $t->getName);\n                  $desc = $t->getDescription()->render();\n                  var_dump($desc);\n                }\n                echo '<pre>';\n                var_dump($summary, $description, $tags);\n                echo '<\/pre>';\n              }\n            }\n          }\n          X::hdump(\"HEY??\", count($node['stmts']));\n        }\n      }\n      X::hdump(count($arr[0]['stmts']));\n      X::hdump($arr[0]['stmts']);\n    }\n    catch (PhpParser\\Error $e) {\n        echo 'Parse Error: ', $e->getMessage();\n    }\n    *\/\n    return $cls;\n  }",
            "startLine": 304,
            "endLine": 436,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "class_name",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "name"
                }
            ]
        },
        "analyze": {
            "name": "analyze",
            "summary": "Function that analyzes the class by returning the non-detailed information",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $class, $type = false)\n  {\n    $ok = true;\n    try {\n      $ref = new \\ReflectionClass($class);\n    }\n    catch (\\Exception $e) {\n      throw new \\Exception($e->getMessage());\n    }\n\n    if ($ok) {\n      $fs   = new System();\n      $tmp  = $ref->getFileName();\n      $file = $tmp && $fs->isFile($tmp) ? $tmp : null;\n      $arr  = [\n        'name' => $class,\n        'file' => $file,\n        'parents' => [],\n        'isAnonymous' => $ref->isAnonymous(),\n        'isCloneable' => $ref->isCloneable(),\n        'isFinal' => $ref->isFinal(),\n        'isInstantiable' => $ref->isInstantiable(),\n        'isInternal' => $ref->isInternal(),\n        'isIterateable' => $ref->isIterateable(),\n        'isUserDefined' => $ref->isUserDefined(),\n        'methods' => $this->addMethods($ref, $type, $file),\n        'properties' => [],\n        'traits' => [],\n        'unused' => []\n      ];\n\n      $props = $ref->getProperties();\n      if (!empty($props)) {\n        foreach ($props as $prop) {\n          $type_prop = false;\n          if ($prop->isPublic()) {\n            $type_prop = 'public';\n          }\n          elseif ($prop->isPrivate()) {\n            $type_prop = 'private';\n          }\n          elseif ($prop->isProtected()) {\n            $type_prop = 'protected';\n          }\n          elseif ($prop->isStatic()) {\n            $type_prop = 'static';\n          }\n\n          if (!empty($type_prop)) {\n            $arr['properties'][$type_prop][] = $prop->getName();\n          }\n        }\n      }\n\n      \/\/for parents\n      $parents = $ref->getParentClass();\n      if (!empty($parents)) {\n        foreach ($parents as $parent) {\n          $arr['parents'][$parent] = $this->analyze($parent, 'parent');\n\n          foreach ($arr['parents'][$parent]['methods'] as $i => $m) {\n            if (count($m)) {\n              $arr['methods'][$i] = array_merge($m, $arr['methods'][$i]);\n            }\n          }\n        }\n      }\n\n      \/\/for traits\n      $traits = $ref->getTraitNames();\n      if (!empty($traits)) {\n        foreach ($traits as $trait) {\n          $arr['traits'][$trait] = $this->analyze($trait, 'trait');\n\n          foreach ($arr['traits'][$trait]['methods'] as $i => $m) {\n            if (count($m)) {\n              $arr['methods'][$i] = array_merge($arr['methods'][$i], $m);\n            }\n          }\n        }\n      }\n\n      \/\/for interfaces\n      if ($interfaces = $ref->getInterfaceNames()) {\n        foreach ($interfaces as $interface) {\n          $arr['interfaces'][$interface] = $this->analyze($interface, 'interface');\n          foreach (array_keys($arr['interfaces'][$interface]['methods']) as $i) {\n            if (isset($arr['methods'][$i]['interfaces'])) {\n              $arr['methods'][$i]['interfaces'][] = $interface;\n            }\n            else {\n              $arr['methods'][$i]['interfaces'] = [$interface];\n            }\n          }\n        }\n      }\n\n      if (!empty($arr['methods']['private'])) {\n        foreach ($arr['methods']['private'] as $name => $priv) {\n          $str = ($priv['static'] ? '::' : '->') . $name;\n          if (X::indexOf($fs->getContents($arr['file']), $str) === -1) {\n            $arr['unused'][] = $arr['name'] . '::' . $priv['name'];\n          }\n        }\n      }\n\n      return $arr;\n    }\n\n    return null;\n  }",
            "startLine": 446,
            "endLine": 556,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": [
                {
                    "name": "class",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "addMethods": {
            "name": "addMethods",
            "summary": "This function returns all the information of the methods cataloged by type",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($class_object, $origin = false, $file = NULL)\n  {\n    $methods = [\n      'private' => [],\n      'protected' => [],\n      'public' => []\n    ];\n\n    foreach ($class_object->getMethods() as $m) {\n      $idx = 'public';\n      if ($m->isPrivate()) {\n        $idx = 'private';\n      }\n      elseif ($m->isProtected()) {\n        $idx = 'protected';\n      }\n\n      if ($m->getDeclaringClass()->getName() === $class_object->getName()) {\n        $doc = is_null($file) ? false : $m->getDocComment();\n        $ret = null;\n        if ($m->hasReTurnType()) {\n          $type = $m->getReturnType();\n          $ret  = [(string)$type];\n          if ($type->allowsNull()) {\n            $ret[] = null;\n          }\n        }\n\n        $methods[$idx][$m->getName()] = [\n          'static' => $m->isStatic(),\/\/ ? 'static' : 'non-static',\n          'returns' => $ret,\n          'doc' => is_null($file) ? false : $doc,\n          'parsed' => is_null($file) ? false : $this->parser->parseDocblock($doc),\n          'line' => is_null($file) ? false : $m->getStartLine(),\n          'type' => $origin !== false ? $origin : 'origin',\n          'file' => $m->getDeclaringClass()->getName()\n        ];\n      }\n    }\n\n    if ($origin === 'parent') {\n      unset($methods['private']);\n    }\n\n    return $methods;\n  }",
            "startLine": 567,
            "endLine": 612,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "class_object",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "object"
                },
                {
                    "name": "origin",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "file",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 51,
            "endLine": 58,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 51,
                "endLine": 58,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "check": {
            "name": "check",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "startLine": 65,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "startLine": 65,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->error;\n  }",
            "startLine": 86,
            "endLine": 89,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->error;\n  }",
                "startLine": 86,
                "endLine": 89,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n\n  }",
            "startLine": 92,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n\n  }",
                "startLine": 92,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "startLine": 98,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    if ($this->isDebug()) {\n        $ar = \\func_get_args();\n        $cn = bbn\\Str::encodeFilename(str_replace('\\\\', '_', \\get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "startLine": 98,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "__call": {
            "name": "__call",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
            "startLine": 115,
            "endLine": 126,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": null,
            "parent": {
                "name": "__call",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($name, $arguments)\n  {\n    $class = \\get_class($this);\n    throw new \\Exception(\n      sprintf(\n        X::_(\"Wrong method used for the class %s: %s with the following arguments:\"),\n        $class,\n        $name,\n        implode(', ', $arguments)\n      )\n    );\n  }",
                "startLine": 115,
                "endLine": 126,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "name",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "arguments",
                        "position": 1,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "name",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "arguments",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
            "startLine": 132,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return $this->debug || (defined(\"BBN_IS_DEV\") && BBN_IS_DEV);\n  }",
                "startLine": 132,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Models\\Cls\\Basic",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Models\\Cls\\Basic",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": [],
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}