{
    "doc": {
        "description": "Documentation block parser\n",
        "tags": {
            "author": "Mirko Argentino <mirko@bbn.solutions>",
            "copyright": "BBN Solutions",
            "category": "Parsers",
            "version": "1.0"
        }
    },
    "name": "bbn\\Parsers\\Docblock",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Parsers\/Docblock.php",
    "startLine": 13,
    "endLine": 359,
    "numMethods": 6,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 2,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "all_tags": {
            "common": {
                "author": [
                    "text"
                ],
                "copyright": [
                    "text"
                ],
                "deprecated": [
                    "text"
                ],
                "example": [
                    "text"
                ],
                "ignore": [],
                "license": [
                    "text"
                ],
                "link": [
                    "text"
                ],
                "package": [
                    "text"
                ],
                "return": [
                    "type",
                    "description"
                ],
                "returns": [
                    "type",
                    "description"
                ],
                "since": [
                    "text"
                ],
                "throws": [
                    "type",
                    "description"
                ],
                "todo": [
                    "text"
                ],
                "version": [
                    "text"
                ]
            },
            "js": {
                "abstract": [],
                "access": [
                    "text"
                ],
                "alias": [],
                "arg": "param",
                "argument": "param",
                "async": [],
                "augments": [],
                "borrows": [],
                "callback": [],
                "class": [],
                "classdesc": [],
                "const": "constant",
                "constant": [],
                "constructor": "class",
                "constructs": [],
                "default": [
                    "text"
                ],
                "defaultValue": "default",
                "description": [
                    "text"
                ],
                "emits": "fires",
                "enum": [],
                "event": [
                    "name"
                ],
                "exception": "throws",
                "exports": [],
                "extends": "augments",
                "external": [],
                "file": [
                    "text"
                ],
                "fileoverview": "file",
                "fires": [
                    "name"
                ],
                "func": "function",
                "function": [
                    "name"
                ],
                "generator": [],
                "global": [],
                "hidecontructor": [],
                "host": "external",
                "implements": [],
                "inner": [],
                "instance": [],
                "interface": [],
                "kind": [],
                "lends": [],
                "linkcode": "link",
                "linkplain": "link",
                "listens": [],
                "member": [],
                "memberof": [
                    "name"
                ],
                "method": "function",
                "mixes": [],
                "mixin": [
                    "name"
                ],
                "module": [],
                "name": [
                    "name"
                ],
                "namespace": [],
                "override": [],
                "overview": "file",
                "param": [
                    "type",
                    "name",
                    "description"
                ],
                "private": [],
                "prop": "property",
                "property": [
                    "type",
                    "name",
                    "description"
                ],
                "protected": [],
                "public": [],
                "readonly": [],
                "requires": [],
                "see": [
                    "name"
                ],
                "static": [],
                "summary": [
                    "text"
                ],
                "this": [],
                "tutorial": [],
                "type": [
                    "type"
                ],
                "typedef": [],
                "var": "member",
                "variation": [],
                "virtual": "abstract",
                "yield": "yields",
                "yields": []
            },
            "vue": {
                "component": [
                    "name"
                ],
                "computed": [
                    "name"
                ],
                "data": [
                    "type",
                    "default",
                    "name",
                    "description"
                ],
                "emits": [
                    "name"
                ],
                "method": [
                    "name"
                ],
                "prop": [
                    "type",
                    "default",
                    "name"
                ],
                "required": [
                    "text"
                ],
                "watch": [
                    "name",
                    "description"
                ]
            },
            "php": {
                "api": [],
                "category": [
                    "text"
                ],
                "filesource": [],
                "global": [
                    "type",
                    "name",
                    "description"
                ],
                "internal": [
                    "text"
                ],
                "method": [
                    "text"
                ],
                "package": [
                    "text"
                ],
                "param": [
                    "type",
                    "name",
                    "description"
                ],
                "property": [
                    "type",
                    "name",
                    "description"
                ],
                "property-read": [
                    "type",
                    "name",
                    "description"
                ],
                "property-write": [
                    "type",
                    "name",
                    "description"
                ],
                "see": [
                    "text"
                ],
                "source": [
                    "text"
                ],
                "subpackage": [
                    "text"
                ],
                "uses": [
                    "text"
                ],
                "var": [
                    "type",
                    "name",
                    "description"
                ]
            }
        },
        "multiple": [
            "author",
            "param",
            "example",
            "emits",
            "fires"
        ],
        "source": "",
        "mode": "",
        "modes": [
            "js",
            "vue",
            "php"
        ],
        "tags": null,
        "parsed": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Parsers",
    "shortName": "Docblock",
    "contentConstructor": {
        "file": "bbn\\Parsers\\Docblock",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Docblock",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($mode)\n  {\n      $this->tags = array_merge(self::$all_tags['common'], self::$all_tags[$mode]);\n    }\n  }",
            "startLine": 166,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "mode",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getAllTags": {
            "name": "getAllTags",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Docblock",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return $this->tags;\n  }",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": [
                null
            ],
            "parent": false,
            "arguments": []
        },
        "isMultiple": {
            "name": "isMultiple",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Docblock",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $tag)\n  {\n    return in_array($tag, self::$multiple);\n  }",
            "startLine": 177,
            "endLine": 180,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "tag",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "parse": {
            "name": "parse",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Docblock",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(string $source)\n  {\n    preg_match_all('\/\\\/\\*\\*(.+)\\*\\\/\/Us', $source, $matches);\n    \/** @var array Preliminar result *\/\n    $res = [];\n    \/\/ The matches without the comments\n    if (!empty($matches[1])) {\n      foreach ($matches[1] as $idx => $it) {\n        \/** @var array Representation of each comment block found in the source  *\/\n        $tmp = [\n          'summary' => '',\n          'description' => ''\n        ];\n        \/** @var string The trimmed whole comment block *\/\n        $it = trim($it);\n        \/** @var array Each line from the block *\/\n        $lines = \\bbn\\X::split($it, PHP_EOL);\n        \/** @var bool The first part of the comment block we get should be the summary and optionally the description *\/\n        $is_desc = true;\n        \/** @var int The number of tags that have been parsed in the comment block *\/\n        $num_tags = 0;\n        \/** @var string The last tag parsed in the comment block *\/\n        $tag = null;\n        if (isset($current)) {\n          unset($current);\n        }\n        \/** @var string|array The current tag *\/\n        $current = false;\n        \/\/ Each line\n        foreach ($lines as $line) {\n          \/** @var string The line, trimmed until the first asterisk *\/\n          $ln = ltrim($line);\n          \/** @var bool If the line is a summary, a description, or the continuation of another tag it will remain false *\/\n          $is_tag = false;\n          \/\/ Empty line case\n          if ($ln === '*') {\n            $ln = '';\n          }\n          \/\/ Removing the asterisk and the first space\n          elseif (substr($ln, 0, 2) === '* ') {\n            $ln = substr($ln, 2);\n          }\n          \/** @var string The completely trimmed line (but we will need the spaces for markdown) *\/\n          $trimmed = trim($ln);\n          \/\/ If trimmed is empty this is an empty line to treat as is\n          if (strlen($trimmed)) {\n            \/\/ Case where the line is a tag\n            if (substr($ln, 0, 1) === '@') {\n              \/** @var array The line split in bits by space *\/\n              $bits = preg_split('\/\\s+\/', $trimmed);\n              \/\/ The first part is the tag\n              $tag = substr(array_shift($bits), 1);\n              \/\/ The first tag MUST be the type (i.e. file, method, var...)\n              if (!$num_tags) {\n                $tmp['type'] = $tag;\n                if (($tag === 'file') && $is_desc) {\n                  $tmp['summary'] .= \\bbn\\X::join($bits, ' ');\n                }\n                else {\n                  $tmp['name'] = count($bits) ? array_shift($bits) : '';\n                  if (!empty($tmp['summary'])) {\n                    $tmp['summary'] = trim($tmp['summary']);\n                  }\n                  elseif (!empty($tmp['description'])) {\n                    $tmp['description'] = trim($tmp['description']);\n                  }\n                }\n              }\n              else {\n                if (!isset($tmp[$tag])) {\n                  $tmp[$tag] = [];\n                }\n                if (count($bits)) {\n                  if (isset($this->tags[$tag])) {\n                    $tmp2 = [];\n                    if (is_array($this->tags[$tag])) {\n                      $num_items = count($this->tags[$tag]);\n                      foreach ($this->tags[$tag] as $i => $item) {\n                        if ($i === $num_items - 1) {\n                          $tmp2[$item] = \\bbn\\X::join($bits, ' ');\n                        }\n                        elseif ($num_items > $i) {\n                          $tmp2[$item] = array_shift($bits);\n                        }\n                      }\n                    }\n                    else{\n                      $num_items = 1;\n                    }\n                    if (isset($current)) {\n                      unset($current);\n                    }\n                    if ($this->isMultiple($tag)) {\n                      $tmp[$tag][] = $tmp2;\n                      $current =& $tmp[$tag][count($tmp[$tag]) - 1];\n                    }\n                    else {\n                      $tmp[$tag] = $tmp2;\n                      $current =& $tmp[$tag];\n                    }\n                    $keys = array_keys($current);\n                    $last_key = end($keys);\n                  }\n                }\n                elseif (isset($this->tags[$tag]) && (count($this->tags[$tag]) === 1)) {\n                  $last_key = $this->tags[$tag][0];\n                  if ($this->isMultiple($tag)) {\n                    $tmp[$tag][] = [$last_key => ''];\n                    $current =& $tmp[$tag][count($tmp[$tag]) - 1];\n                  }\n                  else {\n                    $tmp[$tag] = [$last_key => ''];\n                    $current =& $tmp[$tag];\n                  }\n                }\n              }\n              \/\/ After having found the first tag summary and description are not anymore expected\n              $is_desc = false;\n              $is_tag = true;\n              $num_tags++;\n            }\n            elseif ($is_desc) {\n              if (empty($tmp['summary'])) {\n                $tmp['summary'] .= $trimmed;\n              }\n              else {\n                $tmp['description'] .= empty($tmp['description']) ? $ln : PHP_EOL.$ln;\n              }\n            }\n            elseif ($current) {\n              $current[$last_key] .= PHP_EOL.$ln;\n            }\n          }\n          elseif ($is_desc) {\n            if (!empty($tmp['description'])) {\n              $tmp['description'] .= PHP_EOL;\n            }\n          }\n          elseif ($current) {\n            $current[$last_key] .= PHP_EOL;\n          }\n        }\n        $res[] = $tmp;\n      }\n    }\n    if (isset($current)) {\n      unset($current);\n    }\n    \/\/die(var_dump($res));\n    $result = array_shift($res);\n    $result['methods'] = [];\n    foreach ($res as $i => $r) {\n      if (!empty($r['type']) && ($r['type'] === 'method')) {\n        $result['methods'][$r['name']] = $r;\n      }\n    }\n    \/\/die(\\bbn\\X::dump($result));\n    return $result;\n  }",
            "startLine": 182,
            "endLine": 340,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "source",
                    "position": 0,
                    "type": "string",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getJs": {
            "name": "getJs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Docblock",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st)\n  {\n    if ($bits = $this->parse($st)) {\n      $res = [];\n      foreach ($bits as $bit) {\n\n      }\n      return $res;\n    }\n\n  }",
            "startLine": 342,
            "endLine": 352,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "rebuild": {
            "name": "rebuild",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Parsers\\Docblock",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $parsed)\n  {\n    $st = '';\n\n  }",
            "startLine": 354,
            "endLine": 358,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": false,
            "arguments": [
                {
                    "name": "parsed",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "all_tags": {
            "common": {
                "author": [
                    "text"
                ],
                "copyright": [
                    "text"
                ],
                "deprecated": [
                    "text"
                ],
                "example": [
                    "text"
                ],
                "ignore": [],
                "license": [
                    "text"
                ],
                "link": [
                    "text"
                ],
                "package": [
                    "text"
                ],
                "return": [
                    "type",
                    "description"
                ],
                "returns": [
                    "type",
                    "description"
                ],
                "since": [
                    "text"
                ],
                "throws": [
                    "type",
                    "description"
                ],
                "todo": [
                    "text"
                ],
                "version": [
                    "text"
                ]
            },
            "js": {
                "abstract": [],
                "access": [
                    "text"
                ],
                "alias": [],
                "arg": "param",
                "argument": "param",
                "async": [],
                "augments": [],
                "borrows": [],
                "callback": [],
                "class": [],
                "classdesc": [],
                "const": "constant",
                "constant": [],
                "constructor": "class",
                "constructs": [],
                "default": [
                    "text"
                ],
                "defaultValue": "default",
                "description": [
                    "text"
                ],
                "emits": "fires",
                "enum": [],
                "event": [
                    "name"
                ],
                "exception": "throws",
                "exports": [],
                "extends": "augments",
                "external": [],
                "file": [
                    "text"
                ],
                "fileoverview": "file",
                "fires": [
                    "name"
                ],
                "func": "function",
                "function": [
                    "name"
                ],
                "generator": [],
                "global": [],
                "hidecontructor": [],
                "host": "external",
                "implements": [],
                "inner": [],
                "instance": [],
                "interface": [],
                "kind": [],
                "lends": [],
                "linkcode": "link",
                "linkplain": "link",
                "listens": [],
                "member": [],
                "memberof": [
                    "name"
                ],
                "method": "function",
                "mixes": [],
                "mixin": [
                    "name"
                ],
                "module": [],
                "name": [
                    "name"
                ],
                "namespace": [],
                "override": [],
                "overview": "file",
                "param": [
                    "type",
                    "name",
                    "description"
                ],
                "private": [],
                "prop": "property",
                "property": [
                    "type",
                    "name",
                    "description"
                ],
                "protected": [],
                "public": [],
                "readonly": [],
                "requires": [],
                "see": [
                    "name"
                ],
                "static": [],
                "summary": [
                    "text"
                ],
                "this": [],
                "tutorial": [],
                "type": [
                    "type"
                ],
                "typedef": [],
                "var": "member",
                "variation": [],
                "virtual": "abstract",
                "yield": "yields",
                "yields": []
            },
            "vue": {
                "component": [
                    "name"
                ],
                "computed": [
                    "name"
                ],
                "data": [
                    "type",
                    "default",
                    "name",
                    "description"
                ],
                "emits": [
                    "name"
                ],
                "method": [
                    "name"
                ],
                "prop": [
                    "type",
                    "default",
                    "name"
                ],
                "required": [
                    "text"
                ],
                "watch": [
                    "name",
                    "description"
                ]
            },
            "php": {
                "api": [],
                "category": [
                    "text"
                ],
                "filesource": [],
                "global": [
                    "type",
                    "name",
                    "description"
                ],
                "internal": [
                    "text"
                ],
                "method": [
                    "text"
                ],
                "package": [
                    "text"
                ],
                "param": [
                    "type",
                    "name",
                    "description"
                ],
                "property": [
                    "type",
                    "name",
                    "description"
                ],
                "property-read": [
                    "type",
                    "name",
                    "description"
                ],
                "property-write": [
                    "type",
                    "name",
                    "description"
                ],
                "see": [
                    "text"
                ],
                "source": [
                    "text"
                ],
                "subpackage": [
                    "text"
                ],
                "uses": [
                    "text"
                ],
                "var": [
                    "type",
                    "name",
                    "description"
                ]
            }
        },
        "multiple": [
            "author",
            "param",
            "example",
            "emits",
            "fires"
        ]
    },
    "constants": null,
    "summary": "Documentation block parser",
    "description": "",
    "description_parts": []
}