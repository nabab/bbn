{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Entities\\People",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Entities\/People.php",
    "startLine": 6,
    "endLine": 744,
    "numMethods": 12,
    "numProperties": 0,
    "numConstants": 0,
    "numStaticProperties": 3,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "civs": {
            "M\/MME": "M\/MME",
            "M": "M",
            "MR": "M",
            "ML": "MLLE",
            "MME": "MME",
            "ME": "ME",
            "MONSIEUR": "M",
            "MLLE": "MLLE",
            "MR\/ME": "M\/MME",
            "M.": "M",
            "MLE": "MLLE",
            "MMES": "MMES",
            "M\/MES": "M\/MME",
            "MM": "MM",
            "MLL": "MLLE",
            "MMME": "MME",
            "MES": "MM",
            "M\/ME": "M\/MME",
            "MRME": "M",
            "ME\/MR": "ME",
            "MME\/M": "M\/MME",
            "MLLES": "MMES",
            "MADAME": "MME",
            "MADEMOISELLE": "MLLE",
            "MM\/ME": "M\/MME",
            "MRR": "M",
            "*M\/MME": "M\/MME",
            "FAMILLE": "M\/MME",
            "MS\/MME": "M\/MME",
            "MR\/": "M",
            "MRS": "MM",
            "M.MME": "M\/MME",
            "MRS\/MMES": "MM",
            "**MME": "MME"
        },
        "civilites": {
            "M": "Monsieur",
            "MME": "Madame",
            "MLLE": "Mademoiselle",
            "M\/MME": "Madame\/Monsieur",
            "ME": "Ma\u00eetre",
            "MMES": "Mesdames",
            "MM": "Messieurs"
        },
        "stes": [
            "STE",
            "CIE",
            "SAS",
            "SCI",
            "SC",
            "SA",
            "SARL",
            "EURL"
        ],
        "db": null,
        "options": null
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Entities",
    "shortName": "People",
    "contentConstructor": {
        "file": "bbn\\Entities\\People",
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(bbn\\Db $db)\n  {\n      $this->db      = $db;\n      $this->options = \\bbn\\Appui\\Option::getInstance();\n\n  }",
            "startLine": 61,
            "endLine": 66,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fnom": {
            "name": "fnom",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($s, $full = false)\n  {\n    if (\\bbn\\Str::isUid($s)) {\n      $s = $this->get_info($s);\n    }\n\n    if (is_array($s) && isset($s['nom'])) {\n      $st = '';\n      if (!empty($s['civilite']) && $s['civilite'] !== '') {\n        if ($full && isset(self::$civilites[$s['civilite']])) {\n          $st .= self::$civilites[$s['civilite']].' ';\n        }\n        else{\n          $st .= $s['civilite'].' ';\n        }\n      }\n\n            $st .= $s['nom'];\n      if (!empty($s['prenom'])) {\n        $st .= ' '.$s['prenom'];\n      }\n\n      return $st;\n    }\n\n    return null;\n  }",
            "startLine": 69,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "s",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "full",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "get_info": {
            "name": "get_info",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $id_adherent = 0)\n  {\n    $d = $this->db->rselect(\"bbn_people\", [], ['id' => $id]);\n    if ($d) {\n      if (!empty($d['portable'])) {\n        $d['portable'] = (string)$d['portable'];\n      }\n\n      if (isset($d['cfg'])) {\n        $d['cfg'] = json_decode($d['cfg'], true);\n        if (is_array($d['cfg'])) {\n          foreach ($d['cfg'] as $i => $val){\n            $d[$i] = $val;\n          }\n        }\n\n        unset($d['cfg']);\n      }\n\n      $d['fnom']  = $this->fnom($d);\n      $d['ffnom'] = $this->fnom($d, 1);\n      if (!isset($d['inscriptions'])) {\n        $d['inscriptions'] = [];\n      }\n\n      if ($id_adherent) {\n        $d['roles'] = $this->db->getColumnValues(\n          [\n          'tables' => ['apst_liens'],\n          'fields' => ['bbn_options.text'],\n          'join' => [\n            [\n              'table' => 'bbn_people',\n              'on' => [\n                'conditions' => [\n                  [\n                    'field' => 'bbn_people.id',\n                    'operator' => 'eq',\n                    'exp' => 'apst_liens.id_tiers'\n                  ]\n                ],\n                'logic' => 'AND'\n              ]\n            ],\n            [\n              'table' => 'bbn_options',\n              'on' => [\n                'conditions' => [\n                  [\n                    'field' => 'bbn_options.id',\n                    'operator' => 'eq',\n                    'exp' => 'apst_liens.link_type'\n                  ]\n                ],\n                'logic' => 'AND'\n              ]\n            ]\n          ],\n          'where' => [\n            'apst_liens.id_adherent' => $id_adherent,\n            'apst_liens.id_lieu' => $id\n          ]\n          ]\n        );\n      }\n    }\n\n        return $d;\n  }",
            "startLine": 98,
            "endLine": 166,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id_adherent",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "search": {
            "name": "search",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($fn)\n  {\n    $fn = $this->set_info($fn);\n    if (!empty($fn['fnom'])) {\n      return $this->db->selectOne(\n        'bbn_addresses', 'id', [\n        'cp' => $fn['cp'],\n        'adresse' => $fn['adresse']\n        ]\n      );\n        $h = $this->db->getOne(\n          \"\n\t\t\t\tSELECT id\n\t\t\t\tFROM bbn_people\n        WHERE TRIM(\n          IF ( civilite IS NULL, nom, CONCAT(civilite, ' ', prenom, ' ',nom) )\n        ) LIKE ?\n        OR ( nom LIKE ? AND prenom LIKE ? )\n\t\t\t\tLIMIT 1\",\n          $fn['fnom'],\n          $fn['nom'],\n          $fn['prenom']\n        );\n        return $h;\n    }\n\n      return false;\n  }",
            "startLine": 169,
            "endLine": 196,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "seek": {
            "name": "seek",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($p, int $start = 0, int $limit = 100)\n  {\n    if (is_array($p) && ( !empty($p['nom'])\n        || !empty($p['email'])\n        || !empty($p['portable']) )\n    ) {\n      $cond = [];\n      if (!empty($p['email']) && \\bbn\\Str::isEmail($p['email'])) {\n        array_push($cond, ['email', 'LIKE', $p['email']]);\n      }\n\n      if (!empty($p['nom'])) {\n        array_push($cond, ['nom', 'LIKE', $p['nom']]);\n      }\n\n      if (!empty($p['portable']) && (strlen($p['portable']) >= 6)) {\n        if (strlen($p['portable']) !== 10) {\n          array_push($cond, ['portable', 'LIKE', $p['portable'].'%']);\n        }\n        else{\n          array_push($cond, ['portable', 'LIKE', $p['portable']]);\n        }\n      }\n\n      if (!empty($p['prenom'])) {\n        array_push($cond, ['prenom', 'LIKE', $p['prenom']]);\n      }\n\n      return $this->db->getColumnValues(\"bbn_people\", 'id', $cond, ['nom', 'prenom'], $limit, $start);\n    }\n\n      return false;\n  }",
            "startLine": 199,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "p",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 100,
                    "default_name": ""
                }
            ]
        },
        "full_search": {
            "name": "full_search",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($p, int $start = 0, int $limit = 0)\n  {\n    $r   = [];\n    $res = \\bbn\\Str::isUid($p) ? [$p] : $this->seek($p, $start, $limit);\n    if ($res) {\n    }\n\n    foreach ($res as $i => $id){\n        $relations        = $this->db->getColumnValues(\n          [\n          'tables' => ['apst_liens'],\n          'fields' => ['apst_adherents.nom'],\n          'join' => [[\n            'table' => 'bbn_people',\n            'on' => [[\n              'field' => 'apst_liens.id_tiers',\n              'exp' => 'bbn_people.id'\n            ]]\n          ], [\n            'table' => 'apst_adherents',\n            'on' => [[\n              'field' => 'apst_liens.id_adherent',\n              'exp' => 'apst_adherents.id'\n            ]]\n          ]],\n          'where' => [\n            'id_tiers' => $id\n          ]\n          ]\n        );\n      $r[$i]              = $this->get_info($id);\n      $r[$i]['relations'] = implode($relations, ', ');\n    }\n\n    return $r;\n  }",
            "startLine": 234,
            "endLine": 269,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "p",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 1,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "relations": {
            "name": "relations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id)\n  {\n    if ($this->get_info($id)) {\n      return $this->db->selectAllByKeys(\n        [\n        'tables' => ['apst_liens'],\n        'fields' => ['bbn_people.id', 'id_adherent'],\n        'join' => [[\n          'table' => 'bbn_people',\n          'on' => [\n            'conditions' => [[\n              'field' => 'apst_liens.id_tiers',\n              'exp' => 'bbn_people.id'\n            ]]\n          ]]\n        ],\n        'where' => ['id_tiers' => $id]\n        ]\n      );\n    }\n\n    return false;\n  }",
            "startLine": 272,
            "endLine": 294,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "add": {
            "name": "add",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($fn, $force = false)\n  {\n    \/\/$id = false;\n    $fields       = array_keys($this->db->getColumns('bbn_people'));\n    $extra_fields = [];\n    $not_cfg      = ['id_lieu', 'roles', 'id_adherent', 'fnom', 'fonctions', 'licence', 'montant', 'parts', 'effet', 'adherents', 'types_liens', 'id_option', 'suggestions', 'relations', 'ffnom', 'id_tier_ext', 'wp_group', 'is_admin'];\n    $wp_group     = false;\n    $id_adh       = false;\n    if ($fn = $this->set_info($fn)) {\n      if ($force) {\n        foreach ($fn as $k => $v) {\n          if (!in_array($k, $fields)) {\n            \/\/properties arriving in $fn but not to insert in cfg column of bbn_people\n            if ($fn[$k] && !in_array($k, $not_cfg)) {\n              if (($k !== 'inscriptions') || (!empty($v) && \\bbn\\Str::isEmail($fn['email']))) {\n                $fn['cfg'][$k] = $fn[$k];\n              }\n            }\n\n            if ($k === 'wp_group') {\n              $wp_group = $v;\n            }\n\n            if ($k === 'id_adherent') {\n              $id_adh = $v;\n            }\n\n            unset($fn[$k]);\n          }\n        }\n\n        $fn['cfg'] = !empty($fn['cfg']) ? json_encode($fn['cfg']) : null;\n        if (isset($fn['id']) && ($fn['id'] === '')) {\n                    unset($fn['id']);\n        }\n\n        if ($this->db->insert(\"bbn_people\", $fn)) {\n          $id = $this->db->lastId();\n          if (!empty($wp_group) && !empty($id_adh)) {\n            $adh = new \\apst\\adherent($this->db, $id_adh);\n            if ($adh->check()) {\n              $adh->wps_add_contact(\n                [\n                'id' => $id,\n                'group' => $wp_group,\n                'email' => $fn['email'],\n                'nom' => $this->db->selectOne('bbn_people', 'fullname', ['id' => $id])\n                ]\n              );\n            }\n          }\n        }\n      }\n\n            return $id;\n    }\n\n    return false;\n  }",
            "startLine": 302,
            "endLine": 360,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "update": {
            "name": "update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $fn)\n  {\n    if ($this->get_info($id)) {\n      $fields   = array_keys($this->db->getColumns('bbn_people'));\n      $not_cfg  = ['id_lieu', 'roles', 'id_adherent', 'fnom', 'fonctions', 'licence', 'montant', 'parts', 'effet', 'adherents', 'types_liens', 'id_option', 'suggestions', 'relations', 'ffnom', 'id_tier_ext', 'wp_group', 'is_admin'];\n      $wp_group = false;\n      $id_adh   = false;\n      $wp       = false;\n      foreach ($fn as $k => $v){\n        if (!in_array($k, $fields) || ($k === 'id')) {\n          if(!in_array($k, $not_cfg) && ($k !== 'id')) {\n            if ($k === 'inscriptions') {\n              if (!empty($v) && \\bbn\\Str::isEmail($fn['email'])) {\n                $fn['cfg'][$k] = $v;\n              }\n            }\n            else {\n              $fn['cfg'][$k] = (string)$fn[$k];\n            }\n          }\n\n          if ($k === 'wp_group') {\n            $wp_group = $v;\n          }\n\n          if ($k === 'id_adherent') {\n            $id_adh = $v;\n          }\n\n          unset($fn[$k]);\n        }\n      }\n\n      $fn['cfg'] = !empty($fn['cfg']) ? json_encode($fn['cfg']) : null;\n      if (!empty($wp_group) && !empty($id_adh)) {\n        $adh = new \\apst\\adherent($this->db, $id_adh);\n        if ($adh->check()) {\n          $people = $this->db->rselect('bbn_people', ['email', 'fullname'], ['id' => $id]);\n          if (!empty($fn['email']) || !empty($people['email'])) {\n            if ($adh->wps_has_contact($id)) {\n              $wp = $adh->wps_update_contact(\n                [\n                'id' => $id,\n                'group' => $wp_group,\n                'email' => $fn['email'] ?? $people['email'],\n                'nom' => $people['fullname']\n                ]\n              );\n            }\n            else {\n              $wp = $adh->wps_add_contact(\n                [\n                'id' => $id,\n                'group' => $wp_group,\n                'email' => $fn['email'] ?? $people['email'],\n                'nom' => $people['fullname']\n                ]\n              );\n            }\n          }\n\n          $adh->update_full();\n        }\n      }\n\n      if (((count($fn) > 0) && $this->db->update('bbn_people', $fn, ['id' => $id]))\n          || !empty($wp)\n      ) {\n        return $id;\n      }\n    }\n\n    return false;\n  }",
            "startLine": 363,
            "endLine": 436,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "fn",
                    "position": 1,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "set_info": {
            "name": "set_info",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($st, $email = false, $portable = false)\n  {\n    if (is_array($st)) {\n            $fn = $st;\n      if (!isset($fn['prenom']) && !isset($fn['civilite'])) {\n          $st = $fn['nom'];\n      }\n    }\n    else{\n        $fn = [];\n      if ($email) {\n        $fn['email'] = $email;\n      }\n\n      if ($portable) {\n        $fn['portable'] = $portable;\n      }\n    }\n\n    if (is_string($st) && !empty($st)) {\n        $fn['prenom'] = '';\n        \/\/ Import: recherche, suppression et retour de commentaires entre parentheses\n        preg_match('\/\\(([^\\)]+)\/', $st, $m);\n      if (count($m) === 2) {\n          $st            = substr($st, 0, strpos($st, $m[0]));\n          $fn['comment'] = $m[1];\n      }\n\n\n      \/\/ array_values reinitializes the keys after array_filter\n      $fullname = array_values(\\bbn\\X::removeEmpty(explode(\" \",$st), 1));\n      if (isset($fullname[0])) {\n        if (isset(self::$civs[\\bbn\\Str::changeCase($fullname[0], 'upper')])) {\n          $fn['civilite'] = self::$civs[\\bbn\\Str::changeCase($fullname[0], 'upper')];\n          array_shift($fullname);\n          \/\/ Cas M MME\n          if (isset($fullname[0], self::$civs[\\bbn\\Str::changeCase($fullname[0], 'upper')])) {\n                  $fn['civilite'] = 'M\/MME';\n                  array_shift($fullname);\n          }\n\n          if (!isset($fullname[0])) {\n                return false;\n          }\n        }\n\n          \/\/ Cas STE\n        if (isset($fullname[0]) && in_array($fullname[0], self::$stes)) {\n            $fn['nom'] = implode(\" \", $fullname);\n        }\n        elseif (( count($fullname) === 3 ) && strlen($fullname[0]) <= 3) {\n            $fn['nom']    = \\bbn\\Str::changeCase(\\bbn\\Str::changeCase($fullname[0].' '.$fullname[1], 'lower'));\n            $fn['prenom'] = \\bbn\\Str::changeCase(\\bbn\\Str::changeCase($fullname[2], 'lower'));\n        }\n        elseif (count($fullname) > 2) {\n          if (isset($fn['civilite'])) {\n              $fn['prenom'] = \\bbn\\Str::changeCase(\\bbn\\Str::changeCase(array_pop($fullname), 'lower'));\n              $fn['nom']    = \\bbn\\Str::changeCase(\\bbn\\Str::changeCase(implode(\" \", $fullname), 'lower'));\n          }\n          else{\n              $fn['nom'] = \\bbn\\Str::changeCase(\\bbn\\Str::changeCase(implode(\" \", $fullname), 'lower'));\n          }\n        }\n        elseif (count($fullname) < 2 || !isset($fullname[1])) {\n            $fn['nom'] = $fullname[0];\n        }\n        else{\n            $fn['prenom'] = \\bbn\\Str::changeCase(\\bbn\\Str::changeCase($fullname[1], 'lower'));\n            $fn['nom']    = \\bbn\\Str::changeCase(\\bbn\\Str::changeCase($fullname[0], 'lower'));\n        }\n      }\n    }\n\n    if (is_array($fn)) {\n      if (!isset($fn['prenom'])) {\n          $fn['prenom'] = '';\n      }\n\n      if (!isset($fn['civilite'])) {\n          $fn['civilite'] = empty($fn['prenom']) ? null : 'M';\n      }\n\n        $fn['fnom'] = $this->fnom($fn);\n      if (isset($fn['email']) && !\\bbn\\Str::isEmail($fn['email'])) {\n          unset($fn['email']);\n      }\n\n      if (isset($fn['tel'])) {\n          $fn['portable'] = $fn['tel'];\n          unset($fn['tel']);\n      }\n\n      if (isset($fn['portable'])) {\n          $fn['portable'] = \\bbn\\Str::getNumbers($fn['portable']);\n        if (strlen($fn['portable']) > 10 && strpos($fn['portable'], '33') === 0) {\n            $fn['portable'] = substr($fn['portable'], 2);\n        }\n\n        if (strlen($fn['portable']) === 9 && strpos($fn['portable'], '0') !== 0) {\n            $fn['portable'] = '0'.$fn['portable'];\n        }\n\n        if (strlen($fn['portable']) !== 10) {\n            unset($fn['portable']);\n        }\n      }\n\n      if (!isset($fn['nom'])) {\n          $fn = [];\n      }\n\n      return $fn;\n    }\n\n      return false;\n  }",
            "startLine": 439,
            "endLine": 554,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "st",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "email",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "portable",
                    "position": 2,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "fusion": {
            "name": "fusion",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($ids)\n  {\n    $args          = is_array($ids) ? $ids : func_get_args();\n    $fonction_lien = $this->options->fromCode('fonction', 'LIENS');\n    if (count($args) > 1) {\n      $id       = array_shift($args);\n      $creation = [$this->db->selectOne(\n        'bbn_history', 'tst', [\n        'uid' => $id,\n        'opr' => 'INSERT'\n        ]\n      )];\n      foreach ($args as $a){\n        if ($fn = $this->get_info($a)) {\n          $creation[]       = $this->db->getOne(\n            \"\n            SELECT tst\n            FROM bbn_history\n            WHERE uid = ?\n            AND opr LIKE 'INSERT'\",\n            hex2bin($a)\n          );\n          $cols             = $this->db->getFieldsList('apst_liens');\n          $cols['creation'] = 'tst';\n          $links            = $this->db->rselectAll(\n            [\n            'tables' => ['apst_liens'],\n            'fields' => $cols,\n            'join' => [\n              [\n                'table' => 'bbn_history',\n                'on' => [\n                  'conditions' => [\n                    [\n                      'field' => 'bbn_history.uid',\n                      'operator' => 'eq',\n                      'exp' => 'apst_liens.id'\n                    ]\n                  ],\n                  'logic' => 'AND'\n                ]\n              ]\n            ],\n            'where' => [\n              'id_tiers' => $a\n            ]\n            ]\n          );\n          foreach ($links as $link){\n                        $link_update = ['id_tiers' => $id];\n                        \/\/ Si les liens sont de type `Fonction` on les fusionne aussi de la m\u00eame mani\u00e8re que les tiers\n            if (($link['link_type'] === $fonction_lien)\n                && ($autre = $this->db->getRow(\n                  \"\n\t\t\t\t\t\t\t\tSELECT apst_liens.id, apst_liens.id_adherent, apst_liens.cfg, h.tst AS creation\n\t\t\t\t\t\t\t\tFROM apst_liens\n\t\t\t\t\t\t\t\t\tJOIN bbn_history AS h\n\t\t\t\t\t\t\t\t\t\tON h.uid = apst_liens.id\n\t\t\t\t\t\t\t\t\t\tAND h.opr LIKE 'INSERT'\n\t\t\t\t\t\t\t\t\tJOIN bbn_history_uids\n\t\t\t\t\t\t\t\t\t  ON bbn_history_uids.bbn_uid = apst_liens.id\n\t\t\t\t\t\t\t\t\t  AND bbn_history_uids.bbn_active = 1\n\t\t\t\t\t\t\t\tWHERE apst_liens.id_tiers = ?\n                  AND apst_liens.id_adherent = ?\n                  AND apst_liens.link_type = ?\",\n                  hex2bin($a),\n                  $link['id_adherent'],\n                  hex2bin($fonction_lien)\n                )                )\n            ) {\n                $link_cfg = json_decode($link['cfg'], 1);\n                \/\/ On met la date de cr\u00e9ation la plus ancienne\n              if (strtotime($autre['creation']) < strtotime($link['creation'])) {\n                            $this->db->query(\n                              \"\n\t\t\t\t\t\t\t\t\tUPDATE bbn_history\n\t\t\t\t\t\t\t\t\tSET tst = ?\n\t\t\t\t\t\t\t\t\tWHERE uid = ?\n\t\t\t\t\t\t\t\t\tAND opr LIKE 'INSERT'\",\n                              $autre['creation'],\n                              hex2bin($link['id'])\n                            );\n              }\n\n                            $this->db->query(\n                              \"\n\t\t\t\t\t\t\t\tUPDATE bbn_history\n\t\t\t\t\t\t\t\tSET uid = ?\n\t\t\t\t\t\t\t\tWHERE uid = ?\n\t\t\t\t\t\t\t\tAND opr LIKE 'UPDATE'\",\n                              hex2bin($link['id']),\n                              hex2bin($autre['id'])\n                            );\n                            $this->db->query(\n                              \"\n\t\t\t\t\t\t\t\tDELETE FROM bbn_history\n\t\t\t\t\t\t\t\tWHERE uid = ?\",\n                              hex2bin($autre['id'])\n                            );\n                            $autre_cfg = json_decode($autre['cfg'], 1);\n              if ($autre_cfg && $link_cfg && isset($autre_cfg['fonctions'], $link_cfg['fonctions'])) {\n                  $link_update['cfg'] = json_encode(\n                    [\n                      'fonctions' => array_unique(\\bbn\\X::mergeArrays($autre_cfg['fonctions'], $link_cfg['fonctions']))\n                    ]\n                  );\n              }\n\n                            $this->db->query(\"DELETE FROM bbn_history_uids WHERE uid = ?\", hex2bin($autre['id']));\n            }\n\n                        $this->db->update('apst_liens', $link_update, ['id' => $link['id']]);\n          }\n\n          $this->db->query(\n            \"\n            UPDATE bbn_history\n            SET uid = ?\n            WHERE uid = ?\n            AND opr LIKE 'UPDATE'\",\n            hex2bin($id),\n            hex2bin($a)\n          );\n          $this->db->query(\n            \"\n            DELETE FROM bbn_history\n            WHERE uid = ?\",\n            hex2bin($a)\n          );\n          $this->db->query(\n            \"\n            DELETE FROM bbn_people\n            WHERE id = ?\",\n            hex2bin($a)\n          );\n        }\n      }\n\n      $this->db->query(\n        \"\n        UPDATE bbn_history\n        SET tst = ?\n        WHERE uid = ?\n        AND opr LIKE 'INSERT'\",\n        min($creation),\n        hex2bin($id)\n      );\n    }\n\n        return 1;\n  }",
            "startLine": 562,
            "endLine": 712,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "ids",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "delete": {
            "name": "delete",
            "summary": "Supprime un lieu et tous ses liens si pr\u00e9cis\u00e9",
            "description": "Si non pr\u00e9cis\u00e9 et que le lieu a des liens, il n'est pas supprim\u00e9",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Si non pr\u00e9cis\u00e9 et que le lieu a des liens, il n'est pas supprim\u00e9<\/p>"
                }
            ],
            "file": "bbn\\Entities\\People",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($id, $with_links = false)\n  {\n    if ($this->get_info($id)) {\n      $rels = $this->relations($id);\n\n      if ($with_links || empty($rels)) {\n        foreach ($rels as $k => $r){\n          $this->db->delete('apst_liens', ['id' => $k]);\n          $adh = new \\apst\\adherent($this->db, $r);\n          $adh->wps_delete_contact($id);\n        }\n\n        return $this->db->delete('bbn_people', ['id' => $id]);\n      }\n    }\n\n      return false;\n  }",
            "startLine": 724,
            "endLine": 741,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "returns": [],
            "parent": false,
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "with_links",
                    "position": 1,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": null,
    "staticProperties": {
        "civs": {
            "M\/MME": "M\/MME",
            "M": "M",
            "MR": "M",
            "ML": "MLLE",
            "MME": "MME",
            "ME": "ME",
            "MONSIEUR": "M",
            "MLLE": "MLLE",
            "MR\/ME": "M\/MME",
            "M.": "M",
            "MLE": "MLLE",
            "MMES": "MMES",
            "M\/MES": "M\/MME",
            "MM": "MM",
            "MLL": "MLLE",
            "MMME": "MME",
            "MES": "MM",
            "M\/ME": "M\/MME",
            "MRME": "M",
            "ME\/MR": "ME",
            "MME\/M": "M\/MME",
            "MLLES": "MMES",
            "MADAME": "MME",
            "MADEMOISELLE": "MLLE",
            "MM\/ME": "M\/MME",
            "MRR": "M",
            "*M\/MME": "M\/MME",
            "FAMILLE": "M\/MME",
            "MS\/MME": "M\/MME",
            "MR\/": "M",
            "MRS": "MM",
            "M.MME": "M\/MME",
            "MRS\/MMES": "MM",
            "**MME": "MME"
        },
        "civilites": {
            "M": "Monsieur",
            "MME": "Madame",
            "MLLE": "Mademoiselle",
            "M\/MME": "Madame\/Monsieur",
            "ME": "Ma\u00eetre",
            "MMES": "Mesdames",
            "MM": "Messieurs"
        },
        "stes": [
            "STE",
            "CIE",
            "SAS",
            "SCI",
            "SC",
            "SA",
            "SARL",
            "EURL"
        ]
    },
    "constants": null,
    "summary": "",
    "description": "",
    "description_parts": []
}