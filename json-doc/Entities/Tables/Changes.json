{
    "doc": {
        "description": "",
        "tags": []
    },
    "name": "bbn\\Entities\\Tables\\Changes",
    "namespace": true,
    "realName": "Changes",
    "realNamespace": "bbn\\Entities\\Tables",
    "traits": [
        "bbn\\Models\\Tts\\TmpFiles"
    ],
    "interfaces": [],
    "fileName": "\/Entities\/Tables\/Changes.php",
    "startLine": 20,
    "endLine": 1527,
    "numMethods": 111,
    "numProperties": 24,
    "numConstants": 0,
    "numStaticProperties": 4,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Entities\\Models\\EntityTable",
    "isSubclassOf": false,
    "defaultProperties": {
        "editable": [],
        "states": {
            "unready": null,
            "email": 1,
            "untreated": 2,
            "accepted": 3,
            "refused": 4,
            "meeting": 5
        },
        "default_class_cfg": {
            "table": "bbn_entities_changes",
            "tables": {
                "entities_changes": "bbn_entities_changes",
                "files": "bbn_tmp_files",
                "links": "bbn_entities_changes_files"
            },
            "arch": {
                "entities_changes": {
                    "id": "id",
                    "id_entity": "id_entity",
                    "moment": "moment",
                    "state": "state",
                    "notified": "notified",
                    "id_member_auth": "id_member_auth",
                    "cfg": "cfg"
                },
                "files": {
                    "id": "id",
                    "files": "files",
                    "type_doc": "type_doc",
                    "labels": "labels",
                    "date_added": "date_added"
                },
                "links": {
                    "id_link": "id_link",
                    "id_file": "id_file",
                    "mandatory": "mandatory"
                }
            }
        },
        "eaFields": [],
        "tables": [],
        "tablesOld": [],
        "skipEmailVerfication": false,
        "db": null,
        "errors": [],
        "error": false,
        "errorCode": false,
        "errorCodes": [],
        "debug": false,
        "log": [],
        "fields": null,
        "class_cfg": null,
        "class_table": null,
        "class_table_index": null,
        "rootFilterCfg": [],
        "id_entity": null,
        "cache_engine": null,
        "tableLinksExtrafields": []
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Entities\\Tables",
    "shortName": "Changes",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function __construct(Db &$db, Entities $entities, Entity $entity)\n  {\n    parent::__construct($db, $entities, $entity);\n    $this->getTables();\n  }",
            "parent": {
                "name": "__construct",
                "summary": "Constructor.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Db",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Db.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function __construct(dbClass $db)\n  {\n    $this->db = $db;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "__construct",
                "returns": [],
                "arguments": [
                    {
                        "name": "db",
                        "position": 0,
                        "type": "bbn\\Db",
                        "type_arr": [
                            "bbn\\Db"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "A database connection"
                    }
                ],
                "doc": {
                    "description": "Constructor.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "dbClass",
                            "name": "$db",
                            "description": "A database connection"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Constructor.\n   *\n   * @param dbClass $db A database connection\n   *\/"
            },
            "trait": false,
            "startLine": 80,
            "endLine": 84,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "db",
                    "position": 0,
                    "type": "bbn\\Db",
                    "type_arr": [
                        "bbn\\Db"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "entities",
                    "position": 1,
                    "type": "bbn\\Entities\\Models\\Entities",
                    "type_arr": [
                        "bbn\\Entities\\Models\\Entities"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "promoted": "protected"
                },
                {
                    "name": "entity",
                    "position": 2,
                    "type": "bbn\\Entities\\Entity",
                    "type_arr": [
                        "bbn\\Entities\\Entity"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "promoted": "protected"
                }
            ]
        },
        "requiredFiles": {
            "name": "requiredFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function requiredFiles()\n  {\n    $res = [];\n    $fields = static::getFieldsList();\n    foreach ($fields as $fieldName => $field) {\n      $cn =& $field['changes'];\n      if (!empty($cn['docs'])) {\n        if (!isset($res[$cn['table']])) {\n          $res[$cn['table']] = [];\n        }\n\n        if (!empty($cn['fields'])) {\n          foreach ($cn['fields'] as $fn => $fv) {\n            $res[$cn['table']][$fn] = $cn['docs'];\n          }\n        }\n        else {\n          $res[$cn['table']][$fieldName] = $cn['docs'];\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 87,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "requiredFiles",
            "returns": [],
            "arguments": []
        },
        "emailVerification": {
            "name": "emailVerification",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function emailVerification()\n  {\n    $res = [];\n    $fields = static::getFieldsList();\n    foreach ($fields as $fieldName => $field) {\n      $cn =& $field['changes'];\n      if (!empty($cn['emailVerification'])) {\n        if (!isset($res[$cn['table']])) {\n          $res[$cn['table']] = [];\n        }\n        $res[$cn['table']][] = $fieldName;\n      }\n      else if (!empty($cn['fields'])) {\n        foreach ($cn['fields'] as $fName => $f) {\n          if (!empty($f['emailVerification'])) {\n            if (!isset($res[$cn['table']])) {\n              $res[$cn['table']] = [];\n            }\n            $res[$cn['table']][] = $fName;\n          }\n        }\n      }\n    }\n\n    return $res;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 113,
            "endLine": 138,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "emailVerification",
            "returns": [],
            "arguments": []
        },
        "cryptCode": {
            "name": "cryptCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function cryptCode(string $code): string\n  {\n    return rtrim(strtr(base64_encode(\\bbn\\Util\\Enc::crypt($code)), '+\/', '-_'), '=');\n  }",
            "parent": false,
            "trait": false,
            "startLine": 145,
            "endLine": 148,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "cryptCode",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $code\n   * @return string\n   *\/"
        },
        "decryptCode": {
            "name": "decryptCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function decryptCode(string $code): string\n  {\n    return \\bbn\\Util\\Enc::decrypt(base64_decode(strtr($code, '-_', '+\/') . str_repeat('=', 3 - (3 + strlen($code)) % 4)));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 155,
            "endLine": 158,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "decryptCode",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "code",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $code\n   * @return string\n   *\/"
        },
        "attachFile": {
            "name": "attachFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function attachFile(string $id, string $code, string $file): bool\n  {\n    if (Str::isUid($id)) {\n      $filesLinked = $this->getFilesLink($id);\n      $cCfg = $this->getClassCfg();\n      $filesFields = $cCfg['arch']['files'];\n      foreach ($filesLinked as $fl) {\n        $f = $this->_getFile([\n          $this->db->cfn($filesFields['id'], $cCfg['tables']['files']) => $fl[$filesFields['id_file']]\n        ]);\n        if (!empty($f)\n          && ((string)$f['code'] === $code)\n        ) {\n          $data = [\n            $filesFields['files'] => empty($f['files']) ? [] : \\json_decode($f[$filesFields['files']], true),\n            $filesFields['date_added'] => $f[$filesFields['date_added']] ?: date('Y-m-d H:i:s')\n          ];\n          if (!\\in_array($file, $data[$filesFields['files']], true)) {\n            $data[$filesFields['files']][] = $file;\n          }\n\n          $data[$filesFields['files']] = json_encode($data[$filesFields['files']]);\n          return $this->updateFile($f[$filesFields['id']], $data);\n        }\n      }\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 167,
            "endLine": 195,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "attachFile",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "file",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param string $code\n   * @param string $file\n   * @return null|bool\n   *\/"
        },
        "resetFileByType": {
            "name": "resetFileByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function resetFileByType(string $id_type): bool\n  {\n    $filesFields = $this->getClassCfg()['arch']['files'];\n    if (($file = $this->getFileByType($id_type))\n      && $this->updateFile(\n        $file[$filesFields['id']], [\n          $filesFields['files'] => null,\n          $filesFields['date_added'] => null\n        ]\n      )\n    ) {\n      foreach ($this->getIdsByFile($file[$filesFields['id']]) as $id){\n        $this->_setState($id);\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 202,
            "endLine": 221,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "resetFileByType",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "type"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_type\n   * @return bool\n   *\/"
        },
        "sendEmailVerification": {
            "name": "sendEmailVerification",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function sendEmailVerification(string $email, string $code): bool\n  {\n    return Str::isEmail($email)\n      && !!$this->db->insert('bbn_emails', [\n        'email' => $email,\n        'subject' => 'Confirming your email',\n        'text' => _('Click the following link to confirm your email address:').' '.BBN_URL.(\\str_ends_with(BBN_URL, '\/') ? '' : '\/').'confirm_email\/'.static::cryptCode($code)\n      ]);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 229,
            "endLine": 237,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "sendEmailVerification",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "email",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$email"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$code"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $email\n   * @param string $code\n   * @return bool\n   *\/"
        },
        "create": {
            "name": "create",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function create(\n    string $table,\n    string $type,\n    array $todata,\n    string $id = '',\n    array $subdata = [],\n    string $subid = ''\n  ): ?array\n  {\n    $is_insert = $type === 'insert';\n    $is_update = $type === 'update';\n    $is_delete = $type === 'delete';\n    if ($this->check()\n      && (!empty($is_insert)\n        || !empty($is_update)\n        || !empty($is_delete))\n      && ($moment = date('Y-m-d H:i:s'))\n    ) {\n      $tocfg = [\n        'table' => $table,\n        'type' => $type,\n        'data' => []\n      ];\n      if (!empty($id)) {\n        if (str_starts_with($id, '_bbn_')) {\n          $tocfg['tmpId'] = $id;\n          $id = '';\n        }\n        else {\n          $tocfg['id'] = $id;\n        }\n      }\n\n      if (!empty($subid)) {\n        if (str_starts_with($subid, '_bbn_')) {\n          $tocfg['tmpSubId'] = $subid;\n          $subid = '';\n        }\n        else {\n          $tocfg['subId'] = $subid;\n        }\n      }\n\n      if (!empty($subdata)\n        && !empty($subdata['table'])\n        && !empty($subdata['data'])\n      ) {\n        foreach ($subdata['data'] as $i => $v){\n          $subdata['data'][$i] = $this->checkEmailRequired($subdata['table'], $v);\n        }\n\n        $tocfg['subdata'] = $subdata;\n      }\n\n      if (X::isAssoc($todata)) {\n        if ((!empty($is_update) || !empty($is_delete))\n          && ($id_change = $this->checkExists($table, $id, $todata, $type))\n        ) {\n          if (!empty($is_update)) {\n            if ($this->_update($id_change, $todata, $moment, $subdata)) {\n              return [$id_change];\n            }\n          }\n          elseif ($this->_setMoment($id_change, $moment)) {\n            return [$id_change];\n          }\n        }\n        else {\n          $tocfg['data'][] = $this->checkEmailRequired($table, $todata);\n          if ($id_change = $this->_insert($moment, $tocfg)) {\n            return [$id_change];\n          }\n        }\n\n      }\n      elseif (!empty($is_insert) || !empty($is_delete)) {\n        foreach ($todata as $i => $t){\n          $todata[$i] = !empty($is_insert) ? $this->checkEmailRequired($table, $t) : $t;\n        }\n\n        $tocfg['data'] = $todata;\n        if (!empty($is_delete)\n          && ($id_change = $this->checkExists($table, $id, $todata, $type))\n          && $this->_setMoment($id_change, $moment)\n        ) {\n          return [$id_change];\n        }\n\n        if ($id_change = $this->_insert($moment, $tocfg)) {\n          return [$id_change];\n        }\n\n      }\n      else {\n        $ret = [];\n        if (!empty($todata)) {\n          foreach ($todata as $t){\n            if (!empty($is_update)\n              && ($id_change = $this->checkExists($table, $id, $t))\n              && $this->_update($id_change, $t, $moment, $subdata)\n            ) {\n              $ret[] = $id_change;\n            }\n            else {\n              $tocfg['data'] = [$this->checkEmailRequired($table, $t)];\n              if ($id_change = $this->_insert($moment, $tocfg)) {\n                $ret[] = $id_change;\n              }\n            }\n          }\n        }\n        elseif (!empty($subdata)) {\n          if (!empty($is_update)\n            && ($id_change = $this->checkExists($table, $id, $todata))\n            && $this->_update($id_change, $todata, $moment, $subdata)\n          ) {\n            $ret[] = $id_change;\n          }\n          else if ($id_change = $this->_insert($moment, $tocfg)) {\n            $ret[] = $id_change;\n          }\n        }\n\n        return $ret;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 248,
            "endLine": 376,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 6,
            "numberOfRequiredParameters": 3,
            "shortName": "create",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "todata",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subdata",
                    "position": 4,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "subid",
                    "position": 5,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$todata"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$subdata"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $type\n   * @param array  $todata\n   * @param string $id\n   * @param array  $subdata\n   * @return null|int\n   *\/"
        },
        "delete": {
            "name": "delete",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function delete(string $id): ?int\n  {\n    if (Str::isUid($id) && $this->deleteFileAndLink($id)) {\n      return $this->dbTraitDelete($id);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 383,
            "endLine": 390,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "delete",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return null|int\n   *\/"
        },
        "accept": {
            "name": "accept",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function accept(string $id): ?int\n  {\n    if (Str::isUid($id)\n      && $this->check()\n      && ($change = $this->get($id, [\n        $this->fields['id_entity'] => $this->getId(),\n        $this->fields['state'] => static::$states['untreated']\n      ]))\n      && !empty($change[$this->fields['cfg']])\n      && ($cfg = json_decode($change[$this->fields['cfg']], true))\n      && !empty($cfg['table'])\n      && !empty($cfg['type'])\n    ) {\n      $error     = false;\n      $id_sub    = false;\n      $field_sub = false;\n      \/\/ Subdata\n      if (!empty($cfg['subdata'])\n        && !empty($cfg['subdata']['table'])\n        && !empty($cfg['subdata']['data'])\n      ) {\n        $subdata = [];\n        foreach ($cfg['subdata']['data'] as $d){\n          $subdata[$d['field']] = $d['value'];\n        }\n\n        $id_sub = !empty($cfg['subdata']['id']) ? $cfg['subdata']['id'] : (!empty($subdata['id']) ? $subdata['id'] : false );\n        switch ($cfg['subdata']['table']){\n          case 'identities':\n            $field_sub = 'id_identity';\n            if (!$id_sub) {\n              $id_sub = $this->identity()->add($subdata, true);\n              $cfg['data'][] = [\n                'field' => 'id_identity',\n                'value' => $id_sub\n              ];\n            }\n            $id_sub2   = $this->_identity($id_sub, $subdata, $cfg['type'], true);\n            break;\n          case 'addresses':\n            $field_sub = 'id_address';\n            if (!$id_sub) {\n              $id_sub = $this->address()->add($subdata, true);\n              $cfg['data'][] = [\n                'field' => 'id_address',\n                'value' => $id_sub\n              ];\n            }\n\n            $id_sub2 = $this->_address($id_sub, $subdata, $cfg['type'], true);\n            break;\n        }\n\n        if (!empty($id_sub2) && ($id_sub2 !== $id_sub)) {\n          if (isset($cfg['subdata']['id'])) {\n            $cfg['subdata']['id'] = $id_sub2;\n          }\n          elseif (($idx_id = X::find($cfg['subdata']['data'], ['field' => 'id'])) !== null) {\n            $cfg['subdata']['data'][$idx_id]['value'] = $id_sub2;\n          }\n\n          if (isset($field_sub)\n            && (($idx_sub = X::find($cfg['data'], ['field' => $field_sub])) !== null)\n          ) {\n            $cfg['data'][$idx_sub]['value'] = $id_sub2;\n          }\n        }\n      }\n\n      \/\/ Data\n      $table  = $this->tables[$cfg['table']];\n      $data   = [];\n      foreach ($cfg['data'] as $d){\n        $data[$d['field']] = $d['value'];\n      }\n\n      switch ($cfg['table']){\n        case 'identities':\n          $id_tier = $cfg['id'] ?? $data['id'];\n          if ($id_new = $this->_identity($id_tier, $data, $cfg['type'])) {\n            if (Str::isUid($id_new) && ($id_new !== $id_tier)) {\n              if (isset($cfg['id'])) {\n                $cfg['id'] = $id_new;\n              }\n              elseif (($idx_id = X::find($cfg['data'], ['field' => 'id'])) !== null) {\n                $cfg['data'][$idx_id]['value'] = $id_new;\n              }\n            }\n          }\n          else {\n            $error = _('Error during the identity') . ' ';\n            switch ($cfg['type']){\n              case 'insert';\n                $error .= _('inserting.');\n                break;\n              case 'update';\n                $error .= _('updating.');\n                break;\n              case 'delete';\n                $error .= _('deleting.');\n                break;\n            }\n          }\n          break;\n\n        case 'addresses':\n          $id_address = $cfg['id'] ?? $data['id'];\n          if ($id_new = $this->_address($id_address, $data, $cfg['type'])) {\n            if ($id_new !== $id_address) {\n              if (isset($cfg['id'])) {\n                $cfg['id'] = $id_new;\n              }\n              elseif (($idx_id = X::find($cfg['data'], ['field' => 'id'])) !== null) {\n                $cfg['data'][$idx_id]['value'] = $id_new;\n              }\n            }\n          }\n          else {\n            $error = _('Error during the address') . ' ';\n            switch ($cfg['type']){\n              case 'insert';\n                $error .= _('inserting.');\n                break;\n              case 'update';\n                $error .= _('updating.');\n                break;\n              case 'delete';\n                $error .= _('deleting.');\n                break;\n            }\n          }\n          break;\n          case 'admin':\n            $idAdmin = !empty($data['id_admin']) ? $data['id_admin'] : (!empty($data['id_identity']) ? $data['id_identity'] : false);\n            if (empty($idAdmin) || !$this->entity->update(['id_admin' => $idAdmin])) {\n              $error = _('Error during the admin updating.');\n            }\n            break;\n      }\n\n      return empty($error)\n        && $this->deleteFileAndLink($id)\n        && $this->db->update($this->class_table, [\n          $this->fields['state'] => static::$states['accepted'],\n          $this->fields['cfg'] => json_encode($cfg)\n        ], [\n          $this->fields['id'] => $id\n        ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 397,
            "endLine": 548,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "accept",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return null|int\n   *\/"
        },
        "refuse": {
            "name": "refuse",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function refuse(string $id): ?int\n  {\n    if (Str::isUid($id)\n      && $this->check()\n      && $this->get($id, [$this->fields['id_entity'] => $this->getId()])\n      && $this->deleteFileAndLink($id)\n    ) {\n      return $this->db->update($this->class_table, [\n        $this->fields['state'] => static::$states['refused']\n      ], [\n        $this->fields['id'] => $id\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 555,
            "endLine": 570,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "refuse",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "null|int"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string   $id\n   * @param null|int\n   *\/"
        },
        "forceState": {
            "name": "forceState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function forceState(string $id, $state): bool\n  {\n    if (\\in_array($state, array_values(static::$states), true)) {\n      return !!$this->db->update($this->class_table, [$this->fields['state'] => $state], [$this->fields['id'] => $id]);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 573,
            "endLine": 580,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "forceState",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "state",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getState": {
            "name": "getState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getState(string $id)\n  {\n    return Str::isUid($id) ? $this->db->selectOne($this->class_table, $this->fields['state'], [$this->fields['id'] => $id]) : false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 587,
            "endLine": 590,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getState",
            "returns": [],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return bool|null|int\n   *\/"
        },
        "getCurrentState": {
            "name": "getCurrentState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getCurrentState(string $id, array $cfg): ?int\n  {\n    $state = static::$states['untreated'];\n    if (!empty($cfg['subdata'])\n      && !empty($cfg['subdata']['data'])\n      && ($cfg['type'] !== 'delete')\n    ) {\n      foreach ($cfg['subdata']['data'] as $data) {\n        if (\\array_key_exists('email', $data)\n          && ($data['email'] !== true)\n        ) {\n          return static::$states['email'];\n        }\n      }\n    }\n\n    if (!empty($cfg['data'])) {\n      foreach ($cfg['data'] as $data){\n        if (\\array_key_exists('email', $data) && ($data['email'] !== true)) {\n          $state = static::$states['email'];\n          break;\n        }\n      }\n    }\n\n    \/* if (($files = $this->getRequiredFiles($id, $cfg['type'])) && \\array_filter(\n        $files, function ($file) {\n        return empty($file['files']) && !empty($file['mandatory']);\n      }\n      )\n    ) {\n      $state = static::$states['unready'];\n    } *\/\n\n    return $state;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 598,
            "endLine": 633,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getCurrentState",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param array  $cfg\n   * @return null|int\n   *\/"
        },
        "get": {
            "name": "get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function get(string $id, array $filters = []): ?array\n  {\n    return $this->db->rselect($this->class_table, [], X::mergeArrays([\n      $this->fields['id'] => $id\n    ], $filters));\n  }",
            "parent": false,
            "trait": false,
            "startLine": 636,
            "endLine": 641,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "get",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filters",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getUntreated": {
            "name": "getUntreated",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUntreated(): ?array\n  {\n    return $this->_get(\n      [\n        'conditions' => [[\n          'field' => $this->fields['id_entity'],\n          'value' => $this->getId()\n        ], [\n          'field' => $this->fields['state'],\n          'value' => static::$states['untreated']\n        ]]\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 647,
            "endLine": 660,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUntreated",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|array\n   *\/"
        },
        "getUnready": {
            "name": "getUnready",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUnready(): ?array\n  {\n    return $this->_get(\n      [\n        'conditions' => [[\n          'field' => $this->fields['id_entity'],\n          'value' => $this->getId()\n        ], [\n          'field' => $this->fields['state'],\n          'operator' => 'isnull'\n        ]]\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 666,
            "endLine": 679,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUnready",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|array\n   *\/"
        },
        "getUnreadyUntreated": {
            "name": "getUnreadyUntreated",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getUnreadyUntreated(): ?array\n  {\n    $cfgField = $this->fields['cfg'];\n    return array_map(\n      function ($change) use($cfgField) {\n        if (!empty($change[$cfgField]) && ($cfg = json_decode($change[$cfgField], true))) {\n          if (!empty($cfg['data'])) {\n            $cfg['data'] = array_map(\n              function ($d) {\n                if (array_key_exists('email', $d) && ($d['email'] !== true)) {\n                  $d['email'] = static::cryptCode($d['email']);\n                }\n\n                return $d;\n              }, $cfg['data']\n            );\n          }\n\n          if (!empty($cfg['subdata']) && !empty($cfg['subdata']['data'])) {\n            $cfg['subdata']['data'] = array_map(\n              function ($d) {\n                if (array_key_exists('email', $d) && ($d['email'] !== true)) {\n                  $d['email'] = static::cryptCode($d['email']);\n                }\n\n                return $d;\n              }, $cfg['subdata']['data']\n            );\n          }\n\n          $change[$cfgField] = json_encode($cfg);\n        }\n\n        return $change;\n      }, $this->_get([\n        'conditions' => [[\n          'field' => $this->fields['id_entity'],\n          'value' => $this->getId()\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => $this->fields['state'],\n            'operator' => 'isnull'\n          ], [\n            'field' => $this->fields['state'],\n            'value' => static::$states['untreated']\n          ], [\n            'field' => $this->fields['state'],\n            'value' => static::$states['email']\n          ]]\n        ]]\n      ])\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 685,
            "endLine": 738,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getUnreadyUntreated",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|array\n   *\/"
        },
        "getNotAcceptedRefused": {
            "name": "getNotAcceptedRefused",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getNotAcceptedRefused(): ?array\n  {\n    return $this->_get(\n      [\n        'conditions' => [[\n          'field' => $this->fields['id_entity'],\n          'value' => $this->getId()\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => $this->fields['state'],\n            'operator' => 'isnull'\n          ], [\n            'conditions' => [[\n              'field' => $this->fields['state'],\n              'operator' => '!=',\n              'value' => static::$states['accepted']\n            ], [\n              'field' => $this->fields['state'],\n              'operator' => '!=',\n              'value' => static::$states['refused']\n            ]]\n          ]]\n        ]]\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 744,
            "endLine": 770,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getNotAcceptedRefused",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|array\n   *\/"
        },
        "getAccepted": {
            "name": "getAccepted",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAccepted(): ?array\n  {\n    return $this->_get(\n      [\n        'conditions' => [[\n          'field' => $this->fields['id_entity'],\n          'value' => $this->getId()\n        ], [\n          'field' => $this->fields['state'],\n          'value' => static::$states['accepted']\n        ]]\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 776,
            "endLine": 789,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getAccepted",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|array\n   *\/"
        },
        "getRefused": {
            "name": "getRefused",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getRefused(): ?array\n  {\n    return $this->_get(\n      [\n        'conditions' => [[\n          'field' => $this->fields['id_entity'],\n          'value' => $this->getId()\n        ], [\n          'field' => $this->fields['state'],\n          'value' => static::$states['refused']\n        ]]\n      ]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 795,
            "endLine": 808,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getRefused",
            "returns": [
                null,
                "array"
            ],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|array\n   *\/"
        },
        "getAll": {
            "name": "getAll",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    $cfgField = $this->fields['cfg'];\n    $all = parent::getAll(...func_get_args());\n    return array_map(\n      function ($change) use($cfgField) {\n        if (!empty($change[$cfgField])\n          && ($cfg = json_decode($change[$cfgField], true))\n        ) {\n          if (!empty($cfg['data'])) {\n            $cfg['data'] = array_map(\n              function ($d) {\n                if (array_key_exists('email', $d) && ($d['email'] !== true)) {\n                  $d['email'] = base64_encode(\\bbn\\Util\\Enc::crypt($d['email']));\n                }\n\n                return $d;\n              }, $cfg['data']\n            );\n          }\n\n          if (!empty($cfg['subdata']) && !empty($cfg['subdata']['data'])) {\n            $cfg['subdata']['data'] = array_map(\n              function ($d) {\n                if (array_key_exists('email', $d) && ($d['email'] !== true)) {\n                  $d['email'] = base64_encode(\\bbn\\Util\\Enc::crypt($d['email']));\n                }\n\n                return $d;\n              }, $cfg['subdata']['data']\n            );\n          }\n\n          $change[$cfgField] = json_encode($cfg);\n        }\n\n        return $change;\n      }, $all\n    );\n  }",
            "parent": {
                "name": "getAll",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitRselectAll(...func_get_args());\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 85,
                "endLine": 88,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 0,
                "shortName": "getAll",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 2,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 814,
            "endLine": 853,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "getAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return null|array\n   *\/"
        },
        "setSkipEmailVerification": {
            "name": "setSkipEmailVerification",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setSkipEmailVerification(bool $skip = true)\n  {\n    $this->skipEmailVerfication = $skip;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 856,
            "endLine": 859,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "setSkipEmailVerification",
            "returns": [],
            "arguments": [
                {
                    "name": "skip",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ]
        },
        "getFieldsList": {
            "name": "getFieldsList",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": true,
            "visibility": "protected",
            "final": false,
            "code": "  protected static function getFieldsList()\n  {\n    return static::getEAFields();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 862,
            "endLine": 865,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFieldsList",
            "returns": [],
            "arguments": []
        },
        "_get": {
            "name": "_get",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _get(array $where, bool $withFiles = true): ?array\n  {\n    if ($this->check()) {\n      $t =& $this;\n      return array_map(\n        function ($e) use ($t, $withFiles) {\n          if ($withFiles) {\n            $cfg = json_decode($e[$t->fields['cfg']], true);\n            $e['files'] = $t->getRequiredFiles($e[$t->fields['id']], $cfg['type']);\n          }\n\n          return $e;\n        }, $this->db->rselectAll([\n          'table' => $this->class_table,\n          'fields' => [],\n          'where' => $where,\n          'order' => [$this->fields['moment'] => 'DESC']\n        ])\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 873,
            "endLine": 895,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_get",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "withFiles",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": "",
                    "description": "iles"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$with",
                        "description": "iles"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $where\n   * @param bool  $withFiles\n   * @return null|array\n   *\/"
        },
        "_insert": {
            "name": "_insert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _insert(string $moment, array $cfg): ?string\n  {\n    if ($id_adh = $this->getId()) {\n      if ($this->db->insert($this->class_table, [\n          $this->fields['id_entity'] => $id_adh,\n          $this->fields['moment'] => $moment,\n          $this->fields['state'] => null,\n          $this->fields['cfg'] => \\json_encode($cfg)\n        ])\n        && ($id = $this->db->lastId())\n      ) {\n        $this->setRequiredFiles($id);\n        $this->_setState($id, $this->getCurrentState($id, $cfg));\n        return $id;\n      }\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 903,
            "endLine": 921,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "_insert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "moment",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$moment"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $moment\n   * @param array  $cfg\n   * @return int\n   *\/"
        },
        "_setState": {
            "name": "_setState",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _setState(string $id, $state = false): bool\n  {\n    if (Str::isUid($id)) {\n      if ($state === false) {\n        if ($c = $this->_get([$this->fields['id'] => $id], false)) {\n          $cfg = json_decode($c[0][$this->fields['cfg']], true);\n        }\n\n        if (isset($cfg) && is_array($cfg)) {\n          $state = $this->getCurrentState($id, $cfg);\n        }\n        else{\n          return false;\n        }\n      }\n\n      return !!$this->db->update(\n        $this->class_table,\n        [\n          $this->fields['state'] => $state\n        ],\n        [\n          $this->fields['id'] => $id\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 929,
            "endLine": 957,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_setState",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "state",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "bool|null|int",
                        "name": "$state"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string        $id\n   * @param bool|null|int $state\n   * @return bool\n   *\/"
        },
        "_setMoment": {
            "name": "_setMoment",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _setMoment(string $id, string $moment = ''): bool\n  {\n    if (Str::isUid($id)) {\n      return !!$this->db->update(\n        $this->class_table,\n        [\n          $this->fields['moment'] => $moment ?: date('Y-m-d H:i:s')\n        ],\n        [\n          $this->fields['id'] => $id\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 965,
            "endLine": 980,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "_setMoment",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "moment",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$moment"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param string $moment\n   * @return bool\n   *\/"
        },
        "_update": {
            "name": "_update",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _update(string $id, array $todata, string $moment = '', array $subdata = []): ?int\n  {\n    if (Str::isUid($id)\n      && ($old = $this->get($id))\n      && (($old[$this->fields['state']] === static::$states['unready'])\n        || ($old[$this->fields['state']] === static::$states['untreated'])\n        || ($old[$this->fields['state']] === static::$states['email']))\n      && ($cfg = \\json_decode($old[$this->fields['cfg']], true))\n    ) {\n      if (($idx = X::find($cfg['data'], ['field' => $todata['field']])) !== null) {\n        $cfg['data'][$idx] = X::mergeArrays($cfg['data'][$idx], $this->checkEmailRequired($cfg['table'], $todata));\n        $cfg['subdata']    = $subdata;\n        if ($this->db->update(\n          $this->class_table,\n          [\n            $this->fields['moment'] => $moment ?: date('Y-m-d H:i:s'),\n            $this->fields['cfg'] => \\json_encode($cfg)\n          ],\n          [\n            $this->fields['id'] => $id\n          ]\n        )) {\n          $this->setRequiredFiles($id);\n          $this->_setState($id, $this->getCurrentState($id, $cfg));\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 990,
            "endLine": 1022,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "_update",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "todata",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "moment",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "subdata",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$todata"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$moment"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$subdata"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param array  $todata\n   * @param string $moment\n   * @param array  $subdata\n   * @return null|int\n   *\/"
        },
        "fieldRequiresFile": {
            "name": "fieldRequiresFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function fieldRequiresFile(string $type, string $table, $field = null): ?array\n  {\n    if (($arr = static::requiredFiles())\n      && !empty($arr[$table])\n    ) {\n      if (empty($field)) {\n        $f = \\array_values($arr[$table])[0];\n        if (!empty($f[$type])) {\n          return \\array_values($f[$type]);\n        }\n      }\n      elseif (!empty($arr[$table][$field])) {\n        $f = $arr[$table][$field];\n        if (!empty($f[$type])) {\n          return \\array_values($f[$type]);\n        }\n      }\n    }\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1031,
            "endLine": 1050,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "fieldRequiresFile",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "field",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$field"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $field\n   * @param string $type\n   * @return null|array\n   *\/"
        },
        "getFileByType": {
            "name": "getFileByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getFileByType($id_type, bool $files = true): ?array\n  {\n    return $this->_getFileByType(\n      $id_type,\n      $files,\n      [[\n        'field' => $this->db->cfn($this->fields['id_entity'], $this->class_table),\n        'value' => $this->getId()\n      ]]\n    );\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1058,
            "endLine": 1068,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "getFileByType",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_type",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "type"
                },
                {
                    "name": "files",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id",
                        "description": "type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$files"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id_type\n   * @param bool         $files\n   * @return null|array\n   *\/"
        },
        "getRequiredFiles": {
            "name": "getRequiredFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getRequiredFiles(string $id_change, string $type): ?array\n  {\n    if ($change = $this->get($id_change)) {\n      $cCfg = $this->getClassCfg();\n      $oCfg = $this->options()->getClassCfg();\n      $filesFields = $cCfg['arch']['files'];\n      $filesTable = $cCfg['tables']['files'];\n      $linksFields = $cCfg['arch']['links'];\n      $linksTable = $cCfg['tables']['links'];\n      $res = [];\n      $cfg = json_decode($change[$this->fields['cfg']], true);\n      $all = array_map(function ($f) {\n          if (!empty($f['code'])) {\n            $f['code'] = (string)$f['code'];\n          }\n\n          return $f;\n      }, $this->db->rselectAll([\n          'table' => $filesTable,\n          'fields' => [\n            $this->db->cfn($filesFields['id'], $filesTable),\n            $this->db->cfn($filesFields['files'], $filesTable),\n            $this->db->cfn($filesFields['type_doc'], $filesTable),\n            $this->db->cfn($filesFields['date_added'], $filesTable),\n            $this->db->cfn($linksFields['mandatory'], $linksTable),\n            $this->db->cfn($oCfg['arch']['options']['code'], $oCfg['table']),\n          ],\n          'join' => [[\n            'table' => $linksTable,\n            'on' => [\n              'conditions' => [[\n                'field' => $this->db->cfn($linksFields['id_file'], $linksTable),\n                'exp' => $this->db->cfn($filesFields['id'], $filesTable),\n              ]]\n            ]\n          ], [\n            'table' => 'bbn_options',\n            'on' => [\n              'conditions' => [[\n                'field' => $this->db->cfn($oCfg['arch']['options']['id'], $oCfg['table']),\n                'exp' => $this->db->cfn($filesFields['type_doc'], $filesTable)\n              ]]\n            ]\n          ]],\n          'where' => [\n            'conditions' => [[\n              'field' => $this->db->cfn($linksFields['id_link'], $linksTable),\n              'value' => $id_change\n            ], [\n              'field' => $this->db->cfn($filesFields['files'], $filesTable),\n              'operator' => 'isnotnull'\n            ]]\n          ]\n      ]));\n      $codes = [];\n      if (empty($cfg['data'])) {\n        if ($c = $this->fieldRequiresFile($type, $cfg['table'])) {\n          \\array_push($codes, ...$c);\n        }\n      }\n      else {\n        foreach ($cfg['data'] as $d){\n          if ($c = $this->fieldRequiresFile($type, $cfg['table'], $d['field'])) {\n            \\array_push($codes, ...$c);\n          }\n        }\n      }\n\n      if (!empty($codes)) {\n        foreach ($codes as $code){\n          if (\\is_array($code)) {\n            $found     = false;\n            $mandatory = !empty($code[0]);\n            if (!$mandatory) {\n              array_shift($code);\n            }\n\n            foreach ($code as $c){\n              if ((($idx = X::find($all, ['code' => $c])) !== null)\n                && (X::find($res, ['code' => (string)$c]) === null)\n              ) {\n                $res[] = [\n                  'code' => (string)$c,\n                  'files' => json_decode($all[$idx][$filesFields['files']]),\n                  'mandatory' => !!$all[$idx][$linksFields['mandatory']]\n                ];\n                $found = true;\n                \/\/break;\n              }\n            }\n\n            if (!$found) {\n              $tmp = [\n                'code' => '',\n                'files' => [],\n                'mandatory' => $mandatory,\n                'codes' => $code\n              ];\n              if (count($code) === 1) {\n                $tmp['code'] = $code[0];\n                unset($tmp['codes']);\n              }\n\n              $res[] = $tmp;\n            }\n          }\n          else {\n            if (X::find($res, ['code' => (string)$code]) === null) {\n              if (($idx = X::find($all, ['code' => (string)$code])) !== null) {\n                $res[] = [\n                  'code' => (string)$code,\n                  'files' => json_decode($all[$idx][$filesFields['files']]),\n                  'mandatory' => !!$all[$idx][$linksFields['mandatory']]\n                ];\n              }\n              else {\n                $res[] = [\n                  'code' => (string)$code,\n                  'files' => [],\n                  'mandatory' => true\n                ];\n              }\n            }\n          }\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1076,
            "endLine": 1207,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "getRequiredFiles",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_change",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "change"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "change"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_change\n   * @param string $type\n   * @return null|array\n   *\/"
        },
        "setRequiredFiles": {
            "name": "setRequiredFiles",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setRequiredFiles(string $idChange)\n  {\n    if ($change = $this->get($idChange)) {\n      $cfg    = json_decode($change[$this->fields['cfg']], true);\n      $codes = [];\n      if (empty($cfg['data'])) {\n        if ($c = $this->fieldRequiresFile($cfg['type'], $cfg['table'])) {\n          \\array_push($codes, ...$c);\n        }\n      }\n      else {\n        foreach ($cfg['data'] as $d) {\n          if ($c = $this->fieldRequiresFile($cfg['type'], $cfg['table'], $d['field'])) {\n            \\array_push($codes, ...$c);\n          }\n        }\n      }\n      if (!empty($codes)) {\n        foreach ($codes as $code){\n          $mandatory = !(\\is_array($code) && ($code[0] === ''));\n          if (!$mandatory) {\n            array_shift($code);\n          }\n\n          if (\\is_array($code)) {\n            foreach ($code as $c){\n              $this->_fileInsert($idChange, $c, $mandatory);\n            }\n          }\n          else {\n            $this->_fileInsert($idChange, $code, $mandatory);\n          }\n        }\n      }\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1214,
            "endLine": 1249,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setRequiredFiles",
            "returns": [],
            "arguments": [
                {
                    "name": "idChange",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "change"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "change"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_change\n   * @param string $type\n   *\/"
        },
        "_fileInsert": {
            "name": "_fileInsert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _fileInsert(string $id_link, string $type, bool $mandatory): ?string\n  {\n    if (Str::isUid($id_link)) {\n      $id_file = $this->insertFile($type);\n      if (Str::isUid($id_file)\n        && !$this->hasFileLink($id_link, $id_file)\n      ) {\n        $this->insertFileLink($id_link, $id_file, $mandatory);\n      }\n\n      return $id_file;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1257,
            "endLine": 1271,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_fileInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_link",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "link"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mandatory",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "link"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$mandatory"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_link\n   * @param string $type\n   * @param bool   $mandatory\n   * @return string|null\n   *\/"
        },
        "getIdsByFile": {
            "name": "getIdsByFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getIdsByFile(string $id): array\n  {\n    if (Str::isUid($id)) {\n      $cCfg = $this->getClassCfg();\n      return $this->db->getColumnValues(\n        $cCfg['tables']['links'],\n        $this->db->cfn($cCfg['arch']['links']['id_link'], $cCfg['tables']['links']),\n        [\n          $this->db->cfn($cCfg['arch']['links']['id_file'], $cCfg['tables']['links']) => $id\n        ]\n      );\n    }\n\n    return [];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1278,
            "endLine": 1292,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getIdsByFile",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return array\n   *\/"
        },
        "checkExists": {
            "name": "checkExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function checkExists(string $table, string $id, array $data, string $type = 'update')\n  {\n    switch ($type){\n      case 'update':\n        if (!empty($data['field'])) {\n        $conditions = [[\n          'field' => $this->fields['id_entity'],\n          'value' => $this->getId()\n        ], [\n          'field' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.type\"))',\n          'value' => 'update'\n        ], [\n          'field' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.table\"))',\n          'value' => $table\n        ], [\n          'field' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.id\"))',\n          empty($id) ? 'operator' : 'value' => $id ?: 'isnull'\n        ], [\n          'field' => \"JSON_SEARCH(\".$this->fields['cfg'].\", 'all', '$data[field]', null, '$.data[*].field')\",\n          'operator' => 'isnotnull'\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => $this->fields['state'],\n            'value' => static::$states['untreated']\n          ], [\n            'field' => $this->fields['state'],\n            'value' => static::$states['email']\n          ], [\n            'field' => $this->fields['state'],\n            'operator' => 'isnull'\n          ]]\n        ]];\n        }\n        break;\n\n      case 'delete':\n        $conditions = [[\n          'field' => $this->fields['id_entity'],\n          'value' => $this->getId()\n        ], [\n          'field' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.type\"))',\n          'value' => 'delete'\n        ], [\n          'field' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.table\"))',\n          'value' => $table\n        ], [\n          'field' => 'JSON_UNQUOTE(JSON_EXTRACT('.$this->fields['cfg'].', \"$.id\"))',\n          'value' => $id\n        ], [\n          'logic' => 'OR',\n          'conditions' => [[\n            'field' => $this->fields['state'],\n            'value' => static::$states['untreated']\n          ], [\n            'field' => $this->fields['state'],\n            'value' => static::$states['email']\n          ], [\n            'field' => $this->fields['state'],\n            'operator' => 'isnull'\n          ]]\n        ]];\n        break;\n    }\n\n    return isset($conditions) ? $this->db->selectOne(\n      [\n        'table' => $this->class_table,\n        'fields' => [$this->fields['id']],\n        'where' => [\n          'conditions' => $conditions\n        ]\n      ]\n    ) : false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1301,
            "endLine": 1375,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "checkExists",
            "returns": [],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "id",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "type",
                    "position": 3,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "update",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $id\n   * @param array  $data\n   * @return string\n   *\/"
        },
        "emailRequired": {
            "name": "emailRequired",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function emailRequired(string $table, string $field): bool\n  {\n    return ($em = static::emailVerification())\n      && !empty($em[$table])\n      && \\in_array($field, $em[$table], true);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1383,
            "endLine": 1388,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "emailRequired",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "field",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$field"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param string $field\n   * @return bool\n   *\/"
        },
        "checkEmailRequired": {
            "name": "checkEmailRequired",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function checkEmailRequired(string $table, array $data): array\n  {\n    if (!$this->skipEmailVerfication\n      && !empty($data['value'])\n      && $this->emailRequired($table, $data['field'])\n    ) {\n      $data['email'] = Str::genpwd();\n      $this->sendEmailVerification($data['value'], $data['email']);\n    }\n\n    return $data;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1396,
            "endLine": 1407,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "checkEmailRequired",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$table"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $table\n   * @param array  $data\n   * @return array\n   *\/"
        },
        "_identity": {
            "name": "_identity",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _identity(string $id, array $data, string $action, bool $is_sub = false): ?string\n  {\n    $exists = $this->db->rselect($this->tables['identities'], [], ['id' => $id]);\n    if (!empty($exists)\n      && ($action === 'insert')\n      && !empty($is_sub)\n    ) {\n      $action = 'update';\n      $is_sub = false;\n    }\n\n    $ret = false;\n    switch ($action){\n      case 'insert':\n        if (empty($exists) && isset($data['id'])) {\n          unset($data['id']);\n        }\n\n        if ($id = $this->identity()->add($data, true)) {\n          $ret = true;\n        }\n\n        break;\n      case 'update':\n        if (!isset($data['id_entity'])) {\n          $data['id_entity'] = $this->getId();\n        }\n\n        if (!empty($exists)) {\n          if (!empty($exists['cfg'])) {\n            $exists = X::mergeArrays(\\json_decode($exists['cfg'], true), $exists);\n          }\n\n          unset($exists['cfg']);\n        }\n\n        $data = X::mergeArrays($exists, $data);\n        $ret  = !!$this->identity()->update($id, $data);\n        break;\n      case 'delete':\n        if (!$is_sub) {\n          $ret = !!$this->identity()->delete($id);\n        }\n\n        break;\n    }\n\n    return $ret ? $id : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1417,
            "endLine": 1465,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "_identity",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "action",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "is_sub",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "sub"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$action"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$is",
                        "description": "sub"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param array  $data\n   * @param string $action\n   * @param bool   $is_sub\n   * @return string|null\n   *\/"
        },
        "_address": {
            "name": "_address",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _address(string $id, array $data, string $action, bool $is_sub = false): ?string\n  {\n    $exists = $this->db->rselect($this->tables['addresses'], [], ['id' => $id]);\n    if (($action === 'update') && empty($exists)) {\n      $action = 'insert';\n    }\n\n    $ret = false;\n    switch ($action){\n      case 'insert':\n        if (empty($exists) && isset($data['id'])) {\n          unset($data['id']);\n        }\n\n        if ($id = $this->address()->add($data, true)) {\n          $ret = true;\n        }\n\n        break;\n      case 'update':\n        $ret = !!$this->address()->update($id, $data);\n        break;\n      case 'delete':\n        if (!$is_sub) {\n          $ret = !!$this->address()->delete($id);\n        }\n\n        break;\n    }\n\n    return $ret ? $id : null;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1475,
            "endLine": 1506,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 3,
            "shortName": "_address",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "action",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "is_sub",
                    "position": 3,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": "",
                    "description": "sub"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$action"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$is",
                        "description": "sub"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param array  $data\n   * @param string $action\n   * @param bool   $is_sub\n   * @return string|null\n   *\/"
        },
        "getTables": {
            "name": "getTables",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Tables\/Changes.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function getTables()\n  {\n    if (empty($this->tables)) {\n      $fields = static::getFieldsList();\n      foreach ($fields as $field) {\n        $cn =& $field['changes'];\n        if (!empty($field['table'])\n          && !empty($cn['table'])\n          && empty($this->tables[$cn['table']])\n        ) {\n          $this->tables[$cn['table']] = $field['table'];\n        }\n      }\n    }\n\n    return X::mergeArrays($this->tablesOld, $this->tables);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 1509,
            "endLine": 1525,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getTables",
            "returns": [],
            "arguments": []
        },
        "test": {
            "name": "test",
            "summary": "Checks whether the error property has been set (so an error happened).",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
            "parent": {
                "name": "test",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function test()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 64,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "test",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 64,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "test",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Checks whether the error property has been set (so an error happened).\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
        },
        "check": {
            "name": "check",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function check(): bool\n  {\n    if ($this->id_entity) {\n      return $this->entities->exists($this->id_entity);\n    }\n\n    return $this->entities->check();\n  }",
            "parent": {
                "name": "check",
                "summary": "Checks whether the error property has been set (so an error happened).",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function check()\n  {\n    if ($this->error) {\n      return false;\n    }\n\n    return true;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 71,
                "endLine": 78,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "check",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Checks whether the error property has been set (so an error happened).\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the error property has been set (so an error happened).\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 49,
            "endLine": 56,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "check",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "setError": {
            "name": "setError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
            "parent": {
                "name": "setError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function setError(string $err, $code = null)\n  {\n    $this->error    = $err;\n    $this->errorCode = $code;\n    $err = [\n      'time' => time(),\n      'msg' => $err\n    ];\n    if ($code) {\n      $err['code'] = $code;\n    }\n\n    $this->errors[] = $err;\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 81,
                "endLine": 95,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "setError",
                "returns": [],
                "arguments": [
                    {
                        "name": "err",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "code",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 81,
            "endLine": 95,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "setError",
            "returns": [],
            "arguments": [
                {
                    "name": "err",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "code",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getError()\n  {\n    return $this->error;\n  }",
            "parent": {
                "name": "getError",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getError()\n  {\n    return $this->error;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 98,
                "endLine": 101,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getError",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 98,
            "endLine": 101,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getError",
            "returns": [],
            "arguments": []
        },
        "getErrorCode": {
            "name": "getErrorCode",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
            "parent": {
                "name": "getErrorCode",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrorCode()\n  {\n    return $this->errorCode;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 104,
                "endLine": 107,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrorCode",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 104,
            "endLine": 107,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrorCode",
            "returns": [],
            "arguments": []
        },
        "getErrors": {
            "name": "getErrors",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
            "parent": {
                "name": "getErrors",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getErrors()\n  {\n    return $this->errors;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 110,
                "endLine": 113,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getErrors",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 110,
            "endLine": 113,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getErrors",
            "returns": [],
            "arguments": []
        },
        "log": {
            "name": "log",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
            "parent": {
                "name": "log",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function log()\n  {\n    if ($this->isDebug()) {\n        $ar = func_get_args();\n        $cn = Str::encodeFilename(str_replace('\\\\', '_', get_class($this)));\n      foreach ($ar as $a){\n            X::log($a, $cn);\n      }\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 125,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "log",
                "returns": [],
                "arguments": []
            },
            "trait": false,
            "startLine": 116,
            "endLine": 125,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "log",
            "returns": [],
            "arguments": []
        },
        "isDebug": {
            "name": "isDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
            "parent": {
                "name": "isDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function isDebug()\n  {\n    return $this->debug || constant(\"BBN_IS_DEV\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isDebug",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isDebug",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * @return boolean\n   *\/"
        },
        "setDebug": {
            "name": "setDebug",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Models\\Cls\\Basic",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
            "parent": {
                "name": "setDebug",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Models\\Cls\\Basic",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Cls\/Basic.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function setDebug(bool $debug)\n  {\n    $this->debug = $debug;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 141,
                "endLine": 144,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "setDebug",
                "returns": [],
                "arguments": [
                    {
                        "name": "debug",
                        "position": 0,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "boolean",
                            "name": "$debug"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 141,
            "endLine": 144,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "setDebug",
            "returns": [],
            "arguments": [
                {
                    "name": "debug",
                    "position": 0,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "boolean",
                        "name": "$debug"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param boolean $debug\n   * @return self\n   *\/"
        },
        "dbTraitExists": {
            "name": "dbTraitExists",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "dbTraitExists",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitExists($filter): bool\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $f = $this->class_cfg['arch'][$this->class_table_index];\n    if (is_string($filter)) {\n      $cfg = [$f['id'] => $filter];\n    }\n    elseif (is_array($filter)) {\n      $cfg = $filter;\n    }\n\n    if (!empty($cfg) && $this->db->count(\n      $this->class_table,\n      $this->dbTraitGetFilterCfg($cfg)\n    )) {\n      return true;\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 25,
                "endLine": 47,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitExists",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array|string",
                            "name": "$id"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 25,
            "endLine": 47,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitExists",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id\n   * @return bool\n   *\/"
        },
        "dbTraitInsert": {
            "name": "dbTraitInsert",
            "summary": "Inserts a new row in the table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "dbTraitInsert",
                "summary": "Inserts a new row in the table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitInsert(array $data, bool $ignore = false): ?string\n  {\n    if ($data = $this->dbTraitPrepare($data)) {\n      $ccfg = $this->getClassCfg();\n      if (!empty($ccfg['arch'][$this->class_table_index]['cfg'])) {\n        $col = $ccfg['arch'][$this->class_table_index]['cfg'];\n        if (isset($data[$col])) {\n          $data[$col] = json_encode($data[$col]);\n        }\n      }\n\n      if ($this->db->{$ignore ? 'insertIgnore' : 'insert'}($ccfg['table'], $data)) {\n        return $this->db->lastId();\n      }\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 56,
                "endLine": 73,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitInsert",
                "returns": [
                    null,
                    "string"
                ],
                "arguments": [
                    {
                        "name": "data",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ignore",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Inserts a new row in the table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$data"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 56,
            "endLine": 73,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ignore",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Inserts a new row in the table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Inserts a new row in the table.\n   *\n   * @param array $data\n   *\n   * @return string|null\n   *\/"
        },
        "dbTraitDelete": {
            "name": "dbTraitDelete",
            "summary": "Deletes a single row from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
            "parent": {
                "name": "dbTraitDelete",
                "summary": "Deletes a single row from the table through its id.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitDelete(string|array $filter, bool $cascade = false): bool\n  {\n    if ($this->dbTraitExists($filter)) {\n      $cfg = $this->getClassCfg();\n      $f = $cfg['arch'][$this->class_table_index];\n\n      if (!is_array($filter) && !empty($f['id'])) {\n        $filter = [$f['id'] => $filter];\n      }\n\n      return (bool)$this->db->delete($cfg['table'], $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return false;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 83,
                "endLine": 97,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitDelete",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array|string",
                        "type_arr": [
                            {},
                            {}
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cascade",
                        "position": 1,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Deletes a single row from the table through its id.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$id"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 83,
            "endLine": 97,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitDelete",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cascade",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes a single row from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes a single row from the table through its id.\n   *\n   * @param string $id\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitUpdate": {
            "name": "dbTraitUpdate",
            "summary": "Updates a single row in the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(' . $this->db->csn($col, true);\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n      \n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
            "parent": {
                "name": "dbTraitUpdate",
                "summary": "Updates a single row in the table through its id.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitUpdate(string|array $filter, array $data): int\n  {\n    $ccfg = $this->getClassCfg();\n    $f = $ccfg['arch'][$this->class_table_index];\n    if (!is_array($filter)) {\n      $filter = [$f['id'] => $filter];\n    }\n\n    if (!$this->dbTraitExists($filter)) {\n      throw new Exception(X::_(\"Impossible to find the given row\"));\n    }\n\n    if ($data = $this->dbTraitPrepare($data)) {\n      if (!empty($f['cfg'])) {\n        $col = $f['cfg'];\n        if (!empty($data[$col])) {\n          if (is_string($data[$col])) {\n            $data[$col] = json_decode($data[$col], true);\n          }\n\n          $jsonUpdate = 'JSON_SET(' . $this->db->csn($col, true);\n          foreach ($data[$col] as $k => $v) {\n            $jsonUpdate .= ', \"$.' . $k . '\", \"' . Str::escapeDquotes(is_iterable($v) ? json_encode($v) : $v) . '\"';\n          }\n\n          $jsonUpdate .= \")\";\n          $data[$col] = [null, $jsonUpdate];\n        }\n      }\n      \n      return $this->db->update($ccfg['table'], $data, $this->dbTraitGetFilterCfg($filter));\n    }\n\n    return 0;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 109,
                "endLine": 143,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 2,
                "shortName": "dbTraitUpdate",
                "returns": [
                    "int"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array|string",
                        "type_arr": [
                            {},
                            {}
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Updates a single row in the table through its id.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$data"
                        },
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$filter"
                        },
                        {
                            "tag": "param",
                            "type": "bool",
                            "name": "$add",
                            "description": "fg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 109,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "dbTraitUpdate",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Updates a single row in the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$add",
                        "description": "fg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Updates a single row in the table through its id.\n   *\n   * @param array $data\n   * @param string|array $filter\n   * @param bool $addCfg\n   *\n   * @return bool\n   *\/"
        },
        "dbTraitSelectOne": {
            "name": "dbTraitSelectOne",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "dbTraitSelectOne",
                "summary": "Retrieves a row as an object from the table through its id.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitSelectOne(string $field, string|array $filter = [], array $order = [])\n  {\n    if ($res = $this->dbTraitSingleSelection($filter, $order, 'array', [$field])) {\n      return $res[$field] ?? null;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 154,
                "endLine": 161,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitSelectOne",
                "returns": [],
                "arguments": [
                    {
                        "name": "field",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "filter",
                        "position": 1,
                        "type": "array|string",
                        "type_arr": [
                            {},
                            {}
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Retrieves a row as an object from the table through its id.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$filter"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 154,
            "endLine": 161,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectOne",
            "returns": [],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return mixed\n   *\/"
        },
        "dbTraitSelect": {
            "name": "dbTraitSelect",
            "summary": "Retrieves a row as an object from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
            "parent": {
                "name": "dbTraitSelect",
                "summary": "Retrieves a row as an object from the table through its id.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitSelect(string|array $filter = [], array $order = [], array $fields = []): ?stdClass\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'object', $fields);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 172,
                "endLine": 175,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitSelect",
                "returns": [
                    null,
                    "stdClass"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array|string",
                        "type_arr": [
                            {},
                            {}
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Retrieves a row as an object from the table through its id.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$filter"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 172,
            "endLine": 175,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelect",
            "returns": [
                null,
                "stdClass"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an object from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an object from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return stdClass|null\n   *\/"
        },
        "dbTraitRselect": {
            "name": "dbTraitRselect",
            "summary": "Retrieves a row as an array from the table through its id.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
            "parent": {
                "name": "dbTraitRselect",
                "summary": "Retrieves a row as an array from the table through its id.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitRselect(string|array $filter = [], array $order = [], array $fields = []): ?array\n  {\n    return $this->dbTraitSingleSelection($filter, $order, 'array', $fields);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 186,
                "endLine": 189,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitRselect",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array|string",
                        "type_arr": [
                            {},
                            {}
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Retrieves a row as an array from the table through its id.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|array",
                            "name": "$filter"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 186,
            "endLine": 189,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselect",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Retrieves a row as an array from the table through its id.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Retrieves a row as an array from the table through its id.\n   *\n   * @param string|array $filter\n   * @param array $order\n   *\n   * @return array|null\n   *\/"
        },
        "dbTraitSelectValues": {
            "name": "dbTraitSelectValues",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
            "parent": {
                "name": "dbTraitSelectValues",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitSelectValues(string $field, array $filter = [], array $order = [], int $limit = 0, int $start = 0): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'value', [$field]);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 191,
                "endLine": 194,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitSelectValues",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "field",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "filter",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 191,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSelectValues",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "field",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "filter",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "dbTraitCount": {
            "name": "dbTraitCount",
            "summary": "Returns the number of rows from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
            "parent": {
                "name": "dbTraitCount",
                "summary": "Returns the number of rows from the table for the given conditions.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitCount(array $filter = []): int\n  {\n    if (!$this->class_table_index) {\n      throw new Exception(X::_(\"The table index parameter should be defined\"));\n    }\n\n    $req = $this->dbTraitGetRequestCfg($filter, [], 1, 0, [$this->fields['id']]);\n    return $this->db->count($req);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 204,
                "endLine": 212,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitCount",
                "returns": [
                    "int"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns the number of rows from the table for the given conditions.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$filter"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 204,
            "endLine": 212,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitCount",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns the number of rows from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the number of rows from the table for the given conditions.\n   *\n   * @param array $filter\n   *\n   * @return int\n   *\/"
        },
        "dbTraitSelectAll": {
            "name": "dbTraitSelectAll",
            "summary": "Returns an array of rows as objects from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
            "parent": {
                "name": "dbTraitSelectAll",
                "summary": "Returns an array of rows as objects from the table for the given conditions.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitSelectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'object', $fields);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 225,
                "endLine": 228,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitSelectAll",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 2,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$filter"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$limit"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 225,
            "endLine": 228,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitSelectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as objects from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as objects from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitRselectAll": {
            "name": "dbTraitRselectAll",
            "summary": "Returns an array of rows as arrays from the table for the given conditions.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
            "parent": {
                "name": "dbTraitRselectAll",
                "summary": "Returns an array of rows as arrays from the table for the given conditions.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitRselectAll(array $filter = [], array $order = [], int $limit = 0, int $start = 0, $fields = []): array\n  {\n    return $this->dbTraitSelection($filter, $order, $limit, $start, 'array', $fields);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 241,
                "endLine": 244,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitRselectAll",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 2,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 4,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$filter"
                        },
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$order"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$limit"
                        },
                        {
                            "tag": "param",
                            "type": "int",
                            "name": "$start"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 241,
            "endLine": 244,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitRselectAll",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 4,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Returns an array of rows as arrays from the table for the given conditions.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$filter"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$order"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$limit"
                    },
                    {
                        "tag": "param",
                        "type": "int",
                        "name": "$start"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Returns an array of rows as arrays from the table for the given conditions.\n   *\n   * @param array $filter\n   * @param array $order\n   * @param int $limit\n   * @param int $start\n   *\n   * @return array\n   *\/"
        },
        "dbTraitGetRelations": {
            "name": "dbTraitGetRelations",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetRelations(string $id, string $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
            "parent": {
                "name": "dbTraitGetRelations",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitGetRelations(string $id, string $table = null): ?array\n  {\n    if ($this->dbTraitExists($id)) {\n      $db =& $this->db;\n      $res = [];\n      foreach ($this->dbTraitGetTableRelations($table) as $rel) {\n        if ($all = $db->getColumnValues($rel['table'], $rel['primary'], [$rel['col'] => $id])) {\n          $res[$rel['table']] = [\n            'col' => $rel['col'],\n            'primary' => $rel['primary'],\n            'values' => $all\n          ];\n        }\n      }\n\n      return $res;\n    }\n\n    return null;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 246,
                "endLine": 265,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitGetRelations",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "id",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "table",
                        "position": 1,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 246,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetRelations",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "table",
                    "position": 1,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "dbTraitGetSearchFilter": {
            "name": "dbTraitGetSearchFilter",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
            "parent": {
                "name": "dbTraitGetSearchFilter",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitGetSearchFilter(string|int $filter, array $cols = [], bool $strict = false): array\n  {\n    $cfg = $this->getClassCfg();\n    $isNumber = Str::isNumber($filter);\n    $finalFilter = [\n      'logic' => 'OR',\n      'conditions' => []\n    ];\n    if (empty($cols)) {\n      $tableCols = $this->db->modelize($cfg['table'])['fields'];\n      foreach ($tableCols as $col => $colCfg) {\n        if ((strpos($colCfg['type'], 'text') !== false) || (strpos($colCfg['type'], 'char') !== false)) {\n          $cols[] = $col;\n        }\n        elseif ($isNumber && (strpos($colCfg['type'], 'int') !== false)) {\n          $cols[] = $col;\n        }\n      }\n    }\n\n    foreach ($cols as $col) {\n      $finalFilter['conditions'][] = [\n        'field' => $this->db->cfn($col, $cfg['table']),\n        'operator' => $strict ? '=' : 'contains',\n        'value' => $filter\n      ];\n    }\n\n    return $finalFilter;\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 267,
                "endLine": 296,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitGetSearchFilter",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "string|int",
                        "type_arr": [
                            {},
                            {}
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cols",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "strict",
                        "position": 2,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 267,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetSearchFilter",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "string|int",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "dbTraitSearch": {
            "name": "dbTraitSearch",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
            "parent": {
                "name": "dbTraitSearch",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbActions.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitSearch(array|string $filter, array $cols = [], array $fields = [], array $order = [], bool $strict = false, int $limit = 0, int $start = 0): array\n  {\n    if (is_array($filter)) {\n      $finalFilter = $filter;\n      if (empty($fields) && !empty($cols)) {\n        $fields = $cols;\n      }\n    }\n    else {\n      $finalFilter = $this->dbTraitGetSearchFilter($filter, $cols);\n    }\n\n    return $this->dbTraitRselectAll($finalFilter, $order, $limit, $start, $fields);\n  }",
                "parent": false,
                "trait": "bbn\\Models\\Tts\\DbActions",
                "startLine": 298,
                "endLine": 311,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 7,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitSearch",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array|string",
                        "type_arr": [
                            {},
                            {}
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "cols",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 2,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 3,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "strict",
                        "position": 4,
                        "type": "bool",
                        "type_arr": [
                            "bool"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": false,
                        "default_name": ""
                    },
                    {
                        "name": "limit",
                        "position": 5,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 6,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\Models\\Tts\\DbActions",
            "startLine": 298,
            "endLine": 311,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 7,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSearch",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array|string",
                    "type_arr": [
                        {},
                        {}
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cols",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 3,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "strict",
                    "position": 4,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                },
                {
                    "name": "limit",
                    "position": 5,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 6,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ]
        },
        "getClassCfg": {
            "name": "getClassCfg",
            "summary": "Returns the class configuration.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
            "parent": {
                "name": "getClassCfg",
                "summary": "Returns the class configuration.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getClassCfg()\n  {\n    return $this->class_cfg;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 37,
                "endLine": 40,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getClassCfg",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Returns the class configuration.\n\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
            },
            "trait": false,
            "startLine": 37,
            "endLine": 40,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getClassCfg",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the class configuration.\n\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the class configuration.\n   * \n   * @return mixed\n   *\/"
        },
        "getFields": {
            "name": "getFields",
            "summary": "Returns the fields of the main table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
            "parent": {
                "name": "getFields",
                "summary": "Returns the fields of the main table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getFields()\n  {\n    return $this->fields;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 48,
                "endLine": 51,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getFields",
                "returns": [],
                "arguments": [],
                "doc": {
                    "description": "Returns the fields of the main table.\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
            },
            "trait": false,
            "startLine": 48,
            "endLine": 51,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getFields",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the fields of the main table.\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Returns the fields of the main table.\n   *\n   * @return array\n   *\/"
        },
        "initClassCfg": {
            "name": "initClassCfg",
            "summary": "Sets the class configuration as defined in self::default_class_cfg",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function initClassCfg(array $cfg = null)\n  {\n$arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n    foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
            "parent": {
                "name": "initClassCfg",
                "summary": "Sets the class configuration as defined in self::default_class_cfg",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function initClassCfg(array $cfg = null)\n  {\n$arr = [];\n    if (isset(self::$default_class_cfg)) {\n      $arr[] = self::$default_class_cfg;\n    }\n\n    if (isset(static::$default_class_cfg)) {\n      $arr[] = static::$default_class_cfg;\n    }\n    \n    if ($cfg) {\n      $arr[] = $cfg;\n    }\n\n    if (!count($arr)) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $cfg = count($arr) > 1 ? X::mergeArrays(...$arr) : $arr[0];\n\n    $table_index = array_flip($cfg['tables'])[$cfg['table']];\n    if (!$table_index || !isset($cfg['tables'], $cfg['table'], $cfg['arch'], $cfg['arch'][$table_index])) {\n      throw new Exception(X::_(\"The class %s is not configured properly to work with trait DbActions\", get_class($this)));\n    }\n\n    $this->class_table = $cfg['table'];\n    \/\/ We completely replace the table structure, no merge\n    $props = [];\n    foreach ($cfg['arch'] as $t => &$fields){\n      if (!$this->class_table_index && isset($cfg['tables'][$t]) && ($cfg['tables'][$t] === $cfg['table']))  {\n        $this->class_table_index = $t;\n      }\n    foreach ($fields as $f => $it) {\n        if (is_array($it)) {\n          $props[$t][$f] = $it;\n          $fields[$f] = $it['name'] ?? $f;\n        }\n      }\n    }\n    unset($fields);\n    if (!empty($props)) {\n      $cfg['props'] = $props;\n    }\n\n\n\n    \/\/ The selection comprises the defined fields of the users table\n    \/\/ Plus a bunch of user-defined additional fields in the same table\n    $this->fields = $cfg['arch'][$this->class_table_index];\n\n    $this->class_cfg = $cfg;\n    $this->_isInitClassCfg = true;\n\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 59,
                "endLine": 114,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "initClassCfg",
                "returns": [],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "null|array",
                        "type_arr": [
                            "null",
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
            },
            "trait": false,
            "startLine": 59,
            "endLine": 114,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "initClassCfg",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the class configuration as defined in self::default_class_cfg\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the class configuration as defined in self::default_class_cfg\n   * @param array $cfg\n   * @return $this\n   *\/"
        },
        "isInitClassCfg": {
            "name": "isInitClassCfg",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
            "parent": {
                "name": "isInitClassCfg",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbConfig.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function isInitClassCfg(): bool\n  {\n    return $this->_isInitClassCfg;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 117,
                "endLine": 120,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "isInitClassCfg",
                "returns": [
                    "bool"
                ],
                "arguments": []
            },
            "trait": false,
            "startLine": 117,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "isInitClassCfg",
            "returns": [
                "bool"
            ],
            "arguments": []
        },
        "dbTraitPrepare": {
            "name": "dbTraitPrepare",
            "summary": "Prepares data before inserting or updating in the database.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
            "parent": {
                "name": "dbTraitPrepare",
                "summary": "Prepares data before inserting or updating in the database.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitPrepare(array $data): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (!empty($ccfg['cfg'])) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $res[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        unset($data[$f['cfg']]);\n      }\n      elseif (isset($ccfg['cfg'])) {\n        $cfg = [];\n        foreach ($ccfg['cfg'] as $k => $v) {\n          if (array_key_exists($v['field'], $data)) {\n            $cfg[$v['field']] = $data[$v['field']];\n            unset($data[$v['field']]);\n          }\n        }\n        if (!empty($cfg)) {\n          $res[$f['cfg']] = $cfg;\n        }\n      }\n    }\n\n    $structure = $this->dbTraitGetStructure();\n    foreach ($data as $k => $v) {\n      if (in_array($k, $f)) {\n        \/\/ Set the value to null if it's empty and not 0 and the field allows null\n        if (empty($v)\n          && ($v !== 0)\n          && $structure['fields'][$k]['null']\n        ) {\n          $v = null;\n        }\n\n        $res[$k] = $v;\n      }\n    }\n\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 39,
                "endLine": 92,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitPrepare",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "data",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The data to be prepared."
                    }
                ],
                "doc": {
                    "description": "Prepares data before inserting or updating in the database.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$data",
                            "description": "The data to be prepared."
                        }
                    ],
                    "return": "The prepared data.",
                    "throws": {
                        "tag": "throws",
                        "type": "Exception",
                        "description": "If the class config has not been initialized or is incorrect."
                    }
                },
                "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
            },
            "trait": false,
            "startLine": 39,
            "endLine": 92,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitPrepare",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "data",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The data to be prepared."
                }
            ],
            "doc": {
                "description": "Prepares data before inserting or updating in the database.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data",
                        "description": "The data to be prepared."
                    }
                ],
                "return": "The prepared data.",
                "throws": {
                    "tag": "throws",
                    "type": "Exception",
                    "description": "If the class config has not been initialized or is incorrect."
                }
            },
            "comments": "  \/**\n   * Prepares data before inserting or updating in the database.\n   *\n   * @param array $data The data to be prepared.\n   *\n   * @return array The prepared data.\n   * @throws Exception If the class config has not been initialized or is incorrect.\n   *\/"
        },
        "dbTraitTreat": {
            "name": "dbTraitTreat",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
            "parent": {
                "name": "dbTraitTreat",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitTreat(array ...$rows): array\n  {\n    \/\/ Ensure that the class configuration is initialized\n    if (!$this->isInitClassCfg()) {\n      throw new Exception(X::_(\"Impossible to prepare an item if the class config has not been initialized\"));\n    }\n\n    $ccfg = $this->getClassCfg();\n    \/\/ Get the table index from the class configuration\n    $table_index = array_flip($ccfg['tables'])[$ccfg['table']];\n    if (!$table_index) {\n      throw new Exception(X::_(\"The class config is not correct as the main table doesn't have an arch\"));\n    }\n\n    $f = $ccfg['arch'][$table_index];\n    $res = [];\n    \/\/ Handle 'cfg' field if present in the table configuration\n    if (empty($f['cfg'])) {\n      return [...$rows];\n    }\n    foreach ($rows as &$data) {\n      if (array_key_exists($f['cfg'], $data)) {\n        $data[$f['cfg']] = is_string($data[$f['cfg']]) ? json_decode($data[$f['cfg']], true) : $data[$f['cfg']];\n        if (!empty($ccfg['cfg'])) {\n          foreach ($ccfg['cfg'] as $k => $v) {\n            if (isset($v['field']) \n                && array_key_exists($v['field'], $data[$f['cfg']])\n                && !array_key_exists($v['field'], $data)) {\n              $data[$v['field']] = $data[$f['cfg']][$v['field']];\n            }\n          }\n          unset($data[$f['cfg']]);\n        }\n      }\n\n      $res[] = $data;\n    }\n\n    unset($data);\n    return $res;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 94,
                "endLine": 134,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": true,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitTreat",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "rows",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": true,
                        "reference": false,
                        "required": false,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "trait": false,
            "startLine": 94,
            "endLine": 134,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": true,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitTreat",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "rows",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": true,
                    "reference": false,
                    "required": false,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "dbTraitSetFilterCfg": {
            "name": "dbTraitSetFilterCfg",
            "summary": "Sets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
            "parent": {
                "name": "dbTraitSetFilterCfg",
                "summary": "Sets the filter configuration for database queries.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitSetFilterCfg(array $cfg): void\n  {\n    $this->dbTraitFilterCfg = $cfg;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 142,
                "endLine": 145,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitSetFilterCfg",
                "returns": [
                    "void"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "The filter configuration."
                    }
                ],
                "doc": {
                    "description": "Sets the filter configuration for database queries.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg",
                            "description": "The filter configuration."
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
            },
            "trait": false,
            "startLine": 142,
            "endLine": 145,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitSetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The filter configuration."
                }
            ],
            "doc": {
                "description": "Sets the filter configuration for database queries.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The filter configuration."
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the filter configuration for database queries.\n   *\n   * @param array $cfg The filter configuration.\n   *\/"
        },
        "dbTraitResetFilterCfg": {
            "name": "dbTraitResetFilterCfg",
            "summary": "Resets the filter configuration for database queries.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
            "parent": {
                "name": "dbTraitResetFilterCfg",
                "summary": "Resets the filter configuration for database queries.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitResetFilterCfg(): void\n  {\n    $this->dbTraitFilterCfg = [];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 150,
                "endLine": 153,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitResetFilterCfg",
                "returns": [
                    "void"
                ],
                "arguments": [],
                "doc": {
                    "description": "Resets the filter configuration for database queries.",
                    "tags": []
                },
                "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
            },
            "trait": false,
            "startLine": 150,
            "endLine": 153,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitResetFilterCfg",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Resets the filter configuration for database queries.",
                "tags": []
            },
            "comments": "  \/**\n   * Resets the filter configuration for database queries.\n   *\/"
        },
        "dbTraitGetFilterCfg": {
            "name": "dbTraitGetFilterCfg",
            "summary": "Combines multiple filter configurations into a single array.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
            "parent": {
                "name": "dbTraitGetFilterCfg",
                "summary": "Combines multiple filter configurations into a single array.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitGetFilterCfg(array $cfg): array\n  {\n    $conditions = [];\n    if (!empty($this->rootFilterCfg)) {\n      $conditions[] = $this->rootFilterCfg;\n    }\n\n    if (!empty($this->dbTraitFilterCfg)) {\n      $conditions[] = $this->dbTraitFilterCfg;\n    }\n\n    if (!empty($cfg)) {\n      $conditions[] = $cfg;\n    }\n\n    \/\/ Return empty array if no conditions exist\n    if (empty($conditions)) {\n      return [];\n    }\n\n    \/\/ Return single condition if only one exists\n    if (count($conditions) === 1) {\n      return $conditions[0];\n    }\n\n    \/\/ Combine all conditions with 'AND' logic\n    return array_map(function ($a) {\n      return [\n        'logic' => 'AND',\n        'conditions' => $a\n      ];\n    }, $conditions);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 162,
                "endLine": 194,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "dbTraitGetFilterCfg",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "Additional filter configuration."
                    }
                ],
                "doc": {
                    "description": "Combines multiple filter configurations into a single array.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "array",
                            "name": "$cfg",
                            "description": "Additional filter configuration."
                        }
                    ],
                    "return": "The combined filter configuration."
                },
                "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
            },
            "trait": false,
            "startLine": 162,
            "endLine": 194,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "dbTraitGetFilterCfg",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Additional filter configuration."
                }
            ],
            "doc": {
                "description": "Combines multiple filter configurations into a single array.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "Additional filter configuration."
                    }
                ],
                "return": "The combined filter configuration."
            },
            "comments": "  \/**\n   * Combines multiple filter configurations into a single array.\n   *\n   * @param array $cfg Additional filter configuration.\n   *\n   * @return array The combined filter configuration.\n   *\/"
        },
        "dbTraitGetStructure": {
            "name": "dbTraitGetStructure",
            "summary": "Gets the structure of the specified table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetStructure(string $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
            "parent": {
                "name": "dbTraitGetStructure",
                "summary": "Gets the structure of the specified table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitGetStructure(string $table = null): array\n  {\n    if (!$table) {\n      $cfg = $this->getClassCfg();\n      $table = $cfg['table'];\n    }\n\n    if (!isset($this->dbTraitStructure[$table])) {\n      $this->dbTraitStructure[$table] = $this->db->modelize($table);\n    }\n\n    return $this->dbTraitStructure[$table];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 203,
                "endLine": 215,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitGetStructure",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The table name (optional)."
                    }
                ],
                "doc": {
                    "description": "Gets the structure of the specified table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$table",
                            "description": "The table name (optional)."
                        }
                    ],
                    "return": "The structure of the table."
                },
                "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
            },
            "trait": false,
            "startLine": 203,
            "endLine": 215,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetStructure",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Gets the structure of the specified table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "The structure of the table."
            },
            "comments": "  \/**\n   * Gets the structure of the specified table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array The structure of the table.\n   *\/"
        },
        "dbTraitGetTableRelations": {
            "name": "dbTraitGetTableRelations",
            "summary": "Retrieves the relations for a given table.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function dbTraitGetTableRelations(string $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
            "parent": {
                "name": "dbTraitGetTableRelations",
                "summary": "Retrieves the relations for a given table.",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/DbTrait.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function dbTraitGetTableRelations(string $table = null): array\n  {\n    $cfg = $this->getClassCfg();\n    if (!$table) {\n      $table = $cfg['table'];\n    }\n    $idx = array_flip($cfg['tables'])[$table];\n    if ($idx && !isset($this->dbTraitRelations[$table])) {\n      $arc = &$cfg['arch'][$idx];\n      $this->dbTraitRelations[$table] = [];\n      if (!empty($arc['id'])) {\n        $refs = $this->db->findReferences($this->db->cfn($arc['id'], $table));\n        foreach ($refs as $ref) {\n          [$db, $tab, $col] = X::split($ref, '.');\n          $model = $this->db->modelize($tab);\n          $this->dbTraitRelations[$table][] = [\n            'db' => $db,\n            'table' => $tab,\n            'primary' => isset($model['keys']['PRIMARY']) && (count($model['keys']['PRIMARY']['columns']) === 1) ? $model['keys']['PRIMARY']['columns'][0] : null,\n            'col' => $col,\n            'model' => $model\n          ];\n        }\n      }\n    }\n\n    return $this->dbTraitRelations[$table];\n  }",
                "parent": false,
                "trait": false,
                "startLine": 224,
                "endLine": 251,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "dbTraitGetTableRelations",
                "returns": [
                    "array"
                ],
                "arguments": [
                    {
                        "name": "table",
                        "position": 0,
                        "type": "null|string",
                        "type_arr": [
                            "null",
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": "",
                        "description": "The table name (optional)."
                    }
                ],
                "doc": {
                    "description": "Retrieves the relations for a given table.\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string|null",
                            "name": "$table",
                            "description": "The table name (optional)."
                        }
                    ],
                    "return": "An array of relations."
                },
                "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
            },
            "trait": false,
            "startLine": 224,
            "endLine": 251,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "dbTraitGetTableRelations",
            "returns": [
                "array"
            ],
            "arguments": [
                {
                    "name": "table",
                    "position": 0,
                    "type": "null|string",
                    "type_arr": [
                        "null",
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The table name (optional)."
                }
            ],
            "doc": {
                "description": "Retrieves the relations for a given table.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string|null",
                        "name": "$table",
                        "description": "The table name (optional)."
                    }
                ],
                "return": "An array of relations."
            },
            "comments": "  \/**\n   * Retrieves the relations for a given table.\n   *\n   * @param string|null $table The table name (optional).\n   *\n   * @return array An array of relations.\n   *\/"
        },
        "getEntities": {
            "name": "getEntities",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getEntities() {\n    return $this->entities;\n  }",
            "parent": {
                "name": "getEntities",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getEntities() {\n    return $this->entities;\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 39,
                "endLine": 41,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getEntities",
                "returns": [],
                "arguments": []
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 39,
            "endLine": 41,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getEntities",
            "returns": [],
            "arguments": []
        },
        "getId": {
            "name": "getId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getId()\n  {\n    return $this->id_entity;\n  }",
            "parent": {
                "name": "getId",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getId()\n  {\n    return $this->id_entity;\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 43,
                "endLine": 46,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "getId",
                "returns": [],
                "arguments": []
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 43,
            "endLine": 46,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "getId",
            "returns": [],
            "arguments": []
        },
        "identity": {
            "name": "identity",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function identity(): ?Identity\n  {\n    return $this->entities->identity();\n  }",
            "parent": {
                "name": "identity",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function identity(): ?Identity\n  {\n    return $this->entities->identity();\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 59,
                "endLine": 62,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "identity",
                "returns": [
                    null,
                    "bbn\\Entities\\Identity"
                ],
                "arguments": []
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 59,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "identity",
            "returns": [
                null,
                "bbn\\Entities\\Identity"
            ],
            "arguments": []
        },
        "address": {
            "name": "address",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function address(): ?Address\n  {\n    return $this->entities->address();\n  }",
            "parent": {
                "name": "address",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function address(): ?Address\n  {\n    return $this->entities->address();\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 64,
                "endLine": 67,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "address",
                "returns": [
                    null,
                    "bbn\\Entities\\Address"
                ],
                "arguments": []
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 64,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "address",
            "returns": [
                null,
                "bbn\\Entities\\Address"
            ],
            "arguments": []
        },
        "options": {
            "name": "options",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function options(): ?Option\n  {\n    return $this->entities->options();\n  }",
            "parent": {
                "name": "options",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function options(): ?Option\n  {\n    return $this->entities->options();\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 69,
                "endLine": 72,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "options",
                "returns": [
                    null,
                    "bbn\\Appui\\Option"
                ],
                "arguments": []
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 69,
            "endLine": 72,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "options",
            "returns": [
                null,
                "bbn\\Appui\\Option"
            ],
            "arguments": []
        },
        "entity": {
            "name": "entity",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function entity(): Entity|Nullall\n  {\n    return $this->entity;\n  }",
            "parent": {
                "name": "entity",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function entity(): Entity|Nullall\n  {\n    return $this->entity;\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 74,
                "endLine": 77,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "entity",
                "returns": [],
                "arguments": []
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 74,
            "endLine": 77,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "entity",
            "returns": [],
            "arguments": []
        },
        "count": {
            "name": "count",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function count(array $filter = []): int\n  {\n    return $this->dbTraitCount($filter);\n  }",
            "parent": {
                "name": "count",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function count(array $filter = []): int\n  {\n    return $this->dbTraitCount($filter);\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 80,
                "endLine": 83,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "shortName": "count",
                "returns": [
                    "int"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 80,
            "endLine": 83,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "count",
            "returns": [
                "int"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "getOne": {
            "name": "getOne",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function getOne($filter = [], array $order = [], int $start = 0, $fields = []): ?array\n  {\n    return $this->dbTraitRselect(...func_get_args());\n  }",
            "parent": {
                "name": "getOne",
                "summary": "",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Entities\/Models\/EntityTrait.php",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "  public function getOne($filter = [], array $order = [], int $start = 0, $fields = []): ?array\n  {\n    return $this->dbTraitRselect(...func_get_args());\n  }",
                "parent": false,
                "trait": "bbn\\Entities\\Models\\EntityTrait",
                "startLine": 90,
                "endLine": 93,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 0,
                "shortName": "getOne",
                "returns": [
                    null,
                    "array"
                ],
                "arguments": [
                    {
                        "name": "filter",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "order",
                        "position": 1,
                        "type": "array",
                        "type_arr": [
                            "array"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    },
                    {
                        "name": "start",
                        "position": 2,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    },
                    {
                        "name": "fields",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": [],
                        "default_name": ""
                    }
                ]
            },
            "trait": "bbn\\Entities\\Models\\EntityTrait",
            "startLine": 90,
            "endLine": 93,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 0,
            "shortName": "getOne",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "filter",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "order",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "start",
                    "position": 2,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                },
                {
                    "name": "fields",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ]
        },
        "cacheInit": {
            "name": "cacheInit",
            "summary": "Initializes the cache object, must be called in __construct",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
            "parent": {
                "name": "cacheInit",
                "summary": "Initializes the cache object, must be called in __construct",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheInit(): void\n  {\n    if ( \\is_null($this->cache_engine) ){\n      $this->cache_engine = CacheCls::getEngine();\n      $this->_cache_prefix = Str::encodeFilename(str_replace('\\\\', '\/', \\get_class($this)), true).'\/';\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 27,
                "endLine": 33,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheInit",
                "returns": [
                    "void"
                ],
                "arguments": [],
                "doc": {
                    "description": "Initializes the cache object, must be called in __construct\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 27,
            "endLine": 33,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheInit",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Initializes the cache object, must be called in __construct\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Initializes the cache object, must be called in __construct\n   *\n   * @return void\n   *\/"
        },
        "cacheCheck": {
            "name": "cacheCheck",
            "summary": "Throws an exception if the cache has not been initialized",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
            "parent": {
                "name": "cacheCheck",
                "summary": "Throws an exception if the cache has not been initialized",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheCheck(): void\n  {\n    if (!$this->cache_engine) {\n      throw new Exception(X::_(\"The cache object has not been initialized\"));\n    }\n  }",
                "parent": false,
                "trait": false,
                "startLine": 41,
                "endLine": 46,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheCheck",
                "returns": [
                    "void"
                ],
                "arguments": [],
                "doc": {
                    "description": "Throws an exception if the cache has not been initialized\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 41,
            "endLine": 46,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheCheck",
            "returns": [
                "void"
            ],
            "arguments": [],
            "doc": {
                "description": "Throws an exception if the cache has not been initialized\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Throws an exception if the cache has not been initialized\n   *\n   * @return void\n   *\/"
        },
        "_cache_name": {
            "name": "_cache_name",
            "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
            "parent": {
                "name": "_cache_name",
                "summary": "Generates a name for the cache based on the class name and the method called - or a gievn string",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function _cache_name($uid, $method = '', string $locale = ''): string\n  {\n    $uid  = (string)$uid;\n    $path = Str::isUid($uid) ? substr($uid, 0, 3).'\/'.substr($uid, 3, 3).'\/'.substr($uid, 6) : $uid;\n    return $this->_cache_prefix.$path.(empty($method) ? '' : '\/'.(string)$method).(empty($locale) ? '' : \"-$locale\");\n  }",
                "parent": false,
                "trait": false,
                "startLine": 57,
                "endLine": 62,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 1,
                "shortName": "_cache_name",
                "returns": [
                    "string"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "[type]",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
            },
            "trait": false,
            "startLine": 57,
            "endLine": 62,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_cache_name",
            "returns": [
                "string"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Generates a name for the cache based on the class name and the method called - or a gievn string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "[type]",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Generates a name for the cache based on the class name and the method called - or a gievn string\n   *\n   * @param [type] $uid\n   * @param string $method\n   * @param string $locale\n   * @return string\n   *\/"
        },
        "cacheDeleteAll": {
            "name": "cacheDeleteAll",
            "summary": "Deletes all the cache related to the current class",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
            "parent": {
                "name": "cacheDeleteAll",
                "summary": "Deletes all the cache related to the current class",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheDeleteAll(): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_prefix);\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 70,
                "endLine": 75,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "shortName": "cacheDeleteAll",
                "returns": [
                    "self"
                ],
                "arguments": [],
                "doc": {
                    "description": "Deletes all the cache related to the current class\n",
                    "params": [],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 70,
            "endLine": 75,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "cacheDeleteAll",
            "returns": [
                "self"
            ],
            "arguments": [],
            "doc": {
                "description": "Deletes all the cache related to the current class\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes all the cache related to the current class\n   *\n   * @return self\n   *\/"
        },
        "cacheDelete": {
            "name": "cacheDelete",
            "summary": "Deletes the given cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
            "parent": {
                "name": "cacheDelete",
                "summary": "Deletes the given cache",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheDelete(string $uid, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method));\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 85,
                "endLine": 90,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheDelete",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Deletes the given cache\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 85,
            "endLine": 90,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheDelete",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheDeleteLocale": {
            "name": "cacheDeleteLocale",
            "summary": "Deletes the given cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
            "parent": {
                "name": "cacheDeleteLocale",
                "summary": "Deletes the given cache for a specific locale",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheDeleteLocale(string $uid, string $locale, string $method = ''): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->deleteAll($this->_cache_name($uid, $method, $locale));\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 101,
                "endLine": 106,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheDeleteLocale",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Deletes the given cache for a specific locale\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 101,
            "endLine": 106,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheDeleteLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the given cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the given cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return self\n   *\/"
        },
        "cacheGet": {
            "name": "cacheGet",
            "summary": "Gets the cached data",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
            "parent": {
                "name": "cacheGet",
                "summary": "Gets the cached data",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheGet(string $uid, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method));\n  }",
                "parent": false,
                "trait": false,
                "startLine": 116,
                "endLine": 120,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheGet",
                "returns": [
                    null,
                    "mixed"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the cached data\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
            },
            "trait": false,
            "startLine": 116,
            "endLine": 120,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheGet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data\n   *\n   * @param string $uid\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheGetLocale": {
            "name": "cacheGetLocale",
            "summary": "Gets the cached data for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
            "parent": {
                "name": "cacheGetLocale",
                "summary": "Gets the cached data for a specific locale",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheGetLocale(string $uid, string $locale, string $method = ''): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->get($this->_cache_name($uid, $method, $locale));\n  }",
                "parent": false,
                "trait": false,
                "startLine": 131,
                "endLine": 135,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetLocale",
                "returns": [
                    null,
                    "mixed"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the cached data for a specific locale\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
            },
            "trait": false,
            "startLine": 131,
            "endLine": 135,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cached data for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cached data for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @return mixed\n   *\/"
        },
        "cacheSet": {
            "name": "cacheSet",
            "summary": "Sets the cache",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
            "parent": {
                "name": "cacheSet",
                "summary": "Sets the cache",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheSet(string $uid, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method), $data, $ttl);\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 147,
                "endLine": 152,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheSet",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Sets the cache\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$data"
                        },
                        {
                            "tag": "param",
                            "type": "integer",
                            "name": "$ttl"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 147,
            "endLine": 152,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheSet",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache\n   *\n   * @param string $uid\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheSetLocale": {
            "name": "cacheSetLocale",
            "summary": "Sets the cache for a specific locale",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
            "parent": {
                "name": "cacheSetLocale",
                "summary": "Sets the cache for a specific locale",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheSetLocale(string $uid, string $locale, string $method = '', $data = null, int $ttl = 0): self\n  {\n    $this->cacheCheck();\n    $this->cache_engine->set($this->_cache_name($uid, $method, $locale), $data, $ttl);\n    return $this;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 165,
                "endLine": 170,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheSetLocale",
                "returns": [
                    "self"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "data",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Sets the cache for a specific locale\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "array|null",
                            "name": "$data"
                        },
                        {
                            "tag": "param",
                            "type": "integer",
                            "name": "$ttl"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
            },
            "trait": false,
            "startLine": 165,
            "endLine": 170,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheSetLocale",
            "returns": [
                "self"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Sets the cache for a specific locale\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "array|null",
                        "name": "$data"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Sets the cache for a specific locale\n   *\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param array|null $data\n   * @param integer $ttl\n   * @return self\n   *\/"
        },
        "cacheGetSet": {
            "name": "cacheGetSet",
            "summary": "Gets the cache or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
            "parent": {
                "name": "cacheGetSet",
                "summary": "Gets the cache or creates it if needs to",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheGetSet(callable $fn, string $uid, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method), $ttl);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 182,
                "endLine": 186,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 4,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheGetSet",
                "returns": [
                    null,
                    "mixed"
                ],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 3,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the cache or creates it if needs to\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "callable",
                            "name": "$fn"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "integer",
                            "name": "$ttl"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
            },
            "trait": false,
            "startLine": 182,
            "endLine": 186,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 4,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheGetSet",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 3,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheGetSetLocale": {
            "name": "cacheGetSetLocale",
            "summary": "Gets the cache for a specific locale or creates it if needs to",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
            "parent": {
                "name": "cacheGetSetLocale",
                "summary": "Gets the cache for a specific locale or creates it if needs to",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheGetSetLocale(callable $fn, string $uid, string $locale, $method = '', int $ttl = 0): mixed\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->getSet($fn, $this->_cache_name($uid, $method, $locale), $ttl);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 199,
                "endLine": 203,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 5,
                "numberOfRequiredParameters": 3,
                "shortName": "cacheGetSetLocale",
                "returns": [
                    null,
                    "mixed"
                ],
                "arguments": [
                    {
                        "name": "fn",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "uid",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 3,
                        "type": "",
                        "type_arr": [],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "ttl",
                        "position": 4,
                        "type": "int",
                        "type_arr": [
                            "int"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": 0,
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Gets the cache for a specific locale or creates it if needs to\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "callable",
                            "name": "$fn"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$locale"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        },
                        {
                            "tag": "param",
                            "type": "integer",
                            "name": "$ttl"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
            },
            "trait": false,
            "startLine": 199,
            "endLine": 203,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 5,
            "numberOfRequiredParameters": 3,
            "shortName": "cacheGetSetLocale",
            "returns": [
                null,
                "mixed"
            ],
            "arguments": [
                {
                    "name": "fn",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "uid",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 3,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "ttl",
                    "position": 4,
                    "type": "int",
                    "type_arr": [
                        "int"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 0,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the cache for a specific locale or creates it if needs to\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$fn"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$locale"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    },
                    {
                        "tag": "param",
                        "type": "integer",
                        "name": "$ttl"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the cache for a specific locale or creates it if needs to\n   *\n   * @param callable $fn\n   * @param string $uid\n   * @param string $locale\n   * @param string $method\n   * @param integer $ttl\n   * @return mixed\n   *\/"
        },
        "cacheHas": {
            "name": "cacheHas",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
            "parent": {
                "name": "cacheHas",
                "summary": "Checks whether the cache exists and is valid",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheHas(string $uid, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGet($uid, $method) ? true : false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 213,
                "endLine": 217,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 2,
                "numberOfRequiredParameters": 1,
                "shortName": "cacheHas",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Checks whether the cache exists and is valid\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 213,
            "endLine": 217,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "cacheHas",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "cacheHasLocale": {
            "name": "cacheHasLocale",
            "summary": "Checks whether the cache exists and is valid",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
            "parent": {
                "name": "cacheHasLocale",
                "summary": "Checks whether the cache exists and is valid",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function cacheHasLocale(string $uid, string $locale, string $method = ''): bool\n  {\n    $this->cacheCheck();\n    return $this->cacheGetLocale($uid, $locale, $method) ? true : false;\n  }",
                "parent": false,
                "trait": false,
                "startLine": 227,
                "endLine": 231,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 3,
                "numberOfRequiredParameters": 2,
                "shortName": "cacheHasLocale",
                "returns": [
                    "bool"
                ],
                "arguments": [
                    {
                        "name": "uid",
                        "position": 0,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "locale",
                        "position": 1,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    },
                    {
                        "name": "method",
                        "position": 2,
                        "type": "string",
                        "type_arr": [
                            "string"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": false,
                        "has_default": true,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Checks whether the cache exists and is valid\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$uid"
                        },
                        {
                            "tag": "param",
                            "type": "string",
                            "name": "$method"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
            },
            "trait": false,
            "startLine": 227,
            "endLine": 231,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "cacheHasLocale",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "uid",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "locale",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "method",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Checks whether the cache exists and is valid\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$uid"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$method"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Checks whether the cache exists and is valid\n   *\n   * @param string $uid\n   * @param string $method\n   * @return boolean\n   *\/"
        },
        "serializeFunction": {
            "name": "serializeFunction",
            "summary": "Transforms a function in a cacheable string",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Models\\EntityTable",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
            "static": false,
            "visibility": "protected",
            "final": false,
            "code": "  protected function serializeFunction(callable $function)\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->serializeFunction($function);\n  }",
            "parent": {
                "name": "serializeFunction",
                "summary": "Transforms a function in a cacheable string",
                "description": "",
                "description_parts": [],
                "class": "bbn\\Entities\\Models\\EntityTable",
                "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/Cache.php",
                "static": false,
                "visibility": "protected",
                "final": false,
                "code": "  protected function serializeFunction(callable $function)\n  {\n    $this->cacheCheck();\n    return $this->cache_engine->serializeFunction($function);\n  }",
                "parent": false,
                "trait": false,
                "startLine": 241,
                "endLine": 245,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "shortName": "serializeFunction",
                "returns": [],
                "arguments": [
                    {
                        "name": "function",
                        "position": 0,
                        "type": "callable",
                        "type_arr": [
                            "callable"
                        ],
                        "variadic": false,
                        "reference": false,
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ],
                "doc": {
                    "description": "Transforms a function in a cacheable string\n",
                    "params": [
                        {
                            "tag": "param",
                            "type": "callable",
                            "name": "$function"
                        }
                    ],
                    "return": ""
                },
                "comments": "  \/**\n   * Transforms a function in a cacheable string\n   *\n   * @param callable $function\n   * @return void\n   *\/"
            },
            "trait": false,
            "startLine": 241,
            "endLine": 245,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "serializeFunction",
            "returns": [],
            "arguments": [
                {
                    "name": "function",
                    "position": 0,
                    "type": "callable",
                    "type_arr": [
                        "callable"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Transforms a function in a cacheable string\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "callable",
                        "name": "$function"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Transforms a function in a cacheable string\n   *\n   * @param callable $function\n   * @return void\n   *\/"
        },
        "_getFile": {
            "name": "_getFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getFile(array $where): ?array\n  {\n    $cCfg = $this->getClassCfg();\n    $oCfg = $this->options()->getClassCfg();\n    $file = $this->db->rselect(\n      [\n      'table' => $cCfg['tables']['files'],\n      'fields' => [\n        $this->db->cfn($cCfg['arch']['files']['id'], $cCfg['tables']['files']),\n        $this->db->cfn($cCfg['arch']['files']['files'], $cCfg['tables']['files']),\n        $this->db->cfn($cCfg['arch']['files']['type_doc'], $cCfg['tables']['files']),\n        $this->db->cfn($cCfg['arch']['files']['labels'], $cCfg['tables']['files']),\n        $this->db->cfn($cCfg['arch']['files']['date_added'], $cCfg['tables']['files']),\n        'code' => 'CAST('.$this->db->cfn($oCfg['arch']['options']['code'], $oCfg['table']).' AS CHAR)'\n      ],\n      'join' => [[\n        'table' => $cCfg['tables']['links'],\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($cCfg['arch']['links']['id_file'], $cCfg['tables']['links']),\n            'exp' => $this->db->cfn($cCfg['arch']['files']['id'], $cCfg['tables']['files'])\n          ]]\n        ]\n      ], [\n        'table' => $this->class_table,\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($this->fields['id'], $this->class_table),\n            'exp' => $this->db->cfn($cCfg['arch']['links']['id_link'], $cCfg['tables']['links'])\n          ]]\n        ]\n      ], [\n        'table' => $oCfg['table'],\n        'on' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($oCfg['arch']['options']['id'], $oCfg['table']),\n            'exp' => $this->db->cfn($cCfg['arch']['files']['type_doc'], $cCfg['tables']['files'])\n          ]]\n        ]\n      ]],\n      'where' => [\n        'conditions' => $where\n      ]\n      ]\n    );\n    if (!empty($file['code'])) {\n      $file['code'] = (string)$file['code'];\n    }\n\n    return $file;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 17,
            "endLine": 67,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "_getFile",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "where",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$where"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array $where\n   * @return array|null\n   *\/"
        },
        "_getFileByType": {
            "name": "_getFileByType",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _getFileByType($id_type, bool $files = true, array $conditions = []): ?array\n  {\n    $cCfg = $this->getClassCfg();\n    if (\\is_array($id_type)) {\n      $tmp = [\n        'logic' => 'OR',\n        'conditions' => []\n      ];\n      foreach ($id_type as $t) {\n        $tmp['conditions'][] = [\n          'field' => $this->db->cfn($cCfg['arch']['files']['type_doc'], $cCfg['tables']['files']),\n          'value' => !Str::isUid($t) ? $this->options()->fromCode($t, 'documents') : $t\n        ];\n      }\n\n      $conditions[] = $tmp;\n    }\n    else {\n      $conditions[] = [\n        'field' => $this->db->cfn($cCfg['arch']['files']['type_doc'], $cCfg['tables']['files']),\n        'value' => !Str::isUid($id_type) ? $this->options()->fromCode($id_type, 'documents') : $id_type\n      ];\n    }\n\n    if ($files) {\n      $conditions[] = [\n        'field' => $this->db->cfn($cCfg['arch']['files']['files'], $cCfg['tables']['files']),\n        'operator' => 'isnotnull'\n      ];\n    }\n\n    return $this->_getFile($conditions);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 76,
            "endLine": 108,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "_getFileByType",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id_type",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "type"
                },
                {
                    "name": "files",
                    "position": 1,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                },
                {
                    "name": "conditions",
                    "position": 2,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$id",
                        "description": "type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$files"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$conditions"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param array|string $id_type\n   * @param bool         $files\n   * @param array        $conditions\n   * @return null|array\n   *\/"
        },
        "insertFile": {
            "name": "insertFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function insertFile(string $type, array $files = [], string $labels = ''): ?string\n  {\n    $cCfg = $this->getClassCfg();\n    return $this->db->insert(\n      $cCfg['tables']['files'], [\n        $cCfg['arch']['files']['files'] => empty($files) ? null : json_encode($files),\n        $cCfg['arch']['files']['type_doc'] => Str::isUid($type) ? $type : $this->options()->fromCode($type, 'documents'),\n        $cCfg['arch']['files']['labels'] => $labels,\n        $cCfg['arch']['files']['date_added'] => date('Y-m-d H:i:s')\n      ]\n    ) ? $this->db->lastId() : null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 116,
            "endLine": 127,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 1,
            "shortName": "insertFile",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "type",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "files",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": ""
                },
                {
                    "name": "labels",
                    "position": 2,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$files"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $type\n   * @param array  $files\n   * @return null|string\n   *\/"
        },
        "updateFile": {
            "name": "updateFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function updateFile(string $id, array $data): bool\n  {\n    $cCfg = $this->getClassCfg();\n    return Str::isUid($id) && $this->db->update($cCfg['tables']['files'], $data, [$cCfg['arch']['files']['id'] => $id]);\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 135,
            "endLine": 139,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "updateFile",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "data",
                    "position": 1,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    },
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$data"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @param array  $data\n   * @return bool\n   *\/"
        },
        "deleteFile": {
            "name": "deleteFile",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function deleteFile(string $id): bool\n  {\n    if (Str::isUid($id) && !$this->hasLinks($id)) {\n      $cCfg = $this->getClassCfg();\n      \/\/ Can be linked to others\n      return !!$this->db->deleteIgnore($cCfg['tables']['files'], [$cCfg['arch']['files']['id'] => $id]);\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 146,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteFile",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id\n   * @return bool\n   *\/"
        },
        "insertFileLink": {
            "name": "insertFileLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function insertFileLink(string $id_link, string $id_file, bool $mandatory = true): ?int\n  {\n    if (Str::isUid($id_link) && Str::isUid($id_file)) {\n      $cCfg = $this->getClassCfg();\n      return $this->db->insertIgnore(\n        $cCfg['tables']['links'], [\n          $cCfg['arch']['links']['id_link'] => $id_link,\n          $cCfg['arch']['links']['id_file'] => $id_file,\n          $cCfg['arch']['links']['mandatory'] => empty($mandatory) ? 0 : 1\n        ]\n      );\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 164,
            "endLine": 178,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 2,
            "shortName": "insertFileLink",
            "returns": [
                null,
                "int"
            ],
            "arguments": [
                {
                    "name": "id_link",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "link"
                },
                {
                    "name": "id_file",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "file"
                },
                {
                    "name": "mandatory",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": true,
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "link"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "file"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$mandatory"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_link\n   * @param string $id_file\n   * @param bool   $mandatory\n   * @return nul|int\n   *\/"
        },
        "deleteFileLink": {
            "name": "deleteFileLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function deleteFileLink(string $id_link, string $id_file): bool\n  {\n    if (Str::isUid($id_link) && Str::isUid($id_file)) {\n      $cCfg = $this->getClassCfg();\n      return !!$this->db->delete(\n        $cCfg['tables']['links'], [\n          $cCfg['arch']['links']['id_link'] => $id_link,\n          $cCfg['arch']['links']['id_file'] => $id_file\n        ]\n      );\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 186,
            "endLine": 199,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "deleteFileLink",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_link",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "change"
                },
                {
                    "name": "id_file",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "file"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "change"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_change\n   * @param string $id_file\n   * @return bool\n   *\/"
        },
        "_fileExistsOrInsert": {
            "name": "_fileExistsOrInsert",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function _fileExistsOrInsert(string $id_link, string $type, bool $mandatory): ?string\n  {\n    if (Str::isUid($id_link)) {\n      if ($exists = $this->_getFileByType($type, false)) {\n        $id_file = $exists[$this->getClassCfg()['arch']['links']['id_link']];\n      }\n      else {\n        $id_file = $this->insertFile($type);\n      }\n\n      if (Str::isUid($id_file) && !$this->hasFileLink($id_link, $id_file)) {\n        $this->insertFileLink($id_link, $id_file, $mandatory);\n      }\n\n      return $id_file;\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 208,
            "endLine": 226,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 3,
            "numberOfRequiredParameters": 3,
            "shortName": "_fileExistsOrInsert",
            "returns": [
                null,
                "string"
            ],
            "arguments": [
                {
                    "name": "id_link",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "link"
                },
                {
                    "name": "type",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "mandatory",
                    "position": 2,
                    "type": "bool",
                    "type_arr": [
                        "bool"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "link"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$type"
                    },
                    {
                        "tag": "param",
                        "type": "bool",
                        "name": "$mandatory"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_link\n   * @param string $type\n   * @param bool   $mandatory\n   * @return string|null\n   *\/"
        },
        "getFilesLink": {
            "name": "getFilesLink",
            "summary": "Gets the files linked",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function getFilesLink(string $id): ?array\n  {\n    if (Str::isUid($id)) {\n      $cCfg = $this->getClassCfg();\n      return $this->db->rselectAll([\n        'table' => $cCfg['tables']['links'],\n        'fields' => X::mergeArrays(\n          [\n            $this->db->cfn($cCfg['arch']['links']['id_file'], $cCfg['tables']['links']),\n            $this->db->cfn($cCfg['arch']['links']['mandatory'], $cCfg['tables']['links']),\n            'other_link' => 'IF(l.'.$cCfg['arch']['links']['id_link'].' IS NULL, false, true)'\n          ],\n          array_map(fn($f) => $this->db->cfn($f, $cCfg['tables']['links']), $this->tableLinksExtrafields)\n        ),\n        'join' => [[\n          'table' => $cCfg['tables']['files'],\n          'on' => [\n            'conditions' => [[\n              'field' => $this->db->cfn($cCfg['arch']['links']['id_file'], $cCfg['tables']['links']),\n              'exp' => $this->db->cfn($cCfg['arch']['files']['id'], $cCfg['tables']['files']),\n            ]]\n          ]\n        ], [\n          'table' => $cCfg['tables']['links'],\n          'type' => 'left',\n          'alias' => 'l',\n          'on' => [\n            'conditions' => [[\n              'field' => $this->db->cfn($cCfg['arch']['links']['id_file'], $cCfg['tables']['links']),\n              'exp' => 'l.'.$cCfg['arch']['links']['id_file']\n            ], [\n              'field' => 'l.'.$cCfg['arch']['links']['id_link'],\n              'operator' => '!=',\n              'value' => $id\n            ]]\n          ]\n        ]],\n        'where' => [\n          'conditions' => [[\n            'field' => $this->db->cfn($cCfg['arch']['links']['id_link'], $cCfg['tables']['links']),\n            'value' => $id\n          ]]\n        ],\n        'group_by' => [$this->db->cfn($cCfg['arch']['links']['id_file'], $cCfg['tables']['links'])]\n      ]);\n    }\n\n    return null;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 234,
            "endLine": 282,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "getFilesLink",
            "returns": [
                null,
                "array"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Gets the files linked\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Gets the files linked\n   * @param string $id\n   * @return array|null\n   *\/"
        },
        "hasFileLink": {
            "name": "hasFileLink",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function hasFileLink(string $id_link, string $id_file): ?bool\n  {\n    if (Str::isUid($id_link) && Str::isUid($id_file)) {\n      $cCfg = $this->getClassCfg();\n      return !!$this->db->selectOne(\n        $cCfg['tables']['links'],\n        $cCfg['arch']['links']['id_file'],\n        [\n          $cCfg['arch']['links']['id_link'] => $id_link,\n          $cCfg['arch']['links']['id_file'] => $id_file\n        ]\n      );\n    }\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 290,
            "endLine": 303,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "hasFileLink",
            "returns": [
                null,
                "bool"
            ],
            "arguments": [
                {
                    "name": "id_link",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "link"
                },
                {
                    "name": "id_file",
                    "position": 1,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "file"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "link"
                    },
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id",
                        "description": "file"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * @param string $id_link\n   * @param string $id_file\n   * @return null|bool\n   *\/"
        },
        "hasLinks": {
            "name": "hasLinks",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hasLinks(string $id_file){\n    if (Str::isUid($id_file)) {\n      $cCfg = $this->getClassCfg();\n      return !!$this->db->selectAll([\n        'table' => $cCfg['tables']['links'],\n        'fields' => [],\n        'where' => [\n          'conditions' => [[\n            'field' => $cCfg['arch']['links']['id_file'],\n            'value' => $id_file\n          ]]\n        ]\n      ]);\n    }\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 305,
            "endLine": 320,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "hasLinks",
            "returns": [],
            "arguments": [
                {
                    "name": "id_file",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "deleteFileAndLink": {
            "name": "deleteFileAndLink",
            "summary": "Deletes the file and its link.",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Entities\\Tables\\Changes",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Models\/Tts\/TmpFiles.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function deleteFileAndLink(string $id): bool\n  {\n    if (Str::isUid($id)) {\n      if ($links = $this->getFilesLink($id)) {\n        $cCfg = $this->getClassCfg();\n        foreach ($links as $link){\n          if (!$this->deleteFileLink($id, $link[$cCfg['arch']['links']['id_file']])) {\n            return false;\n          }\n\n          $this->deleteFile($link[$cCfg['arch']['links']['id_file']]);\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
            "parent": false,
            "trait": "bbn\\Models\\Tts\\TmpFiles",
            "startLine": 328,
            "endLine": 346,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "deleteFileAndLink",
            "returns": [
                "bool"
            ],
            "arguments": [
                {
                    "name": "id",
                    "position": 0,
                    "type": "string",
                    "type_arr": [
                        "string"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ],
            "doc": {
                "description": "Deletes the file and its link.\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "string",
                        "name": "$id"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n   * Deletes the file and its link.\n   * @param string $id\n   * @return bool\n   *\/"
        }
    },
    "properties": {
        "editable": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Tables\\Changes"
            },
            "declaring_trait": "bbn\\Entities\\Tables\\Changes",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@todo is it used??",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "states": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Tables\\Changes"
            },
            "declaring_trait": "bbn\\Entities\\Tables\\Changes",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": {
                "unready": null,
                "email": 1,
                "untreated": 2,
                "accepted": 3,
                "refused": 4,
                "meeting": 5
            }
        },
        "default_class_cfg": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Tables\\Changes"
            },
            "declaring_trait": "bbn\\Entities\\Models\\EntityTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "default_class_cfg",
                "trait": false,
                "static": true,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Entities\\Models\\EntityTrait",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": {
                "table": "bbn_entities_changes",
                "tables": {
                    "entities_changes": "bbn_entities_changes",
                    "files": "bbn_tmp_files",
                    "links": "bbn_entities_changes_files"
                },
                "arch": {
                    "entities_changes": {
                        "id": "id",
                        "id_entity": "id_entity",
                        "moment": "moment",
                        "state": "state",
                        "notified": "notified",
                        "id_member_auth": "id_member_auth",
                        "cfg": "cfg"
                    },
                    "files": {
                        "id": "id",
                        "files": "files",
                        "type_doc": "type_doc",
                        "labels": "labels",
                        "date_added": "date_added"
                    },
                    "links": {
                        "id_link": "id_link",
                        "id_file": "id_file",
                        "mandatory": "mandatory"
                    }
                }
            }
        },
        "eaFields": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Tables\\Changes"
            },
            "declaring_trait": "bbn\\Entities\\Tables\\Changes",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "tables": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Tables\\Changes"
            },
            "declaring_trait": "bbn\\Entities\\Tables\\Changes",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": []
        },
        "tablesOld": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Tables\\Changes"
            },
            "declaring_trait": "bbn\\Entities\\Tables\\Changes",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "Compatibility with the old version",
                "tags": []
            },
            "parent": false,
            "value": []
        },
        "skipEmailVerfication": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Tables\\Changes"
            },
            "declaring_trait": "bbn\\Entities\\Tables\\Changes",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": false,
            "value": false
        },
        "db": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Db"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Db",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "dbClass"
                    }
                ]
            },
            "parent": {
                "name": "db",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Db"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Db",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "dbClass"
                        }
                    ]
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "errors": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "errors",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "error": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|string"
                    }
                ]
            },
            "parent": {
                "name": "error",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|string"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCode": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "false|int"
                    }
                ]
            },
            "parent": {
                "name": "errorCode",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "false|int"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "errorCodes": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "errorCodes",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": []
            },
            "value": []
        },
        "debug": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "boolean"
                    }
                ]
            },
            "parent": {
                "name": "debug",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "boolean"
                        }
                    ]
                },
                "parent": false,
                "value": false
            },
            "value": false
        },
        "log": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Models\\Cls\\Basic"
            },
            "declaring_trait": "bbn\\Models\\Cls\\Basic",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array"
                    }
                ]
            },
            "parent": {
                "name": "log",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Models\\Cls\\Basic"
                },
                "declaring_trait": "bbn\\Models\\Cls\\Basic",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array"
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "fields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var array",
                "tags": []
            },
            "parent": {
                "name": "fields",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var array",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "class_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "class_cfg",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "class_table": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": {
                "name": "class_table",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var string",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "class_table_index": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "@var string",
                "tags": []
            },
            "parent": {
                "name": "class_table_index",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Models\\Tts\\DbConfig",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "@var string",
                    "tags": []
                },
                "parent": false,
                "value": null
            },
            "value": null
        },
        "rootFilterCfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Configuration for the root filter."
                    }
                ]
            },
            "parent": {
                "name": "rootFilterCfg",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Models\\Tts\\DbTrait",
                "promoted": false,
                "visibility": "protected",
                "doc": {
                    "description": "",
                    "tags": [
                        {
                            "tag": "var",
                            "type": "array",
                            "description": "Configuration for the root filter."
                        }
                    ]
                },
                "parent": false,
                "value": []
            },
            "value": []
        },
        "id_entity": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Entities\\Models\\EntityTrait",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "id_entity",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Entities\\Models\\EntityTrait",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "entities": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Entities\\Models\\Entities",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Entities\\Models\\EntityTrait",
            "promoted": true,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "entities",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "bbn\\Entities\\Models\\Entities",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Entities\\Models\\EntityTrait",
                "promoted": true,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "entity": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "bbn\\Entities\\Entity|bbn\\Models\\Cls\\Nullall",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Entities\\Models\\EntityTrait",
            "promoted": true,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "entity",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "bbn\\Entities\\Entity|bbn\\Models\\Cls\\Nullall",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Entities\\Models\\EntityTrait",
                "promoted": true,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "cache_engine": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Models\\EntityTable"
            },
            "declaring_trait": "bbn\\Models\\Tts\\Cache",
            "promoted": false,
            "visibility": "protected",
            "doc": "",
            "parent": {
                "name": "cache_engine",
                "trait": false,
                "static": false,
                "readonly": false,
                "type": "",
                "declaring": {
                    "name": "bbn\\Entities\\Models\\EntityTable"
                },
                "declaring_trait": "bbn\\Models\\Tts\\Cache",
                "promoted": false,
                "visibility": "protected",
                "doc": "",
                "parent": false,
                "value": null
            },
            "value": null
        },
        "tableLinksExtrafields": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Entities\\Tables\\Changes"
            },
            "declaring_trait": "bbn\\Models\\Tts\\TmpFiles",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": []
        }
    },
    "staticProperties": {
        "editable": [],
        "states": {
            "unready": null,
            "email": 1,
            "untreated": 2,
            "accepted": 3,
            "refused": 4,
            "meeting": 5
        },
        "default_class_cfg": {
            "table": "bbn_entities_changes",
            "tables": {
                "entities_changes": "bbn_entities_changes",
                "files": "bbn_tmp_files",
                "links": "bbn_entities_changes_files"
            },
            "arch": {
                "entities_changes": {
                    "id": "id",
                    "id_entity": "id_entity",
                    "moment": "moment",
                    "state": "state",
                    "notified": "notified",
                    "id_member_auth": "id_member_auth",
                    "cfg": "cfg"
                },
                "files": {
                    "id": "id",
                    "files": "files",
                    "type_doc": "type_doc",
                    "labels": "labels",
                    "date_added": "date_added"
                },
                "links": {
                    "id_link": "id_link",
                    "id_file": "id_file",
                    "mandatory": "mandatory"
                }
            }
        },
        "eaFields": []
    },
    "constants": null,
    "uses": {
        "bbn\\Db": "Db",
        "bbn\\X": "X",
        "bbn\\Str": "Str",
        "bbn\\Entities\\Models\\EntityTable": "EntityTable",
        "bbn\\Entities\\Models\\Entities": "Entities",
        "bbn\\Entities\\Entity": "Entity",
        "bbn\\Models\\Tts\\TmpFiles": "TmpFiles"
    },
    "dummyComments": [
        "\/**\n * Created by PhpStorm.\n * User: BBN\n * Date: 21\/11\/2014\n * Time: 13:51\n *\/"
    ],
    "summary": "",
    "description": "",
    "description_parts": []
}