{
    "doc": {
        "description": "This class generates html form elements with a predefined configuration\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Dec 14, 2012, 04:23:55 +0000",
            "category": "Appui",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.4"
        }
    },
    "name": "bbn\\Html\\Builder",
    "namespace": true,
    "realName": "Builder",
    "realNamespace": "bbn\\Html",
    "traits": [],
    "interfaces": [],
    "fileName": "\/Html\/Builder.php",
    "startLine": 20,
    "endLine": 609,
    "numMethods": 26,
    "numProperties": 14,
    "numConstants": 1,
    "numStaticProperties": 7,
    "interfaceNames": [],
    "isInterface": false,
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": null,
    "isSubclassOf": false,
    "defaultProperties": {
        "types": [
            "text",
            "password",
            "radio",
            "checkbox",
            "hidden",
            "file",
            "color",
            "date",
            "datetime",
            "email",
            "datetime-local",
            "email",
            "month",
            "number",
            "range",
            "search",
            "tel",
            "time",
            "url",
            "week"
        ],
        "widgets": {
            "calendar": "kendoCalendar",
            "date": "kendoDatePicker",
            "autocomplete": "kendoAutoComplete",
            "dropdown": "kendoDropDownList",
            "combo": "kendoComboBox",
            "numeric": "kendoNumericTextBox",
            "time": "kendoTimePicker",
            "datetime": "kendoDateTimePicker",
            "slider": "kendoSlider",
            "rangeslider": "kendoRangeSlider",
            "upload": "kendoUpload",
            "multivalue": "multivalue",
            "editor": "ckeditor"
        },
        "specs": {
            "widgets": []
        },
        "label_class": "bbn-form-label",
        "space_class": "bbn-line-breaker",
        "field_class": "bbn-form-field",
        "button_class": "bbn-button",
        "_defaults": {
            "tag": "input",
            "attr": {
                "type": "text",
                "name": false
            },
            "lang": "fr",
            "data": {
                "sql": false,
                "db": false
            }
        },
        "_current_cfg": null,
        "_elements": [],
        "_cfg": [],
        "_chainable": false,
        "_root_element": false,
        "_current_element": false
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Html",
    "shortName": "Builder",
    "contentConstructor": {
        "returns": []
    },
    "methods": {
        "giveId": {
            "name": "giveId",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function giveId(array &$cfg){\n    if ( !isset($cfg['attr']) ){\n      $cfg['attr'] = [];\n    }\n    if ( !isset($cfg['attr']['id']) ){\n      $cfg['attr']['id'] = bbn\\Str::genpwd(30, 15);\n    }\n  }",
            "parent": false,
            "trait": false,
            "startLine": 81,
            "endLine": 88,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "giveId",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": true,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "specs": {
            "name": "specs",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "  public static function specs($cat, $item)\n  {\n    if ( bbn\\Str::checkName($cat, $item) ){\n      if ( !isset(self::$specs[$cat]) &&\n              is_dir(__DIR__.'\/specs\/'.$cat) ){\n        self::$specs[$cat] = [];\n      }\n      \n      if ( isset(self::$specs[$cat]) ){\n        if ( !isset(self::$specs[$cat][$item]) &&\n                file_exists(__DIR__.'\/specs\/'.$cat.'\/'.$item.'.php') ){\n          self::$specs[$cat][$item] = include_once(__DIR__.'\/specs\/'.$cat.'\/'.$item.'.php');\n        }\n        if ( isset(self::$specs[$cat][$item]) ){\n          return self::$specs[$cat][$item];\n        }\n        self::$specs[$cat][$item] = false;\n      }\n    }\n    return false;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 90,
            "endLine": 110,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "specs",
            "returns": [],
            "arguments": [
                {
                    "name": "cat",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "item",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "record": {
            "name": "record",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "private",
            "final": false,
            "code": "  private function record($method, $cfg){\n    array_push($this->_cfg, ['method' => $method, 'cfg' => $cfg]);\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 112,
            "endLine": 115,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 2,
            "shortName": "record",
            "returns": [],
            "arguments": [
                {
                    "name": "method",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "cfg",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "__construct": {
            "name": "__construct",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function __construct( array|null $cfg = null )\n\t{\n\t\tif ( \\is_array($cfg) ){\n      $this->parameters = $cfg;\n      $this->_defaults = bbn\\X::mergeArrays($this->_defaults, $cfg);\n\t\t}\n\t\t$this->reset();\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 121,
            "endLine": 128,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "__construct",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "null|array",
                    "type_arr": [
                        "null",
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": "",
                    "description": "The default config for the elements"
                }
            ],
            "doc": {
                "description": "",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The default config for the elements"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * @param array $cfg The default config for the elements\n\t *\/"
        },
        "reset": {
            "name": "reset",
            "summary": "Sets the configuration back to its default value",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function reset()\n\t{\n\t\t$this->_current_cfg = [];\n\t\t$this->_cfg = [];\n    $this->_root_element = false;\n    $this->_current_element = false;\n\t\tforeach ( $this->_defaults as $k => $v ){\n\t\t\t$this->_current_cfg[$k] = $v;\n\t\t}\n    return $this;\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 133,
            "endLine": 143,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "reset",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Sets the configuration back to its default value",
                "tags": []
            },
            "comments": "  \/**\n\t * Sets the configuration back to its default value\n\t *\/"
        },
        "chained": {
            "name": "chained",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function chained()\n  {\n    $this->_chainable = 1;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 145,
            "endLine": 149,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "chained",
            "returns": [],
            "arguments": []
        },
        "unchained": {
            "name": "unchained",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function unchained()\n  {\n    $this->_chainable = false;\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 151,
            "endLine": 155,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "unchained",
            "returns": [],
            "arguments": []
        },
        "exportConfig": {
            "name": "exportConfig",
            "summary": "Returns the current configuration",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function exportConfig()\n\t{\n    if ( isset($this->_root_element) ){\n      return bbn\\Str::makeReadable($this->_root_element->getConfig());\n    }\n\t\treturn bbn\\Str::makeReadable($this->_cfg);\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 162,
            "endLine": 168,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "exportConfig",
            "returns": [],
            "arguments": [],
            "doc": {
                "description": "Returns the current configuration\n",
                "params": [],
                "return": ""
            },
            "comments": "  \/**\n\t * Returns the current configuration\n\t * @return array\n\t *\/"
        },
        "saveConfig": {
            "name": "saveConfig",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function saveConfig($cfg)\n  {\n    return $this->_chainable ? $this : $cfg;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 170,
            "endLine": 173,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "saveConfig",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "loadConfig": {
            "name": "loadConfig",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function loadConfig($cfg)\n  {\n    if ( $this->data['db'] && isset($cfg['data']['db']) && \\is_string($cfg['data']['db']) ){\n      $cfg['data']['db'] = $this->data['db'];\n    }\n    foreach ( $cfg as $c ){\n      $this->$c['method']($c['cfg']);\n    }\n    return $this->_chainable ? $this : $this->exportConfig();\n  }",
            "parent": false,
            "trait": false,
            "startLine": 175,
            "endLine": 184,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "loadConfig",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "html": {
            "name": "html",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function html($with_js=false)\n  {\n    if ( isset($this->_root_element) ){\n      return $this->_root_element->html($with_js);\n    }\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 186,
            "endLine": 192,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "html",
            "returns": [],
            "arguments": [
                {
                    "name": "with_js",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "script": {
            "name": "script",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function script($with_ele=1)\n  {\n    if ( isset($this->_root_element) ){\n      return $this->_root_element->script();\n    }\n    return '';\n  }",
            "parent": false,
            "trait": false,
            "startLine": 194,
            "endLine": 200,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "script",
            "returns": [],
            "arguments": [
                {
                    "name": "with_ele",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "option": {
            "name": "option",
            "summary": "Change an option in the current configuration - Chainable",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function option($opt)\n\t{\n\t\t$args = \\func_get_args();\n\t\tif ( \\is_array($opt) && isset($opt[0], $this->_defaults[$opt[0]]) ){\n\t\t\t$this->_current_cfg[$opt[0]] = $opt[1];\n\t\t}\n\t\telse if ( isset($args[0], $args[1], $this->_defaults[$args[0]]) ){\n\t\t\t$this->_current_cfg[$args[0]] = $args[1];\n\t\t}\n\t\telse{\n\t\t\tthrow new InvalidArgumentException('This configuration argument is imaginary... Sorry! :)');\n\t\t}\n    return $this;\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 207,
            "endLine": 220,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "option",
            "returns": [],
            "arguments": [
                {
                    "name": "opt",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Either an array with the param name and value, or 2 strings in the same order"
                }
            ],
            "doc": {
                "description": "Change an option in the current configuration - Chainable\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array|string",
                        "name": "$opt",
                        "description": "Either an array with the param name and value, or 2 strings in the same order"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Change an option in the current configuration - Chainable\n\t * @param array|string $opt Either an array with the param name and value, or 2 strings in the same order\n\t * @return bbn\\Html\\Builder\n\t *\/"
        },
        "append": {
            "name": "append",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function append($ele)\n  {\n    if ( $this->_current_element ){\n      $this->_current_element->append($ele);\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 223,
            "endLine": 229,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "append",
            "returns": [],
            "arguments": [
                {
                    "name": "ele",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "hidden": {
            "name": "hidden",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function hidden(array $cfg, $force=false)\n  {\n    $this->record('hidden', $cfg);\n    $r = [];\n    $i = 0;\n    foreach ( $cfg as $k => $v ){\n      $r[$i] = $this->input([\n          'field' => 'hidden',\n          'attr' => [\n              'name' => $k,\n              'value' => $v\n          ]\n      ], 1);\n      $this->append($r[$i]);\n      $i++;\n    }\n    return $this->_chainable && !$force ? $this : [$label, $container];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 231,
            "endLine": 248,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "hidden",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "labelInput": {
            "name": "labelInput",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function labelInput($cfg, $force=false)\n  {\n    $this->record('label_input', $cfg);\n    $ele = $this->input($cfg);\n    $label = $this->label($ele->getConfig());\n    $container = new Element([\n        'tag' => 'div',\n        'attr' => [\n            'class' => self::$field_class\n        ]\n    ]);\n    $container->append($ele);\n\n    $this->append($label)->append($container);\n\n    return $this->_chainable && !$force ? $this : [$label, $container];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 249,
            "endLine": 265,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "labelInput",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "centralInput": {
            "name": "centralInput",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function centralInput($cfg, $force=false)\n  {\n    $this->record('central_input', $cfg);\n    $ele = $this->input($cfg);\n    $container = new Element([\n        'tag' => 'div',\n        'attr' => [\n            'class' => self::$space_class.' bbn-c'\n        ]\n    ]);\n    $container->append($ele);\n    $this->append($container);\n    return $this->_chainable && !$force ? $this : $container;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 267,
            "endLine": 280,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "centralInput",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "fakeLabel": {
            "name": "fakeLabel",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fakeLabel(array $cfg, $force=false)\n  {\n    $this->record('fake_label', $cfg);\n    $ele = new Element($cfg);\n    $label = $this->label($cfg);\n    $container = new Element([\n        'tag' => 'div',\n        'attr' => [\n            'class' => self::$field_class\n        ]\n    ]);\n    $container->append($ele);\n    $this->append($label)->append($container);\n    return $this->_chainable && !$force ? $this : [$label, $container];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 282,
            "endLine": 296,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "fakeLabel",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "type_arr": [
                        "array"
                    ],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "space": {
            "name": "space",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function space($cfg=null, $force=false)\n  {\n    $this->record('space', $cfg);\n    if ( !\\is_null($cfg) ){\n      if ( \\is_string($cfg) ){\n        $cfg = [\n            'text' => $cfg\n        ];\n      }\n    }\n    if ( !\\is_array($cfg) ){\n      $cfg = [];\n    }\n    $cfg['tag'] = 'div';\n    if ( !isset($cfg['attr']) ){\n      $cfg['attr'] = [];\n    }\n    $cfg['attr']['class'] = self::$space_class;\n    if ( !isset($cfg['text']) && !isset($cfg['content']) ){\n      $cfg['content'] = '&nbsp;';\n    }\n    $space = new Element($cfg);\n    $this->append($space);\n    return $this->_chainable && !$force ? $this : $space;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 298,
            "endLine": 322,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "space",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "labelButton": {
            "name": "labelButton",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function labelButton($cfg, $force=false){\n    $this->record('label_button', $cfg);\n    $cont = new Element('div');\n    $ele = $this->button($cfg, 1);\n    \/\/ Submit by default!\n    if ( $this->_root_element && !\\is_string($ele->attr('type')) ){\n      $ele->attr('type', 'submit');\n    }\n    $cont->addClass(self::$field_class)->append($ele);\n    $label = $this->label(' ');\n    $this->append($label)->append($cont);\n    return $this->_chainable && !$force ? $this : [$label, $cont];\n  }",
            "parent": false,
            "trait": false,
            "startLine": 324,
            "endLine": 336,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "labelButton",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "form": {
            "name": "form",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function form($cfg)\n  {\n    $this->record('form', $cfg);\n    $e = new Form($cfg, $force=false);\n    $this->_root_element =& $e;\n    $this->_current_element =& $e;\n    return $this->_chainable && !$force ? $this : $this->_root_element;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 338,
            "endLine": 345,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "form",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "fieldset": {
            "name": "fieldset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function fieldset($title=null, $force=false)\n  {\n    $this->record('fieldset', $title);\n    if ( \\is_array($title) ){\n\n      $title['tag'] = 'fieldset';\n      if ( isset($title['legend']) ){\n        $legend_txt = $title['legend'];\n        unset($title['legend']);\n      }\n      $fieldset = new Element($title);\n      $fieldset->addClass(\"bbn-section bbn-widget\");\n\n      if ( isset($legend_txt) ){\n        $legend = new Element('legend');\n        $legend->text($legend_txt);\n        $fieldset->append($legend);\n      }\n    }\n    else{\n\n      $fieldset = new Element('fieldset');\n      $fieldset->addClass(\"bbn-section bbn-widget\");\n\n      if ( !\\is_null($title) ){\n        $legend = new Element('legend');\n        $legend->text($title);\n        $fieldset->append($legend);\n      }\n    }\n    if ( $this->_root_element ){\n      $this->_root_element->append($fieldset);\n    }\n    else{\n      $this->_root_element =& $fieldset;\n    }\n    $this->_current_element =& $fieldset;\n    return $this->_chainable && !$force ? $this : $fieldset;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 347,
            "endLine": 385,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 0,
            "shortName": "fieldset",
            "returns": [],
            "arguments": [
                {
                    "name": "title",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        },
        "endFieldset": {
            "name": "endFieldset",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function endFieldset(){\n    $this->record('end_fieldset', []);\n    if ( $this->_current_element->tag === 'fieldset' ){\n      $this->_current_element =& $this->_root_element;\n    }\n    return $this;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 387,
            "endLine": 393,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "shortName": "endFieldset",
            "returns": [],
            "arguments": []
        },
        "label": {
            "name": "label",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function label($cfg)\n  {\n    if ( isset($cfg['null']) && $cfg['null'] ){\n      $label = [\n          'tag' => 'div',\n          'attr' => [\n              'class' => self::$label_class\n          ],\n          'content' => []\n      ];\n      $tmp = [\n          'tag' => 'label',\n          'text' => isset($cfg['label']) ? $cfg['label'] : ' '\n      ];\n      if ( isset($cfg['attr']['id']) ){\n        $tmp['attr'] = [\n            'for' => $cfg['attr']['id']\n        ];\n      }\n      array_push($label['content'], $tmp);\n      \n      $label_content = [\n          'tag' => 'div',\n          'css' => [\n              'display' => 'block',\n              'position' => 'absolute',\n              'right' => '0px',\n              'top' => '3px'\n          ],\n          'content' => [\n              [\n                  'tag' => 'span',\n                  'text' => 'Null?  '\n              ],\n              [\n                  'tag' => 'input',\n                  'attr' => [\n                      'id' => bbn\\Str::genpwd(),\n                      'type' => 'checkbox',\n                  ],\n                  'events' => [\n                      'click' => 'function(e){\n                        $(\"#'.$cfg['attr']['id'].'\").prop(\"disabled\", $(this).is(\":checked\"));'.\n                      ( isset($cfg['widget']['name']) ? '\n                        bbn.fn.log(\"'.$cfg['widget']['name'].'\");\n                        try{\n                          $(\"#'.$cfg['attr']['id'].'\").'.$cfg['widget']['name'].'(\"enable\", (!$(this).is(\":checked\")));\n                        }\n                        catch(err){\n                          bbn.fn.log(err);\n                        }' : '' ).\n                      '\n                      }'\n                  ]\n              ]\n          ]\n      ];\n      if ( empty($cfg['attr']['value']) ){\n        $label_content['content'][1]['attr']['checked'] = true;\n      }\n      \n      array_push($label['content'], $label_content);\n    }\n    else{\n      $label = [\n          'tag' => 'label',\n          'text' => (isset($cfg['label']) ? $cfg['label'] : ' '),\n          'attr' => [\n              'class' => self::$label_class\n          ]\n      ];\n      if ( isset($cfg['attr']['id']) ){\n        $label['attr']['for'] = $cfg['attr']['id'];\n      }\n    }\n    return new Element($label);\n  }",
            "parent": false,
            "trait": false,
            "startLine": 395,
            "endLine": 471,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "shortName": "label",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "input": {
            "name": "input",
            "summary": "Generates a whole input configuration array by combining the passed and default configurations",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "\tpublic function input($cfg=array())\n\t{\n\t\tif ( \\is_array($cfg) && isset($cfg['attr']['name']) ){\n      \n      self::giveId($cfg);\n      if ( isset($cfg['field']) ){\n        $cfg = bbn\\X::mergeArrays(self::specs('fields', $cfg['field']), $cfg);\n      }\n      \n      \/*\n      if ( !isset($cfg['tag']) ){\n        $cfg['tag'] = 'input';\n      }\n      if ( !isset($cfg['attr']['type']) ){\n        $cfg['attr']['type'] = 'text';\n      }\n      *\/\n\n      if ( isset($cfg['data']) ){\n        if ( isset($cfg['data']['sql'], $this->_current_cfg['data']['db']) ){\n          $db =& $this->_current_cfg['data']['db'];\n          if ( !isset($cfg['widget']['options']['dataSource']) ){\n            $cfg['widget']['options']['dataSource'] = [];\n          }\n          $count = ( $r = $db->query($cfg['data']['sql']) ) ? $r->count() : 0;\n          if ( $count <= self::max_values_at_once ){\n            if ( $ds = $db->getIrows($cfg['data']['sql']) ){\n              foreach ( $ds as $d ){\n                if ( \\count($d) > 1 ){\n                  array_push($cfg['widget']['options']['dataSource'], [\n                      'value' => $d[0],\n                      'text' => $d[1]\n                  ]);\n                }\n                else{\n                  array_push($cfg['widget']['options']['dataSource'], $d[0]);\n                }\n              }\n            }\n          }\n          else{\n            $cfg['field'] = 'autocomplete';\n          }\n        }\n        else if ( \\is_array($cfg['data']) && (\\count($cfg['data']) > 0) ){\n          if ( isset($cfg['data'][0]) ){\n            $cfg['widget']['options']['dataSource'] = $cfg['data'];\n          }\n          else{\n            $cfg['widget']['options']['dataSource'] = [];\n            foreach ( $cfg['data'] as $k => $v ){\n              array_push($cfg['widget']['options']['dataSource'], [\n                  'value' => $k,\n                  'text' => $v\n              ]);\n            }\n          }\n        }\n        if ( isset($cfg['widget']['options']['dataSource'][0]['text']) ){\n          $cfg['widget']['options']['dataTextField'] = 'text';\n          $cfg['widget']['options']['dataValueField'] = 'value';\n        }\n\t\t\t}\n\n      if ( \\is_array($cfg) ){\n        \/\/ Size calculation\n        if ( isset($cfg['attr']['maxlength']) && !isset($cfg['attr']['size']) ){\n          if ( $cfg['attr']['maxlength'] <= 20 ){\n            $cfg['attr']['size'] = (int)$cfg['attr']['maxlength'];\n          }\n        }\n        if ( isset($cfg['attr']['size'], $cfg['attr']['minlength']) && $cfg['attr']['size'] < $cfg['attr']['minlength']){\n          $cfg['attr']['size'] = (int)$cfg['attr']['minlength'];\n        }\n        \n        \n\n\n        $cfg = array_filter($cfg, function($a){\n          return !( \\is_array($a) && \\count($a) === 0 );\n        });\n\n      }\n      \n      if ( isset($cfg['null']) && $cfg['null'] ){\n        if ( empty($cfg['attr']['value']) ){\n          $cfg['attr']['value'] = null;\n          $cfg['attr']['disabled'] = true;\n          if ( isset($cfg['widget']) ){\n            if ( !isset($cfg['script']) ){\n              $cfg['script'] = '';\n            }\n            \/*\n            $cfg['script'] .= 'if ( $(\"#'.$cfg['attr']['id'].'\").data(\"'.$cfg['widget']['name'].'\") ){\n              $(\"#'.$cfg['attr']['id'].'\").data(\"'.$cfg['widget']['name'].'\").enable(false);\n            }\n            else if ( $(\"#'.$cfg['attr']['id'].'\").'.$cfg['widget']['name'].' ){\n              $(\"#'.$cfg['attr']['id'].'\").'.$cfg['widget']['name'].'(\"enable\", false);\n            }';\n             * \n             *\/\n          }\n        }\n      }\n      $t = new Input($cfg);\n      return $t;\n\t\t}\n\t\treturn false;\n\t}",
            "parent": false,
            "trait": false,
            "startLine": 478,
            "endLine": 586,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "shortName": "input",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": [],
                    "default_name": "",
                    "description": "The input's config"
                }
            ],
            "doc": {
                "description": "Generates a whole input configuration array by combining the passed and default configurations\n",
                "params": [
                    {
                        "tag": "param",
                        "type": "array",
                        "name": "$cfg",
                        "description": "The input's config"
                    }
                ],
                "return": ""
            },
            "comments": "  \/**\n\t * Generates a whole input configuration array by combining the passed and default configurations\n\t * @param array $cfg The input's config\n\t * @return array\n\t *\/"
        },
        "button": {
            "name": "button",
            "summary": "",
            "description": "",
            "description_parts": [],
            "class": "bbn\\Html\\Builder",
            "filename": "\/home\/nabab\/web\/_COMPOSER\/dev\/vendor\/bbn\/bbn\/src\/bbn\/Html\/Builder.php",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "  public function button($cfg, $force=false)\n  {\n    if ( \\is_string($cfg) ){\n      $cfg = [\n          'text' => $cfg\n      ];\n      if ( !isset($cfg['attr']) ){\n        $cfg['attr'] = [];\n      }\n    }\n    if ( !isset($cfg['attr']['class']) ){\n      $cfg['attr']['class'] = self::$button_class;\n    }\n    else{\n      $cfg['attr']['class'] .= ' '.self::$button_class;\n    }\n    self::giveId($cfg);\n    $cfg['tag'] = 'button';\n    $e = new Element($cfg);\n    return $this->_chainable && !$force ? $this : $e;\n  }",
            "parent": false,
            "trait": false,
            "startLine": 588,
            "endLine": 608,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 2,
            "numberOfRequiredParameters": 1,
            "shortName": "button",
            "returns": [],
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                },
                {
                    "name": "force",
                    "position": 1,
                    "type": "",
                    "type_arr": [],
                    "variadic": false,
                    "reference": false,
                    "required": false,
                    "has_default": true,
                    "default": false,
                    "default_name": ""
                }
            ]
        }
    },
    "properties": {
        "_defaults": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array The default field's configuration",
                "tags": []
            },
            "parent": false,
            "value": {
                "tag": "input",
                "attr": {
                    "type": "text",
                    "name": false
                },
                "lang": "fr",
                "data": {
                    "sql": false,
                    "db": false
                }
            }
        },
        "_current_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "private",
            "doc": {
                "description": "@var array The current default configuration",
                "tags": []
            },
            "parent": false,
            "value": null
        },
        "_elements": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": []
        },
        "_cfg": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": []
        },
        "_chainable": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "_root_element": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "_current_element": {
            "trait": false,
            "static": false,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "private",
            "doc": "",
            "parent": false,
            "value": false
        },
        "types": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "@var array All the known type's values for inputs",
                "tags": []
            },
            "parent": false,
            "value": [
                "text",
                "password",
                "radio",
                "checkbox",
                "hidden",
                "file",
                "color",
                "date",
                "datetime",
                "email",
                "datetime-local",
                "email",
                "month",
                "number",
                "range",
                "search",
                "tel",
                "time",
                "url",
                "week"
            ]
        },
        "widgets": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "public",
            "doc": {
                "description": "",
                "tags": [
                    {
                        "tag": "var",
                        "type": "array",
                        "description": "Kendo Widgets' function names and config properties\n @todo Think about moving this somewhere so we can change widget API"
                    }
                ]
            },
            "parent": false,
            "value": {
                "calendar": "kendoCalendar",
                "date": "kendoDatePicker",
                "autocomplete": "kendoAutoComplete",
                "dropdown": "kendoDropDownList",
                "combo": "kendoComboBox",
                "numeric": "kendoNumericTextBox",
                "time": "kendoTimePicker",
                "datetime": "kendoDateTimePicker",
                "slider": "kendoSlider",
                "rangeslider": "kendoRangeSlider",
                "upload": "kendoUpload",
                "multivalue": "multivalue",
                "editor": "ckeditor"
            }
        },
        "specs": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": {
                "widgets": []
            }
        },
        "label_class": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": "bbn-form-label"
        },
        "space_class": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": "bbn-line-breaker"
        },
        "field_class": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": "bbn-form-field"
        },
        "button_class": {
            "trait": false,
            "static": true,
            "readonly": false,
            "type": "",
            "declaring": {
                "name": "bbn\\Html\\Builder"
            },
            "declaring_trait": "bbn\\Html\\Builder",
            "promoted": false,
            "visibility": "public",
            "doc": "",
            "parent": false,
            "value": "bbn-button"
        }
    },
    "staticProperties": {
        "types": [
            "text",
            "password",
            "radio",
            "checkbox",
            "hidden",
            "file",
            "color",
            "date",
            "datetime",
            "email",
            "datetime-local",
            "email",
            "month",
            "number",
            "range",
            "search",
            "tel",
            "time",
            "url",
            "week"
        ],
        "widgets": {
            "calendar": "kendoCalendar",
            "date": "kendoDatePicker",
            "autocomplete": "kendoAutoComplete",
            "dropdown": "kendoDropDownList",
            "combo": "kendoComboBox",
            "numeric": "kendoNumericTextBox",
            "time": "kendoTimePicker",
            "datetime": "kendoDateTimePicker",
            "slider": "kendoSlider",
            "rangeslider": "kendoRangeSlider",
            "upload": "kendoUpload",
            "multivalue": "multivalue",
            "editor": "ckeditor"
        },
        "specs": {
            "widgets": []
        },
        "label_class": "bbn-form-label",
        "space_class": "bbn-line-breaker",
        "field_class": "bbn-form-field",
        "button_class": "bbn-button"
    },
    "constants": {
        "max_values_at_once": {
            "name": "max_values_at_once",
            "value": 200,
            "class": "bbn\\Html\\Builder",
            "parent": false,
            "private": false,
            "protected": false,
            "public": true,
            "final": false,
            "doc": {
                "description": "@var int The maximum number of values in a dropdown list",
                "tags": []
            }
        }
    },
    "uses": {
        "bbn": "bbn"
    },
    "dummyComments": [
        "\/**\n * @package html\n *\/",
        "\/**\n * This class generates html form elements with a predefined configuration\n *\n *\n * @author Thomas Nabet <thomas.nabet@gmail.com>\n * @copyright BBN Solutions\n * @since Dec 14, 2012, 04:23:55 +0000\n * @category  Appui\n * @license   http:\/\/www.opensource.org\/licenses\/mit-license.php MIT\n * @version 0.4\n*\/"
    ],
    "summary": "This class generates html form elements with a predefined configuration",
    "description": "",
    "description_parts": []
}