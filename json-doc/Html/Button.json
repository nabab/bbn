{
    "doc": {
        "description": "HTML Class creating a form INPUT\n",
        "tags": {
            "author": "Thomas Nabet <thomas.nabet@gmail.com>",
            "copyright": "BBN Solutions",
            "since": "Apr 2, 2013, 21:27:42 +0000",
            "category": "MVC",
            "license": "http:\/\/www.opensource.org\/licenses\/mit-license.php MIT",
            "version": "0.4",
            "todo": "???"
        }
    },
    "name": "bbn\\Html\\Button",
    "namespace": true,
    "traits": [],
    "interfaces": [],
    "fileName": "\/Html\/Button.php",
    "startLine": 19,
    "endLine": 96,
    "contentConstructor": {
        "file": "bbn\\Html\\Button",
        "returns": null
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "summary": "This will build a new HTML form element according to the given configuration.",
            "description": "Only name and tag are mandatory, then other values depending on the tag",
            "description_parts": [
                {
                    "type": "text",
                    "content": "<p>Only name and tag are mandatory, then other values depending on the tag<\/p>"
                }
            ],
            "file": "bbn\\Html\\Button",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($cfg)\n  {\n    if ( \\is_string($cfg) ){\n      $cfg = [\n          'type' => 'submit',\n          'text' => $cfg\n      ];\n    }\n    $cfg['tag'] = 'button';\n    parent::__construct($cfg);\n    return $this;\n  }",
            "startLine": 83,
            "endLine": 94,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "__construct",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($cfg)\n  {\n    self::_init();\n    if ( \\is_string($cfg) && !empty($cfg) ){\n      \/\/ Looking for classes, IDs, or name (|) in the string\n      preg_match_all(\"\/([\\\\.|\\\\||#]{1})([A-z0-9-]+)\/\", $cfg, $m);\n      $classes = [];\n      $id = false;\n      $name = false;\n      if ( isset($m[0], $m[1], $m[2]) && \\count($m[0]) > 0 ){\n        foreach ( $m[1] as $k => $v ){\n          if ( $v === '.' ){\n            array_push($classes, $m[2][$k]);\n          }\n          else if ( $v === '#' ){\n            $id = $m[2][$k];\n          }\n          else if ( $v === '|' ){\n            $name = $m[2][$k];\n          }\n        }\n      }\n      \/\/ Looking for the tag (mandatory)\n      preg_match_all(\"\/^([A-z0-9-]+)\/\", $cfg, $n);\n      if ( isset($n[0]) && \\count($n[0]) > 0 ){\n        $cfg = ['tag' => $n[0][0]];\n        if ( (\\count($classes) > 0) || $id || $name ){\n          $cfg['attr'] = [];\n          if ( \\count($classes) > 0 ){\n            $cfg['attr']['class'] = implode(\" \", $classes);\n          }\n          if ( $id ){\n            $cfg['attr']['id'] = $id;\n          }\n          if ( $name ){\n            $cfg['attr']['name'] = $name;\n          }\n        }\n      }\n    }\n    $cfg = self::cast($cfg);\n\t\tif ( self::checkConfig($cfg) ){\n      foreach ( $cfg as $key => $val ){\n        if ( $key === 'tag' ){\n          $this->tag = strtolower($val);\n        }\n        else if ( property_exists(\\get_called_class(), $key) ){\n          $this->$key = $val;\n        }\n      }\n      $this->update();\n    }\n    else{\n      $err[] = self::getError();\n      if ( isset($cfg['tag']) ){\n        $err[] = 'Tag: '.$cfg['tag'];\n      }\n      if ( isset($cfg['name']) ){\n        $err[] = 'Name: '.$cfg['name'];\n      }\n      var_dump($err);\n    }\n  }",
                "startLine": 306,
                "endLine": 368,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "The configuration"
                }
            ]
        },
        "checkConfig": {
            "name": "checkConfig",
            "summary": "Confront the JSON schema object with the current configuration",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($cfg)\n  {\n      self::$error = \"The configuration is not a valid array\";\n      return false;\n    }\n    self::$validator->check(bbn\\X::toObject($cfg), static::$schema);\n    self::$error = '';\n    if ( self::$validator->isValid() ){\n      return 1;\n    }\n    foreach ( self::$validator->getErrors() as $error ){\n      self::$error .= sprintf(\"[%s] %s\",$error['property'], $error['message']);\n      var_dump($cfg);\n    }\n    return false;\n  }",
            "startLine": 232,
            "endLine": 247,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "checkConfig",
                "summary": "Confront the JSON schema object with the current configuration",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": true,
                "visibility": "public",
                "final": false,
                "code": "function($cfg)\n  {\n      self::$error = \"The configuration is not a valid array\";\n      return false;\n    }\n    self::$validator->check(bbn\\X::toObject($cfg), static::$schema);\n    self::$error = '';\n    if ( self::$validator->isValid() ){\n      return 1;\n    }\n    foreach ( self::$validator->getErrors() as $error ){\n      self::$error .= sprintf(\"[%s] %s\",$error['property'], $error['message']);\n      var_dump($cfg);\n    }\n    return false;\n  }",
                "startLine": 232,
                "endLine": 247,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "Configuration"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "Configuration"
                }
            ]
        },
        "getError": {
            "name": "getError",
            "summary": "Returns the current error(s)",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return self::$error;\n  }",
            "startLine": 254,
            "endLine": 257,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getError",
                "summary": "Returns the current error(s)",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": true,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return self::$error;\n  }",
                "startLine": 254,
                "endLine": 257,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "cssToString": {
            "name": "cssToString",
            "summary": "Generates style string for a HTML tag",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": true,
            "visibility": "public",
            "final": false,
            "code": "function($css)\n  {\n      return ' style=\"'.bbn\\Str::escapeDquotes($css).'\"';\n    }\n    else if ( \\is_array($css) && \\count($css) > 0 ){\n      $st = '';\n      foreach ( $css as $prop => $val ){\n        $st .= $prop.':'.$val.';';\n      }\n      return ' style=\"'.bbn\\Str::escapeDquotes($st).'\"';\n    }\n  }",
            "startLine": 266,
            "endLine": 277,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "cssToString",
                "summary": "Generates style string for a HTML tag",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": true,
                "visibility": "public",
                "final": false,
                "code": "function($css)\n  {\n      return ' style=\"'.bbn\\Str::escapeDquotes($css).'\"';\n    }\n    else if ( \\is_array($css) && \\count($css) > 0 ){\n      $st = '';\n      foreach ( $css as $prop => $val ){\n        $st .= $prop.':'.$val.';';\n      }\n      return ' style=\"'.bbn\\Str::escapeDquotes($st).'\"';\n    }\n  }",
                "startLine": 266,
                "endLine": 277,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "css",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": "",
                        "description": "CSS properties\/values array"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "css",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": "",
                    "description": "CSS properties\/values array"
                }
            ]
        },
        "css": {
            "name": "css",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function(array $cfg)\n  {\n      if ( !bbn\\Str::isNumber($i) ){\n        $this->css[$i] = $k;\n      }\n    }\n    $this->update();\n    return $this;\n  }",
            "startLine": 279,
            "endLine": 287,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "css",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function(array $cfg)\n  {\n      if ( !bbn\\Str::isNumber($i) ){\n        $this->css[$i] = $k;\n      }\n    }\n    $this->update();\n    return $this;\n  }",
                "startLine": 279,
                "endLine": 287,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "cfg",
                        "position": 0,
                        "type": "array",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "cfg",
                    "position": 0,
                    "type": "array",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "addClass": {
            "name": "addClass",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($class)\n  {\n      $this->attr['class'] = $class;\n    }\n    else{\n      $cls = explode(\" \", $this->attr['class']);\n      if ( !\\in_array($class, $cls) ){\n        $this->attr['class'] .= ' '.$class;\n      }\n    }\n    $this->update();\n    return $this;\n  }",
            "startLine": 289,
            "endLine": 301,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "addClass",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($class)\n  {\n      $this->attr['class'] = $class;\n    }\n    else{\n      $cls = explode(\" \", $this->attr['class']);\n      if ( !\\in_array($class, $cls) ){\n        $this->attr['class'] .= ' '.$class;\n      }\n    }\n    $this->update();\n    return $this;\n  }",
                "startLine": 289,
                "endLine": 301,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "class",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "class",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "append": {
            "name": "append",
            "summary": "Add an element to the content, or a string if it's one",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($ele)\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $ele ){\n      if ( !isset($this->content) ){\n        if ( \\is_array($ele) && isset($ele[0]) ){\n          $this->content = $ele;\n        }\n        else{\n          $this->content = \\is_object($ele) ? [$ele] : $ele;\n        }\n      }\n      else if ( \\is_array($this->content) ){\n        if ( \\is_array($ele) ){\n          array_merge($this->content, $ele);\n        }\n        else{\n          array_push($this->content, $ele);\n        }\n      }\n      else if ( \\is_string($this->content) ){\n        if ( \\is_array($ele) ){\n          foreach ( $ele as $e ){\n            $this->content .= $e->html();\n          }\n        }\n        else{\n          $this->content .= \\is_object($ele) ? $ele->html() : $ele;\n        }\n      }\n    }\n    return $this;\n  }",
            "startLine": 403,
            "endLine": 435,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "append",
                "summary": "Add an element to the content, or a string if it's one",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($ele)\n  {\n    $args = \\func_get_args();\n    foreach ( $args as $ele ){\n      if ( !isset($this->content) ){\n        if ( \\is_array($ele) && isset($ele[0]) ){\n          $this->content = $ele;\n        }\n        else{\n          $this->content = \\is_object($ele) ? [$ele] : $ele;\n        }\n      }\n      else if ( \\is_array($this->content) ){\n        if ( \\is_array($ele) ){\n          array_merge($this->content, $ele);\n        }\n        else{\n          array_push($this->content, $ele);\n        }\n      }\n      else if ( \\is_string($this->content) ){\n        if ( \\is_array($ele) ){\n          foreach ( $ele as $e ){\n            $this->content .= $e->html();\n          }\n        }\n        else{\n          $this->content .= \\is_object($ele) ? $ele->html() : $ele;\n        }\n      }\n    }\n    return $this;\n  }",
                "startLine": 403,
                "endLine": 435,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "ele",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "ele",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "getConfig": {
            "name": "getConfig",
            "summary": "Returns the current configuration.",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->update();\n\t\t$tmp = bbn\\X::removeEmpty($this->cfg);\n    if ( isset($tmp['content']) && \\is_array($tmp['content']) ){\n      foreach ( $tmp['content'] as $i => $c ){\n        if ( \\is_object($c) ){\n          if (method_exists($c, 'get_config') ){\n            $tmp['content'][$i] = $c->getConfig();\n          }\n        }\n      }\n    }\n    return $tmp;\n  }",
            "startLine": 441,
            "endLine": 455,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getConfig",
                "summary": "Returns the current configuration.",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    $this->update();\n\t\t$tmp = bbn\\X::removeEmpty($this->cfg);\n    if ( isset($tmp['content']) && \\is_array($tmp['content']) ){\n      foreach ( $tmp['content'] as $i => $c ){\n        if ( \\is_object($c) ){\n          if (method_exists($c, 'get_config') ){\n            $tmp['content'][$i] = $c->getConfig();\n          }\n        }\n      }\n    }\n    return $tmp;\n  }",
                "startLine": 441,
                "endLine": 455,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "getParam": {
            "name": "getParam",
            "summary": "Returns the current configuration  HOW???",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return bbn\\Str::makeReadable($this->getConfig());\n  }",
            "startLine": 462,
            "endLine": 465,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "getParam",
                "summary": "Returns the current configuration  HOW???",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return bbn\\Str::makeReadable($this->getConfig());\n  }",
                "startLine": 462,
                "endLine": 465,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "showConfig": {
            "name": "showConfig",
            "summary": "Returns the current configuration for PHP",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return bbn\\Str::export(bbn\\Str::makeReadable($this->getConfig()), 1);\n  }",
            "startLine": 472,
            "endLine": 475,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "showConfig",
                "summary": "Returns the current configuration for PHP",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return bbn\\Str::export(bbn\\Str::makeReadable($this->getConfig()), 1);\n  }",
                "startLine": 472,
                "endLine": 475,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "script": {
            "name": "script",
            "summary": "Returns the javascript coming with the object",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($with_ele = 1)\n  {\n    $this->update();\n\t\t$r = '';\n\t\tif ( isset($this->attr['id']) ){\n      if ( isset($this->cfg['events']) ){\n        foreach ( $this->cfg['events'] as $event => $fn ){\n          $r .= '.'.$event.'('.\n                  ( strpos($fn, 'function') === 0 ? $fn : 'function(e){'.$fn.'}' ).\n                  ')';\n        }\n      }\n      if ( isset($this->cfg['widget'], $this->cfg['widget']['name']) ){\n        $r .= '.'.$this->cfg['widget']['name'].'(';\n        if ( isset($this->cfg['widget']['options']) ){\n          $r .= '{';\n          foreach ( $this->cfg['widget']['options'] as $n => $o ){\n            $r .= '\"'.$n.'\":';\n            if ( \\is_string($o) ){\n              $o = trim($o);\n              if ( (strpos($o, 'function(') === 0) ){\n                $r .= $o;\n              }\n              else{\n                $r .= '\"'.bbn\\Str::escapeDquotes($o).'\"';\n              }\n            }\n            else if ( \\is_bool($o) ){\n              $r .= $o ? 'true' : 'false';\n            }\n            else{\n              $r .= json_encode($o);\n            }\n            $r .= ',';\n          }\n          $r .= '}';\n        }\n        $r .= ')';\n      }\n      if ( !empty($this->help) ){\n        \/\/ tooltip\n      }\n      if ( !empty($r) ){\n        if ( $with_ele ){\n          $r = '$(\"#'.$this->attr['id'].'\")'.$r.';'.PHP_EOL;\n        }\n        else{\n          $r = $r.';'.PHP_EOL;\n        }\n      }\n\t\t}\n    if ( !empty($this->script) ){\n      $r .= $this->script.PHP_EOL;\n    }\n    if ( \\is_array($this->content) ){\n      foreach ( $this->content as $c ){\n        if ( \\is_array($c) ){\n          $c = new bbn\\Html\\Element($c);\n        }\n        if (\\is_object($c) && method_exists($c, 'script') ){\n          $r .= $c->script();\n        }\n      }\n    }\n\t\treturn $r;\n  }",
            "startLine": 482,
            "endLine": 547,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "script",
                "summary": "Returns the javascript coming with the object",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($with_ele = 1)\n  {\n    $this->update();\n\t\t$r = '';\n\t\tif ( isset($this->attr['id']) ){\n      if ( isset($this->cfg['events']) ){\n        foreach ( $this->cfg['events'] as $event => $fn ){\n          $r .= '.'.$event.'('.\n                  ( strpos($fn, 'function') === 0 ? $fn : 'function(e){'.$fn.'}' ).\n                  ')';\n        }\n      }\n      if ( isset($this->cfg['widget'], $this->cfg['widget']['name']) ){\n        $r .= '.'.$this->cfg['widget']['name'].'(';\n        if ( isset($this->cfg['widget']['options']) ){\n          $r .= '{';\n          foreach ( $this->cfg['widget']['options'] as $n => $o ){\n            $r .= '\"'.$n.'\":';\n            if ( \\is_string($o) ){\n              $o = trim($o);\n              if ( (strpos($o, 'function(') === 0) ){\n                $r .= $o;\n              }\n              else{\n                $r .= '\"'.bbn\\Str::escapeDquotes($o).'\"';\n              }\n            }\n            else if ( \\is_bool($o) ){\n              $r .= $o ? 'true' : 'false';\n            }\n            else{\n              $r .= json_encode($o);\n            }\n            $r .= ',';\n          }\n          $r .= '}';\n        }\n        $r .= ')';\n      }\n      if ( !empty($this->help) ){\n        \/\/ tooltip\n      }\n      if ( !empty($r) ){\n        if ( $with_ele ){\n          $r = '$(\"#'.$this->attr['id'].'\")'.$r.';'.PHP_EOL;\n        }\n        else{\n          $r = $r.';'.PHP_EOL;\n        }\n      }\n\t\t}\n    if ( !empty($this->script) ){\n      $r .= $this->script.PHP_EOL;\n    }\n    if ( \\is_array($this->content) ){\n      foreach ( $this->content as $c ){\n        if ( \\is_array($c) ){\n          $c = new bbn\\Html\\Element($c);\n        }\n        if (\\is_object($c) && method_exists($c, 'script') ){\n          $r .= $c->script();\n        }\n      }\n    }\n\t\treturn $r;\n  }",
                "startLine": 482,
                "endLine": 547,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "with_ele",
                        "position": 0,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 1,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "with_ele",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": ""
                }
            ]
        },
        "attr": {
            "name": "attr",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($arr)\n  {\n    $args = \\func_get_args();\n    if ( \\is_array($arr) ){\n      foreach ( $arr as $k => $v ){\n        if ( $k === 'class' ){\n          $this->addClass($v);\n        }\n        else{\n          $this->attr[$k] = $v;\n        }\n      }\n    }\n    else if ( (\\count($args) === 2) && \\is_string($args[0]) && \\is_string($args[1]) ){\n      if ( $args[0] === 'class' ){\n        $this->addClass($args[1]);\n      }\n      else{\n        $this->attr[$args[0]] = $args[1];\n      }\n    }\n    else if ( \\is_string($arr) && isset($this->attr[$arr]) ){\n      return $this->attr[$arr];\n    }\n    return $this;\n  }",
            "startLine": 549,
            "endLine": 574,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 1,
            "returns": null,
            "parent": {
                "name": "attr",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($arr)\n  {\n    $args = \\func_get_args();\n    if ( \\is_array($arr) ){\n      foreach ( $arr as $k => $v ){\n        if ( $k === 'class' ){\n          $this->addClass($v);\n        }\n        else{\n          $this->attr[$k] = $v;\n        }\n      }\n    }\n    else if ( (\\count($args) === 2) && \\is_string($args[0]) && \\is_string($args[1]) ){\n      if ( $args[0] === 'class' ){\n        $this->addClass($args[1]);\n      }\n      else{\n        $this->attr[$args[0]] = $args[1];\n      }\n    }\n    else if ( \\is_string($arr) && isset($this->attr[$arr]) ){\n      return $this->attr[$arr];\n    }\n    return $this;\n  }",
                "startLine": 549,
                "endLine": 574,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 1,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "arr",
                        "position": 0,
                        "type": "",
                        "required": true,
                        "has_default": false,
                        "default": "",
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "arr",
                    "position": 0,
                    "type": "",
                    "required": true,
                    "has_default": false,
                    "default": "",
                    "default_name": ""
                }
            ]
        },
        "text": {
            "name": "text",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($txt = NULL)\n  {\n    if ( !\\is_null($txt) ){\n      $this->text = bbn\\Str::html2text($txt);\n      return $this;\n    }\n\n    return $this->text;\n  }",
            "startLine": 576,
            "endLine": 584,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "text",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($txt = NULL)\n  {\n    if ( !\\is_null($txt) ){\n      $this->text = bbn\\Str::html2text($txt);\n      return $this;\n    }\n\n    return $this->text;\n  }",
                "startLine": 576,
                "endLine": 584,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "txt",
                        "position": 0,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "txt",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "content": {
            "name": "content",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($c = NULL)\n  {\n    if ( \\is_null($c) ){\n      return $this->content;\n    }\n    else if ( \\is_array($c) || \\is_string($c) ){\n      $this->content = $c;\n      return $this;\n    }\n  }",
            "startLine": 586,
            "endLine": 595,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "content",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($c = NULL)\n  {\n    if ( \\is_null($c) ){\n      return $this->content;\n    }\n    else if ( \\is_array($c) || \\is_string($c) ){\n      $this->content = $c;\n      return $this;\n    }\n  }",
                "startLine": 586,
                "endLine": 595,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "c",
                        "position": 0,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": null,
                        "default_name": ""
                    }
                ]
            },
            "arguments": [
                {
                    "name": "c",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": null,
                    "default_name": ""
                }
            ]
        },
        "html": {
            "name": "html",
            "summary": "Returns the corresponding HTML string",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function($with_js = 1)\n  {\n    $html = '';\n\t\tif ( $this->tag ){\n\t\t\t$this->update();\n      \/\/ TAG\n\t\t\t$html .= '<'.$this->tag;\n\n      foreach ( $this->attr as $key => $val ){\n        if ( \\is_string($key) ){\n          $html .= ' '.htmlspecialchars($key).'=\"';\n          if ( is_numeric($val) ){\n            $html .= $val;\n          }\n          else if (\\is_string($val) ){\n            $html .= htmlspecialchars($val);\n          }\n          $html .= '\"';\n        }\n      }\n\t\t\t\n      if ( \\count($this->css) > 0 ){\n\t\t\t\t$html .= self::cssToString($this->css);\n\t\t\t}\n      if ( $this->xhtml ){\n        $html .= ' \/';\n      }\n      $html .= '>';\n\n\t\t\t\n\t\t\tif ( !\\in_array($this->tag, self::$self_closing_tags) ){\n\n        if ( isset($this->text) ){\n          $html .= $this->text;\n        }\n        \n        if ( isset($this->content) ){\n          \/\/ @todo: Add the ability to imbricate elements\n          if ( \\is_string($this->content) ){\n            $html .= $this->content;\n          }\n          else if ( \\is_array($this->content) ){\n            foreach ( $this->content as $c ){\n              if ( \\is_array($c) ){\n                $c = new bbn\\Html\\Element($c);\n              }\n              $html .= $c->html($with_js);\n            }\n          }\n        }\n\t\t\t\t$html .= '<\/'.$this->tag.'>';\n\t\t\t}\n\t\t\t\n\t\t\tif ( isset($this->placeholder) && strpos($this->placeholder,'%s') !== false ){\n\t\t\t\t$html = sprintf($this->placeholder, $html);\n\t\t\t}\n      \n\t\t}\n\t\treturn $html;\n  }",
            "startLine": 602,
            "endLine": 661,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 1,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "html",
                "summary": "Returns the corresponding HTML string",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function($with_js = 1)\n  {\n    $html = '';\n\t\tif ( $this->tag ){\n\t\t\t$this->update();\n      \/\/ TAG\n\t\t\t$html .= '<'.$this->tag;\n\n      foreach ( $this->attr as $key => $val ){\n        if ( \\is_string($key) ){\n          $html .= ' '.htmlspecialchars($key).'=\"';\n          if ( is_numeric($val) ){\n            $html .= $val;\n          }\n          else if (\\is_string($val) ){\n            $html .= htmlspecialchars($val);\n          }\n          $html .= '\"';\n        }\n      }\n\t\t\t\n      if ( \\count($this->css) > 0 ){\n\t\t\t\t$html .= self::cssToString($this->css);\n\t\t\t}\n      if ( $this->xhtml ){\n        $html .= ' \/';\n      }\n      $html .= '>';\n\n\t\t\t\n\t\t\tif ( !\\in_array($this->tag, self::$self_closing_tags) ){\n\n        if ( isset($this->text) ){\n          $html .= $this->text;\n        }\n        \n        if ( isset($this->content) ){\n          \/\/ @todo: Add the ability to imbricate elements\n          if ( \\is_string($this->content) ){\n            $html .= $this->content;\n          }\n          else if ( \\is_array($this->content) ){\n            foreach ( $this->content as $c ){\n              if ( \\is_array($c) ){\n                $c = new bbn\\Html\\Element($c);\n              }\n              $html .= $c->html($with_js);\n            }\n          }\n        }\n\t\t\t\t$html .= '<\/'.$this->tag.'>';\n\t\t\t}\n\t\t\t\n\t\t\tif ( isset($this->placeholder) && strpos($this->placeholder,'%s') !== false ){\n\t\t\t\t$html = sprintf($this->placeholder, $html);\n\t\t\t}\n      \n\t\t}\n\t\treturn $html;\n  }",
                "startLine": 602,
                "endLine": 661,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 1,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": [
                    {
                        "name": "with_js",
                        "position": 0,
                        "type": "",
                        "required": false,
                        "has_default": true,
                        "default": 1,
                        "default_name": "",
                        "description": "js Includes the javascript"
                    }
                ]
            },
            "arguments": [
                {
                    "name": "with_js",
                    "position": 0,
                    "type": "",
                    "required": false,
                    "has_default": true,
                    "default": 1,
                    "default_name": "",
                    "description": "js Includes the javascript"
                }
            ]
        },
        "eleAndScript": {
            "name": "eleAndScript",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    return ['$(\\''.bbn\\Str::escapeSquotes($this->html()).'\\')',$this->script(false)];\n  }",
            "startLine": 663,
            "endLine": 666,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "eleAndScript",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    return ['$(\\''.bbn\\Str::escapeSquotes($this->html()).'\\')',$this->script(false)];\n  }",
                "startLine": 663,
                "endLine": 666,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        },
        "makeEmpty": {
            "name": "makeEmpty",
            "summary": "",
            "description": "",
            "description_parts": [],
            "file": "bbn\\Html\\Element",
            "static": false,
            "visibility": "public",
            "final": false,
            "code": "function()\n  {\n    $this->content = null;\n    $this->html = '';\n    $this->script = '';\n  }",
            "startLine": 668,
            "endLine": 673,
            "isDeprecated": false,
            "isGenerator": false,
            "isInternal": false,
            "isUserDefined": true,
            "isVariadic": false,
            "returnsReference": false,
            "numberOfParameters": 0,
            "numberOfRequiredParameters": 0,
            "returns": null,
            "parent": {
                "name": "makeEmpty",
                "summary": "",
                "description": "",
                "description_parts": [],
                "file": "bbn\\Html\\Element",
                "static": false,
                "visibility": "public",
                "final": false,
                "code": "function()\n  {\n    $this->content = null;\n    $this->html = '';\n    $this->script = '';\n  }",
                "startLine": 668,
                "endLine": 673,
                "isDeprecated": false,
                "isGenerator": false,
                "isInternal": false,
                "isUserDefined": true,
                "isVariadic": false,
                "returnsReference": false,
                "numberOfParameters": 0,
                "numberOfRequiredParameters": 0,
                "returns": null,
                "parent": false,
                "arguments": []
            },
            "arguments": []
        }
    },
    "properties": {
        "tag": {
            "visibility": "public",
            "doc": {
                "description": "@var string The element's tag",
                "tags": []
            },
            "parent": {
                "name": "tag",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var string The element's tag",
                    "tags": []
                },
                "parent": false,
                "value": false
            }
        },
        "attr": {
            "visibility": "public",
            "doc": {
                "description": "@var string The element's tag",
                "tags": []
            },
            "parent": {
                "name": "attr",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var string The element's tag",
                    "tags": []
                },
                "parent": false,
                "value": []
            }
        },
        "css": {
            "visibility": "public",
            "doc": {
                "description": "@var array The element's attributes",
                "tags": []
            },
            "parent": {
                "name": "css",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var array The element's attributes",
                    "tags": []
                },
                "parent": false,
                "value": []
            }
        },
        "script": {
            "visibility": "public",
            "doc": {
                "description": "@var array Styles",
                "tags": []
            },
            "parent": {
                "name": "script",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var array Styles",
                    "tags": []
                },
                "parent": false,
                "value": ""
            }
        },
        "events": {
            "visibility": "public",
            "doc": {
                "description": "@var string JavaScript code which should be executed",
                "tags": []
            },
            "parent": {
                "name": "events",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var string JavaScript code which should be executed",
                    "tags": []
                },
                "parent": false,
                "value": null
            }
        },
        "data": {
            "visibility": "public",
            "doc": {
                "description": "@var array The element's data",
                "tags": []
            },
            "parent": {
                "name": "data",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var array The element's data",
                    "tags": []
                },
                "parent": false,
                "value": null
            }
        },
        "widget": {
            "visibility": "public",
            "doc": {
                "description": "@var array Widget's configuration",
                "tags": []
            },
            "parent": {
                "name": "widget",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var array Widget's configuration",
                    "tags": []
                },
                "parent": false,
                "value": null
            }
        },
        "help": {
            "visibility": "public",
            "doc": {
                "description": "@var string Help for tooltip",
                "tags": []
            },
            "parent": {
                "name": "help",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var string Help for tooltip",
                    "tags": []
                },
                "parent": false,
                "value": null
            }
        },
        "xhtml": {
            "visibility": "public",
            "doc": {
                "description": "@var bool XHTML tag ending, false by default",
                "tags": []
            },
            "parent": {
                "name": "xhtml",
                "static": false,
                "visibility": "public",
                "doc": {
                    "description": "@var bool XHTML tag ending, false by default",
                    "tags": []
                },
                "parent": false,
                "value": false
            }
        },
        "self_closing_tags": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var array List of known HTML self-closing tags",
                "tags": []
            },
            "parent": {
                "name": "self_closing_tags",
                "static": true,
                "visibility": "public",
                "doc": {
                    "description": "@var array List of known HTML self-closing tags",
                    "tags": []
                },
                "parent": false,
                "value": [
                    "area",
                    "base",
                    "hr",
                    "col",
                    "command",
                    "embed",
                    "hr",
                    "img",
                    "input",
                    "keygen",
                    "link",
                    "meta",
                    "param",
                    "source",
                    "track",
                    "wbr"
                ]
            },
            "value": [
                "area",
                "base",
                "hr",
                "col",
                "command",
                "embed",
                "hr",
                "img",
                "input",
                "keygen",
                "link",
                "meta",
                "param",
                "source",
                "track",
                "wbr"
            ]
        },
        "input_fields": {
            "static": true,
            "visibility": "public",
            "doc": {
                "description": "@var array List of known inputs",
                "tags": []
            },
            "parent": {
                "name": "input_fields",
                "static": true,
                "visibility": "public",
                "doc": {
                    "description": "@var array List of known inputs",
                    "tags": []
                },
                "parent": false,
                "value": [
                    "input",
                    "textarea",
                    "select"
                ]
            },
            "value": [
                "input",
                "textarea",
                "select"
            ]
        }
    },
    "staticProperties": {
        "schema": "{\n\t\"properties\":{\n\t\t\"click\": {\n\t\t\t\"type\":\"string\",\n\t\t\t\"id\": \"click\",\n      \"description\": \"onClick event function\",\n\t\t\t\"required\":false\n\t\t},\n\t\t\"label\": {\n\t\t\t\"type\":\"string\",\n\t\t\t\"id\": \"label\",\n      \"description\": \"Label\",\n\t\t\t\"required\":false\n\t\t},\n\t\t\"lang\": {\n\t\t\t\"type\":\"string\",\n\t\t\t\"id\": \"lang\",\n      \"description\": \"Language\",\n\t\t\t\"required\":false\n\t\t},\n\t\t\"submit\": {\n\t\t\t\"type\":\"boolean\",\n      \"description\": \"Submit\",\n\t\t\t\"id\": \"submit\",\n\t\t\t\"required\":false\n\t\t},\n\t}\n}",
        "self_closing_tags": [
            "area",
            "base",
            "hr",
            "col",
            "command",
            "embed",
            "hr",
            "img",
            "input",
            "keygen",
            "link",
            "meta",
            "param",
            "source",
            "track",
            "wbr"
        ],
        "input_fields": [
            "input",
            "textarea",
            "select"
        ],
        "validator": false,
        "error": null
    },
    "constants": null,
    "numMethods": 17,
    "numProperties": 11,
    "numConstants": 0,
    "numStaticProperties": 5,
    "interfaceNames": [],
    "isInterface": false,
    "traitNames": [],
    "traitAliases": [],
    "isTrait": false,
    "isAbstract": false,
    "isFinal": false,
    "modifiers": 0,
    "parentClass": "bbn\\Html\\Element",
    "isSubclassOf": false,
    "defaultProperties": {
        "schema": "{\n\t\"properties\":{\n\t\t\"click\": {\n\t\t\t\"type\":\"string\",\n\t\t\t\"id\": \"click\",\n      \"description\": \"onClick event function\",\n\t\t\t\"required\":false\n\t\t},\n\t\t\"label\": {\n\t\t\t\"type\":\"string\",\n\t\t\t\"id\": \"label\",\n      \"description\": \"Label\",\n\t\t\t\"required\":false\n\t\t},\n\t\t\"lang\": {\n\t\t\t\"type\":\"string\",\n\t\t\t\"id\": \"lang\",\n      \"description\": \"Language\",\n\t\t\t\"required\":false\n\t\t},\n\t\t\"submit\": {\n\t\t\t\"type\":\"boolean\",\n      \"description\": \"Submit\",\n\t\t\t\"id\": \"submit\",\n\t\t\t\"required\":false\n\t\t},\n\t}\n}",
        "self_closing_tags": [
            "area",
            "base",
            "hr",
            "col",
            "command",
            "embed",
            "hr",
            "img",
            "input",
            "keygen",
            "link",
            "meta",
            "param",
            "source",
            "track",
            "wbr"
        ],
        "input_fields": [
            "input",
            "textarea",
            "select"
        ],
        "validator": false,
        "error": null,
        "label": null,
        "value": "",
        "default": "",
        "null": null,
        "table": null,
        "field": null,
        "lang": null,
        "cfg": null,
        "text": "",
        "content": null,
        "tag": false,
        "attr": [],
        "css": [],
        "script": "",
        "events": null,
        "data": null,
        "widget": null,
        "help": null,
        "xhtml": false
    },
    "isIterable": false,
    "extensionName": false,
    "namespaceName": "bbn\\Html",
    "shortName": "Button",
    "summary": "HTML Class creating a form INPUT",
    "description": "",
    "description_parts": []
}